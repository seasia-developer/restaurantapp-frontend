/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 76);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var _$ =  true ? window.jQuery : require('jquery'),
    _html2canvas =  true ? window.html2canvas : require('html2canvas'),
    _THREE =  true ? window.THREE : require('three'),
    _React =  true ? window.React : require('react'),
    _ReactDOM =  true ? window.ReactDOM : require('react-dom'),
    _PDFJS =  true ? window.pdfjsLib : require('pdfjs'),
    _tr = function _tr(s) {
  return (window.iberezansky || {}).tr && window.iberezansky.tr(s) || s;
};

exports.$ = _$;
exports.html2canvas = _html2canvas;
exports.THREE = _THREE;
exports.React = _React;
exports.ReactDOM = _ReactDOM;
exports.PDFJS = _PDFJS;
exports.tr = _tr;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _$ =  true ? window.jQuery : require('jquery'),
    _html2canvas =  true ? window.html2canvas : require('html2canvas'),
    _THREE =  true ? window.THREE : require('three'),
    _PDFJS =  true ? window.PDFJS : require('pdfjs'),
    _tr = function _tr(s) {
  return (window.iberezansky || {}).tr && window.iberezansky.tr(s) || s;
};

if (window.FB3D_LOCALE) {
  window.iberezansky = _extends({}, window.iberezansky, {
    tr: function tr(s) {
      return (FB3D_LOCALE.dictionary || {})[s] || s;
    }
  });
}

exports.$ = _$;
exports.html2canvas = _html2canvas;
exports.THREE = _THREE;
exports.PDFJS = _PDFJS;
exports.tr = _tr;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BaseMathUtils = function () {
  function BaseMathUtils() {
    _classCallCheck(this, BaseMathUtils);
  }

  BaseMathUtils.sum1 = function sum1(ka, a, kb, b) {
    return [ka * a[0] + kb * b[0]];
  };

  BaseMathUtils.sum2 = function sum2(ka, a, kb, b) {
    return [ka * a[0] + kb * b[0], ka * a[1] + kb * b[1]];
  };

  BaseMathUtils.sum3 = function sum3(ka, a, kb, b) {
    return [ka * a[0] + kb * b[0], ka * a[1] + kb * b[1], ka * a[2] + kb * b[2]];
  };

  BaseMathUtils.sum4 = function sum4(ka, a, kb, b) {
    return [ka * a[0] + kb * b[0], ka * a[1] + kb * b[1], ka * a[2] + kb * b[2], ka * a[3] + kb * b[3]];
  };

  BaseMathUtils.rk4 = function rk4(dy, t, dt, y) {
    var sum = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : BaseMathUtils.sum[y.length - 1];

    var k1 = dy(t, y),
        k2 = dy(t + dt / 2, sum(1, y, dt / 2, k1)),
        k3 = dy(t + dt / 2, sum(1, y, dt / 2, k2)),
        k4 = dy(t + dt, sum(1, y, dt, k3));
    return sum(1, y, dt / 6, sum(1, sum(1, k1, 2, k2), 1, sum(2, k3, 1, k4)));
  };

  BaseMathUtils.extrapolateLinear = function extrapolateLinear(x, y, xi) {
    return y[0] + (y[1] - y[0]) / (x[1] - x[0]) * (xi - x[0]);
  };

  BaseMathUtils.interpolateLinear = function interpolateLinear(x, y, xi) {
    var yi = void 0;
    if (x[0] > x[1]) {
      x = x.reverse();
      y = y.reverse();
    }
    if (xi < x[0]) {
      yi = y[0];
    } else if (xi > x[1]) {
      yi = y[1];
    } else {
      yi = BaseMathUtils.extrapolateLinear(x, y, xi);
    }
    return yi;
  };

  BaseMathUtils.calcScale = function calcScale(srcW, srcH, dstW, dstH) {
    return dstW / srcW; // Math.min(dstW/srcW, dstH/srcH)
  };

  BaseMathUtils.mulM = function mulM(a, b) {
    var r = [];
    for (var i = 0; i < a.length; ++i) {
      r.push([]);
      for (var j = 0; j < b[0].length; ++j) {
        r[i][j] = 0;
        for (var k = 0; k < b.length; ++k) {
          r[i][j] += a[i][k] * b[k][j];
        }
      }
    }
    return r;
  };

  BaseMathUtils.transM = function transM(m) {
    var r = [];
    for (var i = 0; i < m.length; ++i) {
      for (var j = 0; j < m[0].length; ++j) {
        if (!r[j]) {
          r[j] = [];
        }
        r[j][i] = m[i][j];
      }
    }
    return r;
  };

  BaseMathUtils.mat = function mat(data) {
    var s = 0;
    for (var _iterator = data, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var x = _ref;

      s += x;
    }
    return s / data.length;
  };

  BaseMathUtils.disp = function disp(data) {
    var M = BaseMathUtils.mat(data);
    var s = 0;
    for (var _iterator2 = data, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var x = _ref2;

      s += (x - M) * (x - M);
    }
    return s / data.length;
  };

  BaseMathUtils.predict1 = function predict1(data, num) {
    var r = [],
        l = data.length,
        D = BaseMathUtils.disp(data);
    if (D < l && l > 1) {
      var am = [],
          bm = [];
      for (var i = 0; i < l; ++i) {
        am.push([i, 1]);
        bm.push([data[i]]);
      }
      var ta = BaseMathUtils.transM(am),
          a = BaseMathUtils.mulM(ta, am),
          b = BaseMathUtils.mulM(ta, bm),
          d = a[0][0] * a[1][1] - a[1][0] * a[0][1],
          p = [-(a[0][1] * b[1][0] - b[0][0] * a[1][1]) / d, (a[0][0] * b[1][0] - a[1][0] * b[0][0]) / d];
      for (var _i3 = 0; _i3 < num; ++_i3) {
        var v = Math.round(p[0] * (_i3 + l) + p[1]);
        if (r.indexOf(v) === -1) {
          r.push(v);
        }
      }
    }
    return r;
  };

  BaseMathUtils.predict = function predict(data, num) {
    var r = [],
        l = data.length;
    var sgns = 0;
    for (var i = 0; i < l - 1; ++i) {
      sgns += Math.sign(data[i + 1] - data[i]);
    }
    if (Math.abs(sgns) <= (l - 1) % 2) {
      sgns = -1;
    } else {
      sgns = Math.sign(sgns);
    }
    for (var _i4 = 0, cur = data[l - 1]; _i4 < num && cur > 0; ++_i4) {
      cur += sgns;
      r.push(cur);
    }
    return r;
  };

  BaseMathUtils.getUnique = function getUnique() {
    return Math.ceil(1e9 * Math.random());
  };

  BaseMathUtils.setSplinePoints = function setSplinePoints(spline, ps) {
    if (spline.points.length !== ps.x.length) {
      console.warn('setSplinePoints: bad points');
    }
    for (var i = 0; i < spline.points.length; ++i) {
      spline.points[i].set(ps.x[i], ps.y[i], ps.z ? ps.z[i] : 0);
    }
  };

  BaseMathUtils.mapl2L = function mapl2L(ls, len, n, f) {
    var dL = len / (n - 1);
    var L = 0;
    for (var i = 0, d = ls[0]; i < ls.length - 1 && L < len + 0.1 * dL; ++i, d += ls[i]) {
      if (Math.abs(L - d) < Math.abs(L - d - ls[i + 1])) {
        f(i, L);
        L += dL;
      }
    }
    if (L < len + 0.1 * dL) {
      console.warn('mapl2L: ls is not enought');
    }
  };

  BaseMathUtils.det2 = function det2(a, b, c, d) {
    return a * d - b * c;
  };

  BaseMathUtils.solve2Lin = function solve2Lin(a1, b1, a2, b2) {
    var res = void 0;
    var d = BaseMathUtils.det2(a1[0], a1[1], a2[0], a2[1]);
    if (Math.abs(d) > BaseMathUtils.eps) {
      var dx = BaseMathUtils.det2(b1, a1[1], b2, a2[1]),
          dy = BaseMathUtils.det2(a1[0], b1, a2[0], b2);
      res = {
        x: dx / d,
        y: dy / d
      };
    }
    return res;
  };

  BaseMathUtils.isInsidePoly = function isInsidePoly(ps, p) {
    var done = false,
        ct = void 0;
    for (var i = 0; i < ps.length; ++i) {
      if (BaseMathUtils.v2dist(p, ps[i]) < BaseMathUtils.eps) {
        ct = 1;
        done = true;
        break;
      }
    }
    while (!done) {
      done = true;
      ct = 0;
      var np = { x: p.x + Math.random() - 0.5, y: p.y + Math.random() - 0.5 },
          rn = { x: np.x - p.x, y: np.y - p.y },
          a1 = [rn.y, -rn.x],
          b1 = p.x * rn.y - p.y * rn.x;
      for (var _i5 = 0; _i5 < ps.length; ++_i5) {
        var p0 = ps[_i5],
            p1 = ps[(_i5 + 1) % ps.length],
            n = { x: p1.x - p0.x, y: p1.y - p0.y },
            a2 = [n.y, -n.x],
            b2 = p0.x * n.y - p0.y * n.x,
            ip = BaseMathUtils.solve2Lin(a1, b1, a2, b2);
        if (ip) {
          if (BaseMathUtils.v2dist(ip, p0) < BaseMathUtils.eps || BaseMathUtils.v2dist(ip, p1) < BaseMathUtils.eps) {
            done = false;
            break;
          } else if (ip.x > Math.min(p0.x, p1.x) - BaseMathUtils.eps && ip.x < Math.max(p0.x, p1.x) + BaseMathUtils.eps && ip.y > Math.min(p0.y, p1.y) - BaseMathUtils.eps && ip.y < Math.max(p0.y, p1.y) + BaseMathUtils.eps) {
            if (BaseMathUtils.v2dist(ip, p) < BaseMathUtils.eps) {
              ct = 1;
              break;
            } else {
              var tn = { x: ip.x - p.x, y: ip.y - p.y };
              ct += tn.x * rn.x + tn.y * rn.y > 0;
            }
          }
        }
      }
    }
    return ct % 2;
  };

  BaseMathUtils.isInsideConvPoly = function isInsideConvPoly(ps, p) {
    var sg = [0, 0];
    for (var i = 0; i < ps.length; ++i) {
      var p0 = ps[i],
          p1 = ps[(i + 1) % ps.length],
          a = { x: p0.x - p.x, y: p0.y - p.y },
          b = { x: p1.x - p.x, y: p1.y - p.y };
      ++sg[(a.x * b.y - a.y * b.x < 0) + 0];
    }
    return ~sg.indexOf(ps.length);
  };

  BaseMathUtils.v2len = function v2len(v2) {
    return Math.sqrt(v2.x * v2.x + v2.y * v2.y);
  };

  BaseMathUtils.v2dist = function v2dist(v21, v22) {
    return BaseMathUtils.v2len({
      x: v22.x - v21.x,
      y: v22.y - v21.y
    });
  };

  BaseMathUtils.computeSquare = function computeSquare(ps) {
    var a = [];
    var p = 0;
    for (var i = 0; i < ps.length; ++i) {
      a.push(BaseMathUtils.v2dist(ps[i], ps[(i + 1) % ps.length]));
      p += 0.5 * a[i];
    }
    return Math.sqrt(p * (p - a[0]) * (p - a[1]) * (p - a[2]));
  };

  BaseMathUtils.computeInterpCoefs = function computeInterpCoefs(tri, p) {
    var s = BaseMathUtils.computeSquare(tri),
        coefs = [],
        l = tri.length;
    for (var i = 0; i < l; ++i) {
      coefs[i] = BaseMathUtils.computeSquare([p, tri[(i + 1) % l], tri[(i + 2) % l]]) / s;
    }
    return coefs;
  };

  return BaseMathUtils;
}();

BaseMathUtils.sum = [BaseMathUtils.sum1, BaseMathUtils.sum2, BaseMathUtils.sum3, BaseMathUtils.sum4];
BaseMathUtils.eps = 1e-4;
exports.default = BaseMathUtils;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Utils = function () {
  function Utils() {
    _classCallCheck(this, Utils);
  }

  Utils.normalizeUrl = function normalizeUrl(url) {
    function split(s) {
      return s.replace(/\\/g, '/').split('/');
    }
    var base = split(window.location.href);
    url = split(url);
    if (base[2] === url[2]) {
      url[0] = base[0];
    }
    return url.join('/');
  };

  Utils._escapeHTMLclb = function _escapeHTMLclb(c) {
    return Utils._escapeHTMLchars[c] || c;
  };

  Utils.escapeHTML = function escapeHTML(s) {
    return s.replace(/[&<>]/g, Utils._escapeHTMLclb);
  };

  Utils.extends = function _extends(der, base) {
    for (var name in base) {
      if (!der.hasOwnProperty(name)) {
        der[name] = base[name];
      }
    }
  };

  Utils.defaultCmp = function defaultCmp(a, b) {
    return a - b;
  };

  Utils.lowerBound = function lowerBound(a, x, cmp) {
    cmp = cmp || Utils.defaultCmp;
    var l = 0,
        h = a.length - 1;
    while (h - l > 1) {
      var mid = Math.floor((l + h) / 2);
      if (cmp(x, a[mid]) < 0) {
        h = mid;
      } else {
        l = mid;
      }
    }
    return cmp(x, a[h]) >= 0 ? h : l;
  };

  return Utils;
}();

Utils.MOBILE_DIAG = 11;
Utils._escapeHTMLchars = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;'
};
exports.default = Utils;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GraphUtils = function () {
  function GraphUtils() {
    _classCallCheck(this, GraphUtils);
  }

  GraphUtils.createCanvas = function createCanvas(width, height) {
    var c = document.createElement('canvas');
    if (width) {
      c.width = width;
    }
    if (height) {
      c.height = height;
    }
    return c;
  };

  GraphUtils.extrapolateLinear = function extrapolateLinear(x, y, xi) {
    return y[0] + (y[1] - y[0]) / (x[1] - x[0]) * (xi - x[0]);
  };

  GraphUtils.interpolate01 = function interpolate01(y1, y2, t) {
    return GraphUtils.extrapolateLinear([0, 1], [y1, y2], t);
  };

  GraphUtils.getColorBytes = function getColorBytes(color) {
    return [color >> 16 & 0xFF, color >> 8 & 0xFF, color & 0xFF];
  };

  GraphUtils.inverseColor = function inverseColor(color) {
    var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

    var bs = GraphUtils.getColorBytes(color),
        ibs = [0xFF - bs[0], 0xFF - bs[1], 0xFF - bs[2]],
        nbs = [Math.round(GraphUtils.interpolate01(bs[0], ibs[0], t)), Math.round(GraphUtils.interpolate01(bs[1], ibs[1], t)), Math.round(GraphUtils.interpolate01(bs[2], ibs[2], t))];
    return GraphUtils.bytes2Color(nbs);
  };

  GraphUtils.color2Rgba = function color2Rgba(color, a) {
    return GraphUtils.bytes2Rgba(GraphUtils.getColorBytes(color), a);
  };

  GraphUtils.bytes2Rgba = function bytes2Rgba(bs, a) {
    return 'rgba(' + bs.join(',') + ',' + a + ')';
  };

  GraphUtils.bytes2Color = function bytes2Color(bs) {
    return bs[2] | bs[1] << 8 | bs[0] << 16;
  };

  return GraphUtils;
}();

exports.default = GraphUtils;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _BaseMathUtils2 = __webpack_require__(2);

var _BaseMathUtils3 = _interopRequireDefault(_BaseMathUtils2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MathUtils = function (_BaseMathUtils) {
  _inherits(MathUtils, _BaseMathUtils);

  function MathUtils() {
    _classCallCheck(this, MathUtils);

    return _possibleConstructorReturn(this, _BaseMathUtils.apply(this, arguments));
  }

  MathUtils.splitSpline = function splitSpline(spline, N) {
    var o = { len: 0, ls: [0] },
        dl = 1 / N;
    for (var i = 0; i <= N; ++i) {
      var p = spline.getPoint(i * dl);
      if (i) {
        var d = MathUtils.v1.distanceTo(p);
        o.len += d;
        o.ls.push(d);
      }
      MathUtils.v1.copy(p);
    }
    return o;
  };

  MathUtils.getLinearIndeces = function getLinearIndeces(spline, n) {
    var del = 5000,
        dDel = 1 / del;
    var ls = [0];
    var l = 0;
    for (var i = 0; i <= del; ++i) {
      var p = spline.getPoint(i * dDel);
      if (i) {
        var d = MathUtils.v1.distanceTo(p);
        l += d;
        ls.push(d);
      }
      MathUtils.v1.copy(p);
    }
    ls.push(1e7);

    var res = [],
        dl = l / (n - 1);
    for (var _i = 0, L = 0, _d = ls[0]; _i < ls.length - 1; ++_i, _d += ls[_i]) {
      if (Math.abs(L - _d) < Math.abs(L - _d - ls[_i + 1])) {
        res.push(_i * dDel);
        L += dl;
      }
    }

    return res;
  };

  MathUtils.refinePoly = function refinePoly(poly, maxDl) {
    var res = [];
    for (var i = 0; i < poly.length; ++i) {
      var p0 = poly[i],
          p1 = poly[(i + 1) % poly.length],
          l = _BaseMathUtils3.default.v2dist(p0, p1),
          n = Math.ceil(l / maxDl),
          dl = l / n;
      res.push(p0);
      for (var j = 1; j < n; ++j) {
        res.push(new _libs.THREE.Vector2(p0.x + j * dl * (p1.x - p0.x) / l, p0.y + j * dl * (p1.y - p0.y) / l));
      }
    }
    return res;
  };

  return MathUtils;
}(_BaseMathUtils3.default);

MathUtils.v1 = new _libs.THREE.Vector3();
exports.default = MathUtils;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _GraphUtils = __webpack_require__(4);

var _GraphUtils2 = _interopRequireDefault(_GraphUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ImageBase = function () {
  function ImageBase(context, width, height, color) {
    _classCallCheck(this, ImageBase);

    this.renderPause = false;
    this.context = context;
    this.wnd = context.wnd;
    this.doc = context.doc;
    this.element = context.element || context.doc.body;
    this.c = context.renderCanvas || ImageBase.renderCanvas;
    this.ctx = context.renderCanvasCtx || ImageBase.renderCanvasCtx;
    this.resW = this.width = width;
    this.resH = this.height = height;
    this.color = color;
  }

  ImageBase.prototype.setRenderCanvas = function setRenderCanvas(c, ctx) {
    this.c = c;
    this.ctx = ctx;
  };

  ImageBase.prototype.setResolution = function setResolution(res) {
    var k = res.width / this.resW;
    this.resW = res.width;
    this.resH = k * this.resH; // res.height;
  };

  ImageBase.prototype.dispose = function dispose() {};

  ImageBase.prototype.renderBlankPage = function renderBlankPage() {
    this.ctx.beginPath();
    this.ctx.fillStyle = _GraphUtils2.default.color2Rgba(this.color, 1);
    this.ctx.rect(0, 0, this.c.width, this.c.height);
    this.ctx.fill();
  };

  ImageBase.prototype.setRenderPause = function setRenderPause(renderPause) {
    this.renderPause = renderPause;
    if (!renderPause && this.continueRender) {
      this.continueRender();
      delete this.continueRender;
    }
  };

  ImageBase.prototype.cancelRender = function cancelRender() {
    if (this.renderTask && this.renderTask.cancel) {
      this.renderTask.cancel();
      delete this.renderTask;
    }
  };

  ImageBase.prototype.renderImage = function renderImage(image) {
    this.pushCtx();
    this.ctx.clearRect(0, 0, this.c.width, this.c.height);
    this.ctx.drawImage(image, 0, 0);
    this.popCtx();
  };

  ImageBase.prototype.normToConv = function normToConv(p) {
    return {
      x: p.x * this.c.width,
      y: (1 - p.y) * this.c.height
    };
  };

  ImageBase.prototype.renderHit = function renderHit(poly) {
    var ctx = this.ctx;
    ctx.fillStyle = 'rgba(255,255,0,0.4)';
    ctx.beginPath();
    var p = this.normToConv(poly[0]);
    ctx.moveTo(p.x, p.y);
    for (var i = 1; i < poly.length; ++i) {
      p = this.normToConv(poly[i]);
      ctx.lineTo(p.x, p.y);
    }
    ctx.closePath();
    ctx.fill();
  };

  ImageBase.prototype.pushCtx = function pushCtx() {
    if (Math.abs(this.resW - this.c.width) >= 1) {
      this.c.width = Math.ceil(this.resW);
    }
    if (Math.abs(this.resH - this.c.height) >= 1) {
      this.c.height = Math.ceil(this.resH);
    }
    this.ctx.save();
    this.ctx.scale(this.c.width / this.width, this.c.height / this.height);
    return this.ctx;
  };

  ImageBase.prototype.popCtx = function popCtx() {
    this.ctx.restore();
  };

  ImageBase.prototype.renderNotFoundPage = function renderNotFoundPage() {
    this.renderBlankPage();
  };

  ImageBase.prototype.finishRender = function finishRender() {
    var canceled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    if (this.onChange) {
      this.onChange(this.c, canceled);
    }
  };

  ImageBase.prototype.finishLoad = function finishLoad() {
    if (this.onLoad) {
      this.onLoad();
    } else {
      this.startRender();
    }
  };

  ImageBase.prototype.getSimulatedDoc = function getSimulatedDoc() {
    return undefined;
  };

  return ImageBase;
}();

ImageBase.renderCanvas = _GraphUtils2.default.createCanvas();
ImageBase.renderCanvasCtx = ImageBase.renderCanvas.getContext('2d');
exports.default = ImageBase;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EventConverter = function () {

  // virtuals
  // getObject(e, data);
  // getCallback(object);
  // test(object1, object1);

  function EventConverter(wnd, doc) {
    _classCallCheck(this, EventConverter);

    this.wnd = wnd;
    this.doc = doc;
    this.enabled = true;
  }

  EventConverter.prototype.setEnable = function setEnable(vl) {
    if (!vl) {
      if (this.mCapObject) {
        this.notify(this.mCapObject, _libs.$.Event('mouseup'), 'mouseup');
        this.mCapObject = undefined;
      }
      if (this.mHovObject) {
        this.notify(this.mHovObject, _libs.$.Event('mouseout'), 'mouseout');
        this.mHovObject = undefined;
      }
    }
    this.enabled = vl;
  };

  EventConverter.prototype.getCallback = function getCallback(object) {
    return undefined;
  };

  EventConverter.prototype.notify = function notify(object, e, type) {
    var callback = this.getCallback(object);
    if (callback) {
      var props = _extends({}, e, {
        type: type,
        view: this.wnd
      });
      var jE = _libs.$.Event(type, props);
      callback(jE, object);
    }
  };

  EventConverter.prototype.convert = function convert(e, data) {
    if (!this.enabled) return;

    if (this.filter) {
      e = this.filter(this.element, e);
    }

    var object = this.getObject(e, data),
        notify = ~e.type.indexOf('touch') ? this.convertTouch(e, data, object) : this.convertMouse(e, data, object);
    if (notify && object) {
      this.notify(object, e, e.type);
    }
  };

  EventConverter.prototype.convertTouch = function convertTouch(e, data, object) {
    var notify = true;
    switch (e.type) {
      case 'touchstart':
        {
          if (this.tCapObject) {
            this.notify(this.tCapObject, e, 'touchend');
          }
          this.tCapObject = object;
          break;
        }
      case 'touchend':
        {
          if (this.tCapObject && !this.test(this.tCapObject, object)) {
            this.notify(this.tCapObject, e, 'touchend');
            notify = false;
          } else if (object && this.test(this.tCapObject, object)) {
            this.notify(object, e, 'touchtap');
          }
          this.tCapObject = undefined;
          break;
        }
      case 'touchtap':
        {
          notify = false;
          break;
        }
    }
    return notify;
  };

  EventConverter.prototype.convertMouse = function convertMouse(e, data, object) {
    if (e.originalEvent && e.originalEvent.sourceCapabilities && e.originalEvent.sourceCapabilities.firesTouchEvents) {
      return false;
    }
    var notify = true;
    switch (e.type) {
      case 'mousedown':
        {
          if (this.mCapObject) {
            this.notify(this.mCapObject, e, 'mouseup');
          }
          this.mCapObject = object;
          break;
        }
      case 'mouseup':
        {
          if (this.mCapObject && !this.test(this.mCapObject, object)) {
            this.notify(this.mCapObject, e, 'mouseup');
            notify = false;
          }
          break;
        }
      case 'click':
        {
          notify = this.test(this.mCapObject, object);
          this.mCapObject = undefined;
          break;
        }
      case 'mouseenter':
      case 'mouseover':
      case 'mousemove':
        {
          if (!this.test(this.mHovObject, object) && this.mHovObject) {
            this.notify(this.mHovObject, e, 'mouseout');
            this.mHovObject = undefined;
          }
          if (!this.mHovObject && object) {
            this.notify(object, e, 'mouseover');
            this.mHovObject = object;
          }
          notify = e.type === 'mousemove';
          break;
        }
      case 'mouseleave':
      case 'mouseout':
        {
          if (this.mHovObject) {
            this.notify(this.mHovObject, e, 'mouseout');
            this.mHovObject = undefined;
          }
          notify = false;
          break;
        }
    }
    return notify;
  };

  return EventConverter;
}();

exports.default = EventConverter;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _Cache = __webpack_require__(14);

var _Cache2 = _interopRequireDefault(_Cache);

var _BlankImage = __webpack_require__(46);

var _BlankImage2 = _interopRequireDefault(_BlankImage);

var _StaticImage = __webpack_require__(62);

var _StaticImage2 = _interopRequireDefault(_StaticImage);

var _PdfImage = __webpack_require__(60);

var _PdfImage2 = _interopRequireDefault(_PdfImage);

var _InteractiveImage = __webpack_require__(54);

var _InteractiveImage2 = _interopRequireDefault(_InteractiveImage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ImageFactory = function () {
  function ImageFactory(context, cache) {
    _classCallCheck(this, ImageFactory);

    this.context = context;
    this.cache = cache || new _Cache2.default();
  }

  ImageFactory.prototype.build = function build(info) {
    var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var widthTexels = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 210;
    var heightTexels = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 297;
    var color = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0xFFFFFF;
    var injector = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

    var image = void 0;
    switch (info.type) {
      case 'html':
        {
          image = new _InteractiveImage2.default(this.context, widthTexels, heightTexels, color, info.src, this.cache, injector);
          break;
        }
      case 'image':
        {
          image = new _StaticImage2.default(this.context, widthTexels, heightTexels, color, info.src);
          break;
        }
      case 'pdf':
        {
          image = new _PdfImage2.default(this.context, widthTexels, heightTexels, color, info.src, n);
          break;
        }
      case 'blank':
      default:
        {
          image = new _BlankImage2.default(this.context, widthTexels, heightTexels, color);
          break;
        }
    }
    return image;
  };

  return ImageFactory;
}();

exports.default = ImageFactory;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _book = __webpack_require__(11);

var _BaseMathUtils = __webpack_require__(2);

var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BookPropsBuilder = function () {
  function BookPropsBuilder(onReady, style) {
    _classCallCheck(this, BookPropsBuilder);

    this.onReady = onReady;
    this.defaults = (0, _book.props)(style);
  }

  BookPropsBuilder.prototype.dispose = function dispose() {};

  BookPropsBuilder.prototype.calcSize = function calcSize(width, height) {
    var scale = _BaseMathUtils2.default.calcScale(width, height, this.defaults.width, this.defaults.height);
    return {
      width: scale * width,
      height: scale * height
    };
  };

  BookPropsBuilder.prototype.calcTexels = function calcTexels(width, height) {
    var sheet = this.defaults.sheet,
        scale = _BaseMathUtils2.default.calcScale(width, height, sheet.widthTexels, sheet.heightTexels);
    return {
      widthTexels: scale * width,
      heightTexels: scale * height
    };
  };

  BookPropsBuilder.prototype.calcProps = function calcProps(width, height) {
    this.props = _extends({}, this.defaults, {
      pages: this.pages
    }, this.calcSize(width, height), {
      sheet: _extends({}, this.defaults.sheet, this.calcTexels(width, height)),
      cover: _extends({}, this.defaults.cover),
      page: _extends({}, this.defaults.page)
    });
  };

  BookPropsBuilder.prototype.calcSheets = function calcSheets(pages) {
    return this.sheets = Math.ceil(Math.max(0, pages - 4) / 2);
  };

  BookPropsBuilder.prototype.getSheets = function getSheets() {
    return this.sheets;
  };

  BookPropsBuilder.prototype.getProps = function getProps() {
    return this.props;
  };

  BookPropsBuilder.prototype.getPageCallback = function getPageCallback() {
    return this.binds.pageCallback;
  };

  BookPropsBuilder.prototype.ready = function ready() {
    if (this.onReady) {
      this.onReady(this.getProps(), this.getSheets(), this.getPageCallback());
    }
  };

  return BookPropsBuilder;
}();

exports.default = BookPropsBuilder;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _sheetBlock = __webpack_require__(44);

var _sheetBlock2 = _interopRequireDefault(_sheetBlock);

var _MathUtils = __webpack_require__(5);

var _MathUtils2 = _interopRequireDefault(_MathUtils);

var _ThreeUtils = __webpack_require__(21);

var _ThreeUtils2 = _interopRequireDefault(_ThreeUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// import ThreeMarkup from './ThreeMarkup';

var SheetBlock = function () {
  function SheetBlock(visual, p, first, last) {
    var angle = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

    var _this = this;

    var state = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'closed';
    var height = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;

    _classCallCheck(this, SheetBlock);

    this.visual = visual;
    this.p = _extends({}, p, {
      first: first,
      last: last
    });
    var props = this.getProps();

    var loadedPoints = this.loadPoints();
    Object.keys(loadedPoints).map(function (k) {
      _this[k] = loadedPoints[k][props.shape] || loadedPoints[k][0];
    });

    this.pSpline = new _libs.THREE.CatmullRomCurve3([]);
    for (var i = 0; i < this.interpolationPoints.x[0].length; ++i) {
      this.pSpline.points.push(new _libs.THREE.Vector3());
    }

    this.iSpline = new _libs.THREE.CatmullRomCurve3([]);
    for (var _i = 0; _i < _sheetBlock2.default.resX; ++_i) {
      this.iSpline.points.push(new _libs.THREE.Vector3());
    }

    this.aSplines = [];

    //this.three = new THREE.Object3D();

    this.geometry = _sheetBlock2.default.geometry.clone();

    this.p.sideFaces = [{
      first: 0,
      last: _sheetBlock2.default.faces[0]
    }, {
      first: _sheetBlock2.default.faces[0],
      last: _sheetBlock2.default.faces[1]
    }];

    this.sideTexture = new _libs.THREE.Texture();
    this.sideTexture.wrapT = _libs.THREE.RepeatWrapping;
    this.sideTexture.repeat.set(0, last - first);
    this.sideTexture.image = props.sideTexture;
    this.sideTexture.needsUpdate = true;

    this.materials = [new _libs.THREE.MeshPhongMaterial(), new _libs.THREE.MeshPhongMaterial(), new _libs.THREE.MeshPhongMaterial({ map: this.sideTexture }), new _libs.THREE.MeshPhongMaterial({ map: this.sideTexture }), new _libs.THREE.MeshPhongMaterial(), //{opacity: 0, transparent: true}
    new _libs.THREE.MeshPhongMaterial({ map: this.sideTexture })];

    this.p.setTexture(this.materials[0], 2 * first);
    this.p.setTexture(this.materials[1], 2 * last - 1);

    this.mesh = new _libs.THREE.Mesh(this.geometry, this.materials);
    this.mesh.castShadow = true;
    this.mesh.receiveShadow = true;
    // this.mesh.frustumCulled = true;

    //this.three.add(this.mesh);
    this.three = this.mesh;
    this.three.userData.self = this;

    this.markers = [];
    if (this.p.marker.use) {
      var l = this.geometry.vertices.length;
      var is = void 0;
      // is = [0, sheetBlock.resX-1, (sheetBlock.resZ-1)*sheetBlock.resX, sheetBlock.resZ*sheetBlock.resX-1];
      is = Array.apply(0, Array(l)).map(function (_, i) {
        return i;
      });

      for (var _iterator = is, _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i2 >= _iterator.length) break;
          _ref = _iterator[_i2++];
        } else {
          _i2 = _iterator.next();
          if (_i2.done) break;
          _ref = _i2.value;
        }

        var _i3 = _ref;

        var marker = _ThreeUtils2.default.createMarker(this.geometry.vertices[_i3], _i3 < l / 2 ? 0xFF0000 : 0x00FF00, this.p.marker.size);
        this.markers.push({
          marker: marker,
          vertex: _i3
        });
        this.three.add(marker);
      }
    }

    this.corner = {
      use: true,
      height: 0,
      maxDistance: 0,
      points: [],
      OZ: new _libs.THREE.Vector3(0, 0, 1),
      axis: new _libs.THREE.Vector3()
    };
    this.set(0, 'closed', height, first, last); // calculate corner points

    this.set(angle, state, height, first, last); // init position

    // if(!SheetBlock.markup) {
    //   SheetBlock.markup=true;
    //   this.markup = new ThreeMarkup(this, 0, [{
    //     x: 0,
    //     y: 0,
    //   }, {
    //     x: 0.5,
    //     y: 1
    //   }, {
    //     x: 1,
    //     y: 0
    //   }].map((p)=>new THREE.Vector2(p.x, p.y)), {});
    // }
  }

  SheetBlock.prototype.dispose = function dispose() {
    for (var _iterator2 = this.materials, _isArray2 = Array.isArray(_iterator2), _i4 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i4 >= _iterator2.length) break;
        _ref2 = _iterator2[_i4++];
      } else {
        _i4 = _iterator2.next();
        if (_i4.done) break;
        _ref2 = _i4.value;
      }

      var m = _ref2;

      if (m.map) {
        m.map = null;
        m.needsUpdate = true;
      }
      m.dispose();
    }
    delete this.materials;
    this.geometry.dispose();
  };

  SheetBlock.prototype.getSize = function getSize() {
    return this.p.last - this.p.first;
  };

  SheetBlock.prototype.getProps = function getProps() {
    return _extends({}, this.p.page, {
      width: this.p.page.width - (this.reducedWidth ? 1e-3 * this.p.page.width : 0),
      sheets: this.p.sheets
    });
  };

  SheetBlock.prototype.reduceWidth = function reduceWidth(reducedWidth) {
    this.reducedWidth = reducedWidth;
    this.set(this.angle);
  };

  SheetBlock.prototype.getTopCerners = function getTopCerners() {
    var off = !(this.angle > Math.PI / 2) ? this.geometry.vertices.length / 2 : 0;
    return [this.geometry.vertices[off], this.geometry.vertices[_sheetBlock2.default.resX - 1 + off], this.geometry.vertices[(_sheetBlock2.default.resZ - 1) * _sheetBlock2.default.resX + off], this.geometry.vertices[_sheetBlock2.default.resZ * _sheetBlock2.default.resX - 1 + off]];
  };

  SheetBlock.prototype.getTopSize = function getTopSize() {
    var vs = this.getTopCerners();
    var w0 = new _libs.THREE.Vector3(),
        w1 = new _libs.THREE.Vector3();
    w0.copy(vs[0]);
    this.three.localToWorld(w0);
    w1.copy(vs[1]);
    this.three.localToWorld(w1);
    return {
      width: Math.abs(w1.x - w0.x),
      height: vs[0].distanceTo(vs[2])
    };
  };

  SheetBlock.prototype.getTopWorldRotation = function getTopWorldRotation(q) {
    q.x = -Math.PI / 2;
    return q;
  };

  SheetBlock.prototype.getTopWorldPosition = function getTopWorldPosition(v) {
    var vs = this.getTopCerners();
    v.set(0, -100, 0);
    var w = new _libs.THREE.Vector3();
    for (var _iterator3 = vs, _isArray3 = Array.isArray(_iterator3), _i5 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i5 >= _iterator3.length) break;
        _ref3 = _iterator3[_i5++];
      } else {
        _i5 = _iterator3.next();
        if (_i5.done) break;
        _ref3 = _i5.value;
      }

      var vi = _ref3;

      w.copy(vi);
      this.three.localToWorld(w);
      v.x += 0.25 * w.x;
      v.y = Math.max(w.y, w.y);
      v.z += 0.25 * w.z;
    }
    return v;
  };

  SheetBlock.prototype.getInterpolationPoints = function getInterpolationPoints(inds, mod) {
    var ps = { x: [], y: [] },
        K = this.getProps().wave;
    for (var _iterator4 = inds, _isArray4 = Array.isArray(_iterator4), _i6 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
      var _ref4;

      if (_isArray4) {
        if (_i6 >= _iterator4.length) break;
        _ref4 = _iterator4[_i6++];
      } else {
        _i6 = _iterator4.next();
        if (_i6.done) break;
        _ref4 = _i6.value;
      }

      var i = _ref4;

      ps.x.push([].concat(this.interpolationPoints.x[i]));
      ps.y.push(~mod.indexOf(i) ? this.interpolationPoints.y[i].map(function (n) {
        return K * n;
      }) : [].concat(this.interpolationPoints.y[i]));
    }
    return ps;
  };

  SheetBlock.prototype.set = function set(angle) {
    var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
    var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.corner.height;
    var first = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.p.first;
    var last = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.p.last;
    var flipDirection = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'right';

    var PI = Math.PI;
    this.state = state;
    var closedAngle = void 0,
        binderTurn = void 0;
    if ((typeof angle === 'undefined' ? 'undefined' : _typeof(angle)) === 'object') {
      this.angle = angle.openedAngle;
      closedAngle = angle.closedAngle;
      binderTurn = angle.binderTurn > PI / 2 ? PI - angle.binderTurn : angle.binderTurn;
    } else {
      this.angle = angle;
    }

    this.corner.height = height;
    if (this.p.first !== first || this.p.last !== last) {
      this.sideTexture.repeat.set(0, last - first);
      this.sideTexture.needsUpdate = true;
      if (this.p.first !== first) {
        this.p.setTexture(this.materials[0], 2 * first);
      }
      if (this.p.last !== last) {
        this.p.setTexture(this.materials[1], 2 * last - 1);
      }
    }
    this.p.first = first;
    this.p.last = last;
    var points = void 0;
    var props = this.getProps();
    if (this.state === 'closed') {
      points = this.getInterpolationPoints(this.closedInterpolationIndeces, this.closedInterpolationIndeces);
    } else if (this.state === 'opened') {
      if (closedAngle !== undefined && Math.abs(closedAngle - PI / 2) > 1e-2) {
        points = this.getInterpolationPoints(this.flatInterpolationIndeces, []);
        var ps = this.getPointsAtAngle(this.getInterpolationPoints(this.closedInterpolationIndeces, this.closedInterpolationIndeces), closedAngle > PI / 2 ? PI - closedAngle : closedAngle);
        points.x = [ps.x].concat(points.x);
        points.y = [ps.y].concat(points.y);
        // console.log(ps);
      } else {
        points = this.getInterpolationPoints(this.openedInterpolationIndeces[flipDirection === 'right' ? this.angle > PI / 2 ? 'left' : 'right' : this.angle < PI / 2 ? 'left' : 'right'], this.closedInterpolationIndeces);
      }
    }
    var hl = void 0,
        hr = void 0,
        offset = 0.5 * props.sheets * props.depth;
    if (this.state === 'closed') {
      offset -= 7e-6 * this.p.scale;
    }
    if (this.angle <= PI / 2) {
      hl = (props.sheets - first) * props.depth;
      hr = (props.sheets - last) * props.depth;
    } else {
      hl = first * props.depth;
      hr = last * props.depth;
    }

    var dDepth = 0.1 * props.depth;
    if (hl > hr) {
      hr -= dDepth;
      hl += dDepth;
    } else {
      hr += dDepth;
      hl -= dDepth;
    }

    var inAngle = this.angle > PI / 2 ? PI - this.angle : this.angle,
        hAngle = this.state === 'closed' ? inAngle : binderTurn === undefined ? PI / 2 : binderTurn;

    var _getPointsAtAngleAndH = this.getPointsAtAngleAndHs(points, inAngle, hAngle, [hl / props.width, hr / props.width]),
        left = _getPointsAtAngleAndH[0],
        right = _getPointsAtAngleAndH[1];

    if (this.angle > PI / 2) {
      this.inverse(left);
      this.inverse(right);
      offset = -offset;
    }
    this.setPoints(left, right, offset);
  };

  SheetBlock.prototype.setPoints = function setPoints(left, right, offset) {
    var _this2 = this;

    var p = this.getProps();
    var i = 0;

    var ys = [right, left];
    for (var y = 0; y < _sheetBlock2.default.resY; ++y) {
      for (var z = 0; z < _sheetBlock2.default.resZ; ++z) {
        for (var x = 0; x < _sheetBlock2.default.resX; ++x) {
          this.geometry.vertices[i++].set(ys[y].x[x] * p.width + offset, ys[y].y[x] * p.width, z * p.height / (_sheetBlock2.default.resZ - 1) - 0.5 * p.height);
        }
      }
    }
    if (i !== this.geometry.vertices.length) {
      console.warn('setPoints: bad mapping!');
    }

    if (this.corner.use && !this.corner.points.length) {
      var plane = new _libs.THREE.Plane(),
          normal = plane.normal,
          planeOffset = (1 - this.getProps().flexibleCorner) * Math.min(p.width, p.height),
          proj = new _libs.THREE.Vector3();
      plane.setFromNormalAndCoplanarPoint(new _libs.THREE.Vector3(-1, 0, -1).normalize(), new _libs.THREE.Vector3(planeOffset + offset, 0, 0.5 * p.height));
      for (var _i7 = 0, l = this.geometry.vertices.length; _i7 < l; ++_i7) {
        plane.projectPoint(this.geometry.vertices[_i7], proj);
        proj.sub(this.geometry.vertices[_i7]);
        if (proj.x * normal.x + proj.y * normal.y + proj.z * normal.z > 0) {
          var d = proj.length() / planeOffset;
          this.corner.maxDistance = Math.max(this.corner.maxDistance, d);
          this.corner.points.push({ vertex: _i7, distance: d });
        }
      }
    }

    if (this.corner.use && Math.abs(this.corner.height) > 1e-3) {
      var d2Angle = function d2Angle(d) {
        return p.cornerDeviation * _this2.corner.height / (1 + Math.exp(-p.bending * (d - 0.5 * _this2.corner.maxDistance)));
      };
      this.corner.axis.set(-1, 0, 1).normalize();
      this.corner.axis.applyAxisAngle(this.corner.OZ, this.angle);
      for (var _iterator5 = this.corner.points, _isArray5 = Array.isArray(_iterator5), _i8 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
        var _ref5;

        if (_isArray5) {
          if (_i8 >= _iterator5.length) break;
          _ref5 = _iterator5[_i8++];
        } else {
          _i8 = _iterator5.next();
          if (_i8.done) break;
          _ref5 = _i8.value;
        }

        var point = _ref5;

        this.geometry.vertices[point.vertex].applyAxisAngle(this.corner.axis, d2Angle(point.distance));
      }
    }

    for (var _iterator6 = this.markers, _isArray6 = Array.isArray(_iterator6), _i9 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
      var _ref6;

      if (_isArray6) {
        if (_i9 >= _iterator6.length) break;
        _ref6 = _iterator6[_i9++];
      } else {
        _i9 = _iterator6.next();
        if (_i9.done) break;
        _ref6 = _i9.value;
      }

      var m = _ref6;

      m.marker.position.copy(this.geometry.vertices[m.vertex]);
    }

    this.geometry.computeVertexNormals();
    //this.geometry.computeFaceNormals();
    this.geometry.computeBoundingSphere();
    //this.geometry.computeBoundingBox();
    this.geometry.verticesNeedUpdate = true;

    if (this.markup) {
      this.markup.computeVertices();
    }
  };

  SheetBlock.prototype.inverse = function inverse(ps) {
    for (var i = 0; i < ps.x.length; ++i) {
      ps.x[i] = -ps.x[i];
    }
    return ps;
  };

  SheetBlock.prototype.getPointsAtHs = function getPointsAtHs(ps, angle, hs) {
    var _this3 = this;

    var N = 1000;
    _MathUtils2.default.setSplinePoints(this.pSpline, ps);
    var bl = void 0 /* = MathUtils.splitSpline(this.pSpline, N)*/,
        r = [];
    {
      var p1 = _extends({}, this.pSpline.getPoint((N - 1) / N)),
          p2 = _extends({}, this.pSpline.getPoint(1)),
          dp = { x: p2.x - p1.x, y: p2.y - p1.y },
          ln = Math.sqrt(dp.x * dp.x + dp.y * dp.y),
          sp = this.pSpline.points[this.pSpline.points.length - 1];
      sp.set(sp.x + 0.2 * dp.x / ln, sp.y + 0.2 * dp.y / ln, 0);
      bl = _MathUtils2.default.splitSpline(this.pSpline, N);
    }
    bl.ls.push(1e7);
    _MathUtils2.default.mapl2L(bl.ls, bl.len, _sheetBlock2.default.resX, function (i) {
      for (var j = 0; j < hs.length; ++j) {
        if (!i) {
          r[j] = { x: [-hs[j] * Math.sin(angle)], y: [hs[j] * Math.cos(angle)] };
        } else {
          var p0 = _extends({}, _this3.pSpline.getPoint((i - 1) / N)),
              _p = _this3.pSpline.getPoint(i / N),
              x = -(_p.y - p0.y),
              y = _p.x - p0.x,
              l = Math.sqrt(x * x + y * y);
          r[j].x.push(_p.x + x / l * hs[j]);
          r[j].y.push(_p.y + y / l * hs[j]);
        }
      }
    });

    var nps = [];

    var _loop = function _loop(j) {
      nps[j] = { x: [], y: [] };
      _MathUtils2.default.setSplinePoints(_this3.iSpline, r[j]);
      var l = _MathUtils2.default.splitSpline(_this3.iSpline, N);
      l.ls.push(1e7);
      _MathUtils2.default.mapl2L(l.ls, 1, _sheetBlock2.default.resX, function (i) {
        var p = _this3.iSpline.getPoint(i / N);
        nps[j].x.push(p.x);
        nps[j].y.push(p.y);
      });
    };

    for (var j = 0; j < hs.length; ++j) {
      _loop(j);
    }
    return nps;
  };

  SheetBlock.prototype.getPointsAtAngleAndHs = function getPointsAtAngleAndHs(points, angle, hAngle, hs) {
    var ps = this.getPointsAtAngle(points, angle);
    return this.getPointsAtHs(ps, hAngle, hs);
  };

  SheetBlock.prototype.getPointsAtAngle = function getPointsAtAngle(points, angle) {
    var ps = { x: [], y: [] },
        angles = [];
    angle /= Math.PI / 2;
    for (var j = 0; j < points.x.length; ++j) {
      angles.push(j / (points.x.length - 1));
    }
    for (var i = 0; i < points.x[0].length; ++i) {
      var xps = [],
          yps = [];
      for (var _j = 0; _j < points.x.length; ++_j) {
        xps.push(points.x[_j][i]);
        yps.push(points.y[_j][i]);
      }
      ps.x.push(this.interpolate(angles, xps, angle));
      ps.y.push(this.interpolate(angles, yps, angle));
    }
    return ps;
  };

  SheetBlock.prototype.interpolate = function interpolate(x, y, xi) {
    if (!this.aSplines[x.length]) {
      this.aSplines[x.length] = new _libs.THREE.CatmullRomCurve3([]);
      var ps = this.aSplines[x.length].points;
      for (var i = 0; i < x.length; ++i) {
        ps.push(new _libs.THREE.Vector3());
      }
    }
    var spline = this.aSplines[x.length];
    for (var _i10 = 0; _i10 < x.length; ++_i10) {
      spline.points[_i10].set(x[_i10], y[_i10], 0);
    }
    return spline.getPoint(Math.min(1, Math.max(xi, 0))).y;
  };

  SheetBlock.prototype.loadPoints = function loadPoints() {
    var x = [],
        y = [];
    var _arr = [0, 0.2877, 0.6347, 0.8174, 1.0000];
    for (var _i11 = 0; _i11 < _arr.length; _i11++) {
      var r = _arr[_i11];
      x.push(r * Math.cos(0.9 * Math.PI / 4));
      y.push(r * Math.sin(0.9 * Math.PI / 4));
    }

    var openedInterpolationIndeces = [{
      left: [2, 3, 4],
      right: [2, 3, 4]
    }, {
      left: [2, 6, 5],
      right: [2, 3, 4]
    }, {
      left: [2, 3, 4],
      right: [2, 3, 4]
    }],
        closedInterpolationIndeces = [[0, 1, 2], [0, 1, 2], [0, 1, 2]],
        flatInterpolationIndeces = [[5, 4], [8, 7], [5, 4]],
        interpolationPoints = [{
      x: [[0, 0.2500, 0.5000, 0.7500, 1.0000], [0, 0.2482, 0.4997, 0.7500, 1.0000], [0, 0.2428, 0.4989, 0.7500, 1.0000], [0, 0.1250, 0.3214, 0.5660, 0.8192],
      // [0,0.1250,0.3214,0.5745,0.8660],
      [0, 0, 0, 0, 0], x],
      y: [[0, 0, 0, 0, 0], [0, 0.0300, 0.0166, 0.0033, 0.0001], [0, 0.0596, 0.0331, 0.0065, 0.0002], [0, 0.2165, 0.3830, 0.4920, 0.5736],
      // [0,0.2165,0.3830,0.4821,0.5000],
      [0, 0.2500, 0.5000, 0.7500, 1.0000], y]
    }, {
      x: [[0, 0.2500, 0.5000, 0.7500, 1.0000], //closed
      [0, 0.2482, 0.4997, 0.7500, 1.0000], [0, 0.2428, 0.4989, 0.7500, 1.0000], [0, 0.1250, 0.3214, 0.5574, 0.8192], //right
      [0, -0.0434, 0.0000, 0.1302, 0.3420], [0, 0.0434, -0.0000, -0.1302, -0.3420], //left
      [0, 0.1705, 0.3410, 0.4821, 0.5736], [0, 0, 0, 0, 0], //flat
      x],
      y: [[0, 0, 0, 0, 0], //closed
      [0, 0.0300, 0.0166, 0.0033, 0.0001], [0, 0.0596, 0.0331, 0.0065, 0.0002], [0, 0.2165, 0.3830, 0.5018, 0.5736], //right
      [0, 0.2462, 0.5000, 0.7386, 0.9397], [0, 0.2462, 0.5000, 0.7386, 0.9397], //left
      [0, 0.1828, 0.3657, 0.5745, 0.8192], [0, 0.2500, 0.5000, 0.7500, 1.0000], //flat
      y]
    },
    // Old interpolation points
    {
      x: [[0, 0.2877, 0.6347, 0.8174, 1.0000], [0.000, 0.286, 0.632, 0.815, 0.997], [0.000, 0.279, 0.623, 0.806, 0.988], [0.000, 0.126, 0.411, 0.593, 0.774], [0, 0, 0, 0, 0], x],
      y: [[0, 0, 0, 0, 0], [0.000, 0.030, 0.010, 0.002, 0.000], [0.000, 0.060, 0.017, 0.004, 0.000], [0.000, 0.259, 0.440, 0.446, 0.429], [0, 0.2877, 0.6347, 0.8174, 1.0000], y]
    }];

    return {
      interpolationPoints: interpolationPoints,
      openedInterpolationIndeces: openedInterpolationIndeces,
      closedInterpolationIndeces: closedInterpolationIndeces,
      flatInterpolationIndeces: flatInterpolationIndeces
    };
  };

  return SheetBlock;
}();

exports.default = SheetBlock;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.props = props;
function props() {
  var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'volume';

  // const props = {
  //   height,
  //   width,
  //   gravity,
  //   injector,
  //   cachedPages,
  //   renderInactivePages,
  //   renderWhileFlipping,
  //   pagesForPredicting,
  //   preloadPages,
  //   sheet: {
  //     startVelocity,
  //     cornerDeviation,
  //     flexibility,
  //     flexibleCorner,
  //     bending,
  //     wave,
  //     shape,
  //     widthTexels,
  //     heightTexels,
  //     color,
  //     sideTexture
  //   },
  //   cover: {
  //     ...sheet,
  //     padding,
  //     binderTexture,
  //     depth,
  //     mass
  //   },
  //   page: {
  //     ...sheet,
  //     depth,
  //     mass
  //   }
  // };

  var def = {
    height: 0.297,
    width: 0.21,
    backgroundColor: '',
    backgroundImage: '',
    backgroundStyle: '',
    highlightLinks: true,
    lighting: 'mixed',
    gravity: 1,
    cachedPages: 50,
    renderInactivePages: true,
    renderInactivePagesOnMobile: true,
    renderWhileFlipping: false,
    pagesForPredicting: 5,
    preloadPages: 5,
    autoPlayDuration: 5000,
    rtl: false,
    interactiveCorners: true,
    maxDepth: 0.008,
    sheet: {
      startVelocity: 1.2,
      cornerDeviation: 0.15,
      flexibility: 10,
      flexibleCorner: 0.5,
      bending: 11,
      wave: 0.3,
      shape: 0,
      widthTexels: 1920,
      heightTexels: 1080,
      color: 0xFFFFFF,
      side: 'color'
    },
    cover: {
      side: 'transparent',
      binderTexture: '',
      depth: 0.0003,
      padding: 0,
      mass: 0.001
    },
    page: {
      depth: 0.0001,
      mass: 0.001
    },
    cssLayerProps: {
      width: 1024
    }
  },
      styles = {
    volume: def,
    flat: _extends({}, def, {
      lighting: 'ambient',
      sheet: _extends({}, def.sheet, {
        wave: 0.05,
        side: 'transparent',
        shape: 1
      }),
      cover: _extends({}, def.cover, {
        depth: 0.00002
      }),
      page: _extends({}, def.page, {
        depth: 0.00001
      })
    }),
    'volume-paddings': _extends({}, def, {
      cover: _extends({}, def.cover, {
        padding: 0.0025
      })
    })
  };
  styles['volume-unrolling'] = _extends({}, styles.volume, {
    sheet: _extends({}, styles.volume.sheet, {
      shape: 1
    })
  });
  styles['volume-paddings-unrolling'] = _extends({}, styles['volume-paddings'], {
    sheet: _extends({}, styles['volume-paddings'].sheet, {
      shape: 1
    })
  });
  return styles[style] || def;
};

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.CSS3DSprite = exports.CSS3DObject = undefined;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

_libs.THREE.CSS3DObject = function (_THREE$Object3D) {
  _inherits(CSS3DObject, _THREE$Object3D);

  function CSS3DObject() {
    var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

    _classCallCheck(this, CSS3DObject);

    var _this = _possibleConstructorReturn(this, _THREE$Object3D.call(this));

    if (element) {
      _this.set(element);
    }
    return _this;
  }

  CSS3DObject.prototype.set = function set(element) {
    this.element = element;
    this.element.style.position = 'absolute';

    this.addEventListener('removed', function () {
      if (this.element.parentNode !== null) {
        this.element.parentNode.removeChild(this.element);
      }
    });
  };

  return CSS3DObject;
}(_libs.THREE.Object3D);

_libs.THREE.CSS3DSprite = function (_THREE$CSS3DObject) {
  _inherits(CSS3DSprite, _THREE$CSS3DObject);

  function CSS3DSprite(element) {
    _classCallCheck(this, CSS3DSprite);

    return _possibleConstructorReturn(this, _THREE$CSS3DObject.call(this, element));
  }

  return CSS3DSprite;
}(_libs.THREE.CSS3DObject);

_libs.THREE.CSS3DRenderer = function CSS3DRenderer() {
  _classCallCheck(this, CSS3DRenderer);

  var _width, _height;
  var _widthHalf, _heightHalf;

  var matrix = new _libs.THREE.Matrix4();

  var cache = {
    camera: { fov: 0, style: '' },
    objects: {}
  };

  var domElement = document.createElement('div');
  domElement.style.overflow = 'hidden';

  this.domElement = domElement;

  var cameraElement = document.createElement('div');

  cameraElement.style.WebkitTransformStyle = 'preserve-3d';
  cameraElement.style.MozTransformStyle = 'preserve-3d';
  cameraElement.style.transformStyle = 'preserve-3d';

  domElement.appendChild(cameraElement);

  var isIE = 1; ///Trident/i.test( navigator.userAgent);

  this.setClearColor = function () {};

  this.getSize = function () {

    return {
      width: _width,
      height: _height
    };
  };

  this.setSize = function (width, height) {

    _width = width;
    _height = height;
    _widthHalf = _width / 2;
    _heightHalf = _height / 2;

    domElement.style.width = width + 'px';
    domElement.style.height = height + 'px';

    cameraElement.style.width = width + 'px';
    cameraElement.style.height = height + 'px';
  };

  function epsilon(value) {
    var r = void 0;
    //r=Math.abs( value) < 1e-6 ? 0 : value;
    r = Math.round((value + Number.EPSILON) * 1e5) / 1e5;
    return r;
  }

  function getCameraCSSMatrix(matrix) {

    var elements = matrix.elements;
    return 'matrix3d(' + [epsilon(elements[0]), epsilon(-elements[1]), epsilon(elements[2]), epsilon(elements[3]), epsilon(elements[4]), epsilon(-elements[5]), epsilon(elements[6]), epsilon(elements[7]), epsilon(elements[8]), epsilon(-elements[9]), epsilon(elements[10]), epsilon(elements[11]), epsilon(elements[12]), epsilon(-elements[13]), epsilon(elements[14]), epsilon(elements[15])].join(',') + ')';
  }

  function getObjectCSSMatrix(matrix, cameraCSSMatrix) {

    var elements = matrix.elements;
    var matrix3d = 'matrix3d(' + [epsilon(elements[0]), epsilon(elements[1]), epsilon(elements[2]), epsilon(elements[3]), epsilon(-elements[4]), epsilon(-elements[5]), epsilon(-elements[6]), epsilon(-elements[7]), epsilon(elements[8]), epsilon(elements[9]), epsilon(elements[10]), epsilon(elements[11]), epsilon(elements[12]), epsilon(elements[13]), epsilon(elements[14]), epsilon(elements[15])].join(',') + ')';

    if (isIE) {

      return 'translate(-50%,-50%)' + 'translate(' + _widthHalf + 'px,' + _heightHalf + 'px)' + cameraCSSMatrix + matrix3d;
    }

    return 'translate(-50%,-50%)' + matrix3d;
  }

  function renderObject(object, camera, cameraCSSMatrix) {

    if (object instanceof _libs.THREE.CSS3DObject) {

      var style;

      if (object instanceof _libs.THREE.CSS3DSprite) {
        matrix.copy(camera.matrixWorldInverse);
        matrix.transpose();
        matrix.copyPosition(object.matrixWorld);
        matrix.scale(object.scale);

        matrix.elements[3] = 0;
        matrix.elements[7] = 0;
        matrix.elements[11] = 0;
        matrix.elements[15] = 1;

        style = getObjectCSSMatrix(matrix, cameraCSSMatrix);
      } else {

        style = getObjectCSSMatrix(object.matrixWorld, cameraCSSMatrix);
      }

      var element = object.element;
      var cachedStyle = cache.objects[object.id] && cache.objects[object.id].style;

      if (cachedStyle === undefined || cachedStyle !== style) {
        element.style.WebkitTransform = style;
        element.style.MozTransform = style;
        element.style.transform = style;

        cache.objects[object.id] = { style: style };
        if (isIE) {
          cache.objects[object.id].distanceToCameraSquared = getDistanceToSquared(camera, object);
        }
      }

      if (element.parentNode !== cameraElement) {
        cameraElement.appendChild(element);
      }
    }

    for (var i = 0, l = object.children.length; i < l; i++) {

      renderObject(object.children[i], camera, cameraCSSMatrix);
    }
  }

  var getDistanceToSquared = function () {

    var a = new _libs.THREE.Vector3();
    var b = new _libs.THREE.Vector3();

    return function (object1, object2) {

      a.setFromMatrixPosition(object1.matrixWorld);
      b.setFromMatrixPosition(object2.matrixWorld);

      return a.distanceToSquared(b);
    };
  }();

  function zOrder(scene) {

    var order = Object.keys(cache.objects).sort(function (a, b) {

      return cache.objects[a].distanceToCameraSquared - cache.objects[b].distanceToCameraSquared;
    });
    var zMax = order.length;

    scene.traverse(function (object) {

      var index = order.indexOf(object.id + '');

      if (index !== -1) {

        object.element.style.zIndex = zMax - index;
      }
    });
  }

  this.render = function (scene, camera) {

    var fov = camera.projectionMatrix.elements[5] * _heightHalf;

    if (cache.camera.fov !== fov) {

      domElement.style.WebkitPerspective = fov + 'px';
      domElement.style.MozPerspective = fov + 'px';
      domElement.style.perspective = fov + 'px';

      cache.camera.fov = fov;
    }

    scene.updateMatrixWorld();

    if (camera.parent === null) camera.updateMatrixWorld();

    var cameraCSSMatrix = 'translateZ(' + fov + 'px)' + getCameraCSSMatrix(camera.matrixWorldInverse);

    var style = cameraCSSMatrix + 'translate(' + _widthHalf + 'px,' + _heightHalf + 'px)';

    if (cache.camera.style !== style && !isIE) {

      cameraElement.style.WebkitTransform = style;
      cameraElement.style.MozTransform = style;
      cameraElement.style.transform = style;

      cache.camera.style = style;
    }

    renderObject(scene, camera, cameraCSSMatrix);

    if (isIE) {

      // IE10 and 11 does not support 'preserve-3d'.
      // Thus, z-order in 3D will not work.
      // We have to calc z-order manually and set CSS z-index for IE.
      // FYI: z-index can't handle object intersection
      zOrder(scene);
    }
  };
};

exports.default = _libs.THREE.CSS3DRenderer;


var _CSS3DObject = _libs.THREE.CSS3DObject,
    _CSS3DSprite = _libs.THREE.CSS3DSprite;
exports.CSS3DObject = _CSS3DObject;
exports.CSS3DSprite = _CSS3DSprite;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _CSS3DRenderer = __webpack_require__(12);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CSSLayer = function (_CSS3DObject) {
  _inherits(CSSLayer, _CSS3DObject);

  CSSLayer.init = function init(doc) {
    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 150;

    CSSLayer.delay = delay;
    CSSLayer.style = (0, _libs.$)(('<style type=text/css>\n      .css-layer {\n    \t\topacity: 1;\n    \t\ttransition: opacity ' + delay + 'ms ease-out;\n        visibility: visible;\n        overflow: hidden;\n    \t}\n    \t.css-layer.hidden {\n    \t\ttransition: opacity ' + delay + 'ms ease-in, visibility ' + delay + 'ms step-end;\n    \t\topacity: 0;\n        visibility: hidden;\n        display: block;\n        pointer-events: none;\n      }\n      .fb3d-block {\n        position: absolute;\n      }\n      .fb3d-audio audio, .fb3d-link a, .fb3d-iframe iframe, .fb3d-video video, .fb3d-youtube .youtube {\n        display: block;\n        position: absolute;\n        left: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n      }\n      .fb3d-image {\n        text-align: center;\n      }\n      .fb3d-link a {\n        cursor: pointer;\n        background-color: rgba(255,255,0,.1);\n        transition: background-color .15s ease-in;\n      }\n      .fb3d-link a:hover {\n        background-color: rgba(255,255,0,.2);\n        transition: background-color .15s ease-out;\n      }\n      .fb3d-iframe iframe {\n        border: 0;\n      }\n      .fb3d-image img {\n        max-width: 100%;\n        max-height: 100%;\n      }\n    </style>').fb3dQFilter()).appendTo(doc.head);
  };

  CSSLayer.dispose = function dispose() {
    CSSLayer.style.remove();
  };

  function CSSLayer(width, height, props) {
    _classCallCheck(this, CSSLayer);

    var _this = _possibleConstructorReturn(this, _CSS3DObject.call(this));

    _this.props = props;
    _this.jContainer = (0, _libs.$)('<div class="hidden css-layer"></div>');
    _this.setSize(width, height);
    _this.setData();
    _this.set(_this.jContainer[0]);
    return _this;
  }

  CSSLayer.prototype.setSize = function setSize(width, height) {
    var widthPxs = this.props.width,
        heightPxs = height / width * widthPxs;
    this.jContainer.width(widthPxs).height(heightPxs);
    this.scale.x = 1 / (widthPxs / width);
    this.scale.y = 1 / (widthPxs / width);
  };

  CSSLayer.prototype.callInternal = function callInternal(name) {
    if (this.object && this.object[name]) {
      try {
        this.object[name]();
      } catch (e) {
        console.error(e);
      }
    }
  };

  CSSLayer.prototype.dispose = function dispose() {
    this.clearInternals();
  };

  CSSLayer.prototype.clearInternals = function clearInternals() {
    this.callInternal('dispose');
    !this.css || this.css.remove();
    !this.html || this.html.remove();
  };

  CSSLayer.prototype.setData = function setData() {
    var css = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var html = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var js = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

    this.clearInternals();

    this.css = (0, _libs.$)('<style type="text/css">' + css + '</style>').appendTo(this.jContainer);
    this.html = (0, _libs.$)(html).appendTo(this.jContainer);
    var init = eval(js);
    if (init) {
      this.object = init(this.jContainer, this.props) || {};
    }
  };

  CSSLayer.prototype.pendedCall = function pendedCall(clb) {
    var _this2 = this;

    var timestamp = this.timestamp = Date.now();
    setTimeout(function () {
      if (timestamp === _this2.timestamp) {
        clb();
      }
    }, CSSLayer.delay * .5);
  };

  CSSLayer.prototype.isHidden = function isHidden() {
    return this.jContainer.hasClass('hidden');
  };

  CSSLayer.prototype.hide = function hide() {
    var _this3 = this;

    var res = void 0;
    if (!this.isHidden()) {
      this.jContainer.addClass('hidden');
      this.callInternal('hide');
      res = new Promise(function (resolve) {
        _this3.pendedCall(function () {
          _this3.callInternal('hidden');
          resolve();
        });
      });
    } else {
      res = Promise.resolve();
    }
    return res;
  };

  CSSLayer.prototype.show = function show() {
    var _this4 = this;

    var res = void 0;
    if (this.isHidden()) {
      this.jContainer.removeClass('hidden');
      this.callInternal('show');
      res = new Promise(function (resolve) {
        _this4.pendedCall(function () {
          _this4.callInternal('shown');
          resolve();
        });
      });
    } else {
      res = Promise.resolve();
    }
    return res;
  };

  return CSSLayer;
}(_CSS3DRenderer.CSS3DObject);

exports.default = CSSLayer;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Cache = function () {
  function Cache() {
    var maxSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
    var sizeof = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Cache.countSizeof;

    _classCallCheck(this, Cache);

    this.os = new Map();
    this.sizeof = sizeof;
    this.maxSize = maxSize;
    this.size = 0;
  }

  Cache.prototype.forEach = function forEach(clb) {
    this.os.forEach(function (v, k) {
      return clb([k, v]);
    });
  };

  Cache.countSizeof = function countSizeof(value) {
    return 1;
  };

  Cache.prototype.remove = function remove(k) {
    var res = false;
    var v = this.os.get(k);
    if (!v.locked || !v.locked(k)) {
      this.size -= this.sizeof(v);
      if (v.dispose) {
        v.dispose();
      }
      this.os.delete(k);
      res = true;
    }
    return res;
  };

  Cache.prototype.freeSpace = function freeSpace() {
    var arr = [];
    for (var _iterator = this.os, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var p = _ref;

      arr.push({ timestamp: p[1].timestamp, key: p[0] });
    }
    arr.sort(function (a, b) {
      return a.timestamp - b.timestamp;
    });
    for (var i = 0; i < arr.length && this.size > 3 * this.maxSize / 4; ++i) {
      this.remove(arr[i].key);
    }
  };

  Cache.prototype.dispose = function dispose() {
    var arr = [];
    for (var _iterator2 = this.os, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var p = _ref2;

      arr.push({ v: p[1], k: p[0] });
    }
    for (var _iterator3 = arr, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i3 >= _iterator3.length) break;
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) break;
        _ref3 = _i3.value;
      }

      var o = _ref3;

      if (o.v.dispose) {
        o.v.dispose();
      }
      this.os.delete(o.k);
    }
  };

  Cache.recursionSizeof = function recursionSizeof(value) {
    var size = 0;
    if (value) {
      ++size;
      var len = value.length;
      if (len === undefined) {
        for (var p in value) {
          if (value.hasOwnProperty(p)) {
            size += Cache.recursionSizeof(value[p]);
          }
        }
      } else {
        size += len;
      }
    }
    return size;
  };

  Cache.prototype.getTimestamp = function getTimestamp() {
    return Date.now();
  };

  Cache.prototype.get = function get(key) {
    var value = this.os.get(key);
    if (value) {
      value.timestamp = this.getTimestamp();
    }
    return value;
  };

  Cache.prototype.put = function put(key, value) {
    value.timestamp = this.getTimestamp();
    this.os.set(key, value);
    this.size += this.sizeof(value);
    if (this.size > this.maxSize) {
      this.freeSpace();
    }
    return value;
  };

  return Cache;
}();

exports.default = Cache;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Controller = function (_THREE$EventDispatche) {
  _inherits(Controller, _THREE$EventDispatche);

  function Controller() {
    _classCallCheck(this, Controller);

    return _possibleConstructorReturn(this, _THREE$EventDispatche.apply(this, arguments));
  }

  Controller.prototype.handleDefault = function handleDefault(id, e, data) {
    //console.log(id+'-'+e.type+'-'+data);
  };

  Controller.prototype.dispatchAsync = function dispatchAsync(e) {
    var _this2 = this;

    Promise.resolve().then(function () {
      return _this2.dispatchEvent(e);
    });
  };

  Controller.prototype.dispose = function dispose() {};

  return Controller;
}(_libs.THREE.EventDispatcher);

exports.default = Controller;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _EventConverter2 = __webpack_require__(7);

var _EventConverter3 = _interopRequireDefault(_EventConverter2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CustomEventConverter = function (_EventConverter) {
  _inherits(CustomEventConverter, _EventConverter);

  // custom
  // testIntersection(e, data);
  // custom.object
  // test(object);

  function CustomEventConverter(wnd, doc) {
    var customTest = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {
      return false;
    };
    var eDoc = arguments[3];

    _classCallCheck(this, CustomEventConverter);

    var _this = _possibleConstructorReturn(this, _EventConverter.call(this, wnd, doc));

    _this.eDoc = eDoc;
    _this.customTest = customTest;
    _this.customs = [];
    return _this;
  }

  CustomEventConverter.prototype.test = function test(object1, object2) {
    return object1 && object2 ? this.customTest(object1, object2) : false;
  };

  CustomEventConverter.prototype.getCallback = function getCallback(object) {
    return object.target.callback;
  };

  CustomEventConverter.prototype.addCustom = function addCustom(custom) {
    this.customs.push(custom);
  };

  CustomEventConverter.prototype.getObject = function getObject(e, data) {
    var object = void 0;
    if (data.doc === this.eDoc) {
      for (var _iterator = this.customs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var custom = _ref;

        object = custom.testIntersection(e, data);
        if (object) {
          break;
        }
      }
    }
    return object;
  };

  return CustomEventConverter;
}(_EventConverter3.default);

exports.default = CustomEventConverter;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _Utils = __webpack_require__(3);

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Finder = function () {
  Finder.isDelimetr = function isDelimetr(s) {
    return s === Finder.DELIMITER;
  };

  Finder.prototype.merge = function merge() {
    var as = [],
        map = [],
        strs = this.strs;
    var p = 0;
    for (var i = 0; i < strs.length; ++i) {
      if (strs[i].length) {
        map.push({
          base: i,
          offset: p
        });
        as.push(strs[i]);
        p += strs[i].length;
        if (i < strs.length - 1 && !Finder.isDelimetr(strs[i].charAt(strs[i].length - 1)) && !Finder.isDelimetr(strs[i + 1].charAt(0))) {
          as.push(Finder.DELIMITER);
          ++p;
        }
      }
    }
    this.map = map;
    this.str = as.join('');
  };

  Finder.prototype.addHits = function addHits(p) {
    var info = this.map[_Utils2.default.lowerBound(this.map, { offset: p }, function (a, b) {
      return a.offset - b.offset;
    })];
    var chars = this.pattern.length,
        i = info.base;
    p -= info.offset;
    while (chars) {
      if (this.strs[i].length) {
        var delimeter = i < this.strs.length - 1 && !Finder.isDelimetr(this.strs[i].charAt(this.strs[i].length - 1)) && !Finder.isDelimetr(this.strs[i + 1].charAt(0)),
            length = Math.min(this.strs[i].length + (delimeter ? 1 : 0) - p, chars);
        if (p < this.strs[i].length) {
          this.hits.push({
            index: i,
            offset: p,
            length: Math.min(length, this.strs[i].length - p)
          });
        }
        chars -= length;
        ++i;
        p = 0;
      }
    }
  };

  Finder.prototype.addContext = function addContext(p) {
    var f = p,
        l = p + this.pattern.length - 1,
        dels = this.props.contextLength,
        prevDels = dels + 1;
    while (dels && prevDels - dels) {
      prevDels = dels;
      if (dels % 2) {
        for (var i = f - 2; i >= 0; --i) {
          if (Finder.isDelimetr(this.str[i]) || i === 0) {
            f = i === 0 ? 0 : i + 1;
            --dels;
            break;
          }
        }
      } else {
        for (var _i = l + 2; _i < this.str.length; ++_i) {
          if (Finder.isDelimetr(this.str[_i]) || _i === this.str.length - 1) {
            l = _i === this.str.length - 1 ? _i === this.str.length - 1 : _i - 1;
            --dels;
            break;
          }
        }
      }
    }
    this.contexts.push(this.str.substr(f, l - f + 1));
  };

  Finder.prototype.getHits = function getHits() {
    return this.hits;
  };

  Finder.prototype.getContexts = function getContexts() {
    return this.contexts;
  };

  function Finder(strs, pattern, props) {
    _classCallCheck(this, Finder);

    this.props = _extends({}, Finder.defaults, props);
    this.strs = strs;
    var data = this.merge(strs);
    this.hits = [];
    this.contexts = [];
    this.pattern = pattern.toLowerCase();
    this.lstr = this.str.toLowerCase();
    var p = 0;
    while (true) {
      p = this.lstr.indexOf(this.pattern, p);
      if (p === -1) {
        break;
      } else {
        this.addHits(p);
        this.addContext(p);
        p += this.pattern.length;
      }
    }
  }

  return Finder;
}();

Finder.DELIMITER = ' ';
Finder.defaults = {
  contextLength: 7,
  hits: true,
  contexts: true
};
exports.default = Finder;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _FullScreen2 = __webpack_require__(53);

var _FullScreen3 = _interopRequireDefault(_FullScreen2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FullScreenX = function (_FullScreen) {
	_inherits(FullScreenX, _FullScreen);

	function FullScreenX() {
		_classCallCheck(this, FullScreenX);

		return _possibleConstructorReturn(this, _FullScreen.apply(this, arguments));
	}

	FullScreenX.available = function available() {
		return true;
	};

	FullScreenX.activated = function activated() {
		return _FullScreen.available.call(this) ? _FullScreen.activated.call(this) : FullScreenX.node.hasClass(FullScreenX.classX);
	};

	FullScreenX.addEventListener = function addEventListener(element, handler) {
		if (_FullScreen.available.call(this)) {
			_FullScreen.addEventListener.call(this, element, handler);
		} else {
			FullScreenX.handler = handler;
		}
	};

	FullScreenX.removeEventListener = function removeEventListener(element, handler) {
		if (_FullScreen.available.call(this)) {
			_FullScreen.removeEventListener.call(this, element, handler);
		} else {
			FullScreenX.handler = FullScreenX.defHandler;
		}
	};

	FullScreenX.request = function request(element) {
		if (_FullScreen.available.call(this)) {
			_FullScreen.request.call(this, element);
		} else {
			if (!FullScreenX.node.hasClass(FullScreenX.classX)) {
				FullScreenX.node = (0, _libs.$)(element || document.body);
				FullScreenX.node.addClass(FullScreenX.classX);
				Promise.resolve().then(FullScreenX.handler);
			}
		}
	};

	FullScreenX.cancel = function cancel() {
		if (_FullScreen.available.call(this)) {
			_FullScreen.cancel.call(this);
		} else {
			if (FullScreenX.node.hasClass(FullScreenX.classX)) {
				FullScreenX.node.removeClass(FullScreenX.classX);
				FullScreenX.node = FullScreenX.defNode;
				Promise.resolve().then(FullScreenX.handler);
			}
		}
	};

	return FullScreenX;
}(_FullScreen3.default);

FullScreenX.defNode = (0, _libs.$)();
FullScreenX.node = FullScreenX.defNode;

FullScreenX.defHandler = function () {
	return undefined;
};

FullScreenX.handler = FullScreenX.defHandler;
FullScreenX.classX = 'fb3d-fullscreenx';
FullScreenX.style = (0, _libs.$)(('\n\t\t<style type="text/css">\n      .' + FullScreenX.classX + ' {\n        position: fixed !important;\n\t\t\t\tleft: 0 !important;\n        top: 0 !important;\n        width: 100% !important;\n        height: 100% !important;\n\t\t\t\tz-index: 2147483647 !important;\n\t\t\t\tmargin: 0 !important;\n\t\t\t\tbox-sizing: border-box !important;\n        background-color: #333;\n      }\n    </style>\n\t').fb3dQFilter()).appendTo('head');
exports.default = FullScreenX;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

var _Utils = __webpack_require__(3);

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

_libs.PDFJS.GlobalWorkerOptions.workerSrc = (window.PDFJS_LOCALE ? PDFJS_LOCALE : __webpack_require__.i({"pdfJsWorker":"./flipbook/js/pdf.worker.js","pdfJsCMapUrl":"cmaps/"})).pdfJsWorker;
_libs.PDFJS.cMapUrl = (window.PDFJS_LOCALE ? PDFJS_LOCALE : __webpack_require__.i({"pdfJsWorker":"./flipbook/js/pdf.worker.js","pdfJsCMapUrl":"cmaps/"})).pdfJsCMapUrl;
_libs.PDFJS.cMapPacked = true;
_libs.PDFJS.disableAutoFetch = true;
_libs.PDFJS.disableStream = true;
_libs.PDFJS.disableRange = false;
_libs.PDFJS.imageResourcesPath = 'images/pdfjs/';
_libs.PDFJS.externalLinkTarget = _libs.PDFJS.LinkTarget.BLANK;
_libs.PDFJS.disableFontFace = undefined;

var Pdf = function () {
  function Pdf(src, loadingProgress, openOptions) {
    var _this = this;

    _classCallCheck(this, Pdf);

    this.src = _Utils2.default.normalizeUrl(src);
    this.handlerQueue = [];
    this.progresData = { loaded: -1, total: 1 };
    this.loadingProgress = loadingProgress;

    this.task = _libs.PDFJS.getDocument(_extends({
      url: this.src,
      rangeChunkSize: 512 * 1024,
      cMapUrl: _libs.PDFJS.cMapUrl,
      cMapPacked: _libs.PDFJS.cMapPacked,
      disableAutoFetch: _libs.PDFJS.disableAutoFetch,
      disableStream: _libs.PDFJS.disableStream,
      disableRange: _libs.PDFJS.disableRange,
      imageResourcesPath: _libs.PDFJS.imageResourcesPath,
      externalLinkTarget: _libs.PDFJS.externalLinkTarget,
      disableFontFace: _libs.PDFJS.disableFontFace
    }, openOptions));
    this.task.onProgress = function (data) {
      if (_this.loadingProgress) {
        var cur = Math.floor(100 * data.loaded / data.total),
            old = Math.floor(100 * _this.progresData.loaded / _this.progresData.total);
        if (cur !== old) {
          cur = isNaN(cur) ? 0 : cur;
          cur = cur > 100 ? 100 : cur;
          Promise.resolve().then(function () {
            _this.loadingProgress(cur);
          });
        }
      }
      _this.progresData = data;
    };
    this.task.promise.then(function (handler) {
      if (handler.numPages > 1) {
        Promise.all([handler.getPage(1), handler.getPage(2)]).then(function (pages) {
          _this.init(handler, pages);
        });
      } else {
        _this.init(handler);
      }
    }).catch(function (e) {
      console.error(e);
      if (_this.errorHandler) {
        _this.errorHandler(e);
      }
    });
  }

  Pdf.prototype.init = function init(handler, pages) {
    this.handler = handler;
    if (pages) {
      var p0s = Pdf.getPageSize(pages[0]),
          p1s = Pdf.getPageSize(pages[1]);
      this.doubledPages = p0s.width / p0s.height / (p1s.width / p1s.height) < 0.75;
    } else {
      this.doubledPages = false;
    }
    var done = Promise.resolve(handler);

    var _loop = function _loop() {
      if (_isArray) {
        if (_i >= _iterator.length) return 'break';
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) return 'break';
        _ref = _i.value;
      }

      var clb = _ref;

      done = done.then(function (handler) {
        clb(handler);
        return handler;
      });
    };

    for (var _iterator = this.handlerQueue.reverse(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      var _ret = _loop();

      if (_ret === 'break') break;
    }
  };

  Pdf.prototype.getPageType = function getPageType(n) {
    return !this.doubledPages || n === 0 || n === this.getPagesNum() - 1 ? 'full' : n & 1 ? 'left' : 'right';
  };

  Pdf.prototype.getPage = function getPage(n) {
    return this.handler.getPage(this.doubledPages ? Math.ceil(n / 2) + 1 : n + 1);
  };

  Pdf.prototype.getDestination = function getDestination(dest) {
    var _this2 = this;

    var destPromise = void 0;
    if (typeof dest === 'string') {
      destPromise = this.handler.getDestination(dest);
    } else {
      destPromise = Promise.resolve(dest);
    }
    destPromise = destPromise.then(function (dest) {
      return _this2.handler.getPageIndex(dest[0]);
    }).then(function (number) {
      return _this2.doubledPages ? number < 1 ? number : 1 + 2 * (number - 1) : number;
    }).catch(function () {
      return console.error('Bad bookmark');
    });
    return destPromise;
  };

  Pdf.prototype.dispose = function dispose() {
    this.handlerQueue.splice(0, this.handlerQueue.length);
    delete this.handler;
  };

  Pdf.prototype.setLoadingProgressClb = function setLoadingProgressClb(clb) {
    this.loadingProgress = clb;
  };

  Pdf.prototype.setErrorHandler = function setErrorHandler(eh) {
    this.errorHandler = eh;
  };

  Pdf.prototype.getPagesNum = function getPagesNum() {
    return this.handler ? this.doubledPages ? 2 * (this.handler.numPages - 1) : this.handler.numPages : undefined;
  };

  Pdf.getPageSize = function getPageSize(page) {
    var x = page.view[2] - page.view[0],
        y = page.view[3] - page.view[1],
        a = page.rotate * Math.PI / 180;
    return {
      width: Math.abs(x * Math.cos(a) - y * Math.sin(a)),
      height: Math.abs(x * Math.sin(a) + y * Math.cos(a))
    };
  };

  //   if(pages>1) {
  //   handler.getPage(2).
  //   then((page)=> {
  //     const size1 = Pdf.getPageSize(page);
  //     this.props.doubledPages = 2*size0.width===size1.width;
  //     this.ready();
  //   }).
  //   catch(()=> this.ready());
  // }
  // else {

  Pdf.prototype.getHandler = function getHandler(clb) {
    if (this.handler) {
      clb(this.handler);
    } else {
      this.handlerQueue.push(clb);
    }
  };

  return Pdf;
}();

exports.default = Pdf;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ThreeEventConverterFs = function () {
  ThreeEventConverterFs.objectsTest = function objectsTest(object1, object2) {
    return object1 && object2 ? object1.object === object2.object : false;
  };

  ThreeEventConverterFs.objectsAndFacesTest = function objectsAndFacesTest(object1, object2) {
    return object1 && object2 ? object1.object === object2.object && object1.face.materialIndex === object2.face.materialIndex : false;
  };

  function ThreeEventConverterFs(visualWorld) {
    var test = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ThreeEventConverterFs.objectsAndFacesTest;

    _classCallCheck(this, ThreeEventConverterFs);

    this.visual = visualWorld;
    this.coords = new _libs.THREE.Vector2();
    this.raycaster = this.visual.raycaster;
    this.camera = this.visual.camera;
    this.threes = [];
    this.test = test;
  }

  ThreeEventConverterFs.prototype.addThree = function addThree(three) {
    this.threes.push(three);
  };

  ThreeEventConverterFs.prototype.removeThree = function removeThree(three) {
    var i = this.threes.indexOf(three);
    if (~i) {
      this.threes.splice(i, 1);
    }
  };

  ThreeEventConverterFs.prototype.getObject = function getObject(e) {
    this.setCoordsFromEvent(e);
    this.raycaster.setFromCamera(this.coords, this.camera);
    var intersects = this.raycaster.intersectObjects(this.threes);
    return intersects[0];
  };

  return ThreeEventConverterFs;
}();

exports.default = ThreeEventConverterFs;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _BaseMathUtils = __webpack_require__(2);

var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ThreeUtils = function () {
  function ThreeUtils() {
    _classCallCheck(this, ThreeUtils);
  }

  ThreeUtils.vertices2UVs = function vertices2UVs(vertices, indeces, first, last, converClb) {
    var r = [];
    for (var i = first; i < last; ++i) {
      var vis = [indeces[i].a, indeces[i].b, indeces[i].c];
      for (var j = 0; j < vis.length; ++j) {
        if (!r[vis[j]]) {
          r[vis[j]] = converClb(vertices[vis[j]]);
        }
      }
    }
    return r;
  };

  ThreeUtils.computeFaceVertexUvs = function computeFaceVertexUvs(geometry, faces) {
    var uvs = [ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, 0, faces[0], function (p) {
      return new THREE.Vector2(p.x, 1 - p.z);
    }), ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[0], faces[1], function (p) {
      return new THREE.Vector2(1 - p.x, 1 - p.z);
    }), ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[1], faces[2], function (p) {
      return new THREE.Vector2(p.x, p.y);
    }), ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[2], faces[3], function (p) {
      return new THREE.Vector2(1 - p.x, p.y);
    }), ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[3], faces[4], function (p) {
      return new THREE.Vector2(p.z, p.y);
    }), ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[4], geometry.faces.length, function (p) {
      return new THREE.Vector2(1 - p.z, p.y);
    })];

    var uvsi = 0;
    for (var i = 0; i < geometry.faces.length; ++i) {
      uvsi += faces[uvsi] === i;
      var f = geometry.faces[i];
      f.materialIndex = uvsi;
      geometry.faceVertexUvs[0][i] = [uvs[uvsi][f.a], uvs[uvsi][f.b], uvs[uvsi][f.c]];
    }
  };

  ThreeUtils.createMarker = function createMarker(p, c, size) {
    var marker = new THREE.Mesh(new THREE.SphereGeometry(size), new THREE.MeshPhongMaterial({ color: c }));
    marker.position.set(p.x, p.y, p.z);
    return marker;
  };

  ThreeUtils.findUvTris = function findUvTris(geometry, ps, first, last) {
    var res = [];
    for (var _iterator = ps, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var p = _ref;

      var found = false;
      for (var i = first; i < last && !found; ++i) {
        var tri = geometry.faceVertexUvs[0][i];
        if (_BaseMathUtils2.default.isInsideConvPoly(tri, p)) {
          res.push({
            coefs: _BaseMathUtils2.default.computeInterpCoefs(tri, p),
            i: i
          });
          found = true;
        }
      }
      if (!found) {
        console.error('Bad point');
        res.push(undefined);
      }
    }
    return res;
  };

  ThreeUtils.findInternalVertices = function findInternalVertices(geometry, ps, first, last) {
    var res = {};
    for (var i = first; i < last; ++i) {
      var tri = geometry.faceVertexUvs[0][i],
          f = geometry.faces[i],
          vs = [f.a, f.b, f.c];
      for (var j = 0; j < tri.length; ++j) {
        if (res[vs[j]] === undefined && _BaseMathUtils2.default.isInsidePoly(ps, tri[j])) {
          res[vs[j]] = {
            p: tri[j],
            i: vs[j],
            n: f.vertexNormals[j]
          };
        }
      }
    }
    return Object.values(res);
  };

  return ThreeUtils;
}();

exports.default = ThreeUtils;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _Controller2 = __webpack_require__(15);

var _Controller3 = _interopRequireDefault(_Controller2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var WidgetController = function (_Controller) {
  _inherits(WidgetController, _Controller);

  function WidgetController(view, name) {
    _classCallCheck(this, WidgetController);

    var _this = _possibleConstructorReturn(this, _Controller.call(this));

    _this.name = name;
    _this.view = view;
    _this.visible = false;
    return _this;
  }

  WidgetController.prototype.togle = function togle() {
    this.visible = !this.visible;
    this.fireChange();
  };

  WidgetController.prototype.hide = function hide() {
    this.visible = false;
    this.fireChange();
  };

  WidgetController.prototype.fireChange = function fireChange() {
    if (this.onChange) {
      this.onChange();
    }
    this.updateView();
  };

  WidgetController.prototype.updateView = function updateView() {
    if (this.view) {
      this.view.setState(this.name, {
        enable: true,
        visible: this.visible,
        active: false
      });
    }
  };

  return WidgetController;
}(_Controller3.default);

exports.default = WidgetController;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Target = function () {
  function Target() {
    _classCallCheck(this, Target);
  }

  Target.test = function test(object1, object2) {
    return object1.target === object2.target;
  };

  return Target;
}();

exports.default = Target;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _Detector = __webpack_require__(48);

var _Detector2 = _interopRequireDefault(_Detector);

var _VisualWorld = __webpack_require__(70);

var _VisualWorld2 = _interopRequireDefault(_VisualWorld);

var _PdfLinksHandler = __webpack_require__(37);

var _PdfLinksHandler2 = _interopRequireDefault(_PdfLinksHandler);

var _Book = __webpack_require__(28);

var _Book2 = _interopRequireDefault(_Book);

var _BookView = __webpack_require__(31);

var _BookView2 = _interopRequireDefault(_BookView);

var _BookController = __webpack_require__(29);

var _BookController2 = _interopRequireDefault(_BookController);

var _PdfBookPropsBuilder = __webpack_require__(36);

var _PdfBookPropsBuilder2 = _interopRequireDefault(_PdfBookPropsBuilder);

var _ClbBookPropsBuilder = __webpack_require__(32);

var _ClbBookPropsBuilder2 = _interopRequireDefault(_ClbBookPropsBuilder);

var _LoadingController = __webpack_require__(56);

var _LoadingController2 = _interopRequireDefault(_LoadingController);

var _UserMessageController = __webpack_require__(68);

var _UserMessageController2 = _interopRequireDefault(_UserMessageController);

var _Search = __webpack_require__(61);

var _Search2 = _interopRequireDefault(_Search);

var _Bookmarks = __webpack_require__(47);

var _Bookmarks2 = _interopRequireDefault(_Bookmarks);

var _Thumbnails = __webpack_require__(66);

var _Thumbnails2 = _interopRequireDefault(_Thumbnails);

var _TocController = __webpack_require__(43);

var _TocController2 = _interopRequireDefault(_TocController);

var _ShareController = __webpack_require__(39);

var _ShareController2 = _interopRequireDefault(_ShareController);

var _BookPrinter = __webpack_require__(30);

var _BookPrinter2 = _interopRequireDefault(_BookPrinter);

var _AutoNavigator = __webpack_require__(26);

var _AutoNavigator2 = _interopRequireDefault(_AutoNavigator);

var _SoundsEnviroment = __webpack_require__(42);

var _SoundsEnviroment2 = _interopRequireDefault(_SoundsEnviroment);

var _FullScreenX = __webpack_require__(18);

var _FullScreenX2 = _interopRequireDefault(_FullScreenX);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_libs.$.fn.FlipBook = function (options) {
  var scene = {
    dispose: function dispose() {
      if (this.ready) {
        !scene.pdfLinksHandler || scene.pdfLinksHandler.dispose();
        delete scene.pdfLinksHandler;
        scene.sounds.dispose();
        delete scene.sounds;
        scene.userMessageCtrl.dispose();
        delete scene.userMessageCtrl;
        scene.tocCtrl.dispose();
        delete scene.tocCtrl;
        scene.thumbnails.dispose();
        delete scene.thumbnails;
        !scene.bookmarks || scene.bookmarks.dispose();
        delete scene.bookmarks;
        scene.shareCtrl.dispose();
        delete scene.shareCtrl;
        scene.ctrl.dispose();
        delete scene.ctrl;
        scene.bookPrinter.dispose();
        delete scene.bookPrinter;
        scene.book.dispose();
        delete scene.book;
        scene.propsBuilder.dispose();
        delete scene.propsBuilder;
        delete scene.bookBuilder;
        scene.visual.dispose();
        delete scene.visual;
        scene.view.dispose();
        delete scene.view;
        delete scene.dispose;
      } else {
        this.pendingDispose = true;
      }
    }
  };
  options = _extends({}, options);
  var parentContainer = this.length ? this[0] : (0, _libs.$)('<div>').appendTo('body');
  if (options.activateFullScreen) {
    _FullScreenX2.default.request(parentContainer);
  }
  scene.view = new _BookView2.default(parentContainer, function () {
    if (!_Detector2.default.webgl) {
      _Detector2.default.addGetWebGLMessage({ parent: scene.view.getView() });
    } else {
      scene.loadingCtrl = new _LoadingController2.default(scene.view, true, function (progress) {
        return progress === 0 ? (0, _libs.tr)('Please wait... the Application is Loading') : (0, _libs.tr)('PDF is Loading:') + ' ' + progress + '%';
      });
      scene.userMessageCtrl = new _UserMessageController2.default(scene.view);
      scene.visual = new _VisualWorld2.default(scene.view.getContainer().ownerDocument.defaultView, scene.view.getContainer().ownerDocument, scene.view.getView());
      if (options.propertiesCallback) {
        new _ClbBookPropsBuilder2.default(scene.visual, function () {
          return { type: 'blank' };
        }, 1, function (props) {
          props = options.propertiesCallback(props);
          var style = [];
          if (props.backgroundColor !== '') {
            style.push('background-color:#' + new THREE.Color(props.backgroundColor).getHexString());
          }
          if (props.backgroundImage !== '') {
            style.push('background-image:url(\'' + props.backgroundImage + '\')');
          }
          if (props.backgroundStyle !== '') {
            style.push(props.backgroundStyle);
          }
          if (style.length) {
            scene.view.getView().attr('style', style.join(';'));
          }
        });
      }
      scene.bookBuilder = function (props, sheets, pageCallback) {
        props.cssLayerProps = _extends({}, props.cssLayerProps, {
          scene: scene
        });
        if (options.propertiesCallback) {
          props = options.propertiesCallback(props);
        }
        scene.book = new _Book2.default(scene.visual, sheets, pageCallback, props);
        scene.bookPrinter = new _BookPrinter2.default(scene.visual, scene.book, (options.template || {}).printStyle);
        scene.loadingCtrl.dispose();
        delete scene.loadingCtrl;
        scene.ctrl = new _BookController2.default(scene.book, scene.view, options.controlsProps);
        scene.book.setInjector(function (w) {
          w.jQuery = w.$ = _libs.$;
          w.book = scene.book;
          w.bookCtrl = scene.ctrl;
          if (props.injector) {
            props.injector(w);
          }
        });
        scene.view.addHandler(scene.ctrl);
        scene.ctrl.setPrinter(scene.bookPrinter);
        var test = pageCallback(0);

        scene.thumbnails = new _Thumbnails2.default(scene.visual, scene.view.getThumbnailsView(), pageCallback, scene.book.getPages(), { kWtoH: props.width / props.height });
        scene.tocCtrl = new _TocController2.default(scene.view, scene.ctrl);
        scene.tocCtrl.setThumbnails(scene.thumbnails);
        if (options.outline) {
          scene.bookmarks = new _Bookmarks2.default(scene.view.getBookmarksView(), options.outline);
          scene.tocCtrl.setBookmarks(scene.bookmarks);
        }
        scene.ctrl.setTocCtrl(scene.tocCtrl);
        scene.view.addHandler(scene.tocCtrl);

        if (test.type === 'pdf') {
          scene.search = new _Search2.default(scene.view.getSearchView(), scene.book.getPages());
          scene.search.onQuery = scene.book.setQuery.bind(scene.book);
          scene.book.addEventListener('searchResults', function (e) {
            scene.search.setResults(e.results, e.lastPage);
          });
          scene.tocCtrl.setSearch(scene.search);
          scene.ctrl.setTocCtrl(scene.tocCtrl);

          scene.pdfLinksHandler = new _PdfLinksHandler2.default(test.src, scene.ctrl, scene.visual.element);
          scene.book.addEventListener('pdfAnnotation', scene.pdfLinksHandler.handleEvent.bind(scene.pdfLinksHandler));
          if (!scene.bookmarks) {
            test.src.getHandler(function (handler) {
              handler.getOutline().then(function (outline) {
                if (outline && outline.length) {
                  scene.bookmarks = new _Bookmarks2.default(scene.view.getBookmarksView(), outline);
                  scene.tocCtrl.setBookmarks(scene.bookmarks, test.src);
                  scene.ctrl.setTocCtrl(scene.tocCtrl);
                }
              });
            });
          }
          if (options.pdfLinks && options.pdfLinks.handler) {
            scene.pdfLinksHandler.setHandler(options.pdfLinks.handler);
          }
        }

        scene.sounds = new _SoundsEnviroment2.default(options.template);
        scene.ctrl.setSounds(scene.sounds);
        scene.sounds.subscribeFlips(scene.ctrl);

        scene.ready = true;
        var autoNavigator = new _AutoNavigator2.default(scene.visual, scene.ctrl, options.autoNavigation);
        scene.shareCtrl = new _ShareController2.default(scene.view, scene.ctrl, options.shareLinkBuilder ? options.shareLinkBuilder : function (page) {
          var u = void 0;
          if (new RegExp('([?&])' + autoNavigator.urlParam + '=[0-9]+').test(location.href)) {
            u = location.href.replace(new RegExp('([?&])' + autoNavigator.urlParam + '=[0-9]+'), '$1' + autoNavigator.urlParam + '=' + page);
          } else {
            u = location.href.split('#')[0] + (~location.href.indexOf('?') ? '&' : '?') + autoNavigator.urlParam + '=' + page + location.hash;
          }
          return u;
        });
        scene.ctrl.setShareCtrl(scene.shareCtrl);
        scene.view.addHandler(scene.shareCtrl);
        autoNavigator.dispose();
        if (options.ready) {
          options.ready(scene);
        }
        scene.ctrl.ready(scene);
        if (scene.pendingDispose) {
          scene.dispose();
        }
      };
      var onError = function onError(e) {
        !scene.loadingCtrl || scene.loadingCtrl.dispose();
        delete scene.loadingCtrl;
        scene.userMessageCtrl.setError(e.message);
      };
      if (options.pdf) {
        scene.propsBuilder = new _PdfBookPropsBuilder2.default(options.pdf, scene.bookBuilder, options.bookStyle, options.pdfOpenOptions);
        scene.propsBuilder.pdf.setLoadingProgressClb(scene.loadingCtrl.setProgress.bind(scene.loadingCtrl));
        scene.propsBuilder.pdf.setErrorHandler(options.error || onError);
      } else if (options.pageCallback) {
        if (options.onPageCallbackError) {
          options.onPageCallbackError.push(options.error || onError);
        }
        scene.propsBuilder = new _ClbBookPropsBuilder2.default(scene.visual, options.pageCallback, options.pages, scene.bookBuilder, options.bookStyle);
      } else {
        scene.propsBuilder = new _ClbBookPropsBuilder2.default(scene.visual, _Book2.default.pageCallback, 6, scene.bookBuilder, options.bookStyle);
      }
    }
  }, options.template);
  return scene;
};

(0, _libs.$)(function () {
  var containers = (0, _libs.$)('.flip-book-container');
  for (var i = 0; i < containers.length; ++i) {
    var jContainer = (0, _libs.$)(containers[i]),
        src = jContainer.attr('src');
    if (!!src) {
      jContainer.FlipBook({ pdf: src });
    }
  }
});

window.jQuery = window.$ = _libs.$;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (!Array.prototype.fill) {
  Array.prototype.fill = function (value) {

    // Шаги 1-2.
    if (this == null) {
      throw new TypeError('this is null or not defined');
    }

    var O = Object(this);

    // Шаги 3-5.
    var len = O.length >>> 0;

    // Шаги 6-7.
    var start = arguments[1];
    var relativeStart = start >> 0;

    // Шаг 8.
    var k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);

    // Шаги 9-10.
    var end = arguments[2];
    var relativeEnd = end === undefined ? len : end >> 0;

    // Шаг 11.
    var final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len);

    // Шаг 12.
    while (k < final) {
      O[k] = value;
      k++;
    }

    // Шаг 13.
    return O;
  };
}

if (!Array.prototype.find) {
  Object.defineProperty(Array.prototype, 'find', {
    value: function value(predicate) {
      'use strict';

      if (this == null) {
        throw new TypeError('Array.prototype.find called on null or undefined');
      }
      if (typeof predicate !== 'function') {
        throw new TypeError('predicate must be a function');
      }
      var list = Object(this);
      var length = list.length >>> 0;
      var thisArg = arguments[1];
      var value;

      for (var i = 0; i < length; i++) {
        value = list[i];
        if (predicate.call(thisArg, value, i, list)) {
          return value;
        }
      }
      return undefined;
    }
  });
}

if (!Array.prototype.findIndex) {
  Array.prototype.findIndex = function (predicate) {
    if (this == null) {
      throw new TypeError('Array.prototype.findIndex called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return i;
      }
    }
    return -1;
  };
}

if (!Object.values) {
  Object.values = function values(O) {
    return Object.keys(O).map(function (name) {
      return O[name];
    }) || [];
  };
}

if (!RegExp.escape) {
  RegExp.escape = function (s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  };
}

if (!String.prototype.replaceAll) {
  String.prototype.replaceAll = function (search, replace) {
    return this.replace(new RegExp(RegExp.escape(search), 'g'), replace);
  };
}

if (!String.prototype.fb3dQFilter) {
  String.prototype.fb3dQFilter = function () {
    return this.replace(/(\n|\t|  )/g, '');
  };
}

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AutoNavigator = function () {
  function AutoNavigator(context, bookCtrl) {
    var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, AutoNavigator);

    props = _extends({}, props, {
      urlParam: props.urlParam || 'fb3d-page',
      navigates: props.navigates === undefined ? 1 : props.navigates,
      pageN: props.pageN || 0
    });
    this.props = props;
    this.context = context;
    this.bookCtrl = bookCtrl;
    this.urlParam = props.urlParam;
    this.pageN = props.pageN;
    this.wnd = context.wnd;

    this.wnd.fb3d = _extends({}, this.wnd.fb3d);
    this.wnd.fb3d.navigator = _extends({}, this.wnd.fb3d.navigator);
    this.navigator = this.wnd.fb3d.navigator[this.urlParam] = _extends({}, this.wnd.fb3d.navigator[this.urlParam]);
    this.navigator.instances = (this.navigator.instances || 0) + 1;

    if (this.navigator.instances <= this.props.navigates) {
      this.bookCtrl.goToPage(this.getPageNumber());
    }
  }

  AutoNavigator.prototype.dispose = function dispose() {};

  AutoNavigator.prototype.getParameterByName = function getParameterByName(name, url) {
    if (!url) {
      url = window.location.href;
    }
    name = name.replace(/[\[\]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^]*)|&|#|$)'),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
  };

  AutoNavigator.prototype.getPageNumber = function getPageNumber() {
    var number = parseInt(this.pageN);
    if (isNaN(number) || number === 0) {
      number = this.getParameterByName(this.urlParam);
      number = parseInt(number);
      if (isNaN(number)) {
        number = 1;
      }
    }
    return number - 1;
  };

  return AutoNavigator;
}();

exports.default = AutoNavigator;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _MathUtils = __webpack_require__(5);

var _MathUtils2 = _interopRequireDefault(_MathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Binder = function () {
  function Binder(visual, p) {
    var _this = this;

    var hidden = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    _classCallCheck(this, Binder);

    this.visual = visual;
    this.p = _extends({}, p, {
      backSize: 2 * p.cover.depth + p.sheets * p.page.depth
    });
    this.OZ = new _libs.THREE.Vector3(0, 0, 1);
    this.backG = new _libs.THREE.BoxGeometry(0.001, this.p.backSize, p.cover.height);

    // const color = this.p.cover.side==='color'? {color: p.cover.color}: {
    //   color: p.cover.color,
    //   opacity: 0,
    //   transparent: true
    // };
    var color = { color: p.cover.color };

    var transparent = { opacity: 0, transparent: true };
    this.materials = [new _libs.THREE.MeshPhongMaterial(color), new _libs.THREE.MeshPhongMaterial(color), new _libs.THREE.MeshPhongMaterial(transparent), //{opacity: 0, transparent: true}
    new _libs.THREE.MeshPhongMaterial(transparent), new _libs.THREE.MeshPhongMaterial(transparent), new _libs.THREE.MeshPhongMaterial(transparent)];

    var backM = new _libs.THREE.Mesh(this.backG, this.materials);

    if (p.cover.binderTexture !== '') {
      this.visual.textureLoader.load(p.cover.binderTexture, function (texture) {
        _this.materials[1].color.setHex(0xFFFFFF);
        _this.materials[1].map = texture;
        texture.minFilter = _libs.THREE.LinearFilter;
        texture.needsUpdate = true;
        _this.materials[1].needsUpdate = true;
      });
    }

    this.three = new _libs.THREE.Object3D();
    this.back = new _libs.THREE.Object3D();
    this.backRT = new _libs.THREE.Object3D();
    this.backRR = new _libs.THREE.Object3D();
    this.backLT = new _libs.THREE.Object3D();
    this.backLR = new _libs.THREE.Object3D();
    this.leftPivot = new _libs.THREE.Object3D();
    this.rightPivot = new _libs.THREE.Object3D();

    if (!hidden) {
      backM.position.set(.5 * (p.cover.depth - 0.001), 0, 0);
      this.back.add(backM);
    }
    this.back.add(this.leftPivot);
    this.back.add(this.rightPivot);
    this.backRT.add(this.back);
    this.backRR.add(this.backRT);
    this.backLT.add(this.backRR);
    this.backLR.add(this.backLT);
    this.three.add(this.backLR);
  }

  Binder.prototype.dispose = function dispose() {
    for (var _iterator = this.materials, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var m = _ref;

      if (m.map) {
        m.map = null;
        m.needsUpdate = true;
      }
      m.dispose();
    }
    delete this.materials;
    this.backG.dispose();
  };

  Binder.prototype.set = function set(angle) {
    var right = void 0,
        left = void 0;
    if (angle > Math.PI / 2) {
      right = Math.PI / 2;
      left = angle - Math.PI / 2;
    } else {
      right = angle;
      left = 0;
    }
    var p = this.p,
        tr1 = { x: -0.5 * p.cover.depth, y: 0.5 * p.backSize - p.cover.depth };
    this.backRT.position.set(tr1.x, tr1.y, 0);
    this.backRR.position.set(-tr1.x, -tr1.y, 0);
    this.backRR.quaternion.setFromAxisAngle(this.OZ, right);

    var tr2 = { x: p.backSize - 2 * p.cover.depth - 0.5 * p.cover.depth, y: 0.5 * p.backSize - p.cover.depth };
    this.backLT.position.set(tr2.x, tr2.y, 0);
    this.backLR.position.set(-tr2.x, -tr2.y, 0);
    this.backLR.quaternion.setFromAxisAngle(this.OZ, left);
  };

  Binder.prototype.setLeft = function setLeft(angle) {
    var PI = Math.PI;
    this.leftPivot.position.set(_MathUtils2.default.interpolateLinear([-PI, -PI / 2], [0, this.p.cover.depth], angle), 0.5 * this.p.backSize - 0.5 * this.p.cover.depth, 0);
    this.leftPivot.quaternion.setFromAxisAngle(this.OZ, angle);
  };

  Binder.prototype.setRight = function setRight(angle) {
    var PI = Math.PI;
    this.rightPivot.position.set(_MathUtils2.default.interpolateLinear([-PI / 2, 0], [this.p.cover.depth, 0], angle), -0.5 * this.p.backSize + 0.5 * this.p.cover.depth, 0);
    this.rightPivot.quaternion.setFromAxisAngle(this.OZ, angle);
  };

  Binder.prototype.joinLeftCover = function joinLeftCover(cover) {
    cover.three.position.set(0, -0.5 * this.p.cover.depth, 0);
    this.leftPivot.add(cover.three);
  };

  Binder.prototype.disconnectLeftCover = function disconnectLeftCover(cover) {
    this.leftPivot.remove(cover.three);
  };

  Binder.prototype.joinRightCover = function joinRightCover(cover) {
    cover.three.position.set(0, -0.5 * this.p.cover.depth, 0);
    this.rightPivot.add(cover.three);
  };

  Binder.prototype.disconnectRightCover = function disconnectRightCover(cover) {
    this.rightPivot.remove(cover.three);
  };

  return Binder;
}();

exports.default = Binder;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _book = __webpack_require__(11);

var _GraphUtils = __webpack_require__(4);

var _GraphUtils2 = _interopRequireDefault(_GraphUtils);

var _Binder = __webpack_require__(27);

var _Binder2 = _interopRequireDefault(_Binder);

var _Cover = __webpack_require__(33);

var _Cover2 = _interopRequireDefault(_Cover);

var _SheetBlock = __webpack_require__(10);

var _SheetBlock2 = _interopRequireDefault(_SheetBlock);

var _SheetPhysics = __webpack_require__(41);

var _SheetPhysics2 = _interopRequireDefault(_SheetPhysics);

var _PageManager = __webpack_require__(35);

var _PageManager2 = _interopRequireDefault(_PageManager);

var _CSSLayer = __webpack_require__(13);

var _CSSLayer2 = _interopRequireDefault(_CSSLayer);

var _CssLayersManager = __webpack_require__(34);

var _CssLayersManager2 = _interopRequireDefault(_CssLayersManager);

var _SearchEngine = __webpack_require__(38);

var _SearchEngine2 = _interopRequireDefault(_SearchEngine);

var _CustomEventConverter = __webpack_require__(16);

var _CustomEventConverter2 = _interopRequireDefault(_CustomEventConverter);

var _CircleTarget = __webpack_require__(72);

var _CircleTarget2 = _interopRequireDefault(_CircleTarget);

var _YouTubeApi = __webpack_require__(71);

var _YouTubeApi2 = _interopRequireDefault(_YouTubeApi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Book = function (_THREE$EventDispatche) {
  _inherits(Book, _THREE$EventDispatche);

  // pageCallback samples

  // (n)=> ({
  //   type: 'image',
  //   src: 'sample.png',
  //   interactive: false
  // });
  //
  // (n)=> ({
  //   type: 'html',
  //   src: 'sample.html',
  //   interactive: true
  // });
  //
  // const pdf = new Pdf('sample.pdf');
  // (n)=> ({
  //   type: 'pdf',
  //   src: pdf,
  //   interactive: false
  // });

  function Book(visual, sheets, pageCallback, props) {
    _classCallCheck(this, Book);

    var _this = _possibleConstructorReturn(this, _THREE$EventDispatche.call(this));

    _this.cssFs = {
      play: function play(player) {
        if (player.play) {
          player.fb3dNoPlay = false;
          (player.play() || { catch: function _catch() {
              return undefined;
            } }).catch(function (e) {
            if (!player.fb3dNoPlay && e.name === 'NotAllowedError') {
              _this.pendingPlayers.push(player);
              _this.dispatchEvent({
                type: 'pendingPlayers'
              });
            }
          });
        } else if ((0, _libs.$)(player).hasClass('youtube')) {
          var p = player.player;
          player.fb3dNoPlay = false;
          if (p && p.playVideo) {
            p.playVideo();
          } else {
            setTimeout(function () {
              if (!player.fb3dNoPlay) {
                _this.cssFs.play(player);
              }
            }, 200);
          }
        }
      },
      pause: function pause(player) {
        if (player.pause) {
          player.fb3dNoPlay = true;
          player.pause();
        } else if ((0, _libs.$)(player).hasClass('youtube')) {
          var p = player.player;
          player.fb3dNoPlay = true;
          if (p && p.pauseVideo) {
            p.pauseVideo();
          }
        }
      }
    };

    _this.visual = visual;
    _this.mouseController = true;
    _this.p = _extends({}, _this.prepareProps(_extends({}, props, { sheets: sheets })), {
      pageCallback: pageCallback,
      zoom: 1,
      singlePage: false,
      autoResolution: {
        enabled: false
      }
    });
    _this.userDirection = {
      lastTopPage: 0,
      direction: 1
    };
    _this.pageManager = new _PageManager2.default(visual, _this, _this.p);
    _CSSLayer2.default.init(visual.doc);
    _this.layerManager = new _CssLayersManager2.default(_this);
    _this.searchEngine = new _SearchEngine2.default(pageCallback, 2 * (sheets + 2));
    _this.searchEngine.onPageHitsChanged = function (page, query) {
      _this.pageManager.refreshPageQuery(page, query);
      _this.dispatchEvent({
        type: 'searchResults',
        results: _this.searchEngine.results,
        lastPage: page,
        query: query
      });
    };

    _this.three = new _libs.THREE.Object3D();

    _this.binder = new _Binder2.default(visual, _this.p, _this.getPages() < 3);
    _this.three.add(_this.binder.three);

    var coverP = {
      left: _this.p.cover,
      right: _this.p.cover
    };
    _this.enableMouse(_this.p.interactiveCorners);
    if (_this.getPages() === 2) {
      _this.enableMouse(false);
      coverP[_this.p.rtl ? 'left' : 'right'] = _extends({}, _this.p.cover, {
        width: 1e-6,
        height: 1e-6
      });
    }
    _this.leftCover = new _Cover2.default(visual, _extends({}, _this.p, { cover: coverP.left, setTexture: _this.setLeftCoverTexture.bind(_this) }), Math.PI / 2, 'opened');
    _this.binder.joinLeftCover(_this.leftCover);
    _this.subscribeSheetBlock(_this.leftCover, 0);
    _this.rightCover = new _Cover2.default(visual, _extends({}, _this.p, { cover: coverP.right, setTexture: _this.setRightCoverTexture.bind(_this) }), 0, 'closed');
    _this.binder.joinRightCover(_this.rightCover);
    _this.subscribeSheetBlock(_this.rightCover, 2 * (_this.p.sheets + 1));

    _this.threeSheetBlocks = new _libs.THREE.Object3D();
    _this.three.add(_this.threeSheetBlocks);
    _this.threeSheetBlocks.position.set(0.5 * _this.p.cover.depth - 0.5 * sheets * _this.p.page.depth, -0.5 * sheets * _this.p.page.depth, 0);

    _this.sheetBlocks = [];
    if (sheets > 0) {
      _this.addSheetBlock(0, new _SheetBlock2.default(visual, _extends({}, _this.p, { setTexture: _this.setPageTexture.bind(_this) }), 0, sheets, 0, 'closed'));
    }
    _this.reducePagesWidth(true);

    _this.set(Math.PI / 2);
    _this.openedBox = new _libs.THREE.Box3().setFromObject(_this.leftCover.three);
    _this.openedBox.union(new _libs.THREE.Box3().setFromObject(_this.rightCover.three));

    _this.angle = _this.p.rtl ? Math.PI : 0;
    _this.closedAngle = 0;
    _this.set(_this.angle, 0);
    _this.lastMousePos = {
      t: 0
    };

    _this.pendingPlayers = [];

    _this.three.position.set(-0.5 * _this.p.cover.depth + 0.5 * sheets * _this.p.page.depth, 0, 0);
    _this.sheetPhysics = new _SheetPhysics2.default(_this.p.page.width / _this.p.scale, _this.p.gravity, _this.p.page.cornerDeviation);

    _this.binds = {
      update: _this.update.bind(_this),
      lastMousePos: function lastMousePos(e) {
        _this.lastMousePos = _extends({}, _this.lastMousePos, {
          pageX: e.pageX,
          pageY: e.pageY
        });
      }
    };
    _this.visual.addRenderCallback(_this.binds.update);
    (0, _libs.$)(_this.visual.element).on('mousemove', _this.binds.lastMousePos);

    _this.binds.onPickCallback = _this.onPickCallback.bind(_this);
    _this.visual.drag.onPickCallback = _this.binds.onPickCallback;
    _this.binds.onDragCallback = _this.onDragCallback.bind(_this);
    _this.visual.drag.onDragCallback = _this.binds.onDragCallback;
    _this.binds.onReleaseCallback = _this.onReleaseCallback.bind(_this);
    _this.visual.drag.onReleaseCallback = _this.binds.onReleaseCallback;

    _this.dragAngle = 0.05;
    _this.tmp = {
      boxs: [new _libs.THREE.Box3(), new _libs.THREE.Box3()]
    };

    _this.visual.addObject(_this.three);

    _this.tmpBox = new _libs.THREE.Box3();
    _this.bookShadowMaterial = new _libs.THREE.MeshPhongMaterial({ color: 0x000000, side: _libs.THREE.DoubleSide, transparent: true });
    _this.bookShadow = new _libs.THREE.Mesh(new _libs.THREE.PlaneGeometry(1, 1).rotateX(-Math.PI / 2), _this.bookShadowMaterial);
    _this.visual.addObject(_this.bookShadow);
    _this.calculateShadow();

    _this.visual.addEventListener('resize', _this.pageManager.refreshZoom.bind(_this.pageManager));

    setTimeout(function () {
      if (!_this.isProcessing()) {
        _this.notifyBeforeAnimation();
        _this.notifyAfterAnimation();
      }
    }, 100);

    _this.updateThree();
    return _this;
  }

  Book.prototype.calculateShadow = function calculateShadow() {
    var box = this.tmpBox;
    box.setFromObject(this.three);
    this.bookShadow.scale.set(box.max.x - box.min.x, 1, box.max.z - box.min.z);
    var dd = .015;
    this.bookShadow.position.set(.5 * (box.max.x + box.min.x) - dd, box.min.y - .1 * dd, .5 * (box.max.z + box.min.z) - dd);
    this.bookShadowMaterial.opacity = .03;
    this.visual.shadowPlace.position.set(0, box.min.y - dd, 0);
  };

  Book.prototype.dispose = function dispose() {
    this.visual.removeObject(this.three);
    this.sheetPhysics.dispose();
    delete this.visual.drag.onPickCallback;
    delete this.visual.drag.onDragCallback;
    delete this.visual.drag.onReleaseCallback;
    (0, _libs.$)(this.visual.element).off('mousemove', this.binds.lastMousePos);
    this.visual.removeRenderCallback(this.binds.update);
    this.removeSheetBlocks(0, this.sheetBlocks.length);
    this.binder.disconnectLeftCover(this.leftCover);
    this.removeSheetBlock(this.leftCover);
    this.binder.disconnectRightCover(this.rightCover);
    this.removeSheetBlock(this.rightCover);
    this.binder.dispose();
    this.layerManager.dispose();
    _CSSLayer2.default.dispose();
    this.pageManager.dispose();
  };

  // publics {

  Book.prototype.hasPendingPlayers = function hasPendingPlayers() {
    return this.pendingPlayers.length > 0;
  };

  Book.prototype.resolvePendingPlayers = function resolvePendingPlayers() {
    for (var _iterator = this.pendingPlayers, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var p = _ref;

      p.play();
    }
    this.pendingPlayers = [];
    this.dispatchEvent({
      type: 'pendingPlayers'
    });
  };

  Book.prototype.updateThree = function updateThree() {
    this.three.userData.needsUpdate = true;
  };

  Book.prototype.setAutoResolution = function setAutoResolution(autoResolution) {
    this.p.autoResolution = _extends({}, this.p.autoResolution, autoResolution);
  };

  Book.prototype.setZoom = function setZoom(zoom, singlePage) {
    if (Math.abs(this.p.zoom - zoom) > 1e-3 || singlePage !== this.p.singlePage) {
      this.p.zoom = zoom;
      this.p.singlePage = singlePage;
      this.pageManager.refreshZoom();
    }
  };

  Book.prototype.getPageCallback = function getPageCallback() {
    return this.p.pageCallback;
  };

  Book.prototype.setQuery = function setQuery(query) {
    this.searchEngine.setQuery(query);
  };

  Book.prototype.isProcessing = function isProcessing() {
    return this.sheetPhysics.getSize() !== 0;
  };

  Book.prototype.getPages = function getPages() {
    return this.p.pages;
  };

  Book.prototype.getBookPages = function getBookPages() {
    return 4 + 2 * this.p.sheets;
  };

  Book.prototype.setFlipProgressClb = function setFlipProgressClb(clb) {
    this.p.flipProgressClb = clb;
  };

  Book.prototype.setInjector = function setInjector(injector) {
    this.p.injector = injector;
  };

  Book.prototype.isActivePage = function isActivePage(n) {
    var res = true;
    if (n > 1 && n < this.getBookPages() - 2) {
      for (var _iterator2 = this.sheetBlocks, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var b = _ref2;

        if (n - 2 > 2 * b.p.first && n - 2 < 2 * b.p.last - 1) {
          res = false;
          break;
        }
      }
    }
    return res;
  };

  Book.prototype.getBlockByPage = function getBlockByPage(n) {
    var block = void 0;
    if (n < 2) {
      block = this.leftCover;
    } else if (n < 2 * (this.p.sheets + 1)) {
      for (var _iterator3 = this.sheetBlocks, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
        var _ref3;

        if (_isArray3) {
          if (_i3 >= _iterator3.length) break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) break;
          _ref3 = _i3.value;
        }

        var b = _ref3;

        if (n - 2 >= 2 * b.p.first && n - 2 < 2 * b.p.last) {
          block = b;
          break;
        }
      }
    } else {
      block = this.rightCover;
    }
    return block;
  };

  Book.prototype.getBlockPages = function getBlockPages(block) {
    var range = void 0;
    switch (block) {
      case this.leftCover:
        {
          range = [0, 1];
          break;
        }
      case this.rightCover:
        {
          range = [2 * (this.p.sheets + 1), 2 * (this.p.sheets + 1) + 1];
          break;
        }
      default:
        {
          range = block ? [2 * (block.p.first + 1), 2 * (block.p.last + 1) - 1] : undefined;
        }
    }
    return range;
  };

  Book.prototype.getPage = function getPage() {
    var PI = Math.PI;
    var p = void 0;
    if (this.angle === PI / 2 || this.angle === 3 * PI / 2) {
      for (var _iterator4 = this.sheetBlocks, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
        var _ref4;

        if (_isArray4) {
          if (_i4 >= _iterator4.length) break;
          _ref4 = _iterator4[_i4++];
        } else {
          _i4 = _iterator4.next();
          if (_i4.done) break;
          _ref4 = _i4.value;
        }

        var block = _ref4;

        if (block.angle <= PI / 2) {
          p = this.getBlockPages(block)[0] - 1;
          break;
        }
      }
      if (!p) {
        p = this.getBookPages() - 3;
      }
    } else if (this.angle < PI / 2) {
      p = 0;
    } else if (this.angle > 3 * PI / 2) {
      p = 1;
    } else if (this.angle < PI) {
      p = this.getBookPages() - 3;
    } else if (this.angle >= PI) {
      p = this.getBookPages() - 1;
    }
    return p;
  };

  Book.prototype.getTopPages = function getTopPages() {
    var p = this.getPage();
    return p === 0 || p === this.getBookPages() - 1 ? [p] : [p, p + 1];
  };

  Book.prototype.getPageState = function getPageState(n) {
    return this.pageManager.getPageState(n);
  };

  Book.prototype.enableLoadingAnimation = function enableLoadingAnimation(enable) {
    this.pageManager.enableLoadingAnimation(enable);
  };

  Book.prototype.getLeftFlipping = function getLeftFlipping() {
    var block = void 0;
    var left = this.sheetBlocks[0],
        PI = Math.PI;
    if (this.angle === PI) {
      if (this.getPages() > 1) {
        block = this.rightCover;
      }
    } else {
      if (left && left.state === 'closed' && left.angle > PI / 2) {
        block = left;
      } else if (this.angle === PI / 2 || this.angle === 3 * PI / 2) {
        if (!this.p.rtl || this.getPages() === this.getBookPages()) {
          block = this.leftCover;
        }
      }
    }
    return block;
  };

  Book.prototype.getRightFlipping = function getRightFlipping() {
    var block = void 0;
    var right = this.sheetBlocks[this.sheetBlocks.length - 1],
        PI = Math.PI;
    if (this.angle === 0) {
      if (this.getPages() > 1) {
        block = this.leftCover;
      }
    } else {
      if (right && right.state === 'closed' && right.angle <= PI / 2) {
        block = right;
      } else if (this.angle === PI / 2 || this.angle === 3 * PI / 2) {
        if (this.p.rtl || this.getPages() === this.getBookPages()) {
          block = this.rightCover;
        }
      }
    }
    return block;
  };

  Book.prototype.getClosedBlockAngle = function getClosedBlockAngle(angle) {
    var closedAngle = void 0,
        PI = Math.PI;

    if (this.leftCover.physicId) {
      var test = void 0;
      try {
        test = Math.abs(this.sheetPhysics.getParametr(this.leftCover.physicId, 'angle') - angle);
      } catch (e) {
        test = 0;
      }
      closedAngle = angle > PI / 2 || test > PI / 6 ? PI / 2 : this.closedAngle;
    } else if (this.rightCover.physicId) {
      var _test = void 0;
      try {
        _test = Math.abs(this.sheetPhysics.getParametr(this.rightCover.physicId, 'angle') - angle);
      } catch (e) {
        _test = 0;
      }
      closedAngle = angle < PI / 2 || _test > PI / 6 ? PI / 2 + 1e-7 : this.closedAngle;
    } else {
      closedAngle = PI / 2 + (angle !== 0) * 1e-7;
    }

    return {
      openedAngle: angle,
      closedAngle: closedAngle,
      binderTurn: this.closedAngle
    };
  };

  Book.prototype.flipLeft = function flipLeft() {
    var _this2 = this;

    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var progressClb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.p.flipProgressClb;

    if (this.flipDisabled) {
      return undefined;
    }
    if (!this.sheetPhysics.getSize()) {
      this.flipDirection = 'left';
    }
    var block = void 0,
        res = void 0;
    if (this.sheetPhysics.getSize() < 25) {
      var left = this.sheetBlocks[0],
          PI = Math.PI;
      if (this.angle === PI) {
        res = this.connectPhysics(block = this.rightCover, this.p.cover.mass, PI, -this.p.cover.startVelocity, this.p.cover.flexibility, 0, function (angle, height) {
          return _this2.set(3 * PI / 2 - angle / 2, height);
        }, function (angle, height) {
          _this2.set(3 * PI / 2 - angle / 2, 0);
          _this2.setSheetBlocks(angle ? PI : PI / 2 + 1e-7, 'closed');
        }, progressClb);
      } else {
        if (left && left.state === 'closed' && left.angle > PI / 2) {
          block = size < left.getSize() ? this.splitSheetBlock(0, left.getSize() - size)[1] : left;
          res = this.connectPhysics(block, this.p.page.mass * block.getSize(), PI, -this.p.page.startVelocity, this.p.page.flexibility, 0, function (angle, height) {
            return block.set(_this2.getClosedBlockAngle(angle), 'opened', height, block.p.first, block.p.last, _this2.flipDirection);
          }, Book.finishAnimationClb.bind({ book: this, block: block }), progressClb);
        } else if (this.angle === PI / 2 || this.angle === 3 * PI / 2) {
          res = this.connectPhysics(block = this.leftCover, this.p.cover.mass, PI, -this.p.cover.startVelocity, this.p.cover.flexibility, 0, function (angle, height) {
            _this2.set(2 * PI - angle / 2, height);
            if (angle > PI / 2) {
              _this2.setSheetBlocks(angle ? PI / 2 : 0, 'closed');
            }
          }, function (angle, height) {
            return _this2.set(angle === 0 ? 0 : 2 * PI - angle / 2, 0);
          }, progressClb);
        }
      }
    }
    return res;
  };

  Book.prototype.flipRight = function flipRight() {
    var _this3 = this;

    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var progressClb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.p.flipProgressClb;

    if (this.flipDisabled) {
      return undefined;
    }
    if (!this.sheetPhysics.getSize()) {
      this.flipDirection = 'right';
    }
    var block = void 0,
        res = void 0;
    if (this.sheetPhysics.getSize() < 25) {
      var right = this.sheetBlocks[this.sheetBlocks.length - 1],
          PI = Math.PI;
      if (this.angle === 0) {
        res = this.connectPhysics(block = this.leftCover, this.p.cover.mass, 0, this.p.cover.startVelocity, this.p.cover.flexibility, 0, function (angle, height) {
          return _this3.set(angle / 2, height);
        }, function (angle, height) {
          _this3.set(angle / 2, 0);
          _this3.setSheetBlocks(angle ? PI / 2 : 0, 'closed');
        }, progressClb);
      } else {
        if (right && right.state === 'closed' && right.angle <= PI / 2) {
          block = size < right.getSize() ? this.splitSheetBlock(this.sheetBlocks.length - 1, size)[0] : right;
          res = this.connectPhysics(block, this.p.page.mass * block.getSize(), 0, this.p.page.startVelocity, this.p.page.flexibility, 0, function (angle, height) {
            return block.set(_this3.getClosedBlockAngle(angle), 'opened', height, block.p.first, block.p.last, _this3.flipDirection);
          }, Book.finishAnimationClb.bind({ book: this, block: block }), progressClb);
        } else if (this.angle === PI / 2 || this.angle === 3 * PI / 2) {
          res = this.connectPhysics(block = this.rightCover, this.p.cover.mass, 0, this.p.cover.startVelocity, this.p.cover.flexibility, 0, function (angle, height) {
            _this3.set(PI / 2 + angle / 2, height);
            if (angle < PI / 2) {
              _this3.setSheetBlocks(PI / 2 + 1e-7, 'closed');
            }
          }, function (angle, height) {
            return _this3.set(PI / 2 + angle / 2, 0);
          }, progressClb);
        }
      }
    }
    return res;
  };

  // }

  Book.prototype.clearHoverInfo = function clearHoverInfo() {
    this.pageManager.turnOnEvents();
    delete this.hoverInfo.block.force;
    delete this.hoverInfo.block.cornerForce;
    delete this.hoverInfo;
  };

  Book.prototype.xSegment = function xSegment() {
    var boxs = this.tmp.boxs,
        res = {};
    if (this.leftCover.physicId) {
      boxs[0].setFromObject(this.rightCover.three);
      res.min = -(res.max = boxs[0].max.x);
    } else if (this.rightCover.physicId) {
      boxs[0].setFromObject(this.leftCover.three);
      res.max = -(res.min = boxs[0].min.x);
    } else {
      boxs[0].setFromObject(this.leftCover.three);
      boxs[1].setFromObject(this.rightCover.three);
      boxs[0].union(boxs[1]);
      res.min = boxs[0].min.x;
      res.max = boxs[0].max.x;
    }
    return res;
  };

  Book.prototype.computeTarget = function computeTarget(point) {
    var x = point.x,
        y = point.y,
        seg = this.xSegment(),
        angle = void 0;

    angle = (seg.max - x) / (seg.max - seg.min) * Math.PI;
    // angle = Math.acos(x/Math.sqrt(x*x+y*y));
    return Math.max(this.dragAngle, Math.min(Math.PI - this.dragAngle, angle));
  };

  Book.prototype.onPickCallback = function onPickCallback(object) {
    var res = false;
    var block = object.object.userData.self,
        p = _extends({}, object.uv),
        i = object.face.materialIndex;
    if (i < 2) {
      p.x = i === 0 ? p.x : 1 - p.x;
      if (block.cornerTarget.testIntersection(null, p) && block.physicId) {
        if (this.hoverInfo) {
          this.clearHoverInfo();
        }
        block.force = _SheetPhysics2.default.dragForceClb;
        block.cornerForce = _SheetPhysics2.default.getDragCornerForceClb(this.computeTarget(object.point));
        this.dragInfo = {
          object: object,
          block: block
        };
        res = true;
        this.pageManager.turnOffEvents();
      }
    }
    return res;
  };

  Book.prototype.onDragCallback = function onDragCallback(point) {
    var block = this.dragInfo.block,
        p = block.getProps();
    block.force = _SheetPhysics2.default.dragForceClb;
    block.cornerForce = _SheetPhysics2.default.getDragCornerForceClb(this.computeTarget(point));
    return true;
  };

  Book.prototype.onReleaseCallback = function onReleaseCallback() {
    delete this.dragInfo.block.force;
    delete this.dragInfo.block.cornerForce;
    delete this.dragInfo;
    this.pageManager.turnOnEvents();
  };

  Book.prototype.getFlipping = function getFlipping(i) {
    return i ? this.getLeftFlipping() : this.getRightFlipping();
  };

  Book.prototype.flip = function flip(i) {
    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

    return i ? this.flipLeft(size) : this.flipRight(size);
  };

  Book.prototype.enableMouse = function enableMouse(enable) {
    this.mouseController = enable;
  };

  Book.prototype.cornerCallback = function cornerCallback(e, data) {
    var _this4 = this;

    if (this.mouseController) {
      var _data$data = data.data,
          i = _data$data.i,
          n = _data$data.n;

      if (e.type === 'mouseover') {
        if (this.hoverInfo && this.hoverInfo.pendings !== undefined) {
          ++this.hoverInfo.pendings;
        } else {
          if (this.hoverInfo) {
            console.warn('Wrong state: element is already hover');
            if (this.hoverInfo.n !== n) {
              this.clearHoverInfo();
            }
          }
          if (!this.hoverInfo && !this.dragInfo) {
            var res = Promise.resolve(undefined);
            var hoverAngle = 0.02,
                hover = this.getBlockByPage(n),
                possible = this.getFlipping(i);
            if (n > 1 && n < 2 * (this.p.sheets + 1) && hover.physicId && (hover.angle < hoverAngle || hover.angle > Math.PI - hoverAngle)) {
              res = Promise.resolve(hover);
            } else if (hover === possible) {
              var sheetBlocks = [this.leftCover].concat(this.sheetBlocks, [this.rightCover]);
              var j = sheetBlocks.indexOf(hover),
                  nextBlock = ~j ? sheetBlocks[j + 2 * i - 1] : undefined;
              if (!nextBlock || !nextBlock.physicId || nextBlock.angle > hoverAngle && nextBlock.angle < Math.PI - hoverAngle) {
                res = this.flip(i, 1).then(function (block) {
                  if (!block) {
                    delete _this4.hoverInfo;
                  } else {
                    _this4.sheetPhysics.setParametr(block.physicId, 'velocity', 0);
                  }
                  return block;
                });
                this.hoverInfo = {
                  pendings: 1
                };
              }
            }
            res.then(function (block) {
              if (_this4.hoverInfo && _this4.hoverInfo.pendings < 1) {
                block = undefined;
                delete _this4.hoverInfo;
              }
              if (block) {
                _this4.pageManager.turnOffEvents();
                var p = block.getProps();
                block.force = _this4.sheetPhysics.getTargetForceClb(p.mass * block.getSize(), i ? Math.PI - hoverAngle : hoverAngle);
                block.cornerForce = function () {
                  return (i ? -1 : 1) * _SheetPhysics2.default.hoverCornerForceClb();
                };
                _this4.sheetPhysics.setParametr(block.physicId, 'angle', i ? Math.PI - 0.5 * hoverAngle : 0.5 * hoverAngle);
                _this4.hoverInfo = {
                  n: n,
                  block: block
                };
                _this4.update(1 / 30);
              }
            });
          }
        }
      } else if (this.hoverInfo && e.type === 'mouseout') {
        if (this.hoverInfo.pendings !== undefined) {
          --this.hoverInfo.pendings;
        } else if (n === this.hoverInfo.n) {
          this.clearHoverInfo();
        }
      } else if (e.type === 'mousedown') {
        this.cornerClickData = {
          x: e.pageX,
          y: e.pageY
        };
      } else if (e.type === 'click') {
        if (Math.sqrt(Math.pow(this.cornerClickData.x - e.pageX, 2) + Math.pow(this.cornerClickData.y - e.pageY, 2)) < 5) {
          var _hover = this.getBlockByPage(n);
          if (_hover.physicId) {
            var id = _hover.physicId,
                props = _hover.getProps();
            this.sheetPhysics.setParametr(id, 'velocity', (i ? -1 : 1) * props.startVelocity);
          }
        }
        delete this.cornerClickData;
      }
    }
  };

  Book.prototype.addSheetBlock = function addSheetBlock(p, block) {
    this.sheetBlocks.splice(p, 0, block);
    this.subscribeSheetBlock(block, 2);
    this.threeSheetBlocks.add(block.three);
  };

  Book.prototype.subscribeSheetBlock = function subscribeSheetBlock(block, offset) {
    var _this5 = this;

    var eventConverter = new _CustomEventConverter2.default(this.visual.wnd, this.visual.doc, _CircleTarget2.default.test),
        r = 0.15,
        target = new _CircleTarget2.default(1 - 0.5 * r, 0.5 * r, r);
    target.block = block;
    target.callback = this.cornerCallback.bind(this);
    eventConverter.addCustom(target);
    block.cornerTarget = target;
    block.three.userData.mouseCallback = function (e, data) {
      var i = data.face.materialIndex;
      if (i < 2) {
        var n = i === 0 ? offset + 2 * block.p.first : offset + 2 * block.p.last - 1;
        eventConverter.convert(e, { x: i === 0 ? data.uv.x : 1 - data.uv.x, y: data.uv.y, i: i, n: n });
        _this5.pageManager.transferEventToTexture(n, e, data);
      }
    };
    block.three.userData.touchCallback = function (e, data) {
      var i = data.face.materialIndex;
      if (i < 2) {
        var n = i === 0 ? offset + 2 * block.p.first : offset + 2 * block.p.last - 1;
        _this5.pageManager.transferEventToTexture(n, e, data);
      }
    };
    this.visual.drag.addThree(block.three);
    this.visual.mouseEvents.addThree(block.three);
    this.visual.touchEvents.addThree(block.three);
  };

  Book.prototype.removeSheetBlock = function removeSheetBlock(block) {
    this.visual.mouseEvents.removeThree(block.three);
    this.visual.touchEvents.removeThree(block.three);
    this.visual.drag.removeThree(block.three);
    this.threeSheetBlocks.remove(block.three);
    block.dispose();
  };

  Book.prototype.removeSheetBlocks = function removeSheetBlocks(first, size) {
    var blocks = this.sheetBlocks.splice(first, size);
    for (var _iterator5 = blocks, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
      var _ref5;

      if (_isArray5) {
        if (_i5 >= _iterator5.length) break;
        _ref5 = _iterator5[_i5++];
      } else {
        _i5 = _iterator5.next();
        if (_i5.done) break;
        _ref5 = _i5.value;
      }

      var block = _ref5;

      this.removeSheetBlock(block);
    }
  };

  Book.prototype.setTexture = function setTexture(material, n) {
    this.pageManager.setTexture(material, n);
  };

  Book.prototype.setPageTexture = function setPageTexture(material, n) {
    this.setTexture(material, n + 2);
  };

  Book.prototype.setLeftCoverTexture = function setLeftCoverTexture(material, n) {
    this.setTexture(material, n);
  };

  Book.prototype.setRightCoverTexture = function setRightCoverTexture(material, n) {
    this.setTexture(material, n + 2 * (this.p.sheets + 1));
  };

  Book.finishAnimationClb = function finishAnimationClb(angle) {
    this.block.set(this.book.getClosedBlockAngle(angle).closedAngle, 'closed', 0);
    var i = this.book.sheetBlocks.indexOf(this.block);
    if (~i) {
      if (angle === 0) {
        this.book.mergeSheetBlocks(i, this.book.sheetBlocks.length - i);
      } else {
        this.book.mergeSheetBlocks(0, i + 1);
      }
    }
  };

  Book.prototype.calcBlockForce = function calcBlockForce(block, object, angle, velocity, cornerHeight) {
    return block.force ? block.force(object, angle, velocity, cornerHeight) : 0;
  };

  Book.prototype.calcBlockCornerForce = function calcBlockCornerForce(block, object, angle, velocity, cornerHeight) {
    return block.cornerForce ? block.cornerForce(object, angle, velocity, cornerHeight) : 0;
  };

  Book.prototype.setVisualMode = function setVisualMode(mode) {
    var l = Book.lightModes[this.p.lighting][mode],
        bs = [this.leftCover].concat(this.sheetBlocks, [this.rightCover]);
    for (var _iterator6 = bs, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
      var _ref6;

      if (_isArray6) {
        if (_i6 >= _iterator6.length) break;
        _ref6 = _iterator6[_i6++];
      } else {
        _i6 = _iterator6.next();
        if (_i6.done) break;
        _ref6 = _i6.value;
      }

      var b = _ref6;

      b.mesh.receiveShadow = mode === 'live';
      for (var _iterator7 = b.materials, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {
        var _ref7;

        if (_isArray7) {
          if (_i7 >= _iterator7.length) break;
          _ref7 = _iterator7[_i7++];
        } else {
          _i7 = _iterator7.next();
          if (_i7.done) break;
          _ref7 = _i7.value;
        }

        var m = _ref7;

        m.needsUpdate = true;
      }
    }
    this.visual.setLight(l.ambient, l.directional);
  };

  Book.prototype.notifyBeforeAnimation = function notifyBeforeAnimation() {
    var _this6 = this;

    var res = void 0;
    if (this.animationNotification) {
      res = Promise.reject();
    } else {
      this.animationNotification = true;
      this.dispatchEvent({
        type: 'beforeAnimation'
      });
      this.setVisualMode('live');
      this.flipDisabled = true;
      res = this.layerManager.hide().then(function () {
        return delete _this6.flipDisabled;
      });
    }
    return res;
  };

  Book.prototype.notifyAfterAnimation = function notifyAfterAnimation() {
    if (this.animationNotification) {
      var p = this.getPage();
      if (this.userDirection.lastTopPage !== p) {
        this.userDirection.direction = Math.sign(p - this.userDirection.lastTopPage);
        this.userDirection.lastTopPage = p;
      }
      delete this.animationNotification;
      this.setVisualMode('static');
      this.layerManager.show();
      this.dispatchEvent({
        type: 'afterAnimation'
      });
    }
  };

  Book.prototype.getUserDirection = function getUserDirection() {
    return this.userDirection;
  };

  Book.prototype.reducePagesWidth = function reducePagesWidth(reduceWidth) {
    for (var _iterator8 = this.sheetBlocks, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();;) {
      var _ref8;

      if (_isArray8) {
        if (_i8 >= _iterator8.length) break;
        _ref8 = _iterator8[_i8++];
      } else {
        _i8 = _iterator8.next();
        if (_i8.done) break;
        _ref8 = _i8.value;
      }

      var block = _ref8;

      block.reduceWidth(reduceWidth);
    }
  };

  Book.prototype.connectPhysics = function connectPhysics(block, mass, angle, velocity, flexibility, coverHeight, simulateClb, removeClb, progressClb) {
    var _this7 = this;

    var type = function type() {
      return _this7.hoverInfo ? 'hover' : _this7.dragInfo ? 'drag' : 'free';
    },
        res = this.sheetPhysics.getSize() ? Promise.resolve() : this.notifyBeforeAnimation();
    if (block === this.leftCover || block === this.rightCover) {
      this.bookShadowMaterial.opacity = 0;
    }
    return res.then(function () {
      block.physicId = _this7.sheetPhysics.addObject(mass, angle, velocity, flexibility, coverHeight, function (angl, ch) {
        simulateClb(angl, ch);
        progressClb(block, Math.abs(angle - angl) / Math.PI, 'process', type());
        _this7.calculateShadow();
        _this7.updateThree();
      }, function (angl, ch) {
        removeClb(angl, ch);
        delete block.physicId;
        progressClb(block, Math.abs(angle - angl) / Math.PI, 'finish', type());
        if (!_this7.sheetPhysics.getSize()) {
          var p = _this7.getPage();
          if (p === 0 || p === _this7.getPages() - 1) {
            _this7.reducePagesWidth(true);
          }
        }
        Promise.resolve().then(function () {
          if (!_this7.sheetPhysics.getSize()) {
            _this7.notifyAfterAnimation();
            _this7.calculateShadow();
          }
        });
        _this7.updateThree();
      }, function (object, angle, velocity, cornerHeight) {
        return _this7.calcBlockForce(block, object, angle, velocity, cornerHeight);
      }, function (object, angle, velocity, cornerHeight) {
        return _this7.calcBlockCornerForce(block, object, angle, velocity, cornerHeight);
      });
      progressClb(block, 0, 'init', type());
      if (_this7.sheetPhysics.getSize() === 1) {
        _this7.reducePagesWidth(false);
      }
      return block;
    }).catch(function () {
      return undefined;
    });
  };

  Book.prototype.update = function update(dt) {
    var _this8 = this;

    this.lastMousePos.t += dt;
    if (this.isProcessing() && this.lastMousePos.pageX !== undefined && this.lastMousePos.t - (this.lastMousePos.lastT || 0) > 0.25 && !this.hoverInfo && !this.dragInfo) {
      this.lastMousePos.lastT = this.lastMousePos.t;
      Promise.resolve().then(function () {
        (0, _libs.$)(_this8.visual.element).trigger(_libs.$.Event('mousemove', _this8.lastMousePos));
      });
    }
    this.sheetPhysics.simulate(dt);
  };

  Book.prototype.splitSheetBlock = function splitSheetBlock(i, leftSize) {
    var block = this.sheetBlocks[i];
    if (block && leftSize < block.getSize()) {
      var newBlock = new _SheetBlock2.default(this.visual, _extends({}, this.p, { setTexture: this.setPageTexture.bind(this) }), block.p.first, block.p.first + leftSize, block.angle, block.state);
      block.set(block.angle, block.state, block.corner.height, block.p.first + leftSize, block.p.last);
      this.addSheetBlock(i, newBlock);
      return [newBlock, block];
    }
  };

  Book.prototype.mergeSheetBlocks = function mergeSheetBlocks(first, size) {
    if (first < this.sheetBlocks.length) {
      size = Math.min(this.sheetBlocks.length - first, size);
      var firstBlock = this.sheetBlocks[first],
          lastBlock = this.sheetBlocks[first + size - 1];
      firstBlock.set(firstBlock.angle, firstBlock.state, firstBlock.corner.height, firstBlock.p.first, lastBlock.p.last);
      this.removeSheetBlocks(first + 1, size - 1);
    }
  };

  Book.prototype.setSheetBlocks = function setSheetBlocks(angle, state) {
    if (state === 'closed') {
      this.closedAngle = angle;
    }
    this.sheetBlocks.forEach(function (s) {
      if (!s.physicId) {
        s.set(angle, state);
      }
    });
  };

  Book.prototype.set = function set(angle) {
    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    this.angle = angle;
    var PI = Math.PI;
    if (angle < PI / 4) {
      this.binder.set(0);

      this.binder.setLeft(-PI / 2 + 2 * angle);
      this.leftCover.set(PI / 2, 'opened', height);

      this.setSheetBlocks(0, 'closed');

      this.binder.setRight(0);
      this.rightCover.set(0, 'closed', 0);
    } else if (angle < 2 * PI / 4) {
      var a = 2 * (angle - PI / 4);
      this.binder.set(a);

      this.binder.setLeft(-a);
      this.leftCover.set(PI / 2 + a, 'opened', height);

      this.setSheetBlocks(a, 'closed');

      this.binder.setRight(-a);
      this.rightCover.set(a, 'closed', 0);
    } else if (angle < 3 * PI / 4) {
      var _a = 2 * (angle - PI / 2);
      this.binder.set(PI / 2);

      this.binder.setLeft(-PI / 2);
      this.leftCover.set(PI, 'opened', 0);

      this.binder.setRight(-PI / 2);
      this.rightCover.set(_a, 'opened', height);
    } else if (angle < 4 * PI / 4) {
      var _a2 = 2 * (angle - 3 * PI / 4) + PI / 2;
      this.binder.set(_a2);

      this.binder.setLeft(-_a2);
      this.leftCover.set(_a2, 'closed', 0);

      this.setSheetBlocks(_a2, 'closed');

      this.binder.setRight(-PI / 2);
      this.rightCover.set(PI / 2, 'opened', height);
    } else if (angle < 5 * PI / 4) {
      this.binder.set(PI);

      this.binder.setLeft(-PI);
      this.leftCover.set(PI, 'closed', 0);

      this.setSheetBlocks(PI, 'closed');

      this.binder.setRight(-PI / 2 - 2 * (angle - PI));
      this.rightCover.set(PI / 2, 'opened', height);
    } else if (angle < 6 * PI / 4) {
      var _a3 = 2 * (angle - 5 * PI / 4);
      this.binder.set(PI - _a3);

      this.binder.setLeft(-PI + _a3);
      this.leftCover.set(PI - _a3, 'closed', 0);

      this.setSheetBlocks(PI - _a3, 'closed');

      this.binder.setRight(-PI + _a3);
      this.rightCover.set(PI / 2 - _a3, 'opened', height);
    } else if (angle < 7 * PI / 4) {
      var _a4 = 2 * (angle - 6 * PI / 4);
      this.binder.set(PI / 2);

      this.binder.setLeft(-PI / 2);
      this.leftCover.set(PI - _a4, 'opened', height);

      this.binder.setRight(-PI / 2);
      this.rightCover.set(0, 'opened', 0);
    } else if (angle < 8 * PI / 4) {
      var _a5 = 2 * (angle - 7 * PI / 4);
      this.binder.set(PI / 2 - _a5);

      this.binder.setLeft(-PI / 2);
      this.leftCover.set(PI / 2, 'opened', height);

      this.setSheetBlocks(PI / 2 - _a5, 'closed');

      this.binder.setRight(-PI / 2 + _a5);
      this.rightCover.set(PI / 2 - _a5, 'closed', 0);
    }
  };

  Book.createSideTexture = function createSideTexture(color, type) {
    var c = _GraphUtils2.default.createCanvas(8, 8);
    if (type === 'color') {
      var ctx = c.getContext('2d');
      ctx.beginPath();
      ctx.fillStyle = _GraphUtils2.default.color2Rgba(color, 1);
      ctx.rect(0, 0, 8, 7);
      ctx.fill();
      ctx.beginPath();
      ctx.fillStyle = _GraphUtils2.default.color2Rgba(_GraphUtils2.default.inverseColor(color, 0.5), 1);
      ctx.rect(0, 7, 8, 1);
      ctx.fill();
    }
    return c;
  };

  Book.prototype.prepareProps = function prepareProps(props) {
    return this.calcProps(Book.mergeProps((0, _book.props)(), props));
  };

  Book.mergeProps = function mergeProps(first, second) {
    second = second || {};
    return _extends({}, first, second, {
      sheet: _extends({}, first.sheet, second.sheet),
      cover: _extends({}, first.cover, second.cover),
      page: _extends({}, first.page, second.page),
      cssLayerProps: _extends({}, first.cssLayerProps, second.cssLayerProps)
    });
  };

  Book.prototype.calcProps = function calcProps(props) {
    var depth = props.maxDepth / (props.sheets + 2 * 3),
        p = _extends({}, props, {
      sheet: _extends({}, props.sheet),
      cover: _extends({}, props.sheet, props.cover),
      page: _extends({}, props.sheet, props.page),
      cssLayerProps: _extends({}, props.cssLayerProps, {
        $: _libs.$
      })
    });
    p.cover.depth = Math.min(p.cover.depth, 3 * depth);
    p.page.depth = Math.min(p.page.depth, depth);
    var scale = 10,
        height = scale * p.height,
        width = scale * p.width,
        flexibleCornerK = Math.min(height, width) / width,
        flipProgressClb = function flipProgressClb() {
      return undefined;
    },
        sheet = {
      sideTexture: p.sheet.sideTexture || Book.createSideTexture(p.sheet.color, p.sheet.side)
    },
        cover = _extends({}, sheet, p.cover, {
      flexibleCorner: flexibleCornerK * p.cover.flexibleCorner,
      depth: scale * p.cover.depth,
      width: width,
      height: height,
      padding: scale * p.cover.padding
    }),
        page = _extends({}, sheet, p.page, {
      flexibleCorner: flexibleCornerK * p.page.flexibleCorner,
      depth: scale * p.page.depth,
      width: cover.width - cover.padding,
      height: cover.height - 2 * cover.padding
    }),
        marker = {
      use: false,
      color: 0XFF0000,
      size: scale * 0.001
    };
    if (cover.color !== sheet.color && !p.cover.sideTexture) {
      cover.sideTexture = Book.createSideTexture(cover.color, cover.side);
    }
    if (page.color !== sheet.color && !p.page.sideTexture) {
      page.sideTexture = Book.createSideTexture(page.color, page.side);
    }
    if (p.cssLayersLoader) {
      p.cssLayersLoader = this.cssLayersLoader(p.cssLayersLoader);
    }
    return _extends({}, p, { scale: scale, height: height, width: width, flipProgressClb: flipProgressClb, cover: cover, page: page, marker: marker });
  };

  Book.prototype.cssLayersLoader = function cssLayersLoader(loader) {
    var _this9 = this;

    return function (n, clb) {
      return loader(n, function (ls) {
        var nls = [];
        for (var _iterator9 = ls, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();;) {
          var _ref9;

          if (_isArray9) {
            if (_i9 >= _iterator9.length) break;
            _ref9 = _iterator9[_i9++];
          } else {
            _i9 = _iterator9.next();
            if (_i9.done) break;
            _ref9 = _i9.value;
          }

          var l = _ref9;

          nls.push(_extends({}, l, {
            js: _this9.cssLayerJsObject(l)
          }));
        }
        return clb(nls);
      });
    };
  };

  Book.prototype.cssLayerJsObject = function cssLayerJsObject(l) {
    var _this10 = this;

    var clIfEx = function clIfEx(f) {
      var r = void 0;
      if (f) {
        try {
          r = f();
        } catch (e) {
          console.error(e);
        }
      }
      return r;
    };
    return function (c, p) {
      var o = {};
      try {
        var init = eval(l.js);
        o = init ? init(c, p) || {} : {};
      } catch (e) {
        console.error(e);
      }
      var no = _this10.cssLayerJsObjectInit(c, p),
          ro = {};
      var _arr = ['hide', 'hidden', 'show', 'shown', 'dispose'];

      var _loop = function _loop() {
        var n = _arr[_i10];
        ro[n] = function () {
          clIfEx(no[n]);
          clIfEx(o[n]);
        };
      };

      for (var _i10 = 0; _i10 < _arr.length; _i10++) {
        _loop();
      }
      return ro;
    };
  };

  Book.prototype.cssLayerJsObjectInit = function cssLayerJsObjectInit(c, p) {
    var _this11 = this;

    c.find('.go-to-page').on('click', function (e) {
      var n = (0, _libs.$)(e.target);
      while (n.length && !n.hasClass('go-to-page')) {
        n = (0, _libs.$)(n[0].parentNode);
      }
      n = parseInt(n.attr('data-number'));
      if (!isNaN(n)) {
        e.preventDefault();
        p.scene.ctrl.goToPage(n - 1);
      }
    });
    var ys = c.find('.youtube');
    if (ys.length) {
      ys.html('<div style="width:100%;height:100%;"></div>');
      var p01 = function p01(n, nm, d) {
        return n.attr(nm) === undefined ? d : n.attr(nm) === 'true' ? 1 : 0;
      };
      _YouTubeApi2.default.init().then(function () {
        for (var i = 0; i < ys.length; ++i) {
          var _n = (0, _libs.$)(ys[i]),
              playerVars = { loop: p01(_n, 'data-loop', 0), controls: p01(_n, 'data-controls', 1), mute: p01(_n, 'data-muted', 0) };
          if (playerVars.loop) {
            playerVars.playlist = _n.attr('data-id');
          }
          var player = new YT.Player(_n.find('div')[0], { videoId: _n.attr('data-id'), playerVars: playerVars });
          _n[0].player = player;
        }
      });
    }
    var ads = c.find('.adsbygoogle');
    if (ads.length) {
      if (!this.visual.wnd.adsbygoogle) {
        this.visual.wnd.adsbygoogle = [];
        var script = this.visual.doc.createElement('script');
        script.async = true;
        script.src = 'https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=' + ads.attr('data-ad-client');
        this.visual.doc.body.appendChild(script);
      }
    }
    return {
      hide: function hide() {
        if (_this11.pendingPlayers.length) {
          _this11.pendingPlayers = [];
          _this11.dispatchEvent({
            type: 'pendingPlayers'
          });
        }
        c.find('.pause-on-hide').each(function (_, p) {
          return _this11.cssFs.pause(p);
        });
      },
      shown: function shown() {
        c.find('.play-on-shown').each(function (_, p) {
          return _this11.cssFs.play(p);
        });
        setTimeout(function () {
          var update = false;
          c.find('.adsbygoogle').each(function (_, ad) {
            return update = update || (0, _libs.$)(ad).html().trim() === '';
          });
          if (update) {
            try {
              _this11.visual.wnd.adsbygoogle.push({});
            } catch (e) {
              console.error(e);
            }
          }
        }, 100);
      },
      dispose: function dispose() {
        return c.find('.pause-on-hide').each(function (_, p) {
          return _this11.cssFs.pause(p);
        });
      }
    };
  };

  return Book;
}(_libs.THREE.EventDispatcher);

Book.lightModes = {
  ambient: {
    static: {
      ambient: 0xffffff,
      directional: 0x000000
    },
    live: {
      ambient: 0xf8f8f8,
      directional: 0x0f0f0f
    }
  },
  mixed: {
    static: {
      ambient: 0xf0f0f0,
      directional: 0x101010
    },
    live: {
      ambient: 0xf0f0f0,
      directional: 0x101010
    }
  }
};
exports.default = Book;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _Controller2 = __webpack_require__(15);

var _Controller3 = _interopRequireDefault(_Controller2);

var _bookController = __webpack_require__(45);

var _EventsToActions = __webpack_require__(52);

var _EventsToActions2 = _interopRequireDefault(_EventsToActions);

var _stats = __webpack_require__(75);

var _stats2 = _interopRequireDefault(_stats);

var _Object3DWatcher = __webpack_require__(58);

var _Object3DWatcher2 = _interopRequireDefault(_Object3DWatcher);

var _FullScreenX = __webpack_require__(18);

var _FullScreenX2 = _interopRequireDefault(_FullScreenX);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BookController = function (_Controller) {
  _inherits(BookController, _Controller);

  function BookController(book, view, props) {
    _classCallCheck(this, BookController);

    var _this = _possibleConstructorReturn(this, _Controller.call(this));

    _this.navigationControls = true;
    _this.book = book;
    _this.visual = book.visual;
    _this.p = BookController.prepareProps(props);
    _this.p.rtl = book.p.rtl;

    _this.orbit = book.visual.getOrbit();
    book.setFlipProgressClb(_this.updateViewIfState.bind(_this));
    _this.view = view;
    _this.bindActions();

    _this.state = {
      smartPan: !_this.actions['cmdSmartPan'].active,
      singlePage: _this.isSinglePageAvailable() ? _this.actions['cmdSinglePage'].active || _this.actions['cmdSinglePage'].activeForMobile && _this.visual.isMobile() : false,
      stats: _this.actions['cmdStats'].active,
      activeSide: 1,
      autoPlay: _this.actions['cmdAutoPlay'].active
    };

    var box0 = new _libs.THREE.Box3(),
        box1 = new _libs.THREE.Box3(),
        bookWidth = book.openedBox.max.x - book.openedBox.min.x;
    _this.bookWatcher = new _Object3DWatcher2.default(_this.visual, function () {
      if (_this.state.singlePage) {
        if (_this.state.activeSide) {
          box0.setFromObject(book.rightCover.three);
        } else {
          box0.setFromObject(book.leftCover.three);
        }
      } else {
        box0.setFromObject(book.leftCover.three);
        box1.setFromObject(book.rightCover.three);
        box0.union(box1);
        var width = Math.max(box0.min.x - box0.min.x, bookWidth),
            x0 = (box0.min.x + box0.max.x) / 2;
        box0.min.x = x0 - 0.5 * width;
        box0.max.x = x0 + 0.5 * width;
      }
      return box0;
    });
    _this.bookWatcher.scale = _this.p.scale.default;
    _this.book.setZoom(_this.bookWatcher.scale, _this.state.singlePage);

    _this.Stats = new _stats2.default();
    _this.Stats.domElement.style.position = 'absolute';
    _this.Stats.domElement.style.top = '0px';

    _this.binds = {
      onScreenModeChanged: _this.onScreenModeChanged.bind(_this),
      stats: _this.Stats.update.bind(_this.Stats),
      onUpdateView: _this.updateView.bind(_this)
    };
    _FullScreenX2.default.addEventListener(_this.view.getParentContainer().ownerDocument, _this.binds.onScreenModeChanged);

    _this.cmdSmartPan();

    _this.book.enableLoadingAnimation(_this.p.loadingAnimation.book);
    if (_this.p.loadingAnimation.skin) {
      _this.initLoadingAnimation();
    }

    _this.book.enableLoadingAnimation(_this.p.loadingAnimation.book);
    _this.book.setAutoResolution(_this.p.autoResolution);

    _this.visual.addEventListener('resize', _this.updateView.bind(_this));
    _this.book.addEventListener('pendingPlayers', _this.updateView.bind(_this));

    if (_this.state.autoPlay) {
      _this.autoPlay();
    }
    return _this;
  }

  BookController.prototype.dispose = function dispose() {
    _FullScreenX2.default.removeEventListener(this.view.getParentContainer().ownerDocument, this.binds.onScreenModeChanged);
    delete this.book;
    delete this.view;
    delete this.visual;
  };

  BookController.prototype.ready = function ready(scene) {
    var _this2 = this;

    if (this.view.templateObject.appLoaded) {
      Promise.resolve().then(function () {
        return _this2.view.templateObject.appLoaded(scene);
      });
    }
  };

  BookController.prototype.loadingAnimationHandler = function loadingAnimationHandler() {
    var _this3 = this;

    var pages = this.book.getTopPages();
    var visible = false;
    for (var _iterator = pages, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var n = _ref;

      var state = this.book.getPageState(n);
      visible = state !== 'active';
      if (visible) {
        break;
      }
    }
    visible = visible || this.printer && this.printer.loading;
    if (visible) {
      if (!this.pendingLoadingAnimation) {
        this.pendingLoadingAnimation = true;
        setTimeout(function () {
          if (_this3.pendingLoadingAnimation && _this3.view) {
            _this3.view.setState('widLoading', {
              visible: visible
            });
          }
        }, 2000);
      }
    } else {
      delete this.pendingLoadingAnimation;
      this.view.setState('widLoading', {
        visible: visible
      });
    }
  };

  BookController.prototype.initLoadingAnimation = function initLoadingAnimation() {
    var handler = this.loadingAnimationHandler.bind(this);
    this.book.addEventListener('beforeAnimation', handler);
    this.book.addEventListener('afterAnimation', handler);
    this.book.addEventListener('startRendering', handler);
    this.book.addEventListener('endRendering', handler);
  };

  BookController.prototype.enableNavigation = function enableNavigation(enable) {
    this.navigationControls = enable;
  };

  BookController.prototype.setTocCtrl = function setTocCtrl(tocCtrl) {
    this.tocCtrl = tocCtrl;
    this.tocCtrl.onChange = this.updateView.bind(this);
    this.tocCtrl.setActiveTab(this.actions['cmdToc'].defaultTab);
    if (this.actions['cmdToc'].active && !tocCtrl.visible) {
      tocCtrl.togle();
    }
  };

  BookController.prototype.setShareCtrl = function setShareCtrl(shareCtrl) {
    this.shareCtrl = shareCtrl;
    this.shareCtrl.onChange = this.updateView.bind(this);
    this.updateView();
  };

  BookController.prototype.setPrinter = function setPrinter(printer) {
    this.printer = printer;
    var handler = this.loadingAnimationHandler.bind(this);
    this.printer.addEventListener('loading', handler);
    this.printer.addEventListener('loaded', handler);
    this.updateView();
  };

  BookController.prototype.setSounds = function setSounds(sounds) {
    this.sounds = sounds;
    sounds.setEnabled(this.actions['cmdSounds'].active);
    this.updateView();
  };

  BookController.prototype.onScreenModeChanged = function onScreenModeChanged(e) {
    this.updateView();
  };

  BookController.prototype.canZoomIn = function canZoomIn() {
    return !this.state.smartPan || Math.abs(this.bookWatcher.scale - this.p.scale.max) > this.p.eps;
  };

  BookController.prototype.canZoomOut = function canZoomOut() {
    return !this.state.smartPan || Math.abs(this.bookWatcher.scale - this.p.scale.min) > this.p.eps;
  };

  BookController.prototype.canDefaultZoom = function canDefaultZoom() {
    return this.state.smartPan;
  };

  BookController.prototype.setBookZoom = function setBookZoom(scale) {
    // setTimeout(()=> {
    //   if(Math.abs(this.bookWatcher.scale-scale)<1e-3) {
    this.book.setZoom(scale, this.state.singlePage);
    //   }
    // }, 1000);
  };

  BookController.prototype.cmdAutoPlay = function cmdAutoPlay() {
    this.state.autoPlay = !this.state.autoPlay;
    if (this.state.autoPlay) {
      this.autoPlay();
    }
    this.updateView();
  };

  BookController.prototype.autoPlay = function autoPlay() {
    var _this4 = this;

    var pendingAutoPlay = Date.now();
    this.pendingAutoPlay = pendingAutoPlay;
    setTimeout(function () {
      if (_this4.pendingAutoPlay === pendingAutoPlay && _this4.state.autoPlay) {
        if (!_this4.book.isProcessing()) {
          var flipped = void 0;
          if (_this4.p.rtl) {
            if (flipped = _this4.canFlipLeft()) {
              _this4.cmdBackward();
            }
          } else {
            if (flipped = _this4.canFlipRight()) {
              _this4.cmdForward();
            }
          }
          if (!flipped) {
            _this4.goToPage(0);
          }
        }
        _this4.autoPlay();
      }
    }, this.book.p.autoPlayDuration);
  };

  BookController.prototype.cmdZoomIn = function cmdZoomIn() {
    if (this.state.smartPan) {
      this.bookWatcher.scale = Math.min(this.p.scale.max, this.bookWatcher.scale + this.p.scale.delta);
      this.setBookZoom(this.bookWatcher.scale);
    } else {
      this.orbit.zoomIn(6.6 * this.p.scale.delta / 0.32);
    }
    this.updateView();
  };

  BookController.prototype.cmdZoomOut = function cmdZoomOut() {
    if (this.state.smartPan) {
      this.bookWatcher.scale = Math.max(this.p.scale.min, this.bookWatcher.scale - this.p.scale.delta);
      this.setBookZoom(this.bookWatcher.scale);
    } else {
      this.orbit.zoomOut(6.6 * this.p.scale.delta / 0.32);
    }
    this.updateView();
  };

  BookController.prototype.setScale = function setScale(scale) {
    this.bookWatcher.scale = Math.min(this.p.scale.max, Math.max(this.p.scale.min, scale));
    this.setBookZoom(this.bookWatcher.scale);
    this.updateView();
  };

  BookController.prototype.cmdDefaultZoom = function cmdDefaultZoom() {
    if (this.state.smartPan) {
      this.bookWatcher.scale = this.p.scale.default;
      this.setBookZoom(this.bookWatcher.scale);
      this.updateView();
    }
  };

  BookController.prototype.cmdToc = function cmdToc() {
    if (this.tocCtrl) {
      this.tocCtrl.togle();
    }
  };

  BookController.prototype.cmdShare = function cmdShare() {
    if (this.shareCtrl) {
      this.shareCtrl.togle();
    }
  };

  BookController.prototype.cmdBackward = function cmdBackward() {
    var _this5 = this;

    if (!this.canFlipLeft()) return;
    if (this.state.singlePage) {
      this.state.activeSide = (this.getPage() + 1) % 2;
      if (this.state.activeSide) {
        this.state.activeSide = 0;
        this.updateView();
      } else {
        this.startFlip(this.book.flipLeft(1)).then(function (block) {
          if (block) {
            _this5.state.activeSide = 1;
          }
        });
      }
    } else {
      this.startFlip(this.book.flipLeft(1));
    }
  };

  BookController.prototype.cmdBigBackward = function cmdBigBackward() {
    this.cmdBackward();
  };

  BookController.prototype.cmdForward = function cmdForward() {
    var _this6 = this;

    if (!this.canFlipRight()) return;
    if (this.state.singlePage) {
      this.state.activeSide = (this.getPage() + 1) % 2;
      if (!this.state.activeSide) {
        this.state.activeSide = 1;
        this.updateView();
      } else {
        this.startFlip(this.book.flipRight(1)).then(function (block) {
          if (block) {
            _this6.state.activeSide = 0;
          }
        });
      }
    } else {
      this.startFlip(this.book.flipRight(1));
    }
  };

  BookController.prototype.cmdBigForward = function cmdBigForward() {
    this.cmdForward();
  };

  BookController.prototype.cmdSave = function cmdSave() {
    var a = (0, _libs.$)('<a href="' + this.p.downloadURL + '" download target="_blank"></a>').appendTo(this.view.getContainer());
    a[0].click();
    a.remove();
  };

  BookController.prototype.cmdPrint = function cmdPrint() {
    this.printer.print();
  };

  BookController.prototype.cmdFullScreen = function cmdFullScreen() {
    if (!_FullScreenX2.default.activated()) {
      _FullScreenX2.default.request(this.view.getParentContainer());
    } else {
      _FullScreenX2.default.cancel();
    }
  };

  BookController.prototype.cmdSmartPan = function cmdSmartPan() {
    this.state.smartPan = !this.state.smartPan;
    if (this.state.smartPan) {
      this.orbit.minAzimuthAngle = 0;
      this.orbit.maxAzimuthAngle = 0;
      this.orbit.minPolarAngle = 0;
      this.orbit.maxPolarAngle = Math.PI / 4;
      this.bookWatcher.enabled = true;
    } else {
      this.orbit.minAzimuthAngle = -Infinity;
      this.orbit.maxAzimuthAngle = Infinity;
      this.orbit.minPolarAngle = 0;
      this.orbit.maxPolarAngle = Math.PI;
      this.bookWatcher.enabled = false;
    }
    this.updateView();
  };

  BookController.prototype.isSinglePageAvailable = function isSinglePageAvailable() {
    return this.book.getPages() !== 2;
  };

  BookController.prototype.cmdSinglePage = function cmdSinglePage() {
    if (this.isSinglePageAvailable()) {
      this.state.singlePage = !this.state.singlePage;
      this.setBookZoom(this.bookWatcher.scale);
      this.updateView();
      this.dispatchAsync({
        type: 'pageMode',
        value: this.state.singlePage ? 'single' : 'double'
      });
    }
  };

  BookController.prototype.cmdSounds = function cmdSounds() {
    if (this.sounds) {
      this.sounds.togle();
    }
    this.updateView();
  };

  BookController.prototype.cmdStats = function cmdStats() {
    this.state.stats = !this.state.stats;
    if (this.state.stats) {
      (0, _libs.$)(this.view.getContainer()).append(this.Stats.domElement);
      this.visual.addRenderCallback(this.binds.stats);
    } else {
      (0, _libs.$)(this.view.getContainer()).find(this.Stats.domElement).remove();
      this.visual.removeRenderCallback(this.binds.stats);
    }
    this.updateView();
  };

  BookController.prototype.cmdPendingPlay = function cmdPendingPlay() {
    this.book.resolvePendingPlayers();
  };

  BookController.prototype.cmdGotoFirstPage = function cmdGotoFirstPage() {
    this.goToPage(0);
  };

  BookController.prototype.cmdGotoLastPage = function cmdGotoLastPage() {
    this.goToPage(this.book.getBookPages() - 1);
  };

  BookController.prototype.goToPage = function goToPage(page) {
    var _this7 = this;

    page = Math.max(Math.min(page, this.book.getPages() - 1), 0);
    if (this.p.rtl) {
      page = this.book.getBookPages() - 1 - page;
    }
    var pageNum = Math.max(Math.min(page, this.book.getBookPages() - 1), 0);
    this.state.activeSide = (pageNum + 1) % 2;
    var target = Math.max(Math.min(page - 1 + page % 2, this.book.getBookPages() - 1), 0),
        current = this.book.getPage(),
        flips = [],
        covs = 0;;
    if (target != current) {
      if (current === 0) {
        flips.push(1);
        current += 1;
        ++covs;
      } else if (current === this.book.getBookPages() - 1) {
        flips.push(-1);
        current -= 2;
        ++covs;
      }
      var cv = 0;
      if (target === 0) {
        cv = -1;
        target += 1;
        ++covs;
      } else if (target === this.book.getBookPages() - 1) {
        cv = 1;
        target -= 2;
        ++covs;
      }
      if (target - current) {
        flips.push(Math.ceil((target - current) / 2));
      }
      if (cv) {
        flips.push(cv);
      }
    }

    var setClb = function setClb(fl, time, clb) {
      return new Promise(function (resolve) {
        setTimeout(function () {
          if (fl < 0) {
            _this7.startFlip(_this7.book.flipLeft(-fl, clb));
          } else {
            _this7.startFlip(_this7.book.flipRight(fl, clb));
          }
          resolve();
        }, time);
      });
    };

    if (covs === 2) {
      setClb(flips[0], 0, function (block, progress, state) {
        if (state == 'finish' && progress == 1) {
          setClb(flips[flips.length - 1], 0);
        }
      }).then(function () {
        return setClb(flips[1], 400);
      });
    } else {
      var next = Promise.resolve(),
          time = 0;

      var _loop = function _loop() {
        if (_isArray2) {
          if (_i2 >= _iterator2.length) return 'break';
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) return 'break';
          _ref2 = _i2.value;
        }

        var fl = _ref2;

        var t = time;
        next = next.then(function () {
          return setClb(fl, t);
        });
        time = 400;
      };

      for (var _iterator2 = flips, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        var _ret = _loop();

        if (_ret === 'break') break;
      }
    }
  };

  BookController.prototype.startFlip = function startFlip(flipRes) {
    var _this8 = this;

    return flipRes ? flipRes.then(function (block) {
      if (block) {
        _this8.dispatchAsync({
          type: 'startFlip'
        });
      }
      return block;
    }) : Promise.resolve(undefined);
  };

  BookController.prototype.endFlip = function endFlip(block) {
    this.dispatchAsync({
      type: 'endFlip'
    });
    return block;
  };

  BookController.prototype.getPage = function getPage() {
    var page = this.book.getPage();
    return page ? Math.min(this.book.getPage() + this.state.activeSide, this.book.getBookPages() - 1) : 0;
  };

  BookController.prototype.getPageForGUI = function getPageForGUI() {
    var n = (this.state.singlePage ? this.getPage() : this.book.getPage()) + 1;
    if (this.p.rtl) {
      n = this.book.getBookPages() - n + 1;
    }
    if (n > this.book.getPages()) {
      n = this.book.getPages();
    }
    return n;
  };

  BookController.prototype.inpPage = function inpPage(e, data) {
    this.goToPage(data - 1);
  };

  BookController.prototype.updateViewIfState = function updateViewIfState(block, progress, state, type) {
    if (state === 'init' || state === 'finish') {
      setTimeout(this.updateView.bind(this), 100);
    }
    if (state === 'finish') {
      this.endFlip(block);
    }
  };

  BookController.prototype.isCmdVisible = function isCmdVisible(name) {
    return (0, _libs.$)(this.visual.element).width() < this.p.narrowView.width ? this.actions[name].enabledInNarrow === undefined ? this.actions[name].enabled : this.actions[name].enabledInNarrow : this.actions[name].enabled;
  };

  BookController.prototype.updateViewState = function updateViewState() {
    this.viewState = {
      'cmdZoomIn': {
        enable: this.canZoomIn(),
        visible: this.isCmdVisible('cmdZoomIn'),
        active: false
      },
      'cmdZoomOut': {
        enable: this.canZoomOut(),
        visible: this.isCmdVisible('cmdZoomOut'),
        active: false
      },
      'cmdDefaultZoom': {
        enable: this.canDefaultZoom(),
        visible: this.isCmdVisible('cmdDefaultZoom'),
        active: this.canDefaultZoom() && Math.abs(this.bookWatcher.scale - this.p.scale.default) < this.p.eps
      },
      'cmdToc': {
        enable: !!this.tocCtrl,
        visible: this.isCmdVisible('cmdToc') && this.tocCtrl,
        active: this.tocCtrl && this.tocCtrl.visible
      },
      'cmdShare': {
        enable: !!this.shareCtrl,
        visible: this.isCmdVisible('cmdShare') && this.shareCtrl,
        active: this.shareCtrl && this.shareCtrl.visible
      },
      'inpPages': {
        visible: true,
        value: this.book.getPages()
      },
      'inpPage': {
        visible: true,
        enable: !this.book.isProcessing() && this.navigationControls,
        value: this.getPageForGUI()
      },
      'cmdSave': {
        enable: true,
        visible: this.isCmdVisible('cmdSave') && !!this.p.downloadURL,
        active: false
      },
      'cmdPrint': {
        enable: true,
        visible: this.isCmdVisible('cmdPrint') && !!this.printer,
        active: false
      },
      'cmdFullScreen': {
        enable: _FullScreenX2.default.available(),
        visible: this.isCmdVisible('cmdFullScreen'),
        active: _FullScreenX2.default.available() && _FullScreenX2.default.activated()
      },
      'widControls': {
        enable: true,
        visible: true,
        active: false
      },
      'widSettings': {
        enable: true,
        visible: this.isCmdVisible('widSettings'),
        active: false
      },
      'widToolbar': {
        enable: true,
        visible: this.isCmdVisible('widToolbar'),
        active: false
      },
      'cmdSmartPan': {
        enable: true,
        visible: this.isCmdVisible('cmdSmartPan'),
        active: this.state.smartPan
      },
      'cmdSinglePage': {
        enable: this.isSinglePageAvailable(),
        visible: this.isCmdVisible('cmdSinglePage'),
        active: this.state.singlePage
      },
      'cmdSounds': {
        enable: true,
        visible: this.isCmdVisible('cmdSounds') && !!this.sounds,
        active: !!this.sounds && this.sounds.enabled
      },
      'cmdStats': {
        enable: true,
        visible: this.isCmdVisible('cmdStats'),
        active: this.state.stats
      },
      'cmdAutoPlay': {
        enable: true,
        visible: this.isCmdVisible('cmdAutoPlay'),
        active: this.state.autoPlay
      },
      'cmdPendingPlay': {
        enable: true,
        visible: true,
        active: false
      },
      'widPendingPlay': {
        enable: true,
        visible: this.book.hasPendingPlayers(),
        active: false
      }
    };

    var left = this.canFlipLeft(),
        right = this.canFlipRight();
    var flippersEnable = {
      cmdBackward: left,
      cmdBigBackward: left,
      cmdForward: right,
      cmdBigForward: right,
      cmdGotoFirstPage: left,
      cmdGotoLastPage: right
    };
    for (var _iterator3 = Object.keys(flippersEnable), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i3 >= _iterator3.length) break;
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) break;
        _ref3 = _i3.value;
      }

      var name = _ref3;

      this.viewState[name] = {
        enable: flippersEnable[name],
        visible: this.isCmdVisible(name),
        active: false
      };
    };
  };

  BookController.prototype.canFlipLeft = function canFlipLeft() {
    return this.navigationControls && (!!this.book.getLeftFlipping() || this.state.singlePage && this.p.rtl && this.getPage() === 2);
  };

  BookController.prototype.canFlipRight = function canFlipRight() {
    return this.navigationControls && (!!this.book.getRightFlipping() || this.state.singlePage && !this.p.rtl && this.getPage() === this.book.getPages() - 2);
  };

  BookController.prototype.updateView = function updateView() {
    if (this.view) {
      this.updateViewState();
      for (var _iterator4 = Object.keys(this.viewState), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
        var _ref4;

        if (_isArray4) {
          if (_i4 >= _iterator4.length) break;
          _ref4 = _iterator4[_i4++];
        } else {
          _i4 = _iterator4.next();
          if (_i4.done) break;
          _ref4 = _i4.value;
        }

        var name = _ref4;

        this.view.setState(name, this.viewState[name]);
      }
    }
  };

  BookController.prototype.getActions = function getActions() {
    var _this9 = this;

    var isSwipping = function isSwipping(name) {
      return _this9.actions.touchCmdSwipe.enabled && _this9.actions.touchCmdSwipe.code === _this9.actions[name].code && _this9.state.smartPan && _this9.bookWatcher.scale <= 1;
    },
        cmds = {};

    var _loop2 = function _loop2(name) {
      if (name.indexOf('cmd') === 0) {
        cmds[name] = {
          activate: function activate() {
            if (_this9.viewState && _this9.viewState[name].enable) {
              _this9[name].apply(_this9, arguments);
            }
          }
        };
      }
    };

    for (var name in this) {
      _loop2(name);
    }

    return _extends({}, cmds, {
      cmdPanLeft: {
        activate: function activate(e) {
          return _this9.orbit.actions.pan(e, {
            state: 'move',
            dx: -_this9.p.pan.speed,
            dy: 0
          });
        }
      },
      cmdPanRight: {
        activate: function activate(e) {
          return _this9.orbit.actions.pan(e, {
            state: 'move',
            dx: _this9.p.pan.speed,
            dy: 0
          });
        }
      },
      cmdPanUp: {
        activate: function activate(e) {
          return _this9.orbit.actions.pan(e, {
            state: 'move',
            dx: 0,
            dy: -_this9.p.pan.speed
          });
        }
      },
      cmdPanDown: {
        activate: function activate(e) {
          return _this9.orbit.actions.pan(e, {
            state: 'move',
            dx: 0,
            dy: _this9.p.pan.speed
          });
        }
      },
      mouseCmdRotate: {
        activate: this.orbit.actions.rotate
      },
      mouseCmdDragZoom: {
        activate: function activate(e, data) {
          if (data.dy > 0) {
            _this9.cmdZoomOut();
          } else if (data.dy < 0) {
            _this9.cmdZoomIn();
          }
        }
      },
      mouseCmdPan: {
        activate: this.orbit.actions.pan
      },
      mouseCmdWheelZoom: {
        activate: function activate(e) {
          var scale = _this9.bookWatcher.scale;
          if (e.deltaY < 0) {
            _this9.cmdZoomOut();
          } else if (e.deltaY > 0) {
            _this9.cmdZoomIn();
          }
          if (!_this9.state.smartPan || Math.abs(_this9.bookWatcher.scale - scale) > 1e-4) {
            e.preventDefault();
          }
        }
      },
      touchCmdRotate: {
        activate: function activate(e, data) {
          if (!isSwipping('touchCmdRotate')) {
            if (data.state === 'move') {
              e.preventDefault();
            }
            _this9.orbit.actions.rotate(e, data);
          }
        }
      },
      touchCmdZoom: {
        activate: function activate(e, data) {
          if (!isSwipping('touchCmdZoom')) {
            var l = function l(v) {
              return Math.sqrt(v.x * v.x + v.y * v.y);
            };
            if (data.state === 'start') {
              _this9.touchZoomData = {
                l: l(data),
                scale: _this9.bookWatcher.scale
              };
            } else if (data.state === 'move') {
              e.preventDefault();
              _this9.setScale(l(data) / _this9.touchZoomData.l * _this9.touchZoomData.scale);
            }
          }
        }
      },
      touchCmdPan: {
        activate: function activate(e, data) {
          if (!isSwipping('touchCmdPan')) {
            if (data.state === 'move' && (!_this9.state.smartPan || _this9.bookWatcher.scale > 1)) {
              e.preventDefault();
              _this9.orbit.actions.pan(e, data);
            }
          }
        }
      },
      touchCmdSwipe: {
        activate: function activate(e, data) {
          if (isSwipping('touchCmdSwipe')) {
            if (data.state === 'start') {
              var touch = (e.touches || e.originalEvent.touches)[_this9.actions.touchCmdSwipe.code - 1];
              _this9.swipeData = {
                handled: false,
                x0: touch.pageX,
                y0: touch.pageY,
                x: touch.pageX,
                y: touch.pageY
              };
            } else if (data.state === 'move') {
              // e.preventDefault();
              if (!_this9.swipeData.handled) {
                _this9.swipeData = _extends({}, _this9.swipeData, {
                  x: _this9.swipeData.x + data.dx,
                  y: _this9.swipeData.y + data.dy
                });
                if (Math.abs(_this9.swipeData.x0 - _this9.swipeData.x) > 100) {
                  _this9.swipeData.x0 > _this9.swipeData.x ? _this9.cmdForward() : _this9.cmdBackward();
                  _this9.swipeData.handled = true;
                }
              }
            } else {
              delete _this9.swipeData;
            }
          }
        }
      },
      widSettings: {
        activate: function activate() {
          return undefined;
        }
      },
      widToolbar: {
        activate: function activate() {
          return undefined;
        }
      }
    });
  };

  BookController.prototype.bindActions = function bindActions() {
    var _this10 = this;

    this.eToA = new _EventsToActions2.default((0, _libs.$)(this.visual.element));
    this.eToA.addAction(function (e) {
      return e.preventDefault();
    }, 'contextmenu', _EventsToActions2.default.mouseButtons.Right, 0);
    this.eToA.addAction(function (e) {
      return (0, _libs.$)(_this10.view.getParentContainer()).trigger(e);
    }, 'keydown', 27, 0);

    this.actions = this.getActions();
    for (var _iterator5 = Object.keys(this.actions), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
      var _ref5;

      if (_isArray5) {
        if (_i5 >= _iterator5.length) break;
        _ref5 = _iterator5[_i5++];
      } else {
        _i5 = _iterator5.next();
        if (_i5.done) break;
        _ref5 = _i5.value;
      }

      var name = _ref5;

      var action = _extends({}, this.actions[name], this.p.actions[name]);
      this.actions[name] = action;
      if (name.indexOf('mouseCmd') !== 0 && name.indexOf('touchCmd') !== 0 || action.enabled) {
        var flags = action.flags || 0;
        if (action.type) {
          this.eToA.addAction(action.activate, action.type, action.code, flags);
        } else if (action.code !== undefined) {
          this.eToA.addAction(action.activate, 'keydown', action.code, flags);
        }
      }
    }
  };

  BookController.prepareProps = function prepareProps(props) {
    return BookController.calcProps(BookController.mergeProps((0, _bookController.props)(), props));
  };

  BookController.setActions = function setActions(props, actions) {
    for (var _iterator6 = Object.keys(actions || {}), _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
      var _ref6;

      if (_isArray6) {
        if (_i6 >= _iterator6.length) break;
        _ref6 = _iterator6[_i6++];
      } else {
        _i6 = _iterator6.next();
        if (_i6.done) break;
        _ref6 = _i6.value;
      }

      var name = _ref6;

      props.actions[name] = _extends({}, props.actions[name], actions[name]);
    }
  };

  BookController.mergeProps = function mergeProps(first, second) {
    second = second || {};
    function merge(first, second) {
      second = second || {};
      var props = _extends({}, first, second);
      for (var _iterator7 = Object.keys(first), _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {
        var _ref7;

        if (_isArray7) {
          if (_i7 >= _iterator7.length) break;
          _ref7 = _iterator7[_i7++];
        } else {
          _i7 = _iterator7.next();
          if (_i7.done) break;
          _ref7 = _i7.value;
        }

        var name = _ref7;

        if (_typeof(first[name]) === 'object') {
          props[name] = merge(first[name], second[name]);
        }
      }
      return props;
    }
    var props = merge(first, second);
    BookController.setActions(props, first.actions);
    BookController.setActions(props, second.actions);
    return props;
  };

  BookController.calcProps = function calcProps(props) {
    props.scale.delta = (props.scale.max - props.scale.min) / props.scale.levels;
    return props;
  };

  return BookController;
}(_Controller3.default);

exports.default = BookController;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(1);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BookPrinter = function (_THREE$EventDispatche) {
  _inherits(BookPrinter, _THREE$EventDispatche);

  function BookPrinter(context, book, styleSheet) {
    _classCallCheck(this, BookPrinter);

    var _this = _possibleConstructorReturn(this, _THREE$EventDispatche.call(this));

    _this.book = book;
    _this.styleSheet = styleSheet;
    _this.wnd = context.wnd;
    _this.doc = context.doc;
    _this.pageCallback = book.getPageCallback();
    var test = _this.pageCallback(0);
    _this.type = test.type;
    if (_this.type === 'pdf') {
      _this.pdfSrc = test.src.src;
    }
    return _this;
  }

  BookPrinter.prototype.cancel = function cancel() {
    this.canceled = true;
  };

  BookPrinter.prototype.dispose = function dispose() {
    if (this.frame) {
      this.frame.remove();
      delete this.frame;
    }
  };

  BookPrinter.prototype.print = function print() {
    var _this2 = this;

    if (this.loading) {
      return;
    }
    delete this.canceled;
    if (this.type === 'pdf') {
      var printWnd = void 0,
          callManually = false;
      if (this.useIFrame()) {
        callManually = !!this.frame;
        if (!this.frame) {
          this.frame = (0, _libs.$)('<iframe src="' + this.pdfSrc + '" style="display: none;"></iframe>').appendTo(document.body);
        }
        printWnd = this.frame[0].contentWindow;
      } else {
        printWnd = this.wnd.open(this.pdfSrc);
      }
      if (callManually) {
        printWnd.print();
      } else {
        this.loading = true;
        this.dispatchEvent({ type: 'loading' });
        (0, _libs.$)(this.frame).on('load', function () {
          setTimeout(function () {
            delete _this2.loading;
            _this2.dispatchEvent({ type: 'loaded' });
            try {
              printWnd.print();
            } catch (e) {
              console.error(e);
            }
          }, 1000);
        });
      }
    } else {
      this.renderContent().then(function (content) {
        var printWnd = _this2.wnd.open(),
            printDoc = printWnd.document,
            html = ('\n            <!DOCTYPE html>\n            <html>\n              <head>\n                <meta charset="utf-8">\n                <title>3D FlipBook - Printing</title>\n                ' + content.head + '\n                <script type="text/javascript">\n                  function printDocument() {\n                    window.print();\n                    window.close();\n                  }\n                  function init() {\n                    setTimeout(printDocument, 100);\n                  }\n                </script>\n              </head>\n              <body onload="init()">\n                ' + content.body + '\n              </body>\n            </html>\n          ').fb3dQFilter();
        printDoc.open();
        printDoc.write(html);
        printDoc.close();
      }).catch(function (e) {
        return console.warn('3D FlipBook - Printing was canceled');
      });
    }
  };

  BookPrinter.prototype.progress = function progress(v) {
    if (this.canceled) {
      throw 'Cancel Printing';
    }
    if (this.onProgress) {
      this.onProgress(Math.floor(v * 100));
    }
  };

  BookPrinter.prototype.renderContent = function renderContent() {
    var _this3 = this;

    var pages = this.book.getPages(),
        head = new Set(),
        body = [];
    var done = Promise.resolve();

    var _loop = function _loop(page) {
      var info = _this3.pageCallback(page);
      if (info.type === 'image') {
        done = done.then(function () {
          _this3.progress(page / pages);
          return _this3.renderImage(head, body, info.src);
        });
      } else if (info.type === 'html') {
        done = done.then(function () {
          _this3.progress(page / pages);
          return _this3.renderHtml(head, body, info.src);
        });
      }
    };

    for (var page = 0; page < pages; ++page) {
      _loop(page);
    }
    return done.then(function () {
      _this3.progress(1);
      return { head: _this3.renderHead(head), body: body.join('\n') };
    });
  };

  BookPrinter.wrap = function wrap(content) {
    return '<div class="fb3d-printer-page">' + content + '</div>';
  };

  BookPrinter.prototype.renderImage = function renderImage(head, body, src) {
    body.push(BookPrinter.wrap('<img src="' + src + '" />'));
  };

  BookPrinter.prototype.renderHtml = function renderHtml(head, body, src) {
    return new Promise(function (resolve, reject) {
      _libs.$.get(src, function (html) {
        var links = html.match(/<link.*?>/ig) || [];
        for (var _iterator = links, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var link = _ref;

          if (link.match(/stylesheet/i)) {
            var href = link.match(/href\s*=\s*['"](.*)['"]/i);
            if (href) {
              head.add(href[1]);
            }
          }
        }
        var content = html.match(/<body.*?>([\S\s]*)<\/body>/i);
        if (content) {
          body.push(BookPrinter.wrap(content[1]));
        }
        resolve();
      }).fail(function (e) {
        console.error(e.responseText);
        reject();
      });
    });
  };

  BookPrinter.prototype.renderHead = function renderHead(head) {
    var content = [];
    head.forEach(function (k) {
      return content.push('<link rel="stylesheet" href="' + k + '">');
    });
    content.push(this.styleSheet ? '<link rel="stylesheet" href="' + this.styleSheet + '">' : BookPrinter.defaultStyleSheet());
    return content.join('\n');
  };

  BookPrinter.prototype.useIFrame = function useIFrame() {
    var isChromium = this.wnd.chrome,
        winNav = this.wnd.navigator,
        vendorName = winNav.vendor,
        isIEedge = winNav.userAgent.indexOf("Edge") > -1,
        isIOSChrome = winNav.userAgent.match("CriOS");
    var use = void 0;
    if (isIOSChrome) {
      use = true;
    } else if (isChromium && vendorName === 'Google Inc.' && !isIEedge) {
      use = true;
    } else {
      use = false;
    }
    return true;
  };

  BookPrinter.defaultStyleSheet = function defaultStyleSheet() {
    return '\n      <style type="text/css">\n        body {\n          margin: 0;\n          padding: 0;\n        }\n        .fb3d-printer-page {\n          page-break-after: always;\n        }\n      </style>\n    '.fb3dQFilter();
  };

  return BookPrinter;
}(_libs.THREE.EventDispatcher);

exports.default = BookPrinter;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(1);

var _View2 = __webpack_require__(69);

var _View3 = _interopRequireDefault(_View2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BookView = function (_View) {
  _inherits(BookView, _View);

  function BookView(container, onLoad, template, handler) {
    _classCallCheck(this, BookView);

    return _possibleConstructorReturn(this, _View.call(this, container, onLoad, template, handler));
  }

  BookView.prototype.initView = function initView() {
    this.view = this.container.find('.view');
    this.bookmarksView = this.container.find('.widBookmarks');
    this.thumbnailsView = this.container.find('.widThumbnails');
    this.searchView = this.container.find('.widSearch');
  };

  BookView.prototype.getHandlers = function getHandlers(id) {
    var _this2 = this;

    var handlers = void 0;
    if (id === 'inpPage') {
      handlers = [{
        inpPage: function inpPage(e, data) {
          return _this2.callLater(_View.prototype.getHandlers.call(_this2, id), id, e, data, BookView.PAGE_HANDLER_DELAY);
        }
      }];
    } else {
      handlers = _View.prototype.getHandlers.call(this, id);
    }
    return handlers;
  };

  BookView.prototype.onItemStateChanged = function onItemStateChanged(id, state) {
    if (id === 'cmdFullScreen') {
      if (state.active) {
        this.parentContainer.addClass('fullscreen');
      } else {
        this.parentContainer.removeClass('fullscreen');
      }
    }
  };

  BookView.prototype.getView = function getView() {
    return this.view;
  };

  BookView.prototype.getBookmarksView = function getBookmarksView() {
    return this.bookmarksView;
  };

  BookView.prototype.getThumbnailsView = function getThumbnailsView() {
    return this.thumbnailsView;
  };

  BookView.prototype.getSearchView = function getSearchView() {
    return this.searchView;
  };

  BookView.prototype.getForms = function getForms() {
    return [];
  };

  BookView.prototype.getLinks = function getLinks() {
    return ['cmdZoomIn', 'cmdZoomOut', 'cmdDefaultZoom', 'cmdToc', 'cmdBackward', 'cmdBigBackward', 'cmdForward', 'cmdBigForward', 'cmdSave', 'cmdPrint', 'cmdFullScreen', 'cmdSmartPan', 'cmdSinglePage', 'cmdSounds', 'cmdStats', 'cmdShare', 'cmdCloseToc', 'cmdCloseShare', 'cmdBookmarks', 'cmdSearch', 'cmdThumbnails', 'cmdPendingPlay', 'cmdFacebook', 'cmdTwitter', 'cmdEmail', 'cmdAutoPlay', 'cmdGotoFirstPage', 'cmdGotoLastPage'];
  };

  BookView.prototype.getWidgets = function getWidgets() {
    return ['widLoadingProgress', 'widUserMessage', 'widFloatWnd', 'widShare', 'widTocMenu', 'widBookmarks', 'widThumbnails', 'widSearch', 'widControls', 'widSettings', 'widLoading', 'widPendingPlay', 'widToolbar'];
  };

  BookView.prototype.getInputs = function getInputs() {
    return ['inpPage', 'inpPages'];
  };

  BookView.prototype.getTexts = function getTexts() {
    return ['txtLoadingProgress', 'txtUserMessage', 'txtShareLink'];
  };

  BookView.prototype.getTemplate = function getTemplate() {
    return {
      html: 'templates/default-book-view.html',
      styles: ['css/black-book-view.css'],
      links: [{
        rel: 'stylesheet',
        href: 'css/font-awesome.min.css'
      }],
      script: 'js/default-book-view.js'
    };
  };

  return BookView;
}(_View3.default);

BookView.PAGE_HANDLER_DELAY = 1000;
exports.default = BookView;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _BookPropsBuilder2 = __webpack_require__(9);

var _BookPropsBuilder3 = _interopRequireDefault(_BookPropsBuilder2);

var _ImageFactory = __webpack_require__(8);

var _ImageFactory2 = _interopRequireDefault(_ImageFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ClbBookPropsBuilder = function (_BookPropsBuilder) {
  _inherits(ClbBookPropsBuilder, _BookPropsBuilder);

  function ClbBookPropsBuilder(context, pageCallback, pages, onReady, style) {
    _classCallCheck(this, ClbBookPropsBuilder);

    var _this = _possibleConstructorReturn(this, _BookPropsBuilder.call(this, onReady, style));

    _this.calcSheets(pages);
    _this.pages = pages;
    _this.pageCallback = pageCallback;
    _this.binds = {
      pageCallback: pageCallback.bind(_this)
    };
    _this.imageFactory = new _ImageFactory2.default(context);

    if (pages > 0) {
      var test = _this.imageFactory.build(pageCallback(0), 0, _this.defaults.sheet.widthTexels, _this.defaults.sheet.heightTexels, _this.defaults.sheet.color);
      test.onLoad = function () {
        _this.calcProps(test.width, test.height);
        test.dispose();
        _this.ready();
      };
    } else {
      _this.props = _this.defaults;
      _this.ready();
    }
    return _this;
  }

  return ClbBookPropsBuilder;
}(_BookPropsBuilder3.default);

exports.default = ClbBookPropsBuilder;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _SheetBlock2 = __webpack_require__(10);

var _SheetBlock3 = _interopRequireDefault(_SheetBlock2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Cover = function (_SheetBlock) {
  _inherits(Cover, _SheetBlock);

  function Cover(visual, p, angle, state) {
    _classCallCheck(this, Cover);

    return _possibleConstructorReturn(this, _SheetBlock.call(this, visual, p, 0, 1, angle, state));
  }

  Cover.prototype.getProps = function getProps() {
    return _extends({}, this.p.cover, {
      sheets: 1
    });
  };

  Cover.prototype.loadPoints = function loadPoints() {
    var openedInterpolationIndeces = [{
      left: [2, 3, 4],
      right: [2, 3, 4]
    }],
        closedInterpolationIndeces = [[0, 1, 2]],
        interpolationPoints = [{
      x: [[0, 0.2877, 0.6347, 0.8174, 1.0000], [0, 0.2831, 0.6256, 0.8082, 0.9909], [0, 0.2603, 0.5936, 0.7763, 0.9589], [0, 0.1370, 0.3881, 0.5342, 0.6758], [0, 0, 0, 0, 0]],
      y: [[0, 0, 0, 0, 0], [0, 0.02, 0.005, -0.001, -0.0025], [0, 0.04, 0.01, -0.002, -0.005], [0, 0.2466, 0.4795, 0.5708, 0.6758], [0, 0.2877, 0.6347, 0.8174, 1.0000]]
    }];
    return {
      interpolationPoints: interpolationPoints,
      openedInterpolationIndeces: openedInterpolationIndeces,
      closedInterpolationIndeces: closedInterpolationIndeces
    };
  };

  return Cover;
}(_SheetBlock3.default);

exports.default = Cover;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _SheetCssLayer = __webpack_require__(40);

var _SheetCssLayer2 = _interopRequireDefault(_SheetCssLayer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CssLayersManager = function () {
  function CssLayersManager(book) {
    _classCallCheck(this, CssLayersManager);

    this.book = book;
    this.props = book.p.cssLayerProps;
    this.visual = book.visual;
    this.pageManager = book.pageManager;
    this.wrappers = {};
    this.pendings = [];
  }

  CssLayersManager.prototype.getActives = function getActives() {
    var page = this.book.getPage(),
        pages = this.book.getBookPages(),
        acs = page === 0 || page === pages - 1 ? [page] : [page, page + 1];
    if (!this.wrappers[0] && page !== 0) {
      acs = [0].concat(acs);
    }
    return acs;
  };

  CssLayersManager.prototype.dispose = function dispose() {
    for (var _iterator = Object.values(this.wrappers), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var w = _ref;

      w.layers.forEach(function (l) {
        return l.dispose();
      });
    }
    delete this.wrappers;
  };

  CssLayersManager.prototype.show = function show() {
    var _this = this;

    this.hidden = false;

    var _loop = function _loop() {
      if (_isArray2) {
        if (_i2 >= _iterator2.length) return 'break';
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) return 'break';
        _ref2 = _i2.value;
      }

      var n = _ref2;

      var w = _this.wrappers[n];
      if (w) {
        if (w.state === 'ready' && w.layers.length) {
          var block = _this.book.getBlockByPage(n);
          w.layers.forEach(function (l) {
            if (l.isHidden()) {
              l.update(block);
              l.show();
            }
          });
        }
      } else {
        var _w = _this.wrappers[n] = {
          state: 'loading',
          layers: []
        };
        Promise.resolve().then(function () {
          _this.pageManager.getLayers(n, function (layers) {
            var finish = function finish() {
              if (layers.length && _this.wrappers) {
                var _block = _this.book.getBlockByPage(n);
                for (var _iterator3 = layers, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                  var _ref3;

                  if (_isArray3) {
                    if (_i3 >= _iterator3.length) break;
                    _ref3 = _iterator3[_i3++];
                  } else {
                    _i3 = _iterator3.next();
                    if (_i3.done) break;
                    _ref3 = _i3.value;
                  }

                  var l = _ref3;

                  var sl = new _SheetCssLayer2.default(_this.visual, _block, _extends({}, _this.props, { pageNumber: n }));
                  _w.layers.push(sl);
                  sl.set(l.css, l.html, l.js);
                }
                setTimeout(function () {
                  if (!_this.hidden && ~_this.getActives().indexOf(n)) {
                    _w.layers.forEach(function (l) {
                      return l.show();
                    });
                  }
                }, 10);
              }
              _w.state = 'ready';
            };
            if (_this.wrappers && (n === 0 || _this.wrappers[0].state !== 'loading')) {
              finish();
              if (n === 0) {
                for (var _iterator4 = _this.pendings, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
                  var _ref4;

                  if (_isArray4) {
                    if (_i4 >= _iterator4.length) break;
                    _ref4 = _iterator4[_i4++];
                  } else {
                    _i4 = _iterator4.next();
                    if (_i4.done) break;
                    _ref4 = _i4.value;
                  }

                  var f = _ref4;

                  f();
                }
                _this.pendings = [];
              }
            } else {
              _this.pendings.push(finish);
            }
          });
        });
      }
    };

    for (var _iterator2 = this.getActives(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      var _ret = _loop();

      if (_ret === 'break') break;
    }
  };

  CssLayersManager.prototype.hide = function hide() {
    this.hidden = true;
    var wait = [];
    for (var _iterator5 = Object.values(this.wrappers), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
      var _ref5;

      if (_isArray5) {
        if (_i5 >= _iterator5.length) break;
        _ref5 = _iterator5[_i5++];
      } else {
        _i5 = _iterator5.next();
        if (_i5.done) break;
        _ref5 = _i5.value;
      }

      var _w2 = _ref5;

      _w2.layers.forEach(function (l) {
        return wait.push(l.hide());
      });
    }
    return Promise.all(wait);
  };

  return CssLayersManager;
}();

exports.default = CssLayersManager;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _Cache = __webpack_require__(14);

var _Cache2 = _interopRequireDefault(_Cache);

var _LoadingAnimation = __webpack_require__(55);

var _LoadingAnimation2 = _interopRequireDefault(_LoadingAnimation);

var _ImageFactory = __webpack_require__(8);

var _ImageFactory2 = _interopRequireDefault(_ImageFactory);

var _TextureAnimator = __webpack_require__(63);

var _TextureAnimator2 = _interopRequireDefault(_TextureAnimator);

var _GraphUtils = __webpack_require__(4);

var _GraphUtils2 = _interopRequireDefault(_GraphUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PageManager = function () {
  function PageManager(visual, book, p) {
    _classCallCheck(this, PageManager);

    this.visual = visual;
    this.book = book;
    this.pageQuery = '';
    this.p = p;
    this.pageCache = new _Cache2.default(p.cachedPages);
    this.resourcesCache = new _Cache2.default();

    this.canvases = [];
    for (var i = 0; i < 5; ++i) {
      var c = _GraphUtils2.default.createCanvas();
      this.canvases.push({ c: c, ctx: c.getContext('2d', { willReadFrequently: true, desynchronized: false }) });
    }
    this.nextCanvas = 0;

    this.imageFactory = new _ImageFactory2.default(_extends({}, visual, { dispatchEvent: book.dispatchEvent.bind(book), renderCanvas: this.canvases[0].c, renderCanvasCtx: this.canvases[0].ctx }), this.resourcesCache);

    this.loadings = [];
    this.renderQueue = [];
    this.predictedRequests = [];

    this.tmpMaterial = new _libs.THREE.MeshBasicMaterial();
    visual.addObject(new _libs.THREE.Mesh(new _libs.THREE.PlaneGeometry(1e-3, 1e-3), this.tmpMaterial));

    this.loadingAnimation = true;
    this.loading = {};
    this.loading[p.cover.color] = this.createLoadingTexture(p.cover);
    if (p.page.color !== p.cover.color) {
      this.loading[p.page.color] = this.createLoadingTexture(p.page);
    }

    this.book.addEventListener('afterAnimation', this.loadPredictedPages.bind(this));

    this.turnOnEvents();

    visual.addRenderCallback(this.update.bind(this));

    Promise.resolve().then(this.updateRenderQueue.bind(this));
  }

  PageManager.prototype.createLoadingTexture = function createLoadingTexture(p) {
    var spriteTiles = 6,
        heightTexels = p.height / p.width * p.widthTexels,
        scale = Math.sqrt(4.5 * 210 * 4.5 * 297 / (p.widthTexels * heightTexels)),
        animation = new _LoadingAnimation2.default(scale * p.widthTexels, scale * heightTexels, p.color),
        animator = new _TextureAnimator2.default(animation.createSprite(spriteTiles), spriteTiles, 1, spriteTiles, 0.2);
    animation.dispose();
    return animator;
  };

  PageManager.prototype.dispose = function dispose() {
    this.turnOffEvents();
    for (var _iterator = Object.keys(this.loading), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var color = _ref;

      this.loading[color].dispose();
    }
    delete this.loading;
    this.resourcesCache.dispose();
    this.pageCache.dispose();
    for (var _iterator2 = this.canvases, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var o = _ref2;

      o.c.height = o.c.width = 0;
    }
    delete this.canvases;
  };

  PageManager.prototype.isCover = function isCover(n) {
    return n < 2 || n >= 2 * (this.p.sheets + 1);
  };

  PageManager.prototype.isMobile = function isMobile() {
    return this.visual.isMobile();
  };

  PageManager.prototype.getPageState = function getPageState(n) {
    var object = this.pageCache.get(n);
    return object ? object.state : undefined;
  };

  PageManager.prototype.enableLoadingAnimation = function enableLoadingAnimation(enable) {
    this.loadingAnimation = enable;
    for (var _iterator3 = this.loadings, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i3 >= _iterator3.length) break;
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) break;
        _ref3 = _i3.value;
      }

      var o = _ref3;

      this.setupMaterial(o);
    }
  };

  PageManager.prototype.update = function update(dt) {
    if (this.loadingAnimation) {
      var loading = {};
      for (var _iterator4 = this.loadings, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
        var _ref4;

        if (_isArray4) {
          if (_i4 >= _iterator4.length) break;
          _ref4 = _iterator4[_i4++];
        } else {
          _i4 = _iterator4.next();
          if (_i4.done) break;
          _ref4 = _i4.value;
        }

        var o = _ref4;

        if (o.isActive()) {
          loading[o.color] = true;;
        }
      }
      for (var _iterator5 = Object.keys(loading), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
        var _ref5;

        if (_isArray5) {
          if (_i5 >= _iterator5.length) break;
          _ref5 = _iterator5[_i5++];
        } else {
          _i5 = _iterator5.next();
          if (_i5.done) break;
          _ref5 = _i5.value;
        }

        var color = _ref5;

        this.loading[color].update(dt);
        this.book.updateThree();
      }
    }
  };

  PageManager.prototype.removeFromLoadings = function removeFromLoadings(o) {
    var i = this.loadings.indexOf(o);
    if (~i) {
      this.loadings.splice(i, 1);
    }
  };

  PageManager.prototype.removeFromRenderQueue = function removeFromRenderQueue(o) {
    var i = this.renderQueue.indexOf(o);
    if (~i) {
      this.renderQueue.splice(i, 1);
    }
  };

  PageManager.prototype.refreshPageQuery = function refreshPageQuery(n) {
    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    this.pageQuery = query;
    var object = this.pageCache.get(n);
    if (object && object.wrapper && object.wrapper.setQuery) {
      if (!this.pageCache.remove(n)) {
        object.wrapper.setQuery(query);
        this.pushInRenderQueue(object);
      }
    }
  };

  PageManager.prototype.refreshZoom = function refreshZoom() {
    var _this = this;

    if (this.p.autoResolution.enabled) {
      if (this.rendering && this.rendering.wrapper) {
        this.rendering.wrapper.cancelRender();
      }
      var es = [];
      this.pageCache.forEach(function (e) {
        es.push(e);
      });
      es.forEach(function (e) {
        var object = e[1];
        if (object && object.wrapper) {
          if (!_this.pageCache.remove(e[0])) {
            _this.pushInRenderQueue(object);
          }
        }
      });
    }
  };

  PageManager.prototype.getLayers = function getLayers(n, clb) {
    var _this2 = this;

    var cssLayersLoader = this.p.cssLayersLoader ? this.p.cssLayersLoader : function (n, f) {
      return f([]);
    };
    cssLayersLoader(n, function (layers) {
      var object = _this2.pageCache.get(n);
      if (object) {
        (object.wrapper.getCSSLayer && _this2.p.highlightLinks ? object.wrapper.getCSSLayer() : Promise.resolve()).then(function (l) {
          if (l || layers[0]) {
            l = l || {};
            layers[0] = layers[0] || {};
            layers[0] = {
              html: (l.html || '') + (layers[0].html || ''),
              css: (l.css || '') + (layers[0].css || ''),
              js: layers[0].js
            };
          }
          if (object.state !== 'active') {
            object.pendings.push({ clb: clb, args: [layers] });
          } else {
            clb(layers);
          }
        });
      }
    });
  };

  PageManager.prototype.resolvePendings = function resolvePendings(pendings) {
    for (var _iterator6 = pendings, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
      var _ref6;

      if (_isArray6) {
        if (_i6 >= _iterator6.length) break;
        _ref6 = _iterator6[_i6++];
      } else {
        _i6 = _iterator6.next();
        if (_i6.done) break;
        _ref6 = _i6.value;
      }

      var p = _ref6;

      try {
        p.clb.apply(p, p.args);
      } catch (e) {
        console.error(e);
      }
    }
    pendings.splice(0, pendings.length);
  };

  PageManager.prototype.rtlPageN = function rtlPageN(n) {
    return this.p.rtl ? this.book.getBookPages() - 1 - n : n;
  };

  PageManager.prototype.load = function load(material, n) {
    var _this3 = this;

    var pi = this.rtlPageN(n) < this.book.getPages() ? this.p.pageCallback(this.rtlPageN(n)) : { type: 'blank' },
        p = this.isCover(n) ? this.p.cover : this.p.page;
    var o = {
      n: n,
      texture: new _libs.THREE.Texture(),
      wrapper: null,
      state: 'loading',
      locked: function locked(n) {
        return o.state === 'loading' || o.state === 'rendering' || _this3.book.isActivePage(n);
      },
      color: p.color,
      isActive: function isActive() {
        return _this3.book.isActivePage(n);
      },
      isTop: function isTop() {
        return ~_this3.book.getTopPages().indexOf(n);
      },
      dispose: function dispose() {
        _this3.removeFromLoadings(o);
        _this3.removeFromRenderQueue(o);
        if (o.wrapper && o.wrapper.dispose) {
          o.wrapper.dispose();
        }
        o.texture.dispose();
        delete o.texture;
        delete o.wrapper;
      },
      pendings: []
    };
    o.texture.minFilter = _libs.THREE.LinearFilter;
    this.loadings.push(o);
    this.setMaterial(o, material);

    Promise.resolve().then(function () {
      if (o.texture) {
        o.widthTexels = pi.widthTexels || p.widthTexels;
        o.heightTexels = p.height / p.width * p.widthTexels;
        var res = _this3.calcResolution(o);
        o.wrapper = _this3.imageFactory.build(pi, pi.number === undefined ? _this3.rtlPageN(n) : pi.number, res.width, res.height, p.color, _this3.p.injector);
        if (o.wrapper.setQuery) {
          o.wrapper.setQuery(_this3.pageQuery);
        }
        o.simulate = pi.interactive ? (o.wrapper.simulate || function () {
          return undefined;
        }).bind(o.wrapper) : undefined;
        o.wrapper.onLoad = function () {
          o.state = 'loaded';
          _this3.pushInRenderQueue(o);
          // this.book.dispatchEvent({
          //   type: 'loadedPage',
          //   page: n
          // });
        };
        o.wrapper.onChange = function (image, canceled) {
          if (canceled) {
            if (o.state !== 'queuedForRender') {
              o.state = 'loaded';
              if (o.wrapper) {
                _this3.pushInRenderQueue(_this3.rendering);
              }
            }
            delete _this3.rendering;
          } else {
            if (o.texture) {
              _this3.removeFromLoadings(o);
              if (o.material) {
                o.material.map = o.texture;
                o.material.color = new _libs.THREE.Color(0xFFFFFF);
                o.material.needsUpdate = true;
              }
              o.texture.image = image;
              o.texture.needsUpdate = true;
              o.texture.onUpdate = function () {
                if (o.texture) {
                  o.texture.onUpdate = null;
                }
                _this3.tmpMaterial.map = null;
                _this3.tmpMaterial.needsUpdate = true;
                // setTimeout(()=>{
                if (o.state !== 'queuedForRender') {
                  o.state = 'active';
                  _this3.resolvePendings(o.pendings);
                }
                delete _this3.rendering;
                _this3.book.dispatchEvent({
                  type: 'endRendering',
                  page: o.n
                });
                //this.updateRenderQueue();
                // }, 100);
              };
              _this3.tmpMaterial.map = o.texture;
              _this3.tmpMaterial.needsUpdate = true;
            }
          }
        };
      }
    });
    // this.book.dispatchEvent({
    //   type: 'loadPage',
    //   page: n
    // });
    return this.pageCache.put(n, o);
  };

  PageManager.prototype.isSinglePage = function isSinglePage(o) {
    return this.p.singlePage /* || !o.n || o.n===this.book.getBookPages()-1*/;
  };

  PageManager.prototype.calcResolution = function calcResolution(o) {
    var res = void 0;
    if (this.p.autoResolution.enabled) {
      var k = this.p.autoResolution.coefficient * this.p.zoom * Math.sqrt(this.visual.wnd.devicePixelRatio || 1) * Math.min((this.isSinglePage(o) ? 1 : 0.5) * this.visual.width() / o.widthTexels, this.visual.height() / o.heightTexels);
      res = {
        width: k * o.widthTexels,
        height: k * o.heightTexels
      };
      var minRes = this.p.autoResolution.min,
          maxRes = this.p.autoResolution.max;
      if (res.width < minRes) {
        res = {
          width: minRes,
          height: minRes * o.heightTexels / o.widthTexels
        };
      }
      if (res.height < minRes) {
        res = {
          width: minRes * o.widthTexels / o.heightTexels,
          height: minRes
        };
      }
      if (res.width > maxRes) {
        res = {
          width: maxRes,
          height: maxRes * o.heightTexels / o.widthTexels
        };
      }
      if (res.height > maxRes) {
        res = {
          width: maxRes * o.widthTexels / o.heightTexels,
          height: maxRes
        };
      }
    } else {
      res = {
        width: o.widthTexels,
        height: o.heightTexels
      };
    }
    return res;
  };

  PageManager.prototype.pushInRenderQueue = function pushInRenderQueue(o) {
    if (o.state !== 'queuedForRender' && o.state !== 'loading') {
      o.state = 'queuedForRender';
      this.renderQueue.push(o);
      // this.updateRenderQueue();
    }
  };

  PageManager.prototype.updateRenderQueue = function updateRenderQueue() {
    if (this.canvases) {
      var p = this.p;
      if (!this.rendering) {
        if (p.renderWhileFlipping || !this.book.isProcessing() && !this.visual.getOrbit().isMoving()) {
          var active = void 0,
              top = void 0;
          for (var _iterator7 = this.renderQueue, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {
            var _ref7;

            if (_isArray7) {
              if (_i7 >= _iterator7.length) break;
              _ref7 = _iterator7[_i7++];
            } else {
              _i7 = _iterator7.next();
              if (_i7.done) break;
              _ref7 = _i7.value;
            }

            var _o2 = _ref7;

            if (!active && _o2.isActive()) {
              active = _o2;
            }
            if (_o2.isTop()) {
              top = _o2;
              break;
            }
          }
          this.rendering = top || active;

          if (this.isMobile() && p.renderInactivePagesOnMobile || !this.isMobile() && p.renderInactivePages) {
            if (!this.rendering) {
              var ud = this.book.getUserDirection(),
                  near = {};
              for (var _iterator8 = this.renderQueue, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();;) {
                var _ref8;

                if (_isArray8) {
                  if (_i8 >= _iterator8.length) break;
                  _ref8 = _iterator8[_i8++];
                } else {
                  _i8 = _iterator8.next();
                  if (_i8.done) break;
                  _ref8 = _i8.value;
                }

                var o = _ref8;

                var id = ud.lastTopPage < o.n;
                if (!near[id] || Math.abs(near[id].n - ud.lastTopPage) > Math.abs(o.n - ud.lastTopPage)) {
                  near[id] = o;
                }
                this.rendering = near[ud.direction === 1] || near[ud.direction !== 1];
              }
            }
          }
          if (this.rendering) {
            if (this.rendering.wrapper && this.rendering.wrapper.startRender) {
              this.removeFromRenderQueue(this.rendering);
              this.rendering.state = 'rendering';
              var _o = this.canvases[this.nextCanvas];
              this.nextCanvas = (this.nextCanvas + 1) % this.canvases.length;
              this.rendering.wrapper.setRenderCanvas(_o.c, _o.ctx);
              this.rendering.wrapper.setResolution(this.calcResolution(this.rendering));
              this.rendering.wrapper.startRender();
              this.book.dispatchEvent({
                type: 'startRendering',
                page: _o.n
              });
            } else {
              delete this.rendering;
            }
          }
        }
      } else {
        if (this.rendering.wrapper) {
          this.rendering.wrapper.setRenderPause(!p.renderWhileFlipping && (this.book.isProcessing() || this.visual.getOrbit().isMoving()));
        }
        this.book.updateThree();
      }
      setTimeout(this.updateRenderQueue.bind(this), 100);
    }
  };

  PageManager.prototype.turnOnEvents = function turnOnEvents() {
    this.transferEvents = true;
  };

  PageManager.prototype.turnOffEvents = function turnOffEvents() {
    var mouseup = _libs.$.Event('mouseup'),
        mouseout = _libs.$.Event('mouseout');
    this.pageCache.forEach(function (ent) {
      var object = ent[1];
      if (object.simulate) {
        object.simulate(mouseup, undefined, 0, 0);
        object.simulate(mouseout, undefined, 0, 0);
      }
    });
    this.transferEvents = false;
  };

  PageManager.prototype.transferEventToTexture = function transferEventToTexture(n, e, data) {
    if (this.transferEvents) {
      var toObject = this.getOrLoadTextureObject(undefined, n);
      if (toObject.wrapper) {
        var uv = data.uv,
            toDoc = toObject.wrapper.getSimulatedDoc();
        this.pageCache.forEach(function (ent) {
          var object = ent[1];
          if (object.simulate) {
            object.simulate(e, toDoc, uv.x, uv.y);
          }
        });
      }
    }
  };

  PageManager.prototype.loadPredictedPages = function loadPredictedPages() {
    var _this4 = this;

    Promise.resolve().then(function () {
      var ud = _this4.book.getUserDirection();
      _this4.predictedRequests = [];
      for (var i = 0, p = ud.lastTopPage + ud.direction; i < _this4.p.preloadPages; ++i, p += ud.direction) {
        _this4.predictedRequests.push(p);
      }
      for (var _iterator9 = _this4.predictedRequests, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();;) {
        var _ref9;

        if (_isArray9) {
          if (_i9 >= _iterator9.length) break;
          _ref9 = _iterator9[_i9++];
        } else {
          _i9 = _iterator9.next();
          if (_i9.done) break;
          _ref9 = _i9.value;
        }

        var _p = _ref9;

        if (_p >= 0 && _p < _this4.book.getBookPages() && !_this4.pageCache.get(_p)) {
          _this4.load(undefined, _p);
        }
      }
    });
  };

  PageManager.prototype.setMaterial = function setMaterial(o, material) {
    this.pageCache.forEach(function (e) {
      var ob = e[1];
      if (o !== ob && ob.material === material) {
        delete ob.material;
      }
    });
    if (material && material !== o.material) {
      o.material = material;
      this.setupMaterial(o);
    }
  };

  PageManager.prototype.setupMaterial = function setupMaterial(o) {
    o.material.map = o.texture.image ? o.texture : this.loadingAnimation ? this.loading[o.color].texture : null;
    if (!o.material.map) {
      o.material.color = new _libs.THREE.Color(o.color);
    }
    o.material.needsUpdate = true;
  };

  PageManager.prototype.getOrLoadTextureObject = function getOrLoadTextureObject(material, n) {
    var object = this.pageCache.get(n);
    if (!object) {
      object = this.load(material, n);
    } else {
      this.setMaterial(object, material);
    }

    return object;
  };

  PageManager.prototype.setTexture = function setTexture(material, n) {
    this.getOrLoadTextureObject(material, n);
  };

  return PageManager;
}();

exports.default = PageManager;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _BookPropsBuilder2 = __webpack_require__(9);

var _BookPropsBuilder3 = _interopRequireDefault(_BookPropsBuilder2);

var _Pdf = __webpack_require__(19);

var _Pdf2 = _interopRequireDefault(_Pdf);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PdfBookPropsBuilder = function (_BookPropsBuilder) {
  _inherits(PdfBookPropsBuilder, _BookPropsBuilder);

  function PdfBookPropsBuilder(src, onReady, style, pdfOpenOptions) {
    _classCallCheck(this, PdfBookPropsBuilder);

    var _this = _possibleConstructorReturn(this, _BookPropsBuilder.call(this, onReady, style));

    _this.pdf = new _Pdf2.default(src, undefined, pdfOpenOptions);
    _this.pageDescription = {
      type: 'pdf',
      src: _this.pdf,
      interactive: true
    };
    _this.binds = {
      pageCallback: _this.pageCallback.bind(_this)
    };
    _this.pdf.getHandler(_this.init.bind(_this));
    return _this;
  }

  PdfBookPropsBuilder.prototype.dispose = function dispose() {
    this.pdf.dispose();
    _BookPropsBuilder.prototype.dispose.call(this);
  };

  PdfBookPropsBuilder.prototype.init = function init(handler) {
    var _this2 = this;

    var pages = this.pdf.getPagesNum();
    this.pages = pages;
    this.calcSheets(pages);
    if (pages > 0) {
      handler.getPage(1).then(function (page) {
        var viewport = page.getViewport({ scale: 1 }),
            size = { width: viewport.width, height: viewport.height };
        _this2.calcProps(size.width, size.height);
        _this2.ready();
      }).catch(function (e) {
        console.error(e);
      });
    } else {
      this.props = this.defaults;
      this.ready();
    }
  };

  PdfBookPropsBuilder.prototype.pageCallback = function pageCallback(n) {
    return this.pageDescription;
  };

  return PdfBookPropsBuilder;
}(_BookPropsBuilder3.default);

exports.default = PdfBookPropsBuilder;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(1);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PdfLinksHandler = function () {
  function PdfLinksHandler(pdf, ctrl, element) {
    _classCallCheck(this, PdfLinksHandler);

    this.pdf = pdf;
    this.ctrl = ctrl;
    this.element = (0, _libs.$)(element);
    this.cursors = [];
  }

  PdfLinksHandler.prototype.dispose = function dispose() {};

  PdfLinksHandler.prototype.setHandler = function setHandler(handler) {
    this.handler = handler;
  };

  PdfLinksHandler.prototype.defaultHandler = function defaultHandler(type, destination) {
    if (type === 'internal') {
      this.ctrl.goToPage(destination);
    } else if (type === 'external') {
      window.open(destination, '_blank');
    }
  };

  PdfLinksHandler.prototype.callHandlers = function callHandlers(type, destination) {
    if (!this.handler || !this.handler(type, destination)) {
      this.defaultHandler(type, destination);
    }
  };

  PdfLinksHandler.prototype.handleEvent = function handleEvent(data) {
    var _this = this;

    var e = data.event,
        anno = data.annotation;
    switch (e.type) {
      case 'mouseover':
        {
          this.cursors.push(this.element.css('cursor'));
          this.element.css('cursor', 'pointer');
          break;
        }
      case 'mouseout':
        {
          this.element.css('cursor', this.cursors.pop() || '');
          break;
        }
      case 'touchtap':
      case 'click':
        {
          if (anno.url) {
            this.callHandlers('external', anno.url);
          } else if (anno.dest) {
            this.pdf.getDestination(anno.dest).then(function (number) {
              return _this.callHandlers('internal', number);
            });
          }
          break;
        }
    }
  };

  return PdfLinksHandler;
}();

exports.default = PdfLinksHandler;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _Finder = __webpack_require__(17);

var _Finder2 = _interopRequireDefault(_Finder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SearchEngine = function () {
  function SearchEngine(pageCallback, pages) {
    _classCallCheck(this, SearchEngine);

    this.pageCallback = pageCallback;
    this.pages = pages;
    this.results = [];
  }

  SearchEngine.prototype.setQuery = function setQuery(query) {
    this.query = query;
    this.update = true;
    this.process();
  };

  SearchEngine.prototype.process = function process() {
    var _this = this;

    if (this.update) {
      var results = this.results;
      this.results = [];
      if (this.onPageHitsChanged) {
        for (var _iterator = results, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var res = _ref;

          this.onPageHitsChanged(undefined, '');
        }
      }
      this.update = false;
      this.page = 0;
      this.stamp = Date.now();
      if (this.query.length > 1) {
        this.process();
      }
    } else {
      if (this.page < this.pages) {
        var stamp = this.stamp;
        this.find(this.pageCallback(this.page)).then(function (contexts) {
          if (stamp === _this.stamp) {
            if (contexts.length) {
              _this.results.push({
                page: _this.page,
                contexts: contexts
              });
            }
            if (_this.onPageHitsChanged) {
              _this.onPageHitsChanged(_this.page, _this.query);
            }
            ++_this.page;
            _this.process();
          }
        });
      }
    }
  };

  SearchEngine.prototype.find = function find(pi) {
    var _this2 = this;

    var next = void 0;
    if (pi.type === 'pdf') {
      next = new Promise(function (resolve) {
        pi.src.getHandler(function () {
          var n = pi.number === undefined ? _this2.page : pi.number;
          if (pi.src.getPageType(n) === 'right') {
            resolve([]);
          } else {
            pi.src.getPage(n).then(function (page) {
              page.getTextContent().then(function (textContent) {
                resolve(new _Finder2.default(textContent.items.map(function (item) {
                  return item.str;
                }), _this2.query, { hits: false }).getContexts());
              });
            }).catch(function () {
              return resolve([]);
            });
          }
        });
      });
    } else {
      next = Promise.resolve([]);
    }
    return next;
  };

  return SearchEngine;
}();

exports.default = SearchEngine;

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(1);

var _WidgetController2 = __webpack_require__(22);

var _WidgetController3 = _interopRequireDefault(_WidgetController2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ShareController = function (_WidgetController) {
  _inherits(ShareController, _WidgetController);

  function ShareController(view, bookCtrl) {
    var linkBuilder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (page) {
      return page;
    };

    _classCallCheck(this, ShareController);

    var _this = _possibleConstructorReturn(this, _WidgetController.call(this, view, 'widShare'));

    _this.bookCtrl = bookCtrl;
    _this.linkBuilder = linkBuilder;
    bookCtrl.addEventListener('endFlip', _this.updateView.bind(_this));
    return _this;
  }

  ShareController.prototype.cmdCloseShare = function cmdCloseShare() {
    this.hide();
  };

  ShareController.prototype.clickLink = function clickLink(u) {
    var blank = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    var a = (0, _libs.$)('<a href="' + u + '"' + (blank ? ' target="_blank"' : '') + '></a>').appendTo(this.view.getContainer());
    a[0].click();
    a.remove();
  };

  ShareController.prototype.cmdFacebook = function cmdFacebook() {
    this.clickLink('https://www.facebook.com/sharer/sharer.php?u=' + encodeURIComponent(this.getLink()));
  };

  ShareController.prototype.cmdTwitter = function cmdTwitter() {
    this.clickLink('http://twitter.com/share?url=' + encodeURIComponent(this.getLink()));
  };

  ShareController.prototype.cmdEmail = function cmdEmail() {
    this.clickLink('mailto:?subject=' + (0, _libs.tr)('We wanted you to see this book') + '&body=' + (0, _libs.tr)('Check out this site') + ' ' + encodeURIComponent(this.getLink()), false);
  };

  ShareController.prototype.getLink = function getLink() {
    return this.linkBuilder(this.bookCtrl.getPageForGUI());
  };

  ShareController.prototype.updateView = function updateView() {
    if (this.view) {
      var _arr = ['cmdCloseShare', 'cmdFacebook', 'cmdTwitter', 'cmdEmail'];

      for (var _i = 0; _i < _arr.length; _i++) {
        var cmd = _arr[_i];
        this.view.setState(cmd, {
          enable: true,
          visible: true,
          active: false
        });
      }
      this.view.setState('txtShareLink', {
        value: this.getLink(),
        visible: true
      });
      _WidgetController.prototype.updateView.call(this);
    }
  };

  return ShareController;
}(_WidgetController3.default);

exports.default = ShareController;

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _CSSLayer = __webpack_require__(13);

var _CSSLayer2 = _interopRequireDefault(_CSSLayer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SheetCssLayer = function () {
  function SheetCssLayer(visual, block, props) {
    _classCallCheck(this, SheetCssLayer);

    this.visual = visual;
    var size = block.getTopSize();
    this.layer = new _CSSLayer2.default(size.width, size.height, props);

    this.update(block);
    this.visual.addCssObject(this.layer);
  }

  SheetCssLayer.prototype.dispose = function dispose() {
    this.layer.dispose();
    this.visual.removeCssObject(this.layer);
  };

  SheetCssLayer.prototype.isHidden = function isHidden() {
    return this.layer.isHidden();
  };

  SheetCssLayer.prototype.hide = function hide() {
    return this.layer.hide();
  };

  SheetCssLayer.prototype.show = function show() {
    return this.layer.show();
  };

  SheetCssLayer.prototype.set = function set(css, html, js) {
    this.layer.setData(css, html, js);
  };

  SheetCssLayer.prototype.update = function update(block) {
    this.block = block;
    var size = block.getTopSize();
    this.layer.setSize(size.width, size.height);
    this.block.getTopWorldRotation(this.layer.rotation);
    this.block.getTopWorldPosition(this.layer.position);
  };

  return SheetCssLayer;
}();

exports.default = SheetCssLayer;

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _MathUtils = __webpack_require__(5);

var _MathUtils2 = _interopRequireDefault(_MathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SheetPhysics = function () {
  SheetPhysics.targetForceClb = function targetForceClb(o, a, v, ch) {
    var l = a * this.r;
    return 100 * this.m * this.g * (2 / (1 + Math.exp(10 * (l - this.tl))) - 1) - this.m * 40 * v;
  };

  SheetPhysics.hoverCornerForceClb = function hoverCornerForceClb(o, v, l, ch) {
    return 5;
  };

  SheetPhysics.prototype.getTargetForceClb = function getTargetForceClb(mass, targetAngle) {
    return SheetPhysics.targetForceClb.bind({
      g: this.p.gravity,
      m: mass,
      tl: targetAngle * this.p.r,
      r: this.p.r
    });
  };

  SheetPhysics.dragForceClb = function dragForceClb(o, a, v, ch) {
    return o.flbt * o.m * (10 * o.g * ch - 50 * v / (1 + Math.exp(3.5 * Math.abs(ch))));
  };

  SheetPhysics.dragCornerForceClb = function dragCornerForceClb(o, a, v, ch) {
    return 15 * (2 / (1 + Math.exp(10 * (a - this.ta) * o.r)) - 1);
  };

  SheetPhysics.getDragCornerForceClb = function getDragCornerForceClb(targetAngle) {
    return SheetPhysics.dragCornerForceClb.bind({
      ta: targetAngle
    });
  };

  function SheetPhysics() {
    var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var gravity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var cornerDeviation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.15;
    var fps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 240;

    _classCallCheck(this, SheetPhysics);

    this.p = {
      r: r,
      cornerDeviation: cornerDeviation,
      l: Math.PI * r,
      startDt: 1 / fps,
      gravity: gravity,
      margin: 0.002 * r,
      infM: 1e4,
      attempts: 16,
      maxIterations: 100
    };
    this.os = [];
  }

  SheetPhysics.prototype.dispose = function dispose() {
    this.os = [];
  };

  SheetPhysics.prototype.getSize = function getSize() {
    return this.os.length;
  };

  SheetPhysics.prototype.addObject = function addObject(mass, angle, velocity, flexibility, cornerHeight, simulateClb, removeClb) {
    var forceClb = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : function () {
      return 0;
    };
    var cornerForceClb = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : function () {
      return 0;
    };

    var no = {
      id: _MathUtils2.default.getUnique(),
      m: mass,
      v: velocity,
      l: angle * this.p.r,
      f: forceClb,
      cf: cornerForceClb,
      ch: cornerHeight,
      flbt: flexibility,
      simulateClb: simulateClb,
      removeClb: removeClb
    };
    var i = this.os.findIndex(function (o) {
      return no.l <= o.l;
    });
    i = ~i ? i : this.os.length;
    this.os.splice(i, 0, no);
    return no.id;
  };

  SheetPhysics.prototype.getParametrMap = function getParametrMap(name) {
    var map = {
      mass: 'm',
      velocity: 'v',
      flexibility: 'flbt',
      cornerHeight: 'ch',
      simulateClb: 'simulateClb',
      removeClb: 'removeClb',
      forceClb: 'f',
      cornerForceClb: 'cf'
    };
    return map[name];
  };

  SheetPhysics.prototype.setParametr = function setParametr(id, name, value) {
    var o = this.os.find(function (o) {
      return o.id === id;
    });
    if (name === 'angle') {
      o.l = value * this.p.r;
    } else {
      o[this.getParametrMap(name)] = value;
    }
  };

  SheetPhysics.prototype.getParametr = function getParametr(id, name) {
    var o = this.os.find(function (o) {
      return o.id === id;
    });
    var value = void 0;
    if (name === 'angle') {
      value = o.l / this.p.r;
    } else {
      value = o[this.getParametrMap(name)];
    }
    return value;
  };

  SheetPhysics.prototype.simulate = function simulate(T) {
    var t = 0,
        dt = this.p.startDt,
        attempt = 0,
        it = 0;

    while (t < T && it < this.p.maxIterations) {
      if (dt > T - t) {
        dt = T - t;
      }
      var nos = this.integrate(this.os, dt),
          ci = this.findCollisions(nos);
      if (ci.num > 1 && attempt < this.p.attempts) {
        dt /= 2;
        ++attempt;
      } else {
        if (ci.num === 1) {
          var scos = this.solveCollision(nos[ci.last - 1], nos[ci.last]);
          nos[ci.last - 1] = scos[0];
          nos[ci.last] = scos[1];
        } else if (ci.num > 1) {
          var gs = [];
          var last = -2;
          for (var _iterator = ci.all, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var i = _ref;

            if (i - last > 1) {
              gs.push([]);
            }
            gs[gs.length - 1].push(i);
            last = i;
          }
          for (var _iterator2 = gs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
            var _ref2;

            if (_isArray2) {
              if (_i2 >= _iterator2.length) break;
              _ref2 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done) break;
              _ref2 = _i2.value;
            }

            var g = _ref2;

            var sg = void 0,
                i0 = void 0;
            if (nos[g[0]].l > Math.PI / 2 * this.p.r) {
              sg = -1;
              i0 = g[g.length - 1];
            } else {
              sg = 1;
              i0 = g[0];
            }
            for (var _i3 = i0; _i3 < nos.length && _i3 > -1; _i3 += sg) {
              var o = nos[_i3 + sg];
              if (o && sg * (o.l - nos[_i3].l) <= this.p.margin) {
                o.l = nos[_i3].l + sg * 2 * this.p.margin;
                if (o.l > this.p.l || o.l < 0) {
                  o.l = o.l > this.p.l ? this.p.l : 0;
                  o.ch = 0;
                  o.v = 0;
                  console.error('Bad collision');
                }
              } else {
                break;
              }
            }
          }
        }
        this.os = nos;
        this.findAndSolveCornerCollisions();
        t += dt;
        dt = this.p.startDt;
        attempt = 0;
      }
      ++it;
    }

    this.removeStatics();
  };

  SheetPhysics.prototype.removeStatics = function removeStatics() {
    var nos = [],
        notify = [[], []];
    for (var _iterator3 = this.os, _isArray3 = Array.isArray(_iterator3), _i4 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i4 >= _iterator3.length) break;
        _ref3 = _iterator3[_i4++];
      } else {
        _i4 = _iterator3.next();
        if (_i4.done) break;
        _ref3 = _i4.value;
      }

      var o = _ref3;

      if (o.simulateClb) {
        o.simulateClb(o.l / this.p.r, o.ch);
      }
      if ((o.l === this.p.l || o.l === 0) && o.v === 0) {
        if (o.removeClb !== undefined) {
          notify[(o.l !== this.p.l) + 0].push(o);
        }
      } else {
        nos.push(o);
      }
    }
    this.os = nos;
    for (var _iterator4 = notify[0].reverse(), _isArray4 = Array.isArray(_iterator4), _i5 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
      var _ref4;

      if (_isArray4) {
        if (_i5 >= _iterator4.length) break;
        _ref4 = _iterator4[_i5++];
      } else {
        _i5 = _iterator4.next();
        if (_i5.done) break;
        _ref4 = _i5.value;
      }

      var _o = _ref4;

      _o.removeClb(Math.PI, _o.ch);
    }
    for (var _iterator5 = notify[1], _isArray5 = Array.isArray(_iterator5), _i6 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
      var _ref5;

      if (_isArray5) {
        if (_i6 >= _iterator5.length) break;
        _ref5 = _iterator5[_i6++];
      } else {
        _i6 = _iterator5.next();
        if (_i6.done) break;
        _ref5 = _i6.value;
      }

      var _o2 = _ref5;

      _o2.removeClb(0, _o2.ch);
    }
  };

  SheetPhysics.prototype.findAndSolveCornerCollisions = function findAndSolveCornerCollisions() {
    if (this.os.length) {
      var os = [_extends({}, this.os[0], {
        l: 0,
        m: this.p.infM,
        ch: 0
      })].concat(this.os, [_extends({}, this.os[0], {
        l: 1.05 * this.p.l,
        m: this.p.infM,
        ch: 0
      })]);

      for (var i = 1; i < os.length; ++i) {
        var a = os[i - 1],
            b = os[i],
            al = a.l + this.p.cornerDeviation * a.ch * this.p.r,
            bl = b.l + this.p.cornerDeviation * b.ch * this.p.r;
        if (1.05 * al > bl && a.ch > b.ch) {
          var dCh = a.ch - b.ch,
              dv = a.m / a.flbt + b.m / b.flbt,
              ka = a.m / a.flbt / dv,
              kb = b.m / b.flbt / dv;
          a.ch = a.ch - kb * dCh;
          b.ch = b.ch + ka * dCh;
        }
      }
    }
  };

  SheetPhysics.prototype.solveCollision = function solveCollision(a, b) {
    var mm = b.m + a.m,
        av = (-a.v * b.m + a.m * a.v + 2 * b.m * b.v) / mm,
        bv = (b.m * b.v - b.v * a.m + 2 * a.m * a.v) / mm;
    return [_extends({}, a, { v: av }), _extends({}, b, { v: bv })];
  };

  SheetPhysics.prototype.findCollisions = function findCollisions(os) {
    var ci = {
      num: 0,
      last: 0,
      all: []
    };
    for (var i = 1; i < os.length && ci.num < 2; ++i) {
      if (os[i - 1].l > os[i].l || this.isCollision(os[i - 1], os[i])) {
        if (os[i - 1].l > os[i].l) {
          ++ci.num;
        }
        ++ci.num;
        ci.last = i;
        if (ci.all.indexOf(i - 1) === -1) {
          ci.all.push(i - 1);
        }
        if (ci.all.indexOf(i) === -1) {
          ci.all.push(i);
        }
      }
    }
    return ci;
  };

  SheetPhysics.prototype.isCollision = function isCollision(a, b) {
    return Math.abs(a.l - b.l) < this.p.margin && a.v > b.v;
  };

  SheetPhysics.prototype.integrate = function integrate(os, dt) {
    var nos = [];
    for (var _iterator6 = os, _isArray6 = Array.isArray(_iterator6), _i7 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
      var _ref6;

      if (_isArray6) {
        if (_i7 >= _iterator6.length) break;
        _ref6 = _iterator6[_i7++];
      } else {
        _i7 = _iterator6.next();
        if (_i7.done) break;
        _ref6 = _i7.value;
      }

      var o = _ref6;

      var vl = _MathUtils2.default.rk4(this.dy.bind({
        g: this.p.gravity,
        r: this.p.r,
        m: o.m,
        f: o.f,
        cf: o.cf,
        ch: o.ch,
        flbt: o.flbt
      }), 0, dt, [o.v, o.l, o.ch]);
      var no = _extends({}, o, {
        v: vl[0],
        l: vl[1],
        ch: vl[2]
      });
      if (no.l <= 0 || no.l >= this.p.l) {
        no.l = no.l <= 0 ? 0 : this.p.l;
        no.v = 0;
        no.ch = 0;
      }
      nos.push(no);
    }
    return nos;
  };

  SheetPhysics.prototype.dy = function dy(t, y) {
    var v = y[0],
        l = y[1],
        ch = y[2],
        alf = l / this.r,
        f = this.f(this, alf, v, ch),
        cf = this.cf(this, alf, v, ch),
        cosAlf = Math.cos(alf),
        brf = 6.65 * Math.abs((Math.sign(cosAlf) - Math.sign(v)) * v) * Math.pow(cosAlf, 5);
    return [-this.g * cosAlf + brf + f / this.m, v + 0.01 * (Math.random() - 0.5), this.flbt * ((2 / (1 + Math.exp(-0.2 * cf)) - 1) * (1 - 2 / (1 + Math.exp(-5 * (Math.abs(ch) - 2)))) - ch)];
  };

  return SheetPhysics;
}();

exports.default = SheetPhysics;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SoundsEnviroment = function () {
  function SoundsEnviroment() {
    var template = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SoundsEnviroment);

    template = typeof template === 'function' ? template() : template;
    this.sounds = template.sounds || {};
    this.audio = {};
    if (this.sounds.startFlip) {
      this.audio.startFlip = new Audio(this.sounds.startFlip);
      this.audio.startFlip.volume = 0.5;
    }
    if (this.sounds.endFlip) {
      this.audio.endFlip = new Audio(this.sounds.endFlip);
      this.audio.endFlip.volume = 0.5;
    }
  }

  SoundsEnviroment.prototype.setEnabled = function setEnabled(enabled) {
    this.enabled = enabled;
  };

  SoundsEnviroment.prototype.togle = function togle() {
    this.enabled = !this.enabled;
  };

  SoundsEnviroment.prototype.dispose = function dispose() {
    delete this.audio.startFlip;
    delete this.audio.endFlip;
  };

  SoundsEnviroment.prototype.play = function play(player) {
    player.play().catch(function () {
      return undefined;
    });
  };

  SoundsEnviroment.prototype.startFlip = function startFlip() {
    if (this.enabled && this.audio.startFlip) {
      this.play(this.audio.startFlip);
    }
  };

  SoundsEnviroment.prototype.endFlip = function endFlip() {
    if (this.enabled && this.audio.startFlip) {
      this.audio.startFlip.pause();
      this.audio.startFlip.currentTime = 0;
    }
    if (this.enabled && this.audio.endFlip) {
      this.play(this.audio.endFlip);
    }
  };

  SoundsEnviroment.prototype.subscribeFlips = function subscribeFlips(emitter) {
    emitter.addEventListener('startFlip', this.startFlip.bind(this));
    emitter.addEventListener('endFlip', this.endFlip.bind(this));
  };

  return SoundsEnviroment;
}();

exports.default = SoundsEnviroment;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _WidgetController2 = __webpack_require__(22);

var _WidgetController3 = _interopRequireDefault(_WidgetController2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TocController = function (_WidgetController) {
  _inherits(TocController, _WidgetController);

  function TocController(view, bookCtrl) {
    _classCallCheck(this, TocController);

    var _this = _possibleConstructorReturn(this, _WidgetController.call(this, view, 'widFloatWnd'));

    _this.bookCtrl = bookCtrl;
    _this.tab = 'none';
    return _this;
  }

  TocController.prototype.setThumbnails = function setThumbnails(thumbnails) {
    this.thumbnails = thumbnails;
    thumbnails.onNavigate = this.navigateThumbnails.bind(this);
    if (this.tab === 'none') {
      this.tab = 'thumbnails';
    }
    this.fireChange();
  };

  TocController.prototype.setSearch = function setSearch(search) {
    this.search = search;
    search.onNavigate = this.navigateSearch.bind(this);
    this.fireChange();
  };

  TocController.prototype.setBookmarks = function setBookmarks(bookmarks, pdf) {
    if (bookmarks.getSize()) {
      this.bookmarks = bookmarks;
      this.pdf = pdf;
      bookmarks.onNavigate = this.navigateBookmarks.bind(this);
      this.isBookmarks = true;
      this.fireChange();
    }
  };

  TocController.prototype.cmdBookmarks = function cmdBookmarks() {
    this.setActiveTab('bookmarks');
  };

  TocController.prototype.cmdThumbnails = function cmdThumbnails() {
    this.setActiveTab('thumbnails');
  };

  TocController.prototype.cmdSearch = function cmdSearch() {
    this.setActiveTab('search');
  };

  TocController.prototype.setActiveTab = function setActiveTab(tab) {
    if (this[tab]) {
      this.tab = tab;
      this.fireChange();
    }
  };

  TocController.prototype.cmdCloseToc = function cmdCloseToc() {
    this.hide();
  };

  TocController.prototype.navigateThumbnails = function navigateThumbnails(number) {
    this.goToPage(number);
  };

  TocController.prototype.navigateSearch = function navigateSearch(number) {
    this.goToPage(number);
  };

  TocController.prototype.openUrl = function openUrl(url) {
    window.open(url, '_blank');
  };

  TocController.prototype.goToPage = function goToPage(number) {
    this.bookCtrl.goToPage(number);
  };

  TocController.prototype.dstDataHandler = function dstDataHandler(data) {
    data = (data + '').trim();
    var number = void 0;
    if ((number = parseInt(data)) == data) {
      this.goToPage(number);
    } else {
      this.openUrl(data);
    }
  };

  TocController.prototype.navigateBookmarks = function navigateBookmarks(item) {
    var _this2 = this;

    if (item.url) {
      this.openUrl(item.url);
    } else if (item.dest) {
      this.pdf.getDestination(item.dest).then(function (number) {
        return _this2.goToPage(number);
      });
    } else if (item.dstData !== undefined) {
      this.dstDataHandler(item.dstData);
    }
  };

  TocController.prototype.updateView = function updateView() {
    var _this3 = this;

    if (this.view) {
      this.view.setState('widTocMenu', {
        enable: true,
        visible: true,
        active: false
      });
      this.view.setState('widThumbnails', {
        enable: true,
        visible: this.tab === 'thumbnails',
        active: false
      });
      this.view.setState('widSearch', {
        enable: true,
        visible: this.tab === 'search',
        active: false
      });
      this.view.setState('widBookmarks', {
        enable: true,
        visible: this.tab === 'bookmarks',
        active: false
      });
      this.view.setState('cmdBookmarks', {
        enable: true,
        visible: !!this.bookmarks,
        active: this.tab === 'bookmarks'
      });
      this.view.setState('cmdCloseToc', {
        enable: true,
        visible: true,
        active: false
      });
      this.view.setState('cmdThumbnails', {
        enable: true,
        visible: !!this.thumbnails && !!(this.search || this.bookmarks),
        active: this.tab === 'thumbnails'
      });
      this.view.setState('cmdSearch', {
        enable: true,
        visible: !!this.search,
        active: this.tab === 'search'
      });
      Promise.resolve().then(function () {
        return _this3.thumbnails.setEnable(_this3.visible && _this3.tab === 'thumbnails');
      });
      _WidgetController.prototype.updateView.call(this);
    }
  };

  return TocController;
}(_WidgetController3.default);

exports.default = TocController;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(1);

var _ThreeUtils = __webpack_require__(21);

var _ThreeUtils2 = _interopRequireDefault(_ThreeUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var resX = 11,
    resY = 2,
    resZ = 15,
    scale = 1,
    faces = [];

var frontGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resX - 1, resY - 1);
frontGeometry.translate(0.5 * scale, 0.5 * scale, scale);
var backGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resX - 1, resY - 1);
backGeometry.rotateY(Math.PI);
backGeometry.translate(0.5 * scale, 0.5 * scale, 0);
var leftGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resZ - 1, resY - 1);
leftGeometry.rotateY(-Math.PI / 2);
leftGeometry.translate(0, 0.5 * scale, 0.5 * scale);
var rightGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resZ - 1, resY - 1);
rightGeometry.rotateY(Math.PI / 2);
rightGeometry.translate(scale, 0.5 * scale, 0.5 * scale);
var topGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resX - 1, resZ - 1);
topGeometry.rotateX(-Math.PI / 2);
topGeometry.translate(0.5 * scale, scale, 0.5 * scale);
var bottomGeometry = topGeometry.clone();
bottomGeometry.translate(0, -scale, 0);
for (var _iterator = bottomGeometry.faces, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
  var _ref;

  if (_isArray) {
    if (_i >= _iterator.length) break;
    _ref = _iterator[_i++];
  } else {
    _i = _iterator.next();
    if (_i.done) break;
    _ref = _i.value;
  }

  var f = _ref;
  var _ref3 = [f.b, f.a];
  f.a = _ref3[0];
  f.b = _ref3[1];
}

var geometry = new _libs.THREE.Geometry();
geometry.vertices = [].concat(bottomGeometry.vertices, topGeometry.vertices);

var addFaces = function addFaces(fs, map) {
  for (var _iterator2 = fs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
    var _ref2;

    if (_isArray2) {
      if (_i2 >= _iterator2.length) break;
      _ref2 = _iterator2[_i2++];
    } else {
      _i2 = _iterator2.next();
      if (_i2.done) break;
      _ref2 = _i2.value;
    }

    var f = _ref2;

    geometry.faces.push(new _libs.THREE.Face3(map(f.a), map(f.b), map(f.c)));
  }
  faces.push(geometry.faces.length);
};

var mapVertices = function mapVertices(src, dst) {
  var map = [];
  var eq = function eq(a, b) {
    return Math.abs(a.x - b.x) + Math.abs(a.y - b.y) + Math.abs(a.z - b.z) < 1e-4;
  };
  for (var i = 0; i < src.length; ++i) {
    for (var j = 0; j < dst.length; ++j) {
      if (eq(src[i], dst[j])) {
        map[i] = j;
        break;
      }
    }
  }
  return map;
};

var frontMap = mapVertices(frontGeometry.vertices, geometry.vertices);
var backMap = mapVertices(backGeometry.vertices, geometry.vertices);
var leftMap = mapVertices(leftGeometry.vertices, geometry.vertices);
var rightMap = mapVertices(rightGeometry.vertices, geometry.vertices);

addFaces(topGeometry.faces, function (i) {
  return i + bottomGeometry.vertices.length;
});
addFaces(bottomGeometry.faces, function (i) {
  return i;
});
addFaces(frontGeometry.faces, function (i) {
  return frontMap[i];
});
addFaces(backGeometry.faces, function (i) {
  return backMap[i];
});
addFaces(leftGeometry.faces, function (i) {
  return leftMap[i];
});
addFaces(rightGeometry.faces, function (i) {
  return rightMap[i];
});
faces.pop();

_ThreeUtils2.default.computeFaceVertexUvs(geometry, faces);

geometry.computeVertexNormals();
//geometry.computeFaceNormals();
geometry.computeBoundingSphere();
//geometry.computeBoundingBox();
geometry.verticesNeedUpdate = true;

exports.default = {
  resX: resX,
  resY: resY,
  resZ: resZ,
  faces: faces,
  geometry: geometry
};

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.props = props;
var mouseButtons = {
  Left: 0,
  Middle: 1,
  Right: 2
};

function props() {
  return {
    eps: 1e-4,
    scale: {
      default: 0.9,
      min: 0.9,
      max: 2,
      levels: 5
    },
    pan: {
      speed: 50
    },
    loadingAnimation: {
      skin: true,
      book: false
    },
    autoResolution: {
      enabled: true,
      coefficient: 1.5,
      min: 800,
      max: 1920
    },
    narrowView: {
      width: 500
    },
    actions: {
      cmdZoomIn: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdZoomOut: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdDefaultZoom: {
        enabled: false,
        enabledInNarrow: false,
        type: 'dblclick',
        code: 0
      },
      cmdToc: {
        enabled: true,
        enabledInNarrow: true,
        active: false,
        defaultTab: 'bookmarks'
      },
      cmdAutoPlay: {
        enabled: false,
        enabledInNarrow: false,
        active: false
      },
      cmdBackward: {
        enabled: true,
        enabledInNarrow: false,
        code: 37
      },
      cmdBigBackward: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdForward: {
        enabled: true,
        enabledInNarrow: false,
        code: 39
      },
      cmdBigForward: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdSave: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdPrint: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdFullScreen: {
        enabled: true,
        enabledInNarrow: true
      },
      widSettings: {
        enabled: true,
        enabledInNarrow: true
      },
      widToolbar: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdSmartPan: {
        enabled: false,
        enabledInNarrow: false,
        active: true
      },
      cmdSinglePage: {
        enabled: true,
        enabledInNarrow: true,
        active: false,
        activeForMobile: true
      },
      cmdSounds: {
        enabled: true,
        enabledInNarrow: true,
        active: true
      },
      cmdStats: {
        enabled: false,
        enabledInNarrow: false,
        active: false
      },
      cmdGotoFirstPage: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdGotoLastPage: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdShare: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdPanLeft: {
        enabled: false
      },
      cmdPanRight: {
        enabled: false
      },
      cmdPanUp: {
        enabled: false
      },
      cmdPanDown: {
        enabled: false
      },
      mouseCmdRotate: {
        enabled: true,
        type: 'mousedrag',
        code: mouseButtons.Right
      },
      mouseCmdDragZoom: {
        enabled: true,
        type: 'mousedrag',
        code: mouseButtons.Middle
      },
      mouseCmdPan: {
        enabled: true,
        type: 'mousedrag',
        code: mouseButtons.Left
      },
      mouseCmdWheelZoom: {
        enabled: true,
        type: 'mousewheel',
        code: 0
      },
      touchCmdRotate: {
        enabled: true,
        type: 'touchdrag',
        code: 3
      },
      touchCmdZoom: {
        enabled: true,
        type: 'touchdrag',
        code: 2
      },
      touchCmdPan: {
        enabled: true,
        type: 'touchdrag',
        code: 1
      },
      touchCmdSwipe: {
        enabled: true,
        type: 'touchdrag',
        code: 1
      }
    }
  };
};

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _ImageBase2 = __webpack_require__(6);

var _ImageBase3 = _interopRequireDefault(_ImageBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BlankImage = function (_ImageBase) {
  _inherits(BlankImage, _ImageBase);

  function BlankImage(context, width, height, color) {
    _classCallCheck(this, BlankImage);

    var _this = _possibleConstructorReturn(this, _ImageBase.call(this, context, width, height, color));

    Promise.resolve().then(function () {
      _this.startRender = function () {
        _this.renderBlankPage();
        _this.finishRender();
      };
      _this.finishLoad();
    });
    return _this;
  }

  return BlankImage;
}(_ImageBase3.default);

exports.default = BlankImage;

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Bookmarks = function () {
  function Bookmarks(container, items) {
    var _this = this;

    var getTitle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (i) {
      return i.title;
    };
    var getItems = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (i) {
      return i.items;
    };

    _classCallCheck(this, Bookmarks);

    this.container = container;
    this.map = [];
    this.getTitle = getTitle;
    this.getItems = getItems;
    this.nodes = this.mapNodes(items, this.map);

    this.binds = {
      togle: function togle(e) {
        e.preventDefault();
        var li = (0, _libs.$)(e.target);
        while (li[0] && li[0] !== container[0] && !li.hasClass('item')) {
          li = (0, _libs.$)(li[0].parentNode);
        }
        if (li.hasClass('item')) {
          var cmd = (0, _libs.$)(e.target);
          while (cmd[0] && cmd[0] !== li[0] && !cmd.hasClass('cmd')) {
            cmd = (0, _libs.$)(cmd[0].parentNode);
          }
          if (cmd.hasClass('cmd')) {
            var node = _this.map[li.attr('data-id')];
            if (cmd.hasClass('togle')) {
              node.minimized = !node.minimized;
              if (node.minimized) {
                li.find('ul').remove();
                li.find('.togle').addClass('minimized');
              } else {
                li.find('.togle').removeClass('minimized');
                li.append((_this.renderNode(node).match(/<ul(.|\n)*<\/ul>/g) || [''])[0]);
              }
            } else {
              if (_this.onNavigate) {
                _this.onNavigate(node.item);
              }
            }
          }
        }
      }
    };

    container.on('click', this.binds.togle);
    this.update();
  }

  Bookmarks.prototype.getSize = function getSize() {
    return this.map.length;
  };

  Bookmarks.prototype.dispose = function dispose() {
    this.container.off('click', this.binds.togle);
    this.container.html('');
  };

  Bookmarks.prototype.update = function update() {
    this.container.html(this.renderNodes(this.nodes));
  };

  Bookmarks.prototype.forEach = function forEach(f) {
    var nodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nodes;

    for (var _iterator = nodes || [], _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var node = _ref;

      f(node);
      this.forEach(f, node.children);
    }
  };

  Bookmarks.prototype.expand = function expand() {
    this.forEach(function (n) {
      return n.minimized = false;
    });
    this.update();
  };

  Bookmarks.prototype.minimize = function minimize() {
    this.forEach(function (n) {
      return n.minimized = true;
    });
    this.update();
  };

  Bookmarks.prototype.renderNode = function renderNode(node) {
    return ['<div class="area">', node.children ? '<a class="cmd togle' + (node.minimized ? ' minimized' : '') + '"><i class="fa fa-angle-right"></i></a> ' : '<i class="white-space"></i> ', '<a class="cmd" title="', node.title, '">', node.title, '</a></div>', node.minimized ? '' : this.renderNodes(node.children)].join('');
  };

  Bookmarks.prototype.renderNodes = function renderNodes(nodes) {
    var res = ['<div class="bookmarks">'];
    if (nodes && nodes.length) {
      res.push('<ul class="level-', nodes[0].level, '">');
      for (var _iterator2 = nodes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var node = _ref2;

        res.push(['<li class="item" data-id="', node.id, '">', this.renderNode(node), '</li>'].join(''));
      }
      res.push('</ul>');
    }
    res.push('</div>');
    return res.join('');
  };

  Bookmarks.prototype.mapNodes = function mapNodes(items) {
    var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    var nodes = null;
    if (items && items.length) {
      nodes = [];
      for (var _iterator3 = items, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
        var _ref3;

        if (_isArray3) {
          if (_i3 >= _iterator3.length) break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) break;
          _ref3 = _i3.value;
        }

        var item = _ref3;

        var id = map.length;
        map.push(undefined);
        var node = {
          id: id,
          title: this.getTitle(item),
          level: level,
          item: item,
          minimized: true,
          children: this.mapNodes(this.getItems(item), map, level + 1)
        };
        nodes.push(node);
        map[id] = node;
      }
    }
    return nodes;
  };

  return Bookmarks;
}();

exports.default = Bookmarks;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Detector = function () {
	function Detector() {
		_classCallCheck(this, Detector);
	}

	Detector.getWebGLErrorMessage = function getWebGLErrorMessage() {
		var element = document.createElement('div');
		element.id = 'webgl-error-message';
		element.style.fontFamily = 'monospace';
		element.style.fontSize = '13px';
		element.style.fontWeight = 'normal';
		element.style.textAlign = 'center';
		element.style.background = '#fff';
		element.style.color = '#000';
		element.style.padding = '1.5em';
		element.style.width = '400px';
		element.style.margin = '5em auto 0';

		if (!Detector.webgl) {
			element.innerHTML = window.WebGLRenderingContext ? ['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br />', 'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'].join('\n') : ['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br/>', 'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'].join('\n');
		}
		return element;
	};

	Detector.addGetWebGLMessage = function addGetWebGLMessage(parameters) {
		var parent = void 0,
		    id = void 0,
		    element = void 0;
		parameters = parameters || {};

		parent = parameters.parent || (0, _libs.$)(document.body);
		id = parameters.id || 'oldie';

		element = Detector.getWebGLErrorMessage();
		//element.id = id;

		parent.append(element);
	};

	return Detector;
}();

Detector.canvas = !!window.CanvasRenderingContext2D;

Detector.webgl = function () {
	try {
		var canvas = document.createElement('canvas');
		return !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));
	} catch (e) {
		return false;
	}
}();

Detector.workers = !!window.Worker;
Detector.fileapi = window.File && window.FileReader && window.FileList && window.Blob;
exports.default = Detector;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DocMouseSimulator = function () {
  function DocMouseSimulator(jFrame, element) {
    var bElement = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document.body;

    _classCallCheck(this, DocMouseSimulator);

    this.jFrame = jFrame;
    this.wnd = jFrame[0].contentWindow;
    this.doc = jFrame[0].contentDocument;
    this.element = element || doc.body;
    this.bElement = bElement;
    this.resendProperties = this.getDefaultResendProperties();
    this.undefinedProperties = this.getDefaultUndefinedProperties();
    this.cursors = [];
    this.onDocChangeClbs = [];
    var terms = [{
      find: ':hover',
      replace: '.' + DocMouseSimulator.HOVER
    }, {
      find: ':active',
      replace: '.' + DocMouseSimulator.ACTIVE
    }];
    var style = ['<style type="text/css">'];
    for (var i = 0; i < this.doc.styleSheets.length; ++i) {
      var ss = this.doc.styleSheets[i];
      for (var j = 0; j < ss.cssRules.length; ++j) {
        var r = ss.cssRules[j],
            cssText = void 0;
        for (var _iterator = terms, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var term = _ref;

          if (~r.selectorText.indexOf(term.find)) {
            cssText = (cssText || r.cssText).replace(new RegExp(term.find, 'g'), term.replace);
          }
        }
        if (cssText) {
          style.push(cssText);
        }
      }
    }
    style.push('</style>');
    (0, _libs.$)(this.doc.head).append((0, _libs.$)(style.join('')));
  }

  DocMouseSimulator.prototype.convertCoords = function convertCoords(x, y) {
    var jElement = (0, _libs.$)(this.element);
    var offset = jElement.offset();
    return {
      x: offset.left + jElement.width() * x,
      y: offset.top + jElement.height() * (1 - y)
    };
  };

  DocMouseSimulator.prototype.triggerEvent = function triggerEvent(element, e, p, type, advancedProps) {
    var props = {};
    for (var _iterator2 = this.resendProperties, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var _n = _ref2;

      props[_n] = e[_n];
    }
    for (var _iterator3 = this.undefinedProperties, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i3 >= _iterator3.length) break;
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) break;
        _ref3 = _i3.value;
      }

      var _n2 = _ref3;

      props[_n2] = undefined;
    }
    for (var n in advancedProps) {
      if (advancedProps.hasOwnProperty(n)) {
        props[n] = advancedProps[n];
      }
    }
    props.view = this.wnd;
    props.pageX = p.x;
    props.pageY = p.y;
    var jE = _libs.$.Event(type, props);
    jE.timeStamp = e.timeStamp;
    (0, _libs.$)(element).trigger(jE);
  };

  DocMouseSimulator.prototype.addClass = function addClass(element, name) {
    (0, _libs.$)(element).addClass(name);
    var style = this.wnd.getComputedStyle(element);
    this.cursors.push((0, _libs.$)(this.bElement).css('cursor'));
    (0, _libs.$)(this.bElement).css('cursor', style.getPropertyValue('cursor'));
  };

  DocMouseSimulator.prototype.removeClass = function removeClass(element, name) {
    (0, _libs.$)(element).removeClass(name);
    (0, _libs.$)(this.bElement).css('cursor', this.cursors.pop());
  };

  DocMouseSimulator.prototype.enterElement = function enterElement(element) {
    this.addClass(element, DocMouseSimulator.HOVER);
  };

  DocMouseSimulator.prototype.leaveElement = function leaveElement(element) {
    this.removeClass(element, DocMouseSimulator.HOVER);
  };

  DocMouseSimulator.prototype.activateElement = function activateElement(element) {
    this.addClass(element, DocMouseSimulator.ACTIVE);
  };

  DocMouseSimulator.prototype.deactivateElement = function deactivateElement(element) {
    this.removeClass(element, DocMouseSimulator.ACTIVE);
  };

  DocMouseSimulator.prototype.addDocChangeClb = function addDocChangeClb(clb) {
    this.onDocChangeClbs.push(clb);
  };

  DocMouseSimulator.prototype.notify = function notify() {
    for (var _iterator4 = this.onDocChangeClbs, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
      var _ref4;

      if (_isArray4) {
        if (_i4 >= _iterator4.length) break;
        _ref4 = _iterator4[_i4++];
      } else {
        _i4 = _iterator4.next();
        if (_i4.done) break;
        _ref4 = _i4.value;
      }

      var clb = _ref4;

      clb(this.wnd, this.doc);
    }
  };

  DocMouseSimulator.prototype.elementFromPoint = function elementFromPoint(p) {
    var node = this.doc.body,
        next = true;
    while (next) {
      next = false;
      for (var i = 0; i < node.childNodes.length; ++i) {
        var child = node.childNodes[i];
        if (child instanceof this.wnd.Element) {
          var jC = (0, _libs.$)(child),
              offset = jC.offset(),
              height = jC.height(),
              width = jC.width();
          if (p.x > offset.left && p.x < offset.left + width && p.y > offset.top && p.y < offset.top + height) {
            node = child;
            next = true;
            break;
          }
        }
      }
    }
    return node;
  };

  DocMouseSimulator.prototype.getElement = function getElement(p) {
    var off0 = this.jFrame.offset();
    this.jFrame.offset({ left: 0.5 * window.innerWidth - p.x, top: 0.5 * window.innerHeight - p.y });
    var element = this.doc.elementFromPoint(p.x, p.y);
    if (!element) {
      // it isn't a joke it's IE
      element = this.doc.elementFromPoint(p.x, p.y);
    }
    this.jFrame.offset(off0);
    return element ? element : this.elementFromPoint(p);
  };

  DocMouseSimulator.prototype.simulate = function simulate(e, doc, x, y) {
    var p = this.convertCoords(x, y),
        element = doc === this.doc ? this.getElement(p) : undefined;
    var trigger = element !== undefined,
        notify = false;

    switch (e.type) {
      case 'mousedown':
        {
          if (this.capElement) {
            this.deactivateElement(this.capElement);
            notify = true;
          }
          this.capElement = element;
          if (this.capElement) {
            this.activateElement(this.capElement);
            notify = true;
          }
          break;
        }
      case 'mouseup':
        {
          if (this.capElement) {
            this.deactivateElement(this.capElement);
            notify = true;
          }
          this.timeStamp = e.timeStamp;
          break;
        }
      case 'click':
        {
          trigger = element && this.capElement === element; // && e.timeStamp === this.timeStamp;
          this.capElement = undefined;
          break;
        }
      case 'mouseenter':
      case 'mouseover':
      case 'mousemove':
        {
          var leaved = null;
          if (this.hovElement !== element && this.hovElement) {
            this.triggerEvent(this.hovElement, e, p, 'mouseout', { relatedTarget: element ? element : null });
            this.leaveElement(this.hovElement);
            leaved = this.hovElement;
            this.hovElement = undefined;
            notify = true;
          }
          if (!this.hovElement && element) {
            this.triggerEvent(element, e, p, 'mouseover', { relatedTarget: leaved });
            this.enterElement(element);
            this.hovElement = element;
            notify = true;
          }
          trigger = element && e.type === 'mousemove';
          break;
        }
      case 'mouseleave':
      case 'mouseout':
        {
          if (this.hovElement) {
            this.triggerEvent(this.hovElement, e, p, 'mouseout', { relatedTarget: e.relatedTarget });
            this.leaveElement(this.hovElement);
            this.hovElement = undefined;
            notify = true;
          }
          trigger = false;
          break;
        }
    }
    if (trigger) {
      this.triggerEvent(element, e, p, e.type);
    }
    if (notify) {
      this.notify();
    }
  };

  DocMouseSimulator.prototype.getDefaultUndefinedProperties = function getDefaultUndefinedProperties() {
    return ['clientX', 'clientY', 'offsetX', 'offsetY', 'screenX', 'screenY'];
  };

  DocMouseSimulator.prototype.getDefaultResendProperties = function getDefaultResendProperties() {
    return ['altKey', 'bubbles', 'button', 'buttons', 'cancelable', 'changedTouches', 'char', 'charCode', 'ctrlKey', 'data', 'detail', 'eventPhase', 'isDefaultPrevented', 'key', 'keyCode', 'metaKey', 'pointerId', 'pointerType', 'shiftKey', 'targetTouches', 'touches', 'which'];
  };

  return DocMouseSimulator;
}();

/*
altKey,
bubbles,
button,
buttons,
cancelable,
changedTouches,
char,
charCode,
clientX,
clientY,
ctrlKey,
currentTarget,
data,
delegateTarget,
detail,
eventPhase,
handleObj,
isDefaultPrevented,
key,
keyCode,
metaKey,
offsetX,
offsetY,
originalEvent,
pageX,
pageY,
pointerId,
pointerType,
relatedTarget,
screenX,
screenY,
shiftKey,
target,
targetTouches,
timeStamp,
toElement,
touches,
type,
view,
which
*/


DocMouseSimulator.HOVER = 'SIMULATED-HOVER';
DocMouseSimulator.ACTIVE = 'SIMULATED-ACTIVE';
exports.default = DocMouseSimulator;

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Dom2Image = function Dom2Image(wnd, doc, cache) {
    _classCallCheck(this, Dom2Image);

    var self = this;
    this.window = wnd;
    this.document = doc;
    this.cache = cache;

    var util = newUtil();
    var inliner = newInliner();
    var fontFaces = newFontFaces();
    var images = newImages();

    this.toSvg = toSvg;
    this.toPng = toPng;
    this.toJpeg = toJpeg;
    this.toBlob = toBlob;
    this.toPixelData = toPixelData;
    this.impl = {
        fontFaces: fontFaces,
        images: images,
        util: util,
        inliner: inliner
    };

    /**
     * @param {Node} node - The DOM Node object to render
     * @param {Object} options - Rendering options
     * @param {Function} options.filter - Should return true if passed node should be included in the output
     *          (excluding node means excluding it's children as well). Not called on the root node.
     * @param {String} options.bgcolor - color for the background, any valid CSS color value.
     * @param {Number} options.width - width to be applied to node before rendering.
     * @param {Number} options.height - height to be applied to node before rendering.
     * @param {Object} options.style - an object whose properties to be copied to node's style before rendering.
     * @param {Number} options.quality - a Number between 0 and 1 indicating image quality (applicable to JPEG only),
                defaults to 1.0.
     * @return {Promise} - A promise that is fulfilled with a SVG image data URL
     * */

    function toSvg(node, options) {
        options = options || {};
        return Promise.resolve(node).then(function (node) {
            return cloneNode(node, options.filter, true);
        }).then(embedFonts).then(inlineImages).then(applyOptions).then(function (clone) {
            return makeSvgDataUri(clone, options.width || util.width(node), options.height || util.height(node));
        });

        function applyOptions(clone) {
            if (options.bgcolor) clone.style.backgroundColor = options.bgcolor;

            if (options.width) clone.style.width = options.width + 'px';
            if (options.height) clone.style.height = options.height + 'px';

            if (options.style) self.window.Object.keys(options.style).forEach(function (property) {
                clone.style[property] = options.style[property];
            });

            return clone;
        }
    }

    /**
     * @param {Node} node - The DOM Node object to render
     * @param {Object} options - Rendering options, @see {@link toSvg}
     * @return {Promise} - A promise that is fulfilled with a Uint8Array containing RGBA pixel data.
     * */
    function toPixelData(node, options) {
        return draw(node, options || {}).then(function (canvas) {
            return canvas.getContext('2d').getImageData(0, 0, util.width(node), util.height(node)).data;
        });
    }

    /**
     * @param {Node} node - The DOM Node object to render
     * @param {Object} options - Rendering options, @see {@link toSvg}
     * @return {Promise} - A promise that is fulfilled with a PNG image data URL
     * */
    function toPng(node, options) {
        return draw(node, options || {}).then(function (canvas) {
            return canvas.toDataURL();
        });
    }

    /**
     * @param {Node} node - The DOM Node object to render
     * @param {Object} options - Rendering options, @see {@link toSvg}
     * @return {Promise} - A promise that is fulfilled with a JPEG image data URL
     * */
    function toJpeg(node, options) {
        options = options || {};
        return draw(node, options).then(function (canvas) {
            return canvas.toDataURL('image/jpeg', options.quality || 1.0);
        });
    }

    /**
     * @param {Node} node - The DOM Node object to render
     * @param {Object} options - Rendering options, @see {@link toSvg}
     * @return {Promise} - A promise that is fulfilled with a PNG image blob
     * */
    function toBlob(node, options) {
        return draw(node, options || {}).then(util.canvasToBlob);
    }

    function draw(domNode, options) {
        return toSvg(domNode, options).then(util.makeImage).then(util.delay(100)).then(function (image) {
            var canvas = newCanvas(domNode);
            canvas.getContext('2d').drawImage(image, 0, 0);
            return canvas;
        });

        function newCanvas(domNode) {
            var canvas = self.document.createElement('canvas');
            canvas.width = options.width || util.width(domNode);
            canvas.height = options.height || util.height(domNode);

            if (options.bgcolor) {
                var ctx = canvas.getContext('2d');
                ctx.fillStyle = options.bgcolor;
                ctx.fillRect(0, 0, canvas.width, canvas.height);
            }

            return canvas;
        }
    }

    function cloneNode(node, filter, root) {
        if (!root && filter && !filter(node)) return Promise.resolve();

        return Promise.resolve(node).then(makeNodeCopy).then(function (clone) {
            return cloneChildren(node, clone, filter);
        }).then(function (clone) {
            return processClone(node, clone);
        });

        function makeNodeCopy(node) {
            if (util.isCanvas(node)) return util.makeImage(node.toDataURL());
            return node.cloneNode(false);
        }

        function cloneChildren(original, clone, filter) {
            var children = original.childNodes;
            if (children.length === 0) return Promise.resolve(clone);

            return cloneChildrenInOrder(clone, util.asArray(children), filter).then(function () {
                return clone;
            });

            function cloneChildrenInOrder(parent, children, filter) {
                var done = Promise.resolve();
                children.forEach(function (child) {
                    done = done.then(function () {
                        return cloneNode(child, filter);
                    }).then(function (childClone) {
                        if (childClone) parent.appendChild(childClone);
                    });
                });
                return done;
            }
        }

        function processClone(original, clone) {
            if (!util.isElement(clone)) return clone;

            return Promise.resolve().then(cloneStyle).then(clonePseudoElements).then(copyUserInput).then(fixSvg).then(function () {
                return clone;
            });

            function cloneStyle() {
                copyStyle(self.window.getComputedStyle(original), clone.style);

                function copyStyle(source, target) {
                    if (source.cssText) target.cssText = source.cssText;else copyProperties(source, target);

                    function copyProperties(source, target) {
                        util.asArray(source).forEach(function (name) {
                            target.setProperty(name, source.getPropertyValue(name), source.getPropertyPriority(name));
                        });
                    }
                }
            }

            function clonePseudoElements() {
                [':before', ':after'].forEach(function (element) {
                    clonePseudoElement(element);
                });

                function clonePseudoElement(element) {
                    var style = self.window.getComputedStyle(original, element);
                    var content = style.getPropertyValue('content');

                    if (content === '' || content === 'none') return;

                    var className = util.uid();
                    clone.className = clone.className + ' ' + className;
                    var styleElement = self.document.createElement('style');
                    styleElement.appendChild(formatPseudoElementStyle(className, element, style));
                    clone.appendChild(styleElement);

                    function formatPseudoElementStyle(className, element, style) {
                        var selector = '.' + className + ':' + element;
                        var cssText = style.cssText ? formatCssText(style) : formatCssProperties(style);
                        return self.document.createTextNode(selector + '{' + cssText + '}');

                        function formatCssText(style) {
                            var content = style.getPropertyValue('content');
                            return style.cssText + ' content: ' + content + ';';
                        }

                        function formatCssProperties(style) {

                            return util.asArray(style).map(formatProperty).join('; ') + ';';

                            function formatProperty(name) {
                                return name + ': ' + style.getPropertyValue(name) + (style.getPropertyPriority(name) ? ' !important' : '');
                            }
                        }
                    }
                }
            }

            function copyUserInput() {
                if (util.isTextArea(original)) clone.innerHTML = original.value;
                if (util.isInput(original)) clone.setAttribute("value", original.value);
            }

            function fixSvg() {
                if (!util.isSVG(clone)) return;
                clone.setAttribute('xmlns', 'http://www.w3.org/2000/svg');

                if (!util.isSVGRect(clone)) return;
                ['width', 'height'].forEach(function (attribute) {
                    var value = clone.getAttribute(attribute);
                    if (!value) return;

                    clone.style.setProperty(attribute, value);
                });
            }
        }
    }

    function embedFonts(node) {
        return fontFaces.resolveAll().then(function (cssText) {
            var styleNode = self.document.createElement('style');
            node.appendChild(styleNode);
            styleNode.appendChild(self.document.createTextNode(cssText));
            return node;
        });
    }

    function inlineImages(node) {
        return images.inlineAll(node).then(function () {
            return node;
        });
    }

    function makeSvgDataUri(node, width, height) {
        return Promise.resolve(node).then(function (node) {
            node.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');
            return new self.window.XMLSerializer().serializeToString(node);
        }).then(util.escapeXhtml).then(function (xhtml) {
            return ['data:image/svg+xml;charset=utf-8,', '<svg xmlns="http://www.w3.org/2000/svg" width="', width, '" height="', height, '">', '<foreignObject x="0" y="0" width="100%" height="100%">', xhtml, '</foreignObject>', '</svg>'].join('');
        });
    }

    function newUtil() {
        return {
            escape: escape,
            parseExtension: parseExtension,
            mimeType: mimeType,
            dataAsUrl: dataAsUrl,
            isDataUrl: isDataUrl,
            canvasToBlob: canvasToBlob,
            resolveUrl: resolveUrl,
            getAndEncode: getAndEncode,
            uid: uid(),
            delay: delay,
            asArray: asArray,
            escapeXhtml: escapeXhtml,
            makeImage: makeImage,
            width: width,
            height: height,

            isElement: isElement,
            isCanvas: isCanvas,
            isTextArea: isTextArea,
            isInput: isInput,
            isSVG: isSVG,
            isSVGRect: isSVGRect,
            isImage: isImage
        };

        function mimes() {
            /*
             * Only WOFF and EOT mime types for fonts are 'real'
             * see http://www.iana.org/assignments/media-types/media-types.xhtml
             */
            var WOFF = 'application/font-woff';
            var JPEG = 'image/jpeg';

            return {
                'woff': WOFF,
                'woff2': WOFF,
                'ttf': 'application/font-truetype',
                'eot': 'application/vnd.ms-fontobject',
                'png': 'image/png',
                'jpg': JPEG,
                'jpeg': JPEG,
                'gif': 'image/gif',
                'tiff': 'image/tiff',
                'svg': 'image/svg+xml'
            };
        }

        function parseExtension(url) {
            var match = /\.([^\.\/]*?)$/g.exec(url);
            if (match) return match[1];else return '';
        }

        function mimeType(url) {
            var extension = parseExtension(url).toLowerCase();
            return mimes()[extension] || '';
        }

        function isDataUrl(url) {
            return url.search(/^(data:)/) !== -1;
        }

        function toBlob(canvas) {
            return new Promise(function (resolve) {
                var binaryString = self.window.atob(canvas.toDataURL().split(',')[1]);
                var length = binaryString.length;
                var binaryArray = new self.window.Uint8Array(length);

                for (var i = 0; i < length; i++) {
                    binaryArray[i] = binaryString.charCodeAt(i);
                }resolve(new self.window.Blob([binaryArray], {
                    type: 'image/png'
                }));
            });
        }

        function canvasToBlob(canvas) {
            if (canvas.toBlob) return new Promise(function (resolve) {
                canvas.toBlob(resolve);
            });

            return toBlob(canvas);
        }

        function resolveUrl(url, baseUrl) {
            var doc = self.document.implementation.createHTMLDocument();
            var base = doc.createElement('base');
            doc.head.appendChild(base);
            var a = doc.createElement('a');
            doc.body.appendChild(a);
            base.href = baseUrl;
            a.href = url;
            return a.href;
        }

        function uid() {
            var index = 0;

            return function () {
                return 'u' + fourRandomChars() + index++;

                function fourRandomChars() {
                    /* see http://stackoverflow.com/a/6248722/2519373 */
                    return ('0000' + (self.window.Math.random() * self.window.Math.pow(36, 4) << 0).toString(36)).slice(-4);
                }
            };
        }

        function makeImage(uri) {
            return new Promise(function (resolve, reject) {
                var image = new self.window.Image();
                image.onload = function () {
                    resolve(image);
                };
                image.onerror = reject;
                image.src = uri;
            });
        }

        function getAndEncode(url) {
            var data = self.cache.get(url);
            if (data) {
                if (data.content) {
                    return data.content;
                } else {
                    return new Promise(function (resolve) {
                        if (data.content) {
                            resolve(data.content);
                        } else {
                            data.pendings.push(resolve);
                        }
                    });
                }
            } else {
                data = self.cache.put(url, { pendings: [] });

                var TIMEOUT = 30000;

                return new Promise(function (resolve) {
                    var request = new self.window.XMLHttpRequest();

                    request.onreadystatechange = done;
                    request.ontimeout = timeout;
                    request.responseType = 'blob';
                    request.timeout = TIMEOUT;
                    request.open('GET', url, true);
                    request.send();

                    function done() {
                        if (request.readyState !== 4) return;

                        if (request.status !== 200) {
                            fail('cannot fetch resource: ' + url + ', status: ' + request.status);
                            return;
                        }

                        var encoder = new self.window.FileReader();
                        encoder.onloadend = function () {
                            data.content = encoder.result.split(/,/)[1];
                            for (var _iterator = data.pendings, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                                var _ref;

                                if (_isArray) {
                                    if (_i >= _iterator.length) break;
                                    _ref = _iterator[_i++];
                                } else {
                                    _i = _iterator.next();
                                    if (_i.done) break;
                                    _ref = _i.value;
                                }

                                var _resolve = _ref;

                                _resolve(data.content);
                            }
                            data.pendings = [];
                            resolve(data.content);
                        };
                        encoder.readAsDataURL(request.response);
                    }

                    function timeout() {
                        fail('timeout of ' + TIMEOUT + 'ms occured while fetching resource: ' + url);
                    }

                    function fail(message) {
                        console.error(message);
                        resolve('');
                    }
                });
            }
        }

        function dataAsUrl(content, type) {
            return ['data:', type, ';base64,', content].join('');
        }

        function escape(string) {
            return string.replace(/([.*+?^${}()|\[\]\/\\])/g, '\\$1');
        }

        function delay(ms) {
            return function (arg) {
                return new Promise(function (resolve) {
                    setTimeout(function () {
                        resolve(arg);
                    }, ms);
                });
            };
        }

        function asArray(arrayLike) {
            var array = [];
            var length = arrayLike.length;
            for (var i = 0; i < length; i++) {
                array.push(arrayLike[i]);
            }return array;
        }

        function escapeXhtml(string) {
            return string.replace(/(#|\n)/g, function (c) {
                return c === '#' ? '%23' : '%0A';
            });
        }

        function width(node) {
            var leftBorder = px(node, 'border-left-width');
            var rightBorder = px(node, 'border-right-width');
            return node.scrollWidth + leftBorder + rightBorder;
        }

        function height(node) {
            var topBorder = px(node, 'border-top-width');
            var bottomBorder = px(node, 'border-bottom-width');
            return node.scrollHeight + topBorder + bottomBorder;
        }

        function px(node, styleProperty) {
            var value = self.window.getComputedStyle(node).getPropertyValue(styleProperty);
            return parseFloat(value.replace('px', ''));
        }

        function isElement(node) {
            return node instanceof self.window.Element;
        }

        function isCanvas(node) {
            return node instanceof self.window.HTMLCanvasElement;
        }

        function isTextArea(node) {
            return node instanceof self.window.HTMLTextAreaElement;
        }

        function isInput(node) {
            return node instanceof self.window.HTMLInputElement;
        }

        function isSVG(node) {
            return node instanceof self.window.SVGElement;
        }

        function isSVGRect(node) {
            return node instanceof self.window.SVGRectElement;
        }

        function isImage(node) {
            return node instanceof self.window.HTMLImageElement;
        }
    }

    function newInliner() {
        var URL_REGEX = /url\(['"]?([^'"]+?)['"]?\)/g;

        return {
            inlineAll: inlineAll,
            shouldProcess: shouldProcess,
            impl: {
                readUrls: readUrls,
                inline: inline
            }
        };

        function shouldProcess(string) {
            return string.search(URL_REGEX) !== -1;
        }

        function readUrls(string) {
            var result = [];
            var match = void 0;
            while ((match = URL_REGEX.exec(string)) !== null) {
                result.push(match[1]);
            }
            return result.filter(function (url) {
                return !util.isDataUrl(url);
            });
        }

        function inline(string, url, baseUrl, get) {
            return Promise.resolve(url).then(function (url) {
                return baseUrl ? util.resolveUrl(url, baseUrl) : url;
            }).then(get || util.getAndEncode).then(function (data) {
                return util.dataAsUrl(data, util.mimeType(url));
            }).then(function (dataUrl) {
                return string.replace(urlAsRegex(url), ['$1', dataUrl, '$3'].join(''));
            });

            function urlAsRegex(url) {
                return new self.window.RegExp(['(url\\([\'"]?)(', util.escape(url), ')([\'"]?\\))'].join(''), 'g');
            }
        }

        function inlineAll(string, baseUrl, get) {
            if (nothingToInline()) return Promise.resolve(string);

            return Promise.resolve(string).then(readUrls).then(function (urls) {
                var done = Promise.resolve(string);
                urls.forEach(function (url) {
                    done = done.then(function (string) {
                        return inline(string, url, baseUrl, get);
                    });
                });
                return done;
            });

            function nothingToInline() {
                return !shouldProcess(string);
            }
        }
    }

    function newFontFaces() {
        return {
            resolveAll: resolveAll,
            impl: {
                readAll: readAll
            }
        };

        function resolveAll() {
            return readAll(self.document).then(function (webFonts) {
                return Promise.all(webFonts.map(function (webFont) {
                    return webFont.resolve();
                }));
            }).then(function (cssStrings) {
                return cssStrings.join('\n');
            });
        }

        function readAll() {
            return Promise.resolve(util.asArray(self.document.styleSheets)).then(getCssRules).then(selectWebFontRules).then(function (rules) {
                return rules.map(newWebFont);
            });

            function selectWebFontRules(cssRules) {
                return cssRules.filter(function (rule) {
                    return rule.type === CSSRule.FONT_FACE_RULE;
                }).filter(function (rule) {
                    return inliner.shouldProcess(rule.style.getPropertyValue('src'));
                });
            }

            function getCssRules(styleSheets) {
                var cssRules = [];
                styleSheets.forEach(function (sheet) {
                    try {
                        util.asArray(sheet.cssRules || []).forEach(cssRules.push.bind(cssRules));
                    } catch (e) {
                        console.log('Error while reading CSS rules from ' + sheet.href, e.toString());
                    }
                });
                return cssRules;
            }

            function newWebFont(webFontRule) {
                return {
                    resolve: function resolve() {
                        var baseUrl = (webFontRule.parentStyleSheet || {}).href;
                        return inliner.inlineAll(webFontRule.cssText, baseUrl);
                    },
                    src: function src() {
                        return webFontRule.style.getPropertyValue('src');
                    }
                };
            }
        }
    }

    function newImages() {
        return {
            inlineAll: inlineAll,
            impl: {
                newImage: newImage
            }
        };

        function newImage(element) {
            return {
                inline: inline
            };

            function inline(get) {
                if (util.isDataUrl(element.src)) return Promise.resolve();

                return Promise.resolve(element.src).then(get || util.getAndEncode).then(function (data) {
                    return util.dataAsUrl(data, util.mimeType(element.src));
                }).then(function (dataUrl) {
                    return new Promise(function (resolve, reject) {
                        element.onload = resolve;
                        element.onerror = reject;
                        element.src = dataUrl;
                    });
                });
            }
        }

        function inlineAll(node) {
            if (!util.isElement(node)) return Promise.resolve(node);

            return inlineBackground(node).then(function () {
                if (util.isImage(node)) return newImage(node).inline();else return Promise.all(util.asArray(node.childNodes).map(function (child) {
                    return inlineAll(child);
                }));
            });

            function inlineBackground(node) {
                var background = node.style.getPropertyValue('background');

                if (!background) return Promise.resolve(node);

                return inliner.inlineAll(background).then(function (inlined) {
                    node.style.setProperty('background', inlined, node.style.getPropertyPriority('background'));
                }).then(function () {
                    return node;
                });
            }
        }
    }
};

exports.default = Dom2Image;

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Drag = function () {
  function Drag(wnd, doc, visualWorld) {
    _classCallCheck(this, Drag);

    this.wnd = wnd;
    this.doc = doc;
    this.visual = visualWorld;
    this.coords = new _libs.THREE.Vector2();
    this.intersection = new _libs.THREE.Vector3();
    this.raycaster = this.visual.raycaster;
    this.camera = this.visual.camera;
    this.plane = new _libs.THREE.Plane();
    this.threes = [];
    this.selected = null;
    this.enabled = true;
    this.controlsState = this.visual.getControlsState();

    this.element = this.visual.element;
    this.binds = {
      onMouseMove: this.onMouseMove.bind(this),
      onMouseDown: this.onMouseDown.bind(this),
      onMouseUp: this.onMouseUp.bind(this)
    };
    (0, _libs.$)(this.element).on('mousemove', this.binds.onMouseMove);
    (0, _libs.$)(this.element).on('mousedown', this.binds.onMouseDown);
    (0, _libs.$)(this.doc).on('mouseup', this.binds.onMouseUp);
  }

  Drag.prototype.addThree = function addThree(three) {
    this.threes.push(three);
  };

  Drag.prototype.removeThree = function removeThree(three) {
    var i = this.threes.indexOf(three);
    if (~i) {
      this.threes.splice(i, 1);
    }
  };

  Drag.prototype.onPickCallback = function onPickCallback() {
    return true;
  };

  Drag.prototype.onDragCallback = function onDragCallback() {
    return true;
  };

  Drag.prototype.onReleaseCallback = function onReleaseCallback() {};

  Drag.prototype.dispose = function dispose() {
    (0, _libs.$)(this.element).off('mousemove', this.binds.onMouseMove);
    (0, _libs.$)(this.element).off('mousedown', this.binds.onMouseDown);
    (0, _libs.$)(this.doc).off('mouseup', this.binds.onMouseUp);
  };

  Drag.prototype.setCoordsFromEvent = function setCoordsFromEvent(e) {
    var jElement = (0, _libs.$)(this.element);
    var offset = jElement.offset();
    this.coords.x = (e.pageX - offset.left) / jElement.width() * 2 - 1;
    this.coords.y = -((e.pageY - offset.top) / jElement.height()) * 2 + 1;
    return this.coords;
  };

  Drag.prototype.onMouseDown = function onMouseDown(e) {
    if (!this.enabled) return;

    if (this.selected) this.onMouseUp(e);

    this.setCoordsFromEvent(e);
    this.raycaster.setFromCamera(this.coords, this.camera);

    var intersects = this.raycaster.intersectObjects(this.threes);
    if (intersects.length > 0) {
      var selected = intersects[0].object;
      if (!this.onPickCallback(intersects[0])) return;
      var v = intersects[0].point.clone();
      this.distance = v.sub(this.raycaster.ray.origin).length();;
      this.controlsState = this.visual.getControlsState();
      this.visual.setControlsState(false);
      this.plane.setFromNormalAndCoplanarPoint(this.visual.camera.getWorldDirection(this.plane.normal), intersects[0].point);
      //this.plane.setFromNormalAndCoplanarPoint(this.plane.normal.set(0,0,1), new THREE.Vector3(0,0,0));
      this.selected = selected;
    }
  };

  Drag.prototype.onMouseMove = function onMouseMove(e) {
    if (!this.enabled) return;
    e.preventDefault();

    if (this.selected) {
      this.setCoordsFromEvent(e);
      this.raycaster.setFromCamera(this.coords, this.camera);
      if (this.raycaster.ray.intersectPlane(this.plane, this.intersection)) {
        if (!this.onDragCallback(this.intersection)) this.onMouseUp(e);
      } /**/
      //this.intersection.copy(this.raycaster.ray.direction).normalize().multiplyScalar(this.distance).add(this.raycaster.ray.origin);/**/
      //if(!this.onDragCallback(this.selected, this.intersection)) this.onMouseUp(e);
    }
  };

  Drag.prototype.onMouseUp = function onMouseUp(e) {
    if (this.selected) {
      this.onReleaseCallback();
      this.selected = null;
      this.visual.setControlsState(this.controlsState);
    }
    if (!this.enabled) return;
    e.preventDefault();
  };

  return Drag;
}();

exports.default = Drag;

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

__webpack_require__(74)(_libs.$);

var EventsToActions = function () {
  EventsToActions.getEventFlags = function getEventFlags(e) {
    return e.ctrlKey << 0 | e.shiftKey << 1 | e.altKey << 2;
  };

  EventsToActions.getPosition = function getPosition(touches) {
    var x = void 0,
        y = void 0;
    if (touches.length === 2) {
      x = touches[1].pageX - touches[0].pageX;
      y = touches[1].pageY - touches[0].pageY;
    } else {
      x = touches[0].pageX;
      y = touches[0].pageY;
    }
    return {
      x: x,
      y: y
    };
  };

  function EventsToActions(element, actions) {
    _classCallCheck(this, EventsToActions);

    this.actions = actions || {};
    this.element = element;
    this.doc = element[0].ownerDocument;
    this.wnd = this.doc.defaultView;
    this.enabled = true;

    this.binds = {
      contextMenu: this.contextMenu.bind(this),

      mouseDown: this.mouseDown.bind(this),
      mouseMove: this.mouseMove.bind(this),
      mouseUp: this.mouseUp.bind(this),
      mouseWheel: this.mouseWheel.bind(this),

      mouseMoveDoc: this.mouseMoveDoc.bind(this),
      mouseUpDoc: this.mouseUpDoc.bind(this),

      click: this.click.bind(this),
      dblclick: this.dblclick.bind(this),

      touchStart: this.touchStart.bind(this),
      touchMove: this.touchMove.bind(this),
      touchEnd: this.touchEnd.bind(this),

      keyDown: this.keyDown.bind(this),
      keyPress: this.keyPress.bind(this),
      keyUp: this.keyUp.bind(this)
    };

    this.element.on('contextmenu', this.binds.contextMenu);

    this.element.on('mousedown', this.binds.mouseDown);
    this.element.on('mousemove', this.binds.mouseMove);
    this.element.on('mouseup', this.binds.mouseUp);
    this.element.on('mousewheel', this.binds.mouseWheel);

    (0, _libs.$)(this.doc).on('mousemove', this.binds.mouseMoveDoc);
    (0, _libs.$)(this.doc).on('mouseup', this.binds.mouseUpDoc);

    this.element.on('click', this.binds.click);
    this.element.on('dblclick', this.binds.dblclick);

    this.element.on('touchstart', this.binds.touchStart);
    this.element.on('touchmove', this.binds.touchMove);
    this.element.on('touchend', this.binds.touchEnd);

    (0, _libs.$)(this.wnd).on('keydown', this.binds.keyDown);
    (0, _libs.$)(this.wnd).on('keypress', this.binds.keyPress);
    (0, _libs.$)(this.wnd).on('keyup', this.binds.keyUp);
  }

  EventsToActions.prototype.addAction = function addAction(action, type, code, flags) {
    type = type.toLowerCase();
    if (!this.actions[type]) {
      this.actions[type] = {};
    }
    if (!this.actions[type][code]) {
      this.actions[type][code] = {};
    }
    if (!this.actions[type][code][flags]) {
      this.actions[type][code][flags] = [];
    }
    this.actions[type][code][flags].push(action);
  };

  EventsToActions.prototype.getActions = function getActions(type, code, flags) {
    return ((this.actions[type] || {})[code] || {})[flags] || [];
  };

  EventsToActions.prototype.fireActions = function fireActions(actions, e, data) {
    for (var _iterator = actions, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var action = _ref;

      action(e, data);
    }
  };

  EventsToActions.prototype.contextMenu = function contextMenu(e) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions('contextmenu', e.button, flags), e);
    }
  };

  EventsToActions.prototype.mouseDown = function mouseDown(e) {
    if (this.picked) {
      this.mouseUpDoc();
    }
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions('mousedown', e.button, flags), e);
      this.picked = {
        x: e.pageX,
        y: e.pageY,
        actions: this.getActions('mousedrag', e.button, flags)
      };
      this.fireActions(this.picked.actions, e, {
        state: 'start'
      });
    }
  };

  EventsToActions.prototype.mouseMove = function mouseMove(e) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions('mousemove', e.button, flags), e);
    }
  };

  EventsToActions.prototype.mouseMoveDoc = function mouseMoveDoc(e) {
    if (this.enabled && this.picked) {
      this.fireActions(this.picked.actions, e, {
        state: 'move',
        dx: e.pageX - this.picked.x,
        dy: e.pageY - this.picked.y
      });
      this.picked = {
        x: e.pageX,
        y: e.pageY,
        actions: this.picked.actions
      };
    }
  };

  EventsToActions.prototype.mouseUp = function mouseUp(e) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions('mouseup', e.button, flags), e);
    }
  };

  EventsToActions.prototype.mouseUpDoc = function mouseUpDoc(e) {
    if (this.picked) {
      this.fireActions(this.picked.actions, e, {
        state: 'end'
      });
      delete this.picked;
    }
  };

  EventsToActions.prototype.mouseWheel = function mouseWheel(e) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions('mousewheel', 0, flags), e);
    }
  };

  EventsToActions.prototype.clicks = function clicks(e, type) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions(type, e.button, flags), e);
    }
  };

  EventsToActions.prototype.click = function click(e) {
    this.clicks(e, 'click');
  };

  EventsToActions.prototype.dblclick = function dblclick(e) {
    this.clicks(e, 'dblclick');
  };

  EventsToActions.prototype.touchPick = function touchPick(e, flags, touches) {
    var pos = EventsToActions.getPosition(touches);
    this.touchPicked = _extends({}, pos, {
      actions: this.getActions('touchdrag', touches.length, flags),
      code: touches.length,
      flags: flags
    });
    this.fireActions(this.touchPicked.actions, e, _extends({
      state: 'start'
    }, pos));
  };

  EventsToActions.prototype.touchStart = function touchStart(e) {
    if (this.touchPicked) {
      this.touchEnd(e);
    }
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e),
          touches = e.touches || e.originalEvent.touches;
      this.fireActions(this.getActions('touchstart', touches.length, flags), e);
      this.touchPick(e, flags, touches);
    }
  };

  EventsToActions.prototype.touchMove = function touchMove(e) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e),
          touches = e.touches || e.originalEvent.touches;
      this.fireActions(this.getActions('touchmove', touches.length, flags), e);
      if (this.touchPicked) {
        if (this.touchPicked.code === touches.length && this.touchPicked.flags === flags) {
          var pos = EventsToActions.getPosition(touches);
          this.fireActions(this.touchPicked.actions, e, _extends({
            state: 'move',
            dx: pos.x - this.touchPicked.x,
            dy: pos.y - this.touchPicked.y
          }, pos));
          this.touchPicked = _extends({}, this.touchPicked, pos);
        } else {
          this.touchEnd(e);
          this.touchPick(e, flags, touches);
        }
      }
    }
  };

  EventsToActions.prototype.touchEnd = function touchEnd(e) {
    if (this.touchPicked) {
      this.fireActions(this.touchPicked.actions, e, {
        state: 'end'
      });
      delete this.touchPicked;
    }
  };

  EventsToActions.prototype.key = function key(e, type) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions(type, e.keyCode, flags), e);
    }
  };

  EventsToActions.prototype.keyDown = function keyDown(e) {
    this.key(e, 'keydown');
  };

  EventsToActions.prototype.keyPress = function keyPress(e) {
    this.key(e, 'keypress');
  };

  EventsToActions.prototype.keyUp = function keyUp(e) {
    this.key(e, 'keyup');
  };

  EventsToActions.prototype.dispose = function dispose() {
    this.element.off('contextmenu', this.binds.contextMenu);

    this.element.off('mousedown', this.binds.mouseDown);
    this.element.off('mousemove', this.binds.mouseMove);
    this.element.off('mouseup', this.binds.mouseUp);
    this.element.off('mousewheel', this.binds.mouseWheel);

    (0, _libs.$)(this.doc).off('mousemove', this.binds.mouseMoveDoc);
    (0, _libs.$)(this.doc).off('mouseup', this.binds.mouseUpDoc);

    this.element.off('click', this.binds.click);
    this.element.off('dblclick', this.binds.dblclick);

    this.element.off('touchstart', this.binds.touchStart);
    this.element.off('touchmove', this.binds.touchMove);
    this.element.off('touchend', this.binds.touchEnd);

    (0, _libs.$)(this.wnd).off('keydown', this.binds.keyDown);
    (0, _libs.$)(this.wnd).off('keypress', this.binds.keyPress);
    (0, _libs.$)(this.wnd).off('keyup', this.binds.keyUp);
  };

  return EventsToActions;
}();

EventsToActions.modKeys = {
  Ctrl: 1,
  Shift: 2,
  Alt: 4
};
EventsToActions.mouseButtons = {
  Left: 0,
  Middle: 1,
  Right: 2
};
exports.default = EventsToActions;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FullScreen = function () {
	function FullScreen() {
		_classCallCheck(this, FullScreen);
	}

	FullScreen.available = function available() {
		return FullScreen._hasWebkitFullScreen || FullScreen._hasMozFullScreen || FullScreen._hasMsFullscreen;
	};

	FullScreen.activated = function activated() {
		if (FullScreen._hasWebkitFullScreen) {
			return document.webkitIsFullScreen;
		} else if (FullScreen._hasMozFullScreen) {
			return document.mozFullScreen;
		} else if (FullScreen._hasMsFullscreen) {
			return !!document.msFullscreenElement;
		} else {
			console.assert(false);
		}
	};

	FullScreen.addEventListener = function addEventListener(element, handler) {
		if (element.addEventListener) {
			element.addEventListener('webkitfullscreenchange', handler, false);
			element.addEventListener('mozfullscreenchange', handler, false);
			element.addEventListener('fullscreenchange', handler, false);
			element.addEventListener('MSFullscreenChange', handler, false);
		}
	};

	FullScreen.removeEventListener = function removeEventListener(element, handler) {
		if (element.removeEventListener) {
			element.removeEventListener('webkitfullscreenchange', handler, false);
			element.removeEventListener('mozfullscreenchange', handler, false);
			element.removeEventListener('fullscreenchange', handler, false);
			element.removeEventListener('MSFullscreenChange', handler, false);
		}
	};

	FullScreen.request = function request(element) {
		element = element || document.body;
		if (FullScreen._hasWebkitFullScreen) {
			element.webkitRequestFullScreen();
		} else if (FullScreen._hasMozFullScreen) {
			element.mozRequestFullScreen();
		} else if (FullScreen._hasMsFullscreen) {
			element.msRequestFullscreen();
		} else {
			console.assert(false);
		}
	};

	FullScreen.cancel = function cancel() {
		if (FullScreen._hasWebkitFullScreen) {
			document.webkitCancelFullScreen();
		} else if (FullScreen._hasMozFullScreen) {
			document.mozCancelFullScreen();
		} else if (FullScreen._hasMsFullscreen) {
			document.msExitFullscreen();
		} else {
			console.assert(false);
		}
	};

	return FullScreen;
}();

FullScreen._hasWebkitFullScreen = !!document.webkitCancelFullScreen;
FullScreen._hasMozFullScreen = !!document.mozCancelFullScreen;
FullScreen._hasMsFullscreen = !!document.documentElement.msRequestFullscreen;
exports.default = FullScreen;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _ImageBase2 = __webpack_require__(6);

var _ImageBase3 = _interopRequireDefault(_ImageBase2);

var _BaseMathUtils = __webpack_require__(2);

var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

var _Dom2Image = __webpack_require__(50);

var _Dom2Image2 = _interopRequireDefault(_Dom2Image);

var _DocMouseSimulator = __webpack_require__(49);

var _DocMouseSimulator2 = _interopRequireDefault(_DocMouseSimulator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InteractiveImage = function (_ImageBase) {
  _inherits(InteractiveImage, _ImageBase);

  function InteractiveImage(context, width, height, color, src, cache, injector) {
    _classCallCheck(this, InteractiveImage);

    var _this = _possibleConstructorReturn(this, _ImageBase.call(this, context, width, height, color));

    _this.iId = 'i' + _BaseMathUtils2.default.getUnique();
    var jFrame = (0, _libs.$)('<iframe id="' + _this.iId + '" src="' + src + '" style="position: fixed; left: -1000px;"></iframe>');
    (0, _libs.$)(_this.doc.body).append(jFrame);
    _this.frame = jFrame[0];

    _this.binds = {};

    if (injector) {
      injector(_this.frame.contentWindow);
    }

    if (_this.doc.implementation.hasFeature('www.http://w3.org/TR/SVG11/feature#Extensibility', '1.1')) {
      // svg foreignObject renderer
      _this.image = new Image();
      _this.binds.imageLoad = function () {
        _this.renderImage(_this.image);
        _this.finishRender();
      };
      (0, _libs.$)(_this.image).on('load', _this.binds.imageLoad);
      _this.svgRender = new _Dom2Image2.default(_this.frame.contentWindow, _this.frame.contentDocument, cache);
    } // otherwise - html2canvas

    _this.binds.frameLoad = function () {
      if (~_this.frame.contentDocument.title.indexOf('404')) {
        _this.startRender = function () {
          _this.renderNotFoundPage();
          _this.finishRender();
        };
        _this.finishLoad();
      } else {
        setTimeout(function () {
          if (_this.frame) {
            _this.width = (0, _libs.$)(_this.frame.contentDocument.body).width();
            _this.height = (0, _libs.$)(_this.frame.contentDocument.body).height();
            _this.resH = _this.height / _this.width * _this.resW;
            jFrame.css('width', _this.width + 'px').css('height', _this.height + 'px');
            jFrame.offset({ left: -_this.width - 100, top: 0 });
            if (_this.svgRender) {
              _this.simulator = new _DocMouseSimulator2.default(jFrame, _this.frame.contentDocument.body, _this.element);
              _this.simulator.addDocChangeClb(_this.finishLoad.bind(_this));
            }
            _this.startRender = function () {
              _this.render();
            };
            _this.finishLoad();
          }
        }, 500);
      }
    };
    (0, _libs.$)(_this.frame.contentWindow).on('load', _this.binds.frameLoad);
    return _this;
  }

  InteractiveImage.prototype.getSimulatedDoc = function getSimulatedDoc() {
    return this.frame.contentDocument;
  };

  InteractiveImage.prototype.render = function render() {
    var _this2 = this;

    if (this.svgRender) {
      this.svgRender.toSvg(this.simulator.element, { height: this.height + 'px', width: this.width + 'px' }).then(function (dataUrl) {
        _this2.image.src = dataUrl;
      }).catch(function (error) {
        console.error('Dom2Image: ', error);
        _this2.renderBlankPage();
        _this2.finishRender();
      });
    } else {
      (0, _libs.html2canvas)(this.frame.contentDocument.body, { timeout: 30000 }).then(function (canvas) {
        _this2.renderImage(canvas);
        _this2.finishRender();
      });
    }
  };

  InteractiveImage.prototype.dispose = function dispose() {
    (0, _libs.$)(this.image).off('load', this.binds.imageLoad);
    (0, _libs.$)(this.frame.contentWindow).off('load', this.binds.frameLoad);
    (0, _libs.$)(this.doc.body).find('#' + this.iId).remove();
    if (this.image) {
      this.image.src = '';
      delete this.image;
    }
    this.frame.src = '';
    delete this.frame;
    _ImageBase.prototype.dispose.call(this);
  };

  InteractiveImage.prototype.simulate = function simulate(e, doc, x, y) {
    if (this.simulator) {
      this.simulator.simulate(e, doc, x, y);
    }
  };

  return InteractiveImage;
}(_ImageBase3.default);

exports.default = InteractiveImage;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _GraphUtils = __webpack_require__(4);

var _GraphUtils2 = _interopRequireDefault(_GraphUtils);

var _MathUtils = __webpack_require__(5);

var _MathUtils2 = _interopRequireDefault(_MathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LoadingAnimation = function () {
  LoadingAnimation.prototype.dy = function dy(t, y) {
    var w = y[0],
        a = y[1];
    return [-this.g * Math.cos(a), w];
  };

  LoadingAnimation.prototype.integrate = function integrate(T) {
    var t = 0,
        dt = this.p.dt,
        os = this.os;
    while (t < T) {
      if (t + dt > T) {
        dt = T - t;
      }
      os = _MathUtils2.default.rk4(this.dy.bind({ g: this.p.g }), 0, dt, os);
      t += dt;
    }
    return os;
  };

  LoadingAnimation.prototype.calcTimeTo = function calcTimeTo(target) {
    var t = 0,
        dt = this.p.dt,
        os = this.os;
    while (Math.abs(os[1] - target) > 1e-4) {
      var nos = _MathUtils2.default.rk4(this.dy.bind({ g: this.p.g }), 0, dt, os);
      if (nos[0] < 0 && nos[1] < target || nos[0] > 0 && nos[1] > target) {
        dt /= 2;
      } else {
        os = nos;
        t += dt;
      }
    }
    return t;
  };

  LoadingAnimation.prototype.update = function update(T) {
    this.os = this.integrate(T);

    this.t += T;
    if (this.t >= this.p.updateInterval) {
      this.t = 0;
      var r = 0.04 * Math.min(this.c.width, this.c.height),
          a = this.os[1],
          x0 = 0.5 * this.c.width,
          y0 = 0.5 * this.c.height,
          ctx = this.ctx;

      ctx.clearRect(0, 0, this.c.width, this.c.height);
      ctx.beginPath();
      ctx.fillStyle = _GraphUtils2.default.color2Rgba(this.p.color, 1);
      ctx.rect(0, 0, this.c.width, this.c.height);
      ctx.fill();

      ctx.beginPath();
      ctx.shadowBlur = 50;
      ctx.fillStyle = _GraphUtils2.default.color2Rgba(_GraphUtils2.default.inverseColor(this.p.color, 0.9), Math.abs(this.os[0] / 6.36));
      ctx.shadowColor = _GraphUtils2.default.color2Rgba(_GraphUtils2.default.inverseColor(this.p.color, 1), 0.9);
      ctx.shadowOffsetX = 0;
      ctx.shadowOffsetY = 0;
      ctx.font = 'bold ' + Math.round(0.25 * r) + 'px Arial';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.fillText((0, _libs.tr)('Loading...'), x0, y0);

      var ps = 10,
          da = 2 * Math.PI / ps; //2.5*_r/r
      ctx.shadowColor = _GraphUtils2.default.color2Rgba(_GraphUtils2.default.inverseColor(this.p.color, 1), 0.7);
      for (var i = 0, _a = a, _r = 0.2 * r; i < ps; ++i, _r *= 0.9, _a += da) {
        ctx.beginPath();
        ctx.fillStyle = _GraphUtils2.default.color2Rgba(_GraphUtils2.default.inverseColor(this.p.color, (ps - i) / ps), 0.7 * (ps - i) / ps);
        var cx = x0 + r * Math.cos(_a),
            cy = y0 - r * Math.sin(_a),
            nx = x0 + r * Math.cos(_a + da),
            ny = y0 - r * Math.sin(_a + da);
        ctx.shadowOffsetX = 0.2 * (nx - cx);
        ctx.shadowOffsetY = 0.2 * (ny - cy);
        ctx.arc(cx, cy, _r, 0, Math.PI * 2, 1);
        ctx.fill();
      }
      if (this.onChange) {
        this.onChange(this.c, this.p.color);
      }
    }
  };

  LoadingAnimation.prototype.getImage = function getImage() {
    return this.c;
  };

  LoadingAnimation.prototype.dispose = function dispose() {
    this.c.width = 0;
    this.c.height = 0;
    delete this.ctx;
    delete this.c;
  };

  LoadingAnimation.prototype.createSprite = function createSprite(n) {
    var c = _GraphUtils2.default.createCanvas(this.c.width * n, this.c.height),
        ctx = c.getContext('2d'),
        t = this.calcTimeTo(this.os[1] + Math.sign(this.os[0]) * 2 * Math.PI),
        dt = t / (n + 1);
    var updateInterval = this.p.updateInterval;

    this.p.updateInterval = 0;
    for (var i = 0; i < n; ++i) {
      this.update(dt);
      ctx.drawImage(this.c, i * this.c.width, 0);
    }
    this.p.updateInterval = updateInterval;
    return c;
  };

  function LoadingAnimation(width, height, color) {
    _classCallCheck(this, LoadingAnimation);

    this.c = _GraphUtils2.default.createCanvas(width, height);
    this.p = {
      g: 9.8,
      dt: 1 / 60,
      color: color,
      updateInterval: 0.25
    };
    this.ctx = this.c.getContext('2d');
    this.os = [-2, Math.PI / 2];
    this.t = this.p.updateInterval;
  }

  return LoadingAnimation;
}();

exports.default = LoadingAnimation;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LoadingController = function () {
  function LoadingController(view) {
    var showProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var loadingMsg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    _classCallCheck(this, LoadingController);

    this.view = view;
    this.progress = 0;
    this.showProgress = showProgress;
    this.getLoadingMsg = loadingMsg || LoadingController.defaultLoadingMsg;
    this.updateView();
  }

  LoadingController.defaultLoadingMsg = function defaultLoadingMsg(progress) {
    return ['Please wait... the Application is Loading: ', progress, '%'].join('');
  };

  LoadingController.prototype.dispose = function dispose() {
    this.showProgress = false;
    this.updateView();
    delete this.view;
  };

  LoadingController.prototype.setProgress = function setProgress(v) {
    this.progress = v;
    this.updateView();
  };

  LoadingController.prototype.updateView = function updateView() {
    if (this.view) {

      this.view.setState('widLoadingProgress', {
        enable: true,
        visible: this.showProgress,
        active: false
      });

      this.view.setState('txtLoadingProgress', {
        value: this.getLoadingMsg(this.progress),
        visible: true
      });

      for (var _iterator = this.view.getLinks(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var name = _ref;

        this.view.setState(name, {
          enable: false,
          visible: true,
          active: false
        });
      }

      this.view.setState('inpPages', {
        visible: true,
        value: ''
      });

      this.view.setState('inpPage', {
        visible: true,
        enable: false,
        value: ''
      });
    }
  };

  return LoadingController;
}();

exports.default = LoadingController;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _EventConverter2 = __webpack_require__(7);

var _EventConverter3 = _interopRequireDefault(_EventConverter2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MouseEventConverter = function (_EventConverter) {
  _inherits(MouseEventConverter, _EventConverter);

  function MouseEventConverter(wnd, doc, element) {
    _classCallCheck(this, MouseEventConverter);

    var _this = _possibleConstructorReturn(this, _EventConverter.call(this, wnd, doc));

    _this.element = element;
    _this.binds = {
      convert: _this.convert.bind(_this)
    };
    (0, _libs.$)(_this.element).on('mousemove mousedown mouseover mouseout click', _this.binds.convert);
    (0, _libs.$)(_this.doc).on('mouseup', _this.binds.convert);
    return _this;
  }

  MouseEventConverter.prototype.dispose = function dispose() {
    (0, _libs.$)(this.element).off('mousemove mousedown mouseover mouseout click', this.binds.convert);
    (0, _libs.$)(this.doc).off('mouseup', this.binds.convert);
  };

  return MouseEventConverter;
}(_EventConverter3.default);

exports.default = MouseEventConverter;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

var _MathUtils = __webpack_require__(5);

var _MathUtils2 = _interopRequireDefault(_MathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Object3DWatcher = function () {
  function Object3DWatcher(visual, boundBoxClb) {
    var testScale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.testScale;

    _classCallCheck(this, Object3DWatcher);

    this.visual = visual;
    this.boundBoxClb = boundBoxClb;
    this.testScale = testScale;
    this.camera = visual.camera;
    this.element = this.visual.element;
    this.elementSize = { w: 1, h: 1 };
    this.orbit = visual.getOrbit();
    this.scale = 1;
    this.padding = 0;

    this.eps = 1e-4;
    this.v = new _libs.THREE.Vector3();
    this.dv = new _libs.THREE.Vector2();

    this.enabled = false;

    visual.addRenderCallback(this.update.bind(this));

    this.os = {
      vx: 0,
      vy: 0,
      x: 0,
      y: 0
    };
    this.orbit.update();
    this.camera.updateMatrixWorld();
    var box = this.computeClientBoundBox(),
        k = 1.11;
    this.movePan({ x: -k * box.mid.x, y: -k * box.mid.y });
  }

  Object3DWatcher.prototype.setPadding = function setPadding(padding) {
    this.padding = padding;
  };

  Object3DWatcher.prototype.movePan = function movePan(dv) {
    this.orbit.pan(dv.x * this.visual.width(), -dv.y * this.visual.height());
  };

  Object3DWatcher.prototype.vToCamera = function vToCamera(v) {
    v.project(this.camera);
    return {
      x: 0.5 * v.x,
      y: 0.5 * v.y
    };
  };

  Object3DWatcher.prototype.computeClientBoundBox = function computeClientBoundBox() {
    var box = this.boundBoxClb(),
        xs = [box.min.x, box.max.x],
        ys = [0, 0],
        zs = [box.min.z, box.max.z];

    var ps = [],
        res = { max: {}, min: {} };
    for (var _iterator = xs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var x = _ref;

      for (var _iterator2 = ys, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var y = _ref2;

        for (var _iterator3 = zs, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
          var _ref3;

          if (_isArray3) {
            if (_i3 >= _iterator3.length) break;
            _ref3 = _iterator3[_i3++];
          } else {
            _i3 = _iterator3.next();
            if (_i3.done) break;
            _ref3 = _i3.value;
          }

          var z = _ref3;

          ps.push(this.vToCamera(this.v.set(x, y, z)));
        }
      }
    }

    ps.sort(function (p1, p2) {
      return p1.x - p2.x;
    });
    res.min.x = ps[0].x;
    res.max.x = ps[ps.length - 1].x;
    ps.sort(function (p1, p2) {
      return p1.y - p2.y;
    });
    res.min.y = ps[0].y;
    res.max.y = ps[ps.length - 1].y;

    res.width = res.max.x - res.min.x;
    res.height = res.max.y - res.min.y;

    res.mid = {
      x: 0.5 * (res.max.x + res.min.x),
      y: 0.5 * (res.max.y + res.min.y)
    };

    return res;
  };

  Object3DWatcher.prototype.setObject = function setObject(boundBoxClb) {
    this.boundBoxClb = boundBoxClb;
  };

  Object3DWatcher.prototype.testScale = function testScale() {
    return true;
  };

  Object3DWatcher.prototype.computeCorr = function computeCorr(K, min, max) {
    var corr = 0;
    if (K < 1) {
      if (min > -0.5) {
        corr = -0.5 - min;
      } else if (max < 0.5) {
        corr = 0.5 - max;
      }
    } else {
      if (min < -0.5) {
        corr = -0.5 - min;
      } else if (max > 0.5) {
        corr = 0.5 - max;
      }
    }
    return corr;
  };

  Object3DWatcher.prototype.centerView = function centerView(T) {
    var box = this.computeClientBoundBox(),
        Kx = this.elementSize.w / box.width,
        Ky = this.elementSize.h / box.height,
        K = Math.min(Kx, Ky),
        moving = false;

    if (this.testScale() && Math.abs(1 / K - this.scale) > this.eps) {
      var scale = 1 / K + 0.2 * (this.scale - 1 / K);
      this.orbit.setScale(this.orbit.getScale() / (K * scale));
      this.orbit.update();
      this.camera.updateMatrixWorld();
      box = this.computeClientBoundBox();
      Kx = this.elementSize.w / box.width;
      Ky = this.elementSize.h / box.height;
      K = Math.min(Kx, Ky);
      moving = true;
    }

    var dv = this.dv;
    if (K > 1 - this.eps) {
      if (this.padding) {
        var height = this.visual.height(),
            marg = 0.5 * (Ky - 1) / Ky,
            pad = this.padding / height,
            dpad = Math.max(0, Math.abs(pad) - marg);
        dv.set(-box.mid.x, -Math.sign(pad) * Math.min(Math.max(0, marg - 20 / height), dpad) - box.mid.y);
      } else {
        dv.set(-box.mid.x, -box.mid.y);
      }
    } else {
      var px = 70 / this.visual.width(),
          py = 70 / this.visual.height();
      dv.set(this.computeCorr(Kx, box.min.x - px, box.max.x + px), this.computeCorr(Ky, box.min.y - py, box.max.y + py));
    }

    if (Math.sqrt(this.os.vx * this.os.vx + this.os.vy * this.os.vy) > 0.003 || dv.length() > 0.003) {
      var dt = 1 / 60,
          t = 0,
          os = _extends({}, this.os, {
        x: 0,
        y: 0
      });
      os.tf = function (vx, vy, x, y) {
        return {
          x: 75 * (dv.x - x),
          y: 75 * (dv.y - y)
        };
      };
      while (t < T) {
        if (t + dt > T) {
          dt = T - t;
        }
        os = this.integrate(os, dt);
        t += dt;
      }
      this.movePan(os);
      this.os = os;
      moving = true;
    }
    this.orbit.setMoving(moving);
  };

  Object3DWatcher.prototype.integrate = function integrate(os, dt) {
    var _MathUtils$rk = _MathUtils2.default.rk4(this.dy.bind(os), 0, dt, [os.vx, os.vy, os.x, os.y]),
        vx = _MathUtils$rk[0],
        vy = _MathUtils$rk[1],
        x = _MathUtils$rk[2],
        y = _MathUtils$rk[3];

    return _extends({}, os, {
      vx: vx, vy: vy, x: x, y: y
    });
  };

  Object3DWatcher.prototype.dy = function dy(t, Y) {
    var vx = Y[0],
        vy = Y[1],
        x = Y[2],
        y = Y[3],
        vd = 15,
        tf = this.tf(vx, vy, x, y);

    return [tf.x - vd * vx, tf.y - vd * vy, vx, vy];
  };

  Object3DWatcher.prototype.update = function update(dt) {
    if (this.enabled && this.boundBoxClb) {
      this.centerView(dt);
    }
  };

  return Object3DWatcher;
}();

exports.default = Object3DWatcher;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Orbit = function (_THREE$EventDispatche) {
  _inherits(Orbit, _THREE$EventDispatche);

  function Orbit(object, world) {
    _classCallCheck(this, Orbit);

    var _this = _possibleConstructorReturn(this, _THREE$EventDispatche.call(this));

    _this.moving = false;
    _this.object = object;
    _this.world = world;

    // Set to false to disable this control
    _this.enabled = true;

    // "target" sets the location of focus, where the object orbits around
    _this.target = new _libs.THREE.Vector3();

    // How far you can dolly in and out(PerspectiveCamera only)
    _this.minDistance = 0;
    _this.maxDistance = Infinity;

    // How far you can zoom in and out(OrthographicCamera only)
    _this.minZoom = 0;
    _this.maxZoom = Infinity;

    // How far you can orbit vertically, upper and lower limits.
    // Range is 0 to Math.PI radians.
    _this.minPolarAngle = 0; // radians
    _this.maxPolarAngle = Math.PI; // radians

    // How far you can orbit horizontally, upper and lower limits.
    // If set, must be a sub-interval of the interval [-Math.PI, Math.PI ].
    _this.minAzimuthAngle = -Infinity; // radians
    _this.maxAzimuthAngle = Infinity; // radians

    // Set to true to enable damping (inertia)
    // If damping is enabled, you must call controls.update() in your animation loop
    _this.enableDamping = false;
    _this.dampingFactor = 0.25;

    // This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
    // Set to false to disable zooming
    _this.enableZoom = true;
    _this.zoomSpeed = 1.0;

    // Set to false to disable rotating
    _this.enableRotate = true;
    _this.rotateSpeed = 1.0;

    // Set to false to disable panning
    _this.enablePan = true;

    // Set to true to automatically rotate around the target
    // If auto-rotate is enabled, you must call controls.update() in your animation loop
    _this.autoRotate = false;
    _this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60

    // for reset
    _this.target0 = _this.target.clone();
    _this.position0 = _this.object.position.clone();
    _this.zoom0 = _this.object.zoom;

    //
    // public methods
    //
    _this.getPolarAngle = function () {
      return spherical.phi;
    };

    _this.getAzimuthalAngle = function () {
      return spherical.theta;
    };

    _this.reset = function () {
      scope.target.copy(scope.target0);
      scope.object.position.copy(scope.position0);
      scope.object.zoom = scope.zoom0;

      scope.object.updateProjectionMatrix();
      scope.dispatchEvent(changeEvent);

      scope.update();
    };

    _this.zoomOut = function () {
      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.zoomSpeed;

      var _speed = this.zoomSpeed;
      this.zoomSpeed = speed;
      dollyIn(getZoomScale());
      this.zoomSpeed = _speed;
    };

    _this.zoomIn = function () {
      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.zoomSpeed;

      var _speed = this.zoomSpeed;
      this.zoomSpeed = speed;
      dollyOut(getZoomScale());
      this.zoomSpeed = _speed;
    };

    _this.getScale = function () {
      return scale;
    };

    _this.setScale = function (newScale) {
      scale = newScale;
    };

    // this method is exposed, but perhaps it would be better if we can make it private...
    _this.update = function () {
      var offset = new _libs.THREE.Vector3();
      // so camera.up is the orbit axis
      var quat = new _libs.THREE.Quaternion().setFromUnitVectors(object.up, new _libs.THREE.Vector3(0, 1, 0));
      var quatInverse = quat.clone().inverse();
      var lastPosition = new _libs.THREE.Vector3();
      var lastQuaternion = new _libs.THREE.Quaternion();

      return function update() {
        var position = scope.object.position;
        offset.copy(position).sub(scope.target);
        // rotate offset to "y-axis-is-up" space
        offset.applyQuaternion(quat);
        // angle from z-axis around y-axis
        spherical.setFromVector3(offset);
        if (scope.autoRotate) {
          rotateLeft(getAutoRotationAngle());
        }
        spherical.theta += sphericalDelta.theta;
        spherical.phi += sphericalDelta.phi;
        // restrict theta to be between desired limits
        spherical.theta = Math.max(scope.minAzimuthAngle, Math.min(scope.maxAzimuthAngle, spherical.theta));
        // restrict phi to be between desired limits
        spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));
        spherical.makeSafe();
        spherical.radius *= scale;
        // restrict radius to be between desired limits
        spherical.radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, spherical.radius));
        // move target to panned location
        scope.target.add(panOffset);
        offset.setFromSpherical(spherical);
        // rotate offset back to "camera-up-vector-is-up" space
        offset.applyQuaternion(quatInverse);
        position.copy(scope.target).add(offset);
        scope.object.lookAt(scope.target);

        if (scope.enableDamping === true) {
          sphericalDelta.theta *= 1 - scope.dampingFactor;
          sphericalDelta.phi *= 1 - scope.dampingFactor;
        } else {
          sphericalDelta.set(0, 0, 0);
        }

        scale = 1;
        panOffset.set(0, 0, 0);

        // update condition is:
        // min(camera displacement, camera rotation in radians)^2 > EPS
        // using small-angle approximation cos(x/2) = 1-x^2 / 8

        if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {

          scope.dispatchEvent(changeEvent);

          lastPosition.copy(scope.object.position);
          lastQuaternion.copy(scope.object.quaternion);
          zoomChanged = false;

          return true;
        }
        return false;
      };
    }();

    _this.dispose = function () {};

    //
    // internals
    //
    var scope = _this;
    var changeEvent = { type: 'change' };
    var EPS = 1e-6;
    // current position in spherical coordinates
    var spherical = new _libs.THREE.Spherical();
    var sphericalDelta = new _libs.THREE.Spherical();

    var scale = 1;
    var panOffset = new _libs.THREE.Vector3();
    var zoomChanged = false;

    function getAutoRotationAngle() {
      return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;
    }

    function getZoomScale() {
      return Math.pow(0.95, scope.zoomSpeed);
    }

    function rotateLeft(angle) {
      sphericalDelta.theta -= angle;
    }

    function rotateUp(angle) {
      sphericalDelta.phi -= angle;
    }

    var panLeft = function () {
      var v = new _libs.THREE.Vector3();
      return function panLeft(distance, objectMatrix) {
        v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix
        v.multiplyScalar(-distance);
        panOffset.add(v);
      };
    }();

    var panUp = function () {
      var v = new _libs.THREE.Vector3();
      return function panUp(distance, objectMatrix) {
        v.setFromMatrixColumn(objectMatrix, 1); // get Y column of objectMatrix
        v.multiplyScalar(distance);
        panOffset.add(v);
      };
    }();

    // deltaX and deltaY are in pixels; right and down are positive
    scope.pan = function () {
      var offset = new _libs.THREE.Vector3();
      return function pan(deltaX, deltaY) {
        var clientWidth = scope.world.width(),
            clientHeight = scope.world.height();
        if (scope.object instanceof _libs.THREE.PerspectiveCamera) {
          // perspective
          var position = scope.object.position;
          offset.copy(position).sub(scope.target);
          var targetDistance = offset.length();
          // half of the fov is center to top of screen
          targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180.0);
          // we actually don't use screenWidth, since perspective camera is fixed to screen height
          panLeft(2 * deltaX * targetDistance / clientHeight, scope.object.matrix);
          panUp(2 * deltaY * targetDistance / clientHeight, scope.object.matrix);
        } else if (scope.object instanceof _libs.THREE.OrthographicCamera) {
          // orthographic
          panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / clientWidth, scope.object.matrix);
          panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / clientHeight, scope.object.matrix);
        } else {
          // camera neither orthographic nor perspective
          console.warn('WARNING: OrbitControls.js encountered an unknown camera type-pan disabled.');
          scope.enablePan = false;
        }
      };
    }();

    function dollyIn(dollyScale) {
      if (scope.object instanceof _libs.THREE.PerspectiveCamera) {
        scale /= dollyScale;
      } else if (scope.object instanceof _libs.THREE.OrthographicCamera) {
        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));
        scope.object.updateProjectionMatrix();
        zoomChanged = true;
      } else {
        console.warn('WARNING: OrbitControls.js encountered an unknown camera type-dolly/zoom disabled.');
        scope.enableZoom = false;
      }
    }

    function dollyOut(dollyScale) {
      if (scope.object instanceof _libs.THREE.PerspectiveCamera) {
        scale *= dollyScale;
      } else if (scope.object instanceof _libs.THREE.OrthographicCamera) {
        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));
        scope.object.updateProjectionMatrix();
        zoomChanged = true;
      } else {
        console.warn('WARNING: OrbitControls.js encountered an unknown camera type-dolly/zoom disabled.');
        scope.enableZoom = false;
      }
    }

    /* Actions */

    function rotate(event, data) {
      if (scope.enabled && scope.enableRotate && data.state === 'move') {
        var clientWidth = scope.world.width(),
            clientHeight = scope.world.height();
        // rotating across whole screen goes 360 degrees around
        rotateLeft(2 * Math.PI * data.dx / clientWidth * scope.rotateSpeed);
        // rotating up and down along whole screen attempts to go 360, but limited to 180
        rotateUp(2 * Math.PI * data.dy / clientHeight * scope.rotateSpeed);
        scope.update();
      }
    }

    function pan(event, data) {
      if (scope.enabled && scope.enablePan && data.state === 'move') {
        scope.pan(data.dx, data.dy);
        scope.update();
      }
    }

    function offsetDolly(event, data) {
      if (scope.enabled && scope.enableZoom && data.state === 'move') {
        if (data.dy > 0) {
          dollyIn(getZoomScale());
        } else if (data.dy < 0) {
          dollyOut(getZoomScale());
        }
        scope.update();
      }
    }

    function wheelDolly(event) {
      if (scope.enabled && scope.enableZoom) {
        if (event.deltaY > 0) {
          dollyOut(getZoomScale());
        } else if (event.deltaY < 0) {
          dollyIn(getZoomScale());
        }
        scope.update();
      }
    }

    _this.actions = {
      rotate: rotate,
      pan: pan,
      offsetDolly: offsetDolly,
      wheelDolly: wheelDolly

      // force an update at start
    };_this.update();
    return _this;
  }

  Orbit.prototype.setMoving = function setMoving(moving) {
    this.moving = moving;
  };

  Orbit.prototype.isMoving = function isMoving() {
    return this.moving;
  };

  return Orbit;
}(_libs.THREE.EventDispatcher);

exports.default = Orbit;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _ImageBase2 = __webpack_require__(6);

var _ImageBase3 = _interopRequireDefault(_ImageBase2);

var _Pdf = __webpack_require__(19);

var _Pdf2 = _interopRequireDefault(_Pdf);

var _BaseMathUtils = __webpack_require__(2);

var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

var _CustomEventConverter = __webpack_require__(16);

var _CustomEventConverter2 = _interopRequireDefault(_CustomEventConverter);

var _PolyTarget = __webpack_require__(73);

var _PolyTarget2 = _interopRequireDefault(_PolyTarget);

var _Finder = __webpack_require__(17);

var _Finder2 = _interopRequireDefault(_Finder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PdfImage = function (_ImageBase) {
  _inherits(PdfImage, _ImageBase);

  function PdfImage(context, width, height, color, pdf, n) {
    _classCallCheck(this, PdfImage);

    var _this = _possibleConstructorReturn(this, _ImageBase.call(this, context, width, height, color));

    _this.query = '';
    _this.n = n;
    _this.pdf = pdf;
    _this.v = { x: 0, y: 0, z: 0, set: function set(x, y, z) {
        this.x = x;this.y = y;this.z = z;
        return this;
      }, transform: function transform(m) {
        var x = m.m[0][0] * this.x + m.m[1][0] * this.y + m.m[2][0] * this.z,
            y = m.m[0][1] * this.x + m.m[1][1] * this.y + m.m[2][1] * this.z,
            z = m.m[0][2] * this.x + m.m[0][2] * this.y + m.m[2][0] * this.z;
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
      } };
    _this.m = { m: [[1, 0, 0], [0, 1, 0], [0, 0, 1]], set: function set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
        this.m = [[m00, m01, m02], [m10, m11, m12], [m20, m21, m22]];
        return this;
      } };

    _this.startRender = function () {
      _this.pdf.getHandler(_this.render.bind(_this));
    };
    Promise.resolve().then(function () {
      return _this.pdf.getHandler(_this.init.bind(_this));
    });

    _this.cssLayerRequests = [];
    return _this;
  }

  PdfImage.prototype.setQuery = function setQuery(query) {
    this.query = query.trim();
    if (this.textContent) {
      this.setHits(this.textContent);
      // this.finishLoad();
    }
  };

  PdfImage.prototype.rectSize = function rectSize(r) {
    return {
      width: r[2] - r[0],
      height: r[3] - r[1]
    };
  };

  PdfImage.prototype.createPoly = function createPoly(m, p, s) {
    var poly = [],
        v = this.v;
    v.set(p.x, p.y, 1).transform(m);
    poly.push({ x: v.x, y: v.y });
    v.set(p.x, p.y + s.height, 1).transform(m);
    poly.push({ x: v.x, y: v.y });
    v.set(p.x + s.width, p.y + s.height, 1).transform(m);
    poly.push({ x: v.x, y: v.y });
    v.set(p.x + s.width, p.y, 1).transform(m);
    poly.push({ x: v.x, y: v.y });
    return poly;
  };

  PdfImage.prototype.getSimulatedDoc = function getSimulatedDoc() {
    return this;
  };

  PdfImage.prototype.simulate = function simulate(e, doc, x, y) {
    if (this.eventConverter) {
      this.eventConverter.convert(e, { doc: doc, x: x, y: y });
    }
  };

  PdfImage.prototype.setAnnotations = function setAnnotations(annos) {
    var _this2 = this;

    var t = this.viewport.transform,
        htmls = [],
        r = function r(n) {
      return (n * 100 + '').substr(0, 5);
    },
        targets = [];
    this.m.set(t[0], t[1], 0, t[2], t[3], 0, t[4], t[5], 1);

    for (var _iterator = annos, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var anno = _ref;

      if (anno.subtype === 'Link' || anno.subtype === 'Widget') {
        var rect = anno.rect,
            aPos = {
          x: rect[0],
          y: rect[1]
        },
            aSz = this.rectSize(rect);
        var _target = new _PolyTarget2.default(this.createPoly(this.m, aPos, aSz).map(function (p) {
          return { x: p.x / _this2.viewport.width, y: 1 - p.y / _this2.viewport.height };
        }));
        _target.anno = anno;
        _target.callback = this.annoClb.bind(this);
        targets.push(_target);
        var p = _target.poly;
        htmls.push('<div class="fb3d-block fb3d-link" style="top: ' + r(1 - p[2].y) + '%; left: ' + r(p[0].x) + '%; width: ' + r(p[2].x - p[0].x) + '%; height: ' + r(p[2].y - p[0].y) + '%;"><a></a></div>');
      }
    }
    if (targets.length) {
      this.eventConverter = new _CustomEventConverter2.default(this.wnd, this.doc, _PolyTarget2.default.test, this.getSimulatedDoc());
      for (var _iterator2 = targets, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var target = _ref2;

        this.eventConverter.addCustom(target);
      }
    }
    this.cssLayer = { html: htmls.length ? '<pdf-layer>' + htmls.join('') + '</pdf-layer>' : undefined };
    this.resolveCssLayerRequests();
  };

  PdfImage.prototype.resolveCssLayerRequests = function resolveCssLayerRequests() {
    if (this.cssLayer) {
      for (var _iterator3 = this.cssLayerRequests, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
        var _ref3;

        if (_isArray3) {
          if (_i3 >= _iterator3.length) break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) break;
          _ref3 = _i3.value;
        }

        var r = _ref3;

        r(this.cssLayer.html ? this.cssLayer : undefined);
      }
    }
  };

  PdfImage.prototype.getCSSLayer = function getCSSLayer() {
    var _this3 = this;

    return new Promise(function (resolve) {
      _this3.cssLayerRequests.push(resolve);
      _this3.resolveCssLayerRequests();
    });
  };

  PdfImage.prototype.setHits = function setHits(textContent) {
    this.textContent = textContent;
    if (this.query !== '') {
      this.finder = new _Finder2.default(textContent.items.map(function (item) {
        return item.str;
      }), this.query, { contexts: false });
    }
  };

  PdfImage.prototype.renderHits = function renderHits() {
    var _this4 = this;

    if (this.finder) {
      var view = this.page.view,
          testSz = (0, _libs.$)('<div style="position: absolute; visibility: hidden;"></div>').appendTo('body'),
          textDiv = testSz[0],
          baseOffset = testSz.offset().left;
      for (var _iterator4 = this.finder.getHits(), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
        var _ref4;

        if (_isArray4) {
          if (_i4 >= _iterator4.length) break;
          _ref4 = _iterator4[_i4++];
        } else {
          _i4 = _iterator4.next();
          if (_i4.done) break;
          _ref4 = _i4.value;
        }

        var hit = _ref4;

        var item = this.textContent.items[hit.index],
            t = _libs.PDFJS.Util.transform(this.viewport.transform, item.transform),
            style = this.textContent.styles[item.fontName],
            angle = Math.atan2(t[1], t[0]) + (style.vertical ? Math.PI / 2 : 0),
            fontHeight = Math.sqrt(t[2] * t[2] + t[3] * t[3]),
            fontAscent = style.ascent ? style.ascent * fontHeight : style.descent ? (1 + style.descent) * fontHeight : fontHeight;
        testSz.html(item.str.substr(0, hit.offset) + '<span>' + item.str.substr(hit.offset, hit.length) + '</span>' + item.str.substr(hit.offset + hit.length));

        textDiv.style.fontSize = fontHeight + 'px';
        textDiv.style.fontFamily = style.fontFamily;

        var testSpan = testSz.find('span'),
            iwidth = style.vertical ? item.height * this.viewport.scale : item.width * this.viewport.scale,
            width = testSz.width(),
            relativeOffset = (testSpan.offset().left - baseOffset) / width;
        this.m.set(1, 0, 0, 0, 1, 0, t[4] + fontAscent * Math.sin(angle), t[5] - fontAscent * Math.cos(angle), 1);
        var poly = this.createPoly(this.m, { x: relativeOffset * iwidth, y: 0 }, { width: iwidth * testSpan.width() / width, height: testSpan.height() });
        poly = poly.map(function (p) {
          return { x: p.x / _this4.viewport.width, y: 1 - p.y / _this4.viewport.height };
        });
        this.renderHit(poly);
      }
      testSz.remove();
    }
  };

  PdfImage.prototype.annoClb = function annoClb(e, data) {
    if (this.context.dispatchEvent) {
      this.context.dispatchEvent({
        type: 'pdfAnnotation',
        event: e,
        annotation: data.target.anno
      });
    }
  };

  PdfImage.prototype.calcViewport = function calcViewport() {
    var scale = _BaseMathUtils2.default.calcScale(this.size.width, this.size.height, this.resW, this.resH);
    if (!this.viewport || Math.abs(this.viewport.scale - scale) > 1e-4) {
      this.viewport = this.page.getViewport({ scale: scale });
      if (this.type !== 'full') {
        if (this.type === 'right') {
          this.viewport.offsetX += 0.5 * this.viewport.width * 1.0005;
          this.viewport.transform[4] -= 0.5 * this.viewport.width * 1.0005;
          this.viewport.width *= 0.5 / 1.0005;
        } else {
          this.viewport.width /= 2;
        }
      }
      this.resW = this.width = this.viewport.width;
      this.resH = this.height = this.viewport.height;
    }
  };

  PdfImage.prototype.init = function init() {
    var _this5 = this;

    this.type = this.pdf.getPageType(this.n);
    this.pdf.getPage(this.n).then(function (page) {
      _this5.page = page;
      _this5.size = _Pdf2.default.getPageSize(page);
      if (_this5.type !== 'full') {
        _this5.size.width /= 2;
      }
      page.getAnnotations().then(_this5.setAnnotations.bind(_this5));
      page.getTextContent().then(_this5.setHits.bind(_this5));
      _this5.calcViewport();
      _this5.finishLoad();
    }).catch(function (e) {
      console.error('Cannot load PDF page: ' + (_this5.n + 1));
      console.error(e);
      _this5.finishLoad();
    });
  };

  PdfImage.prototype.setResolution = function setResolution(res) {
    _ImageBase.prototype.setResolution.call(this, res);
    if (this.page) {
      this.calcViewport();
    }
  };

  PdfImage.prototype.render = function render(handler) {
    var _this6 = this;

    if (this.page) {
      var ctx = this.pushCtx();
      this.ctx.clearRect(0, 0, this.c.width, this.c.height);
      this.renderTask = this.page.render({
        canvasContext: this.ctx,
        viewport: this.viewport
      });
      this.renderTask.onContinue = function (continueRender) {
        if (_this6.renderPause) {
          _this6.continueRender = continueRender;
        } else {
          continueRender();
        }
      };
      this.renderTask.promise.then(function () {
        _this6.renderHits();
        _this6.popCtx();
        _this6.finishRender();
      }).catch(function (e) {
        _this6.popCtx();
        _this6.finishRender(true);
      });
    } else {
      this.renderBlankPage();
      this.finishRender();
    }
  };

  return PdfImage;
}(_ImageBase3.default);

exports.default = PdfImage;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Search = function () {
  function Search(container, pages) {
    _classCallCheck(this, Search);

    this.container = container;
    this.pages = pages;
    this.prevResults = [];
    container.html('\n      <div class="search">\n        <div class="query">\n          <input class="inpQuery" type="text" maxlength="30" value="" />\n        </div>\n        <div class="results">\n        </div>\n        <div class="status">\n\n        </div>\n      </div>\n    '.fb3dQFilter());
    this.query = container.find('.query input');
    this.results = container.find('.results');
    this.status = container.find('.status');

    this.binds = {
      navigate: this.navigate.bind(this),
      doQuery: this.doQuery.bind(this)
    };

    this.query.on('keydown', this.binds.doQuery);
    this.results.on('click', this.binds.navigate);
  }

  Search.prototype.dispose = function dispose() {
    this.results.off('click', this.binds.navigate);
    this.query.off('keydown', this.binds.doQuery);
  };

  Search.prototype.navigate = function navigate(e) {
    e.preventDefault();
    if (this.onNavigate !== undefined) {
      var target = (0, _libs.$)(e.target);
      if (!target.hasClass('result')) {
        var t = target.find('.result');
        if (t.length) {
          target = t;
        } else {
          while (target.length && !target.hasClass('result')) {
            target = (0, _libs.$)(target[0].parentNode);
          }
        }
      }
      var page = target.attr('data');
      if (page !== undefined) {
        this.onNavigate(parseInt(page));
      }
    }
  };

  Search.prototype.doQuery = function doQuery() {
    var _this = this;

    if (this.onQuery) {
      var queryStamp = this.queryStamp = Date.now();
      setTimeout(function () {
        if (queryStamp === _this.queryStamp) {
          _this.onQuery(_this.query[0].value.trim());
        }
      }, 1000);
    }
  };

  Search.prototype.setResults = function setResults(results, lastPage) {
    if (this.prevResults.length && results[0] !== this.prevResults[0]) {
      this.prevResults = [];
      this.results.html('');
    }
    var htmls = [];
    for (var i = this.prevResults.length; i < results.length; ++i) {
      var result = results[i];
      htmls.push('<div class="result" data="' + result.page + '">');
      htmls.push('<a>');
      htmls.push('<div>' + result.contexts.join('</div><div>') + '</div>');
      htmls.push('</a>');
      htmls.push('</div>');
    }
    (0, _libs.$)(htmls.join('')).appendTo(this.results);
    this.prevResults = [].concat(results);
    if (lastPage === undefined) {
      this.status.html('');
    } else {
      this.status.html(lastPage + 1 + ' of ' + this.pages);
    }
  };

  return Search;
}();

exports.default = Search;

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _ImageBase2 = __webpack_require__(6);

var _ImageBase3 = _interopRequireDefault(_ImageBase2);

var _Utils = __webpack_require__(3);

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var StaticImage = function (_ImageBase) {
  _inherits(StaticImage, _ImageBase);

  function StaticImage(context, width, height, color, src) {
    _classCallCheck(this, StaticImage);

    var _this = _possibleConstructorReturn(this, _ImageBase.call(this, context, width, height, color));

    _this.binds = {};
    _this.image = new Image();
    _this.image.crossOrigin = 'Anonymous';
    _this.binds.imageLoad = function () {
      _this.width = _this.image.width;
      _this.height = _this.image.height;
      _this.resH = _this.height / _this.width * _this.resW;
      _this.startRender = function () {
        _this.renderImage(_this.image);
        _this.finishRender();
      };
      _this.finishLoad();
    };
    _this.binds.imageError = function () {
      _this.startRender = function () {
        _this.renderNotFoundPage();
        _this.finishRender();
      };
      _this.finishLoad();
    };
    (0, _libs.$)(_this.image).on('load', _this.binds.imageLoad).on('error', _this.binds.imageError);
    _this.image.src = _Utils2.default.normalizeUrl(src);
    return _this;
  }

  StaticImage.prototype.dispose = function dispose() {
    (0, _libs.$)(this.image).off('load', this.binds.imageLoad).off('error', this.binds.imageError);
    this.image.src = '';
    delete this.image;
    _ImageBase.prototype.dispose.call(this);
  };

  return StaticImage;
}(_ImageBase3.default);

exports.default = StaticImage;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TextureAnimator = function () {
  function TextureAnimator(img, tilesHoriz, tilesVert, numTiles, tileDispDuration) {
    _classCallCheck(this, TextureAnimator);

    var texture = new _libs.THREE.Texture();
    texture.minFilter = _libs.THREE.LinearFilter;
    texture.image = img;
    texture.needsUpdate = true;

    // note: texture passed by reference, will be updated by the update function.
    this.texture = texture;
    this.tilesHorizontal = tilesHoriz;
    this.tilesVertical = tilesVert;
    // how many images does this spritesheet contain?
    //  usually equals tilesHoriz * tilesVert, but not necessarily,
    //  if there at blank tiles at the bottom of the spritesheet.
    this.numberOfTiles = numTiles;
    texture.repeat.set(1 / this.tilesHorizontal, 1 / this.tilesVertical);

    // how long should each image be displayed?
    this.tileDisplayDuration = tileDispDuration;

    // how long has the current image been displayed?
    this.currentDisplayTime = 0;

    // which image is currently being displayed?
    this.currentTile = 0;
  }

  TextureAnimator.prototype.update = function update(milliSec) {
    this.currentDisplayTime += milliSec;
    while (this.currentDisplayTime > this.tileDisplayDuration) {
      this.currentDisplayTime -= this.tileDisplayDuration;
      ++this.currentTile;
      if (this.currentTile == this.numberOfTiles) this.currentTile = 0;
      var currentColumn = this.currentTile % this.tilesHorizontal;
      this.texture.offset.x = currentColumn / this.tilesHorizontal;
      var currentRow = Math.floor(this.currentTile / this.tilesHorizontal);
      this.texture.offset.y = currentRow / this.tilesVertical;
    }
  };

  TextureAnimator.prototype.dispose = function dispose() {
    var img = this.texture.image;
    img.height = img.width = 0;
    this.texture.dispose();
  };

  return TextureAnimator;
}();

exports.default = TextureAnimator;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _Utils = __webpack_require__(3);

var _Utils2 = _interopRequireDefault(_Utils);

var _MouseEventConverter2 = __webpack_require__(57);

var _MouseEventConverter3 = _interopRequireDefault(_MouseEventConverter2);

var _ThreeEventConverter = __webpack_require__(20);

var _ThreeEventConverter2 = _interopRequireDefault(_ThreeEventConverter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ThreeMouseEventConverter = function (_MouseEventConverter) {
  _inherits(ThreeMouseEventConverter, _MouseEventConverter);

  function ThreeMouseEventConverter(wnd, doc, visualWorld, test) {
    _classCallCheck(this, ThreeMouseEventConverter);

    var _this = _possibleConstructorReturn(this, _MouseEventConverter.call(this, wnd, doc, visualWorld.element));

    _Utils2.default.extends(_this, new _ThreeEventConverter2.default(visualWorld, test));
    return _this;
  }

  ThreeMouseEventConverter.prototype.getCallback = function getCallback(object) {
    return object.object.userData.mouseCallback;
  };

  ThreeMouseEventConverter.prototype.setCoordsFromEvent = function setCoordsFromEvent(e) {
    var jElement = (0, _libs.$)(this.element);
    var offset = jElement.offset();
    this.coords.x = (e.pageX - offset.left) / jElement.width() * 2 - 1;
    this.coords.y = -((e.pageY - offset.top) / jElement.height()) * 2 + 1;
    return this.coords;
  };

  return ThreeMouseEventConverter;
}(_MouseEventConverter3.default);

exports.default = ThreeMouseEventConverter;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _Utils = __webpack_require__(3);

var _Utils2 = _interopRequireDefault(_Utils);

var _TouchEventConverter2 = __webpack_require__(67);

var _TouchEventConverter3 = _interopRequireDefault(_TouchEventConverter2);

var _ThreeEventConverter = __webpack_require__(20);

var _ThreeEventConverter2 = _interopRequireDefault(_ThreeEventConverter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ThreeTouchEventConverter = function (_TouchEventConverter) {
  _inherits(ThreeTouchEventConverter, _TouchEventConverter);

  function ThreeTouchEventConverter(wnd, doc, visualWorld, test) {
    _classCallCheck(this, ThreeTouchEventConverter);

    var _this = _possibleConstructorReturn(this, _TouchEventConverter.call(this, wnd, doc, visualWorld.element));

    _Utils2.default.extends(_this, new _ThreeEventConverter2.default(visualWorld, test));
    return _this;
  }

  ThreeTouchEventConverter.prototype.getCallback = function getCallback(object) {
    return object.object.userData.touchCallback;
  };

  ThreeTouchEventConverter.prototype.setCoordsFromEvent = function setCoordsFromEvent(e) {
    var jElement = (0, _libs.$)(this.element),
        offset = jElement.offset(),
        touches = e.touches || e.originalEvent.touches,
        touch = touches.length ? touches[0] : (this.lastTouches || [{ pageX: 0, pageY: 0 }])[0],
        pageX = touch.pageX,
        pageY = touch.pageY;
    this.lastTouches = touches.length ? touches : this.lastTouches;
    this.coords.x = (pageX - offset.left) / jElement.width() * 2 - 1;
    this.coords.y = -((pageY - offset.top) / jElement.height()) * 2 + 1;
    return this.coords;
  };

  return ThreeTouchEventConverter;
}(_TouchEventConverter3.default);

exports.default = ThreeTouchEventConverter;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

var _ImageFactory = __webpack_require__(8);

var _ImageFactory2 = _interopRequireDefault(_ImageFactory);

var _GraphUtils = __webpack_require__(4);

var _GraphUtils2 = _interopRequireDefault(_GraphUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Thumbnails = function () {
  function Thumbnails(context, container, thumbnailsClb, size) {
    var _this = this;

    var props = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : { kWtoH: 210 / 297 };

    _classCallCheck(this, Thumbnails);

    this.container = container;
    this.p = props;
    this.thumbnailsClb = thumbnailsClb;
    this.size = size;
    this.queue = { first: 0, len: 0 };
    this.canvas = _GraphUtils2.default.createCanvas();
    this.imageFactory = new _ImageFactory2.default(_extends({}, context, {
      renderCanvas: this.canvas,
      renderCanvasCtx: this.canvas.getContext('2d')
    }));
    this.thumbnails = [];
    for (var i = 0; i < size; ++i) {
      var info = this.thumbnailsClb(i);
      this.thumbnails.push(_extends({}, info, {
        index: i,
        loaded: info.type === 'thumbnail-image',
        heading: null,
        thumbnail: null,
        title: info.title || i
      }));
    }

    this.binds = {
      update: this.update.bind(this),
      navigate: function navigate(e) {
        e.preventDefault();
        if (_this.onNavigate) {
          var node = e.target;
          while (node && !node.dataThumbnail) {
            node = node.parentNode;
          }
          _this.onNavigate(node.dataThumbnail.index);
        }
      }
    };
    this.container.on('scroll', this.binds.update);
  }

  Thumbnails.prototype.getSize = function getSize() {
    return this.size;
  };

  Thumbnails.prototype.setEnable = function setEnable(enable) {
    this.enable = enable;
    this.update();
  };

  Thumbnails.prototype.dispose = function dispose() {
    this.container.find('a').off('click', this.binds.navigate);
    this.container.off('scroll', this.binds.update);
    this.container.html('');
    this.canvas.height = this.canvas.width = 0;
    delete this.canvas;
  };

  Thumbnails.prototype.setLoadQueue = function setLoadQueue(first, len) {
    var _this2 = this;

    first = Math.min(first, this.size - 1);
    len = Math.min(len, this.size - first);
    this.queue = { first: first, len: len };
    Promise.resolve().then(function () {
      return _this2.update();
    });
  };

  Thumbnails.prototype.load = function load(thumbnail) {
    var _this3 = this;

    this.loading = true;
    var wrapper = this.imageFactory.build(thumbnail, thumbnail.number === undefined ? thumbnail.index : thumbnail.number, this.p.kWtoH * 300, 300);
    wrapper.onChange = function (canvas) {
      _this3.setImage(thumbnail, canvas.toDataURL('image/png'));
      thumbnail.loaded = true;
      wrapper.dispose();
      _this3.loading = false;
      Promise.resolve().then(function () {
        return _this3.update();
      });
    };
  };

  Thumbnails.prototype.getActive = function getActive() {
    var first = this.container.scrollTop(),
        last = first + this.container.height(),
        res = [];
    for (var _iterator = this.thumbnails, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var thumbnail = _ref;

      if (Math.max(thumbnail.first, first) < Math.min(thumbnail.last, last)) {
        res.push(thumbnail);
      }
    }
    return res;
  };

  Thumbnails.prototype.update = function update() {
    if (!this.loading && this.canvas) {
      if (this.enable) {
        if (!this.built) {
          this.render();
        }
        var active = this.getActive();
        for (var _iterator2 = active, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
          var _ref2;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref2 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref2 = _i2.value;
          }

          var thumbnail = _ref2;

          if (!thumbnail.loaded) {
            this.load(thumbnail);
            break;
          }
        }
      }
      if (!this.loading) {
        for (var i = this.queue.first; i < this.queue.first + this.queue.len; ++i) {
          var t = this.thumbnails[i];
          if (!t.loaded) {
            this.load(t);
            break;
          }
        }
      }
    }
  };

  Thumbnails.prototype.setImage = function setImage(thumbnail, img) {
    var trigger = thumbnail.img !== img;
    thumbnail.img = img;
    if (thumbnail.thumbnail) {
      thumbnail.thumbnail.css('background-image', ['url(\'', img, '\')'].join(''));
      thumbnail.thumbnail.removeClass('loading');
    }
    if (trigger) {
      this.container.trigger('fb3d.thumbnails.thumbnailLoaded', [thumbnail]);
    }
  };

  Thumbnails.prototype.render = function render() {
    var elements = ['<div class="thumbnails">'];
    for (var i = 0; i < this.size; ++i) {
      elements.push(['<div class="item"><a><div class="thumbnail loading" style="padding-top:' + Math.round(100 / this.p.kWtoH) + '%;"></div></a><div class="heading"><a title="', i + 1, '">', i + 1, '</a></div></div>'].join(''));
    }
    elements.push('</div>');
    this.container.append(elements.join(''));
    var items = this.container.find('.item'),
        base = this.container.find('.thumbnails').offset().top;
    for (var _i3 = 0; _i3 < items.length; ++_i3) {
      var item = (0, _libs.$)(items[_i3]);
      this.thumbnails[_i3].heading = item.find('.heading');
      this.thumbnails[_i3].thumbnail = item.find('.thumbnail');
      this.thumbnails[_i3].first = item.offset().top - base;
      this.thumbnails[_i3].last = this.thumbnails[_i3].first + item.height();
      if (this.thumbnails[_i3].loaded) {
        this.setImage(this.thumbnails[_i3], this.thumbnails[_i3].img || this.thumbnails[_i3].src);
      }
      var as = item.find('a');
      for (var j = 0; j < as.length; ++j) {
        var a = as[j];
        a.dataThumbnail = this.thumbnails[_i3];
      }
    }
    this.container.find('a').on('click', this.binds.navigate);
    this.built = true;
  };

  return Thumbnails;
}();

exports.default = Thumbnails;

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _EventConverter2 = __webpack_require__(7);

var _EventConverter3 = _interopRequireDefault(_EventConverter2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TouchConverter = function (_EventConverter) {
  _inherits(TouchConverter, _EventConverter);

  function TouchConverter(wnd, doc, element) {
    _classCallCheck(this, TouchConverter);

    var _this = _possibleConstructorReturn(this, _EventConverter.call(this, wnd, doc));

    _this.element = element;
    _this.binds = {
      convert: _this.convert.bind(_this)
    };
    (0, _libs.$)(_this.element).on('touchstart touchmove', _this.binds.convert);
    (0, _libs.$)(_this.doc).on('touchend', _this.binds.convert);
    return _this;
  }

  TouchConverter.prototype.dispose = function dispose() {
    (0, _libs.$)(this.element).off('touchstart touchmove', this.binds.convert);
    (0, _libs.$)(this.doc).off('touchend', this.binds.convert);
  };

  return TouchConverter;
}(_EventConverter3.default);

exports.default = TouchConverter;

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UserMessageController = function () {
  function UserMessageController(view) {
    _classCallCheck(this, UserMessageController);

    this.view = view;
    this.showMessage = false;
    this.message = '';
    this.updateView();
  }

  UserMessageController.prototype.dispose = function dispose() {
    this.updateView();
    delete this.view;
  };

  UserMessageController.prototype.setError = function setError(text) {
    this.showMessage = true;
    this.message = ['<div class="text error">', text, '</div>'].join('');
    this.updateView();
  };

  UserMessageController.prototype.updateView = function updateView() {
    if (this.view) {
      this.view.setState('widUserMessage', {
        enable: true,
        visible: this.showMessage,
        active: false
      });

      this.view.setState('txtUserMessage', {
        value: this.message,
        visible: true
      });
    }
  };

  return UserMessageController;
}();

exports.default = UserMessageController;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var View = function () {
  View.classProperty = function classProperty(ctrl, className, value) {
    if (value) {
      ctrl.addClass(className);
    } else {
      ctrl.removeClass(className);
    }
  };

  View.attributeProperty = function attributeProperty(ctrl, attributeName, value) {
    if (value) {
      ctrl.attr(attributeName, value);
    } else {
      ctrl.removeAttr(attributeName);
    }
  };

  View.callHandlers = function callHandlers(handlers, id, e, data) {
    for (var _iterator = handlers, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var handler = _ref;

      if (handler[id]) {
        handler[id](e, data);
      } else if (handler.handleDefault) {
        handler.handleDefault(id, e, data);
      }
    }
  };

  View.handleEvent = function handleEvent(id, getHandlers, e, data) {
    View.callHandlers(getHandlers(id), id, e, data);
  };

  View.handleLinkEvent = function handleLinkEvent(e) {
    e.preventDefault();
    if (!this.ctrl.hasClass('disabled')) {
      View.handleEvent(this.id, this.getHandlers, e);
    }
  };

  View.handleInputEvent = function handleInputEvent(e) {
    View.handleEvent(this.id, this.getHandlers, e, e.target.value);
  };

  View.handleFormEvent = function handleFormEvent(e) {
    e.preventDefault();
    View.handleEvent(this.id, this.getHandlers, e);
  };

  // virtual functions {


  View.prototype.getLinks = function getLinks() {
    return null;
  };

  View.prototype.getWidgets = function getWidgets() {
    return null;
  };

  View.prototype.getInputs = function getInputs() {
    return null;
  };

  View.prototype.getTexts = function getTexts() {
    return null;
  };

  View.prototype.getTemplate = function getTemplate() {
    return {};
  };

  View.prototype.getHandlers = function getHandlers(id) {
    return this.handlers;
  };
  // }

  View.prototype.callLater = function callLater(handlers, id, e, data, ms) {
    var _this = this;

    this.pendings[id] = {
      timestamp: new Date().getTime()
    };
    setTimeout(function () {
      var timestamp = new Date().getTime(),
          pending = _this.pendings[id];
      if (pending && timestamp - pending.timestamp >= ms) {
        View.callHandlers(handlers, id, e, data);
        delete _this.pendings[id];
      }
    }, ms);
  };

  // loadFiles(urls, ready, failure) {
  //   let done = Promise.resolve();
  //   for(let url of urls) {
  //     done = done.then(()=> {
  //       return new Promise((resolve, reject)=> {
  //         $.get(url, (res)=> {
  //           ready(res, url);
  //           resolve();
  //         }).fail((res)=> {
  //           if(failure && failure(res, url)) {
  //             resolve();
  //           }
  //           else {
  //             reject(res);
  //           }
  //         });
  //       });
  //     });
  //   }
  //   return done;
  // }

  View.prototype.loadFiles = function loadFiles(urls, files) {
    var tasks = [];

    var _loop = function _loop() {
      if (_isArray2) {
        if (_i2 >= _iterator2.length) return 'break';
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) return 'break';
        _ref2 = _i2.value;
      }

      var name = _ref2;

      files[name] = [];

      var _loop2 = function _loop2() {
        if (_isArray3) {
          if (_i3 >= _iterator3.length) return 'break';
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) return 'break';
          _ref3 = _i3.value;
        }

        var url = _ref3;

        tasks.push(new Promise(function (resolve, reject) {
          _libs.$.get(url, function (data) {
            files[name].push({ url: url, data: data });
            resolve();
          }).fail(function (res) {
            reject(res);
          });
        }));
      };

      for (var _iterator3 = urls[name], _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
        var _ref3;

        var _ret2 = _loop2();

        if (_ret2 === 'break') break;
      }
    };

    for (var _iterator2 = Object.keys(urls), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      var _ret = _loop();

      if (_ret === 'break') break;
    }
    return Promise.all(tasks);
  };

  View.prototype.getRootUrl = function getRootUrl() {
    return location.origin + '/';
  };

  View.prototype.getCurrentUrl = function getCurrentUrl() {
    return location.href.substr(0, location.href.lastIndexOf('/') + 1);
  };

  View.prototype.urlResolver = function urlResolver(baseUrl, url) {
    url = url.replace(/\\/g, '/');
    if (url.charAt(0) === '/') {
      baseUrl = this.getRootUrl();
      url = url.substr(1);
    }
    if (!baseUrl.match(/^https{0,1}:/i)) {
      baseUrl = this.urlResolver(this.getCurrentUrl(), baseUrl);
    }
    if (!url.match(/^(data|blob|http|https):/i)) {
      baseUrl = baseUrl.replace(/\\/g, '/');
      var p = baseUrl.lastIndexOf('/');
      url = (~p ? baseUrl.substr(0, p + 1) : '') + url;

      var parts = url.split('/');
      url = [];
      for (var _iterator4 = parts, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
        var _ref4;

        if (_isArray4) {
          if (_i4 >= _iterator4.length) break;
          _ref4 = _iterator4[_i4++];
        } else {
          _i4 = _iterator4.next();
          if (_i4.done) break;
          _ref4 = _i4.value;
        }

        var part = _ref4;

        if (part === '.') {} else if (part === '..') {
          if (url.length > 3) {
            url.pop();
          }
        } else {
          url.push(part);
        }
      }
      url = url.join('/');
    }

    return url;
  };

  View.prototype.objToAttrsStr = function objToAttrsStr(o) {
    var res = [];
    for (var _iterator5 = Object.keys(o), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
      var _ref5;

      if (_isArray5) {
        if (_i5 >= _iterator5.length) break;
        _ref5 = _iterator5[_i5++];
      } else {
        _i5 = _iterator5.next();
        if (_i5.done) break;
        _ref5 = _i5.value;
      }

      var _name = _ref5;

      res.push([_name, '="', o[_name], '"'].join(''));
    }
    return res.join(' ');
  };

  View.prototype.checkIframeSize = function checkIframeSize() {
    if (this.frame) {
      if (Math.abs(this.frame.width - this.parentContainer.width()) > 1 || Math.abs(this.frame.height - this.parentContainer.height()) > 1) {
        this.onResize();
      }
      setTimeout(this.checkIframeSize.bind(this), 250);
    }
  };

  View.prototype.onResize = function onResize() {
    this.frame.width = this.parentContainer.width();
    this.frame.height = this.parentContainer.height();
  };

  View.prototype.translate = function translate(html) {
    return html.replace(/<\$tr>(.*)<\/\$tr>/gi, function (s0, s1) {
      return (0, _libs.tr)(s1);
    });
  };

  View.prototype.fireLinksOnLoadEvent = function fireLinksOnLoadEvent() {
    var _this2 = this;

    if (this.templateObject && this.templateObject.linkLoaded) {
      var loaded = true;

      var _loop3 = function _loop3() {
        if (_isArray6) {
          if (_i6 >= _iterator6.length) return 'break';
          _ref6 = _iterator6[_i6++];
        } else {
          _i6 = _iterator6.next();
          if (_i6.done) return 'break';
          _ref6 = _i6.value;
        }

        var jLink = _ref6;

        var link = jLink[0];
        var img = new Image();
        img.onerror = function () {
          return _this2.templateObject.linkLoaded(link);
        };
        img.src = link.href;
      };

      for (var _iterator6 = this.jLinks, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
        var _ref6;

        var _ret3 = _loop3();

        if (_ret3 === 'break') break;
      }
    }
  };

  function View(parentContainer, onLoad) {
    var _this3 = this;

    var template = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, View);

    this.pendings = {};
    this.binds = {
      onResize: this.onResize.bind(this)
    };
    this.parentContainer = (0, _libs.$)(parentContainer);
    this.isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    this.isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent); // && ~navigator.userAgent.search('Version/14.1');
    var initUrl = this.isSafari ? View.initUrl : undefined;
    this.parentContainer.html('<iframe title="View" style="border: 0;' + (this.isIOS ? '' : ' width: 100%; height: 100%') + '" ' + (initUrl ? ' src="' + initUrl + '"' : '') + ' scrolling="no"></iframe>');

    this.frame = this.parentContainer.find('iframe')[0];
    var build = function build() {
      if (_this3.isIOS) {
        (0, _libs.$)(_this3.parentContainer[0].ownerDocument.defaultView).on('resize', _this3.binds.onResize);
        _this3.onResize();
        setTimeout(_this3.checkIframeSize.bind(_this3), 250);
      }

      _this3.container = (0, _libs.$)(_this3.frame.contentDocument.body);
      _this3.container.css('margin', '0');
      _this3.head = (0, _libs.$)(_this3.frame.contentDocument.head);
      _this3.onLoad = onLoad;
      _this3.handlers = [];
      _this3.styleData = {};

      var script = template.html ? template.script : _this3.getTemplate().script;
      var urls = void 0,
          files = void 0,
          links = void 0,
          templateName = void 0;
      if (typeof template === 'function') {
        urls = {};
        files = template();
        links = [];
        templateName = files.name;
      } else {
        links = template.links || _this3.getTemplate().links;
        urls = {
          styles: template.styles || _this3.getTemplate().styles,
          html: [template.html || _this3.getTemplate().html],
          script: script ? [script] : []
        };
        templateName = template.name;
        files = {};
      }
      if (templateName) {
        _this3.container.addClass(templateName);
      }
      _this3.loadFiles(urls, files).then(function () {
        var _loop4 = function _loop4() {
          if (_isArray7) {
            if (_i7 >= _iterator7.length) return 'break';
            _ref7 = _iterator7[_i7++];
          } else {
            _i7 = _iterator7.next();
            if (_i7.done) return 'break';
            _ref7 = _i7.value;
          }

          var style = _ref7;

          var textCss = style.data,
              url = style.url;
          textCss = textCss.replace(/url\(['"](.*?)["']\)/g, function (r, r1) {
            return ['url(\'', _this3.urlResolver(url, r1), '\')'].join('');
          });
          (0, _libs.$)('<style type="text/css">' + textCss + '</style>').appendTo(_this3.head);
          var match = textCss.match(/\/\*json-data:(([\n\r]|.)*?)\*\//);
          if (match) {
            try {
              _this3.styleData = _extends({}, _this3.styleData, JSON.parse(match[1]));
            } catch (e) {
              console.error(e);
            }
          }
        };

        for (var _iterator7 = files.styles, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {
          var _ref7;

          var _ret4 = _loop4();

          if (_ret4 === 'break') break;
        }

        _this3.container.html(_this3.translate(files.html[0].data));

        _this3.jLinks = [];
        for (var _iterator8 = links, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();;) {
          var _ref8;

          if (_isArray8) {
            if (_i8 >= _iterator8.length) break;
            _ref8 = _iterator8[_i8++];
          } else {
            _i8 = _iterator8.next();
            if (_i8.done) break;
            _ref8 = _i8.value;
          }

          var _link = _ref8;

          _this3.jLinks.push((0, _libs.$)(['<link ', _this3.objToAttrsStr(_extends({}, _link, { href: _this3.urlResolver(_this3.getCurrentUrl(), _link.href) })), '>'].join('')).appendTo(_this3.head));
        }

        if (files.script[0]) {
          var init = eval(files.script[0].data);
          _this3.templateObject = init(_this3.container);
        } else {
          _this3.templateObject = {};
        }

        _this3.linkControls = {};
        for (var _iterator9 = _this3.getLinks(), _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();;) {
          var _ref9;

          if (_isArray9) {
            if (_i9 >= _iterator9.length) break;
            _ref9 = _iterator9[_i9++];
          } else {
            _i9 = _iterator9.next();
            if (_i9.done) break;
            _ref9 = _i9.value;
          }

          var id = _ref9;

          _this3.linkControls[id] = _this3.container.find('.' + id);
          _this3.binds[id] = View.handleLinkEvent.bind({ getHandlers: _this3.getHandlers.bind(_this3), id: id, ctrl: _this3.linkControls[id] });
          _this3.linkControls[id].on('click', _this3.binds[id]);
        }

        _this3.widgetControls = {};
        for (var _iterator10 = _this3.getWidgets(), _isArray10 = Array.isArray(_iterator10), _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : _iterator10[Symbol.iterator]();;) {
          var _ref10;

          if (_isArray10) {
            if (_i10 >= _iterator10.length) break;
            _ref10 = _iterator10[_i10++];
          } else {
            _i10 = _iterator10.next();
            if (_i10.done) break;
            _ref10 = _i10.value;
          }

          var _id = _ref10;

          _this3.widgetControls[_id] = _this3.container.find('.' + _id);
        }

        _this3.inputControls = {};
        for (var _iterator11 = _this3.getInputs(), _isArray11 = Array.isArray(_iterator11), _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : _iterator11[Symbol.iterator]();;) {
          var _ref11;

          if (_isArray11) {
            if (_i11 >= _iterator11.length) break;
            _ref11 = _iterator11[_i11++];
          } else {
            _i11 = _iterator11.next();
            if (_i11.done) break;
            _ref11 = _i11.value;
          }

          var _id2 = _ref11;

          _this3.inputControls[_id2] = _this3.container.find('.' + _id2);
          _this3.binds[_id2] = View.handleInputEvent.bind({ getHandlers: _this3.getHandlers.bind(_this3), id: _id2, ctrl: _this3.inputControls[_id2] });
          _this3.inputControls[_id2].on('keyup', _this3.binds[_id2]);
        }

        _this3.formControls = {};
        for (var _iterator12 = _this3.getForms(), _isArray12 = Array.isArray(_iterator12), _i12 = 0, _iterator12 = _isArray12 ? _iterator12 : _iterator12[Symbol.iterator]();;) {
          var _ref12;

          if (_isArray12) {
            if (_i12 >= _iterator12.length) break;
            _ref12 = _iterator12[_i12++];
          } else {
            _i12 = _iterator12.next();
            if (_i12.done) break;
            _ref12 = _i12.value;
          }

          var _id3 = _ref12;

          _this3.formControls[_id3] = _this3.container.find('.' + _id3);
          _this3.binds[_id3] = View.handleFormEvent.bind({ getHandlers: _this3.getHandlers.bind(_this3), id: _id3, ctrl: _this3.formControls[_id3] });
          _this3.formControls[_id3].on('submit', _this3.binds[_id3]);
        }

        _this3.textControls = {};
        for (var _iterator13 = _this3.getTexts(), _isArray13 = Array.isArray(_iterator13), _i13 = 0, _iterator13 = _isArray13 ? _iterator13 : _iterator13[Symbol.iterator]();;) {
          var _ref13;

          if (_isArray13) {
            if (_i13 >= _iterator13.length) break;
            _ref13 = _iterator13[_i13++];
          } else {
            _i13 = _iterator13.next();
            if (_i13.done) break;
            _ref13 = _i13.value;
          }

          var _id4 = _ref13;

          _this3.textControls[_id4] = _this3.container.find('.' + _id4);
        }

        _this3.stateSetters = [{
          map: _this3.linkControls,
          setter: _this3.setLinkControlState.bind(_this3)
        }, {
          map: _this3.widgetControls,
          setter: _this3.setWidgetControlState.bind(_this3)
        }, {
          map: _this3.inputControls,
          setter: _this3.setInputControlState.bind(_this3)
        }, {
          map: _this3.textControls,
          setter: _this3.setTextControlState.bind(_this3)
        }];

        _this3.initView();

        if (_this3.onLoad) {
          _this3.onLoad();
        }

        _this3.fireLinksOnLoadEvent();
      }).catch(function (res) {
        return console.error(res);
      });
    };

    if (initUrl) {
      (0, _libs.$)(this.frame.contentWindow).on('load', build);
    } else {
      if (this.frame.contentWindow.stop) {
        this.frame.contentWindow.stop();
      }
      build();
    }
  }

  View.prototype.dispose = function dispose() {
    delete this.textControls;
    for (var _iterator14 = this.getLinks(), _isArray14 = Array.isArray(_iterator14), _i14 = 0, _iterator14 = _isArray14 ? _iterator14 : _iterator14[Symbol.iterator]();;) {
      var _ref14;

      if (_isArray14) {
        if (_i14 >= _iterator14.length) break;
        _ref14 = _iterator14[_i14++];
      } else {
        _i14 = _iterator14.next();
        if (_i14.done) break;
        _ref14 = _i14.value;
      }

      var id = _ref14;

      this.linkControls[id].off('click', this.binds[id]);
    }
    delete this.linkControls;
    delete this.widgetControls;
    for (var _iterator15 = this.getInputs(), _isArray15 = Array.isArray(_iterator15), _i15 = 0, _iterator15 = _isArray15 ? _iterator15 : _iterator15[Symbol.iterator]();;) {
      var _ref15;

      if (_isArray15) {
        if (_i15 >= _iterator15.length) break;
        _ref15 = _iterator15[_i15++];
      } else {
        _i15 = _iterator15.next();
        if (_i15.done) break;
        _ref15 = _i15.value;
      }

      var _id5 = _ref15;

      this.inputControls[_id5].off('keyup', this.binds[_id5]);
    }
    delete this.inputControls;
    for (var _iterator16 = this.getForms(), _isArray16 = Array.isArray(_iterator16), _i16 = 0, _iterator16 = _isArray16 ? _iterator16 : _iterator16[Symbol.iterator]();;) {
      var _ref16;

      if (_isArray16) {
        if (_i16 >= _iterator16.length) break;
        _ref16 = _iterator16[_i16++];
      } else {
        _i16 = _iterator16.next();
        if (_i16.done) break;
        _ref16 = _i16.value;
      }

      var _id6 = _ref16;

      this.formControls[_id6].off('submit', this.binds[_id6]);
    }
    delete this.formControls;

    !this.templateObject.dispose || this.templateObject.dispose();
    delete this.templateObject;

    if (this.isIOS) {
      (0, _libs.$)(this.parentContainer[0].ownerDocument.defaultView).off('resize', this.binds.onResize);
    }
    this.parentContainer.html('');
    delete this.frame;
  };

  View.prototype.getStyleData = function getStyleData() {
    return this.styleData;
  };

  View.prototype.getContainer = function getContainer() {
    return this.container[0];
  };

  View.prototype.getParentContainer = function getParentContainer() {
    return this.parentContainer[0];
  };

  View.prototype.addHandler = function addHandler(handler) {
    this.handlers.push(handler);
  };

  View.prototype.initView = function initView() {};

  View.setControlState = function setControlState(ctrl, defaults, state, stateHandlers) {
    if (ctrl && ctrl[0]) {
      var st = _extends({}, defaults, state);
      for (var _name2 in st) {
        if (st.hasOwnProperty(_name2) && stateHandlers[_name2]) {
          stateHandlers[_name2](ctrl, st[_name2]);
        }
      }
    }
  };

  View.prototype.setLinkControlState = function setLinkControlState(id, state) {
    View.setControlState(this.linkControls[id], {
      visible: true,
      active: false,
      enable: true
    }, state, View.linkStateHandlers);
  };

  View.prototype.setWidgetControlState = function setWidgetControlState(id, state) {
    View.setControlState(this.widgetControls[id], {
      visible: true,
      active: false,
      enable: true
    }, state, View.widgetStateHandlers);
  };

  View.prototype.setInputControlState = function setInputControlState(id, state) {
    View.setControlState(this.inputControls[id], {
      visible: true,
      enable: true,
      value: ''
    }, state, View.inputStateHandlers);
  };

  View.prototype.setTextControlState = function setTextControlState(id, state) {
    View.setControlState(this.textControls[id], {
      visible: true,
      value: ''
    }, state, View.textStateHandlers);
  };

  View.prototype.onItemStateChanged = function onItemStateChanged() {};

  View.prototype.setState = function setState(id, state) {
    for (var _iterator17 = this.stateSetters, _isArray17 = Array.isArray(_iterator17), _i17 = 0, _iterator17 = _isArray17 ? _iterator17 : _iterator17[Symbol.iterator]();;) {
      var _ref17;

      if (_isArray17) {
        if (_i17 >= _iterator17.length) break;
        _ref17 = _iterator17[_i17++];
      } else {
        _i17 = _iterator17.next();
        if (_i17.done) break;
        _ref17 = _i17.value;
      }

      var item = _ref17;

      if (item.map[id]) {
        item.setter(id, state);
        this.onItemStateChanged(id, state);
        break;
      }
    }
  };

  return View;
}();

View.initUrl = URL.createObjectURL(new Blob(['\n    <!DOCTYPE html>\n    <html lang="en">\n      <head>\n        <meta charset="utf-8">\n      </head>\n      <body style="height: 100vh">\n      </body>\n    </html>\n  '], { type: 'text/html' }));
View.linkStateHandlers = {
  visible: function visible(ctrl, value) {
    return View.classProperty(ctrl, 'hidden', !value);
  },
  active: function active(ctrl, value) {
    return View.classProperty(ctrl, 'active', value);
  },
  enable: function enable(ctrl, value) {
    return View.classProperty(ctrl, 'disabled', !value);
  }
};
View.widgetStateHandlers = {
  visible: function visible(ctrl, value) {
    return View.classProperty(ctrl, 'hidden', !value);
  },
  active: function active(ctrl, value) {
    return View.classProperty(ctrl, 'active', value);
  },
  enable: function enable(ctrl, value) {
    return View.classProperty(ctrl, 'disabled', !value);
  }
};
View.inputStateHandlers = {
  visible: function visible(ctrl, value) {
    return View.classProperty(ctrl, 'hidden', !value);
  },
  value: function value(ctrl, _value) {
    return ctrl[0].value = _value;
  },
  enable: function enable(ctrl, value) {
    return View.attributeProperty(ctrl, 'disabled', !value);
  }
};
View.textStateHandlers = {
  visible: function visible(ctrl, value) {
    return View.classProperty(ctrl, 'hidden', !value);
  },
  value: function value(ctrl, _value2) {
    return ctrl.html(_value2);
  }
};
exports.default = View;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

var _Utils = __webpack_require__(3);

var _Utils2 = _interopRequireDefault(_Utils);

var _Orbit = __webpack_require__(59);

var _Orbit2 = _interopRequireDefault(_Orbit);

var _ThreeMouseEventConverter = __webpack_require__(64);

var _ThreeMouseEventConverter2 = _interopRequireDefault(_ThreeMouseEventConverter);

var _ThreeTouchEventConverter = __webpack_require__(65);

var _ThreeTouchEventConverter2 = _interopRequireDefault(_ThreeTouchEventConverter);

var _Drag = __webpack_require__(51);

var _Drag2 = _interopRequireDefault(_Drag);

var _CSS3DRenderer = __webpack_require__(12);

var _CSS3DRenderer2 = _interopRequireDefault(_CSS3DRenderer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var VisualWorld = function (_THREE$EventDispatche) {
  _inherits(VisualWorld, _THREE$EventDispatche);

  function VisualWorld(wnd, doc, container) {
    var useHelpers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    _classCallCheck(this, VisualWorld);

    var _this = _possibleConstructorReturn(this, _THREE$EventDispatche.call(this));

    _this.checkUpdateFlag = true;
    _this.wnd = wnd;
    _this.doc = doc;
    _this.jContainer = container;
    _this.renderCallbacks = [];
    _this.diag = _this.getDiag();

    _this.clock = new _libs.THREE.Clock();

    _this.raycaster = new _libs.THREE.Raycaster();

    _this.scene = new _libs.THREE.Scene();
    _this.cssScene = new _libs.THREE.Scene();

    _this.camera = new _libs.THREE.PerspectiveCamera(30, _this.width() / _this.height(), 0.2, 2000);
    var scale = 1;

    _this.camera.position.x = 0;
    _this.camera.position.y = 5.5 * scale;
    _this.camera.position.z = 0;

    _this.renderer = new _libs.THREE.WebGLRenderer({ alpha: true, precision: VisualWorld.getPrecision(), antialias: true });
    _this.renderer.shadowMap.enabled = true;
    _this.renderer.shadowMap.type = _libs.THREE.PCFSoftShadowMap;

    _this.renderer.setClearColor(0x000000, 0);
    _this.renderer.setPixelRatio(Math.sqrt(_this.wnd.devicePixelRatio || 1));
    _this.renderer.setSize(_this.width(), _this.height());

    _this.jContainer.append(_this.renderer.domElement);

    _this.cssRenderer = new _CSS3DRenderer2.default();
    _this.cssRenderer.setSize(_this.width(), _this.height());
    (0, _libs.$)(_this.cssRenderer.domElement).css({
      position: 'absolute',
      top: 0,
      margin: 0,
      padding: 0
    });
    _this.jContainer.append(_this.cssRenderer.domElement);

    _this.element = _this.cssRenderer.domElement;

    _this.textureLoader = new _libs.THREE.TextureLoader();

    _this.ambientLight = new _libs.THREE.AmbientLight(0xffffff);
    _this.scene.add(_this.ambientLight);

    _this.light = new _libs.THREE.DirectionalLight(0x000000, 1);
    _this.light.position.set(-6 * scale, 6 * scale, -3 * scale);
    var d = 3 * scale;
    _this.light.castShadow = true;
    _this.light.shadow.camera.left = -d;
    _this.light.shadow.camera.right = d;
    _this.light.shadow.camera.top = d;
    _this.light.shadow.camera.bottom = -d;
    _this.light.shadow.camera.near = .5 * scale;
    _this.light.shadow.camera.far = 20 * scale;
    _this.light.shadow.mapSize.x = 512;
    _this.light.shadow.mapSize.y = 512;
    _this.scene.add(_this.light);
    // this.scene.add(new THREE.CameraHelper(this.light.shadow.camera));

    _this.shadowPlace = new _libs.THREE.Mesh(new _libs.THREE.PlaneGeometry(10, 10).rotateX(-Math.PI / 2), new _libs.THREE.ShadowMaterial({ color: 0x000000, transparent: true, opacity: .2 }));
    _this.shadowPlace.position.set(0, 0, 0);
    _this.shadowPlace.receiveShadow = true;
    _this.shadowPlace.castShadow = false;
    _this.scene.add(_this.shadowPlace);

    _this.controls = new _Orbit2.default(_this.camera, _this);
    _this.controls.target.y = 0.5;

    var cssScene = (0, _libs.$)(_this.cssRenderer.domElement).find('div'),
        tmpVector = new _libs.THREE.Vector3();
    _this.controls.addEventListener('change', function () {
      _this.camera.getWorldDirection(tmpVector);
      cssScene.css('display', tmpVector.y - _this.camera.position.y > 0 ? 'none' : 'block');
      _this.updateThree();
    });

    if (useHelpers) {
      _this.scene.add(new _libs.THREE.AxisHelper(5));
    }

    _this.binds = {
      onWindowResize: _this.onWindowResize.bind(_this),
      animate: _this.animate.bind(_this)
    };

    (0, _libs.$)(_this.wnd).on('resize', _this.binds.onWindowResize);

    _this.mouseEvents = new _ThreeMouseEventConverter2.default(_this.wnd, _this.doc, _this);
    _this.touchEvents = new _ThreeTouchEventConverter2.default(_this.wnd, _this.doc, _this);
    var filterData = { type: 'mousemove' };
    _this.mouseEvents.filter = function (element, e) {
      var types = ['mouseenter', 'mouseover', 'mouseleave', 'mouseout'],
          contains = function contains(p, c) {
        return p === c || _libs.$.contains(p, c);
      };
      if (e.type === 'mousemove') {
        filterData.pageX = e.pageX;
        filterData.pageY = e.pageY;
      }
      return e.relatedTarget && ~types.indexOf(e.type) && contains(element, e.target) && contains(element, e.relatedTarget) ? _extends({}, e, filterData) : e;
    };
    _this.drag = new _Drag2.default(_this.wnd, _this.doc, _this);

    _this.onWindowResize();
    _this.animate();
    return _this;
  }

  VisualWorld.prototype.getDiag = function getDiag() {
    var test = (0, _libs.$)('<div style="height: 1in; width: 1in; display: none;"></div>').appendTo(this.jContainer),
        r = new _libs.THREE.Vector2(screen.width / test.width(), screen.height / test.height());
    test.remove();
    return r.length();
  };

  VisualWorld.prototype.updateThree = function updateThree() {
    this.light.userData.needsUpdate = true;
  };

  VisualWorld.prototype.setLight = function setLight(ambient, directional) {
    this.ambientLight.color.set(ambient);
    this.light.color.set(directional);
    this.updateThree();
  };

  VisualWorld.prototype.dispose = function dispose() {
    delete this.binds.animate;
    (0, _libs.$)(this.wnd).off('resize', this.binds.onWindowResize);
    this.mouseEvents.dispose();
    this.touchEvents.dispose();
    this.drag.dispose();
    this.controls.dispose();
  };

  VisualWorld.prototype.width = function width() {
    return this.jContainer.width() || 200;
  };

  VisualWorld.prototype.height = function height() {
    return this.jContainer.height() || 200;
  };

  VisualWorld.prototype.setExtraLighting = function setExtraLighting(v) {
    this.light.intensity = v;
  };

  VisualWorld.prototype.isMobile = function isMobile() {
    return this.diag < _Utils2.default.MOBILE_DIAG;
  };

  VisualWorld.prototype.getOrbit = function getOrbit() {
    return this.controls;
  };

  VisualWorld.prototype.setControlsState = function setControlsState(state) {
    this.controls.enabled = state;
  };

  VisualWorld.prototype.getControlsState = function getControlsState() {
    return this.controls.enabled;
  };

  VisualWorld.prototype.onWindowResize = function onWindowResize() {
    var _this2 = this;

    var width = this.width(),
        height = this.height();
    if (width > 1 && height > 1) {
      var updateCamera = function updateCamera(camera) {
        camera.aspect = width / height;
        camera.updateProjectionMatrix();
      },
          updateRenderer = function updateRenderer(renderer) {
        renderer.setSize(width, height);
      };
      if (!this.lastResize || Math.abs(this.lastResize.width - width) + Math.abs(this.lastResize.height - height) > 1) {
        this.lastResize = { width: width, height: height };
        var resizeStamp = this.resizeStamp = Date.now();
        setTimeout(function () {
          if (resizeStamp === _this2.resizeStamp) {
            updateCamera(_this2.camera);
            updateRenderer(_this2.renderer);
            updateRenderer(_this2.cssRenderer);
            _this2.updateThree();
            _this2.dispatchEvent({ type: 'resize' });
          }
        }, 10);
      }
    } else {
      setTimeout(function () {
        _this2.onWindowResize();
      }, 250);
    }
  };

  VisualWorld.prototype.addObject = function addObject(object) {
    this.scene.add(object);
  };

  VisualWorld.prototype.addCssObject = function addCssObject(object) {
    this.cssScene.add(object);
  };

  VisualWorld.prototype.removeCssObject = function removeCssObject(object) {
    this.cssScene.remove(object);
  };

  VisualWorld.prototype.removeObject = function removeObject(object) {
    this.scene.remove(object);
  };

  VisualWorld.prototype.animate = function animate() {
    if (this.binds.animate) {
      requestAnimationFrame(this.binds.animate);
    }
    this.render();
  };

  VisualWorld.prototype.addRenderCallback = function addRenderCallback(clb) {
    this.renderCallbacks.push(clb);
  };

  VisualWorld.prototype.removeRenderCallback = function removeRenderCallback(clb) {
    var i = this.renderCallbacks.indexOf(clb);
    if (~i) {
      this.renderCallbacks.splice(i, 1);
    }
  };

  VisualWorld.prototype.render = function render() {
    var deltaTime = Math.min(this.clock.getDelta(), 0.017 * 2);
    this.controls.update(deltaTime);
    for (var _iterator = this.renderCallbacks, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var clb = _ref;

      clb(deltaTime);
    }
    this.cssRenderer.render(this.cssScene, this.camera);
    var render = true;
    if (this.checkUpdateFlag) {
      render = false;
      for (var _iterator2 = this.scene.children, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var o = _ref2;

        render = render || o.userData.needsUpdate;
        o.userData.needsUpdate = false;
      }
    }
    if (render) {
      this.renderer.render(this.scene, this.camera);
    }
  };

  VisualWorld.getPrecision = function getPrecision() {
    var scene = new _libs.THREE.Scene();
    scene.add(new _libs.THREE.AmbientLight(0xffffff));

    var camera = new _libs.THREE.PerspectiveCamera(30, 1, 1, 100);
    camera.position.set(0, 0, 1);
    camera.lookAt(0, 0, 0);

    var renderer = new _libs.THREE.WebGLRenderer();
    renderer.setClearColor(0xffffff);
    renderer.setSize(1, 1);

    var c = document.createElement('canvas'),
        ctx = c.getContext('2d');
    c.width = c.height = 1;
    ctx.fillStyle = '#ff0000';
    ctx.fillRect(0, 0, c.width, c.height);
    var t = new _libs.THREE.Texture(c);
    t.needsUpdate = true;

    scene.add(new _libs.THREE.Mesh(new _libs.THREE.PlaneGeometry(1, 1, 1, 1), new _libs.THREE.MeshPhongMaterial({ map: t })));

    renderer.render(scene, camera);

    function getPixel(c, x, y) {
      var ps = new Uint8Array(4);
      c.readPixels(x, y, 1, 1, c.RGBA, c.UNSIGNED_BYTE, ps);
      return ps;
    }
    var p = getPixel(renderer.domElement.getContext('webgl') || renderer.domElement.getContext('experimental-webgl'), 0, 0);
    return p[0] === 255 && p[1] === 0 && p[2] === 0 ? 'highp' : 'mediump';
  };

  return VisualWorld;
}(_libs.THREE.EventDispatcher);

exports.default = VisualWorld;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var YouTubeApi = function () {
  function YouTubeApi() {
    _classCallCheck(this, YouTubeApi);
  }

  YouTubeApi.init = function init() {
    if (!YouTubeApi.task) {
      YouTubeApi.task = new Promise(function (resolve) {
        if (!window['YT']) {
          window['YT'] = {
            loading: 0,
            loaded: 0
          };
        }
        if (!window['YTConfig']) {
          window['YTConfig'] = {
            'host': 'http://www.youtube.com'
          };
        }
        if (!YT.loading) {
          YT.loading = 1;
          (function () {
            var l = [];
            YT.ready = function (f) {
              if (YT.loaded) {
                f();
              } else {
                l.push(f);
              }
            };
            window.onYTReady = function () {
              YT.loaded = 1;
              for (var i = 0; i < l.length; i++) {
                try {
                  l[i]();
                } catch (e) {}
              }
              resolve();
            };
            YT.setConfig = function (c) {
              for (var k in c) {
                if (c.hasOwnProperty(k)) {
                  YTConfig[k] = c[k];
                }
              }
            };
            var a = document.createElement('script');
            a.type = 'text/javascript';
            a.id = 'www-widgetapi-script';
            a.src = 'https://s.ytimg.com/yts/jsbin/www-widgetapi-vfldn1jRM/www-widgetapi.js';
            a.async = false;
            var c = document.currentScript;
            if (c) {
              var n = c.nonce || c.getAttribute('nonce');
              if (n) {
                a.setAttribute('nonce', n);
              }
            }
            var b = document.getElementsByTagName('script')[0];
            b.parentNode.insertBefore(a, b);
          })();
        }
      });
    }
    return YouTubeApi.task;
  };

  return YouTubeApi;
}();

exports.default = YouTubeApi;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _Target2 = __webpack_require__(23);

var _Target3 = _interopRequireDefault(_Target2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CircleTarget = function (_Target) {
  _inherits(CircleTarget, _Target);

  function CircleTarget(x, y, r) {
    _classCallCheck(this, CircleTarget);

    var _this = _possibleConstructorReturn(this, _Target.call(this));

    _this.p = {
      x: x,
      y: y,
      r: r
    };
    return _this;
  }

  CircleTarget.prototype.testIntersection = function testIntersection(e, data) {
    var res = void 0;
    var x = data.x,
        y = data.y,
        p = this.p;

    if ((x - p.x) * (x - p.x) + (y - p.y) * (y - p.y) <= p.r * p.r) {
      res = {
        target: this,
        data: data
      };
    }
    return res;
  };

  return CircleTarget;
}(_Target3.default);

exports.default = CircleTarget;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _Target2 = __webpack_require__(23);

var _Target3 = _interopRequireDefault(_Target2);

var _BaseMathUtils = __webpack_require__(2);

var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PolyTarget = function (_Target) {
  _inherits(PolyTarget, _Target);

  function PolyTarget(poly) {
    _classCallCheck(this, PolyTarget);

    var _this = _possibleConstructorReturn(this, _Target.call(this));

    _this.poly = poly;
    return _this;
  }

  PolyTarget.prototype.testIntersection = function testIntersection(e, p) {
    return _BaseMathUtils2.default.isInsidePoly(this.poly, p) ? {
      target: this,
      data: p
    } : undefined;
  };

  return PolyTarget;
}(_Target3.default);

exports.default = PolyTarget;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var define = false;

/*!
 * jQuery Mousewheel 3.1.13
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 */

(function (factory) {
    if ( typeof define === 'function' && define.amd ) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (true) {
        // Node/CommonJS style for Browserify
        module.exports = factory;
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?
                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
        slice  = Array.prototype.slice,
        nullLowestDeltaTimeout, lowestDelta;

    if ( $.event.fixHooks ) {
        for ( var i = toFix.length; i; ) {
            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
        }
    }

    var special = $.event.special.mousewheel = {
        version: '3.1.12',

        setup: function() {
            if ( this.addEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.addEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = handler;
            }
            // Store the line height and page height for this particular element
            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
        },

        teardown: function() {
            if ( this.removeEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.removeEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = null;
            }
            // Clean up the data we added to the element
            $.removeData(this, 'mousewheel-line-height');
            $.removeData(this, 'mousewheel-page-height');
        },

        getLineHeight: function(elem) {
            var $elem = $(elem),
                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
            if (!$parent.length) {
                $parent = $('body');
            }
            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
        },

        getPageHeight: function(elem) {
            return $(elem).height();
        },

        settings: {
            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
            normalizeOffset: true  // calls getBoundingClientRect for each event
        }
    };

    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
        },

        unmousewheel: function(fn) {
            return this.unbind('mousewheel', fn);
        }
    });


    function handler(event) {
        var orgEvent   = event || window.event,
            args       = slice.call(arguments, 1),
            delta      = 0,
            deltaX     = 0,
            deltaY     = 0,
            absDelta   = 0,
            offsetX    = 0,
            offsetY    = 0;
        event = $.event.fix(orgEvent);
        event.type = 'mousewheel';

        // Old school scrollwheel delta
        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }
        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }
        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }
        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }

        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
            deltaX = deltaY * -1;
            deltaY = 0;
        }

        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
        delta = deltaY === 0 ? deltaX : deltaY;

        // New school wheel delta (wheel event)
        if ( 'deltaY' in orgEvent ) {
            deltaY = orgEvent.deltaY * -1;
            delta  = deltaY;
        }
        if ( 'deltaX' in orgEvent ) {
            deltaX = orgEvent.deltaX;
            if ( deltaY === 0 ) { delta  = deltaX * -1; }
        }

        // No change actually happened, no reason to go any further
        if ( deltaY === 0 && deltaX === 0 ) { return; }

        // Need to convert lines and pages to pixels if we aren't already in pixels
        // There are three delta modes:
        //   * deltaMode 0 is by pixels, nothing to do
        //   * deltaMode 1 is by lines
        //   * deltaMode 2 is by pages
        if ( orgEvent.deltaMode === 1 ) {
            var lineHeight = $.data(this, 'mousewheel-line-height');
            delta  *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        } else if ( orgEvent.deltaMode === 2 ) {
            var pageHeight = $.data(this, 'mousewheel-page-height');
            delta  *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }

        // Store lowest absolute delta to normalize the delta values
        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );

        if ( !lowestDelta || absDelta < lowestDelta ) {
            lowestDelta = absDelta;

            // Adjust older deltas if necessary
            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
                lowestDelta /= 40;
            }
        }

        // Adjust older deltas if necessary
        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
            // Divide all the things by 40!
            delta  /= 40;
            deltaX /= 40;
            deltaY /= 40;
        }

        // Get a whole, normalized value for the deltas
        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);

        // Normalise offsetX and offsetY properties
        if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {
            var boundingRect = this.getBoundingClientRect();
            offsetX = event.clientX - boundingRect.left;
            offsetY = event.clientY - boundingRect.top;
        }

        // Add information to the event object
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        event.offsetX = offsetX;
        event.offsetY = offsetY;
        // Go ahead and set deltaMode to 0 since we converted to pixels
        // Although this is a little odd since we overwrite the deltaX/Y
        // properties with normalized deltas.
        event.deltaMode = 0;

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        // Clearout lowestDelta after sometime to better
        // handle multiple device types that give different
        // a different lowestDelta
        // Ex: trackpad = 3 and mouse wheel = 120
        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

    function nullLowestDelta() {
        lowestDelta = null;
    }

    function shouldAdjustOldDeltas(orgEvent, absDelta) {
        // If this is an older event and the delta is divisable by 120,
        // then we are assuming that the browser is treating this as an
        // older mouse wheel event and that we should divide the deltas
        // by 40 to try and get a more usable deltaFactor.
        // Side note, this actually impacts the reported scroll distance
        // in older browsers and can cause scrolling to be slower than native.
        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
    }

}));



/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

// stats.js - http://github.com/mrdoob/stats.js
(function(f,e){ true?module.exports=e():"function"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?"block":"none";l=a}var l=0,c=document.createElement("div");c.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";c.addEventListener("click",function(a){a.preventDefault();
u(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel("FPS","#0ff","#002")),h=e(new f.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var t=e(new f.Panel("MB","#f08","#201"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/
1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement("canvas");q.width=r;q.height=h;q.style.cssText="width:80px;height:48px";var b=q.getContext("2d");b.font="bold "+9*a+"px Helvetica,Arial,sans-serif";b.textBaseline="top";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);
b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+" "+e+" ("+g(c)+"-"+g(k)+")",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(25);
module.exports = __webpack_require__(24);


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgOGY2NzU5YTlkMTM5MDk3MmRiYzUiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2xpYnMuanMiLCJ3ZWJwYWNrOi8vLy4vanMvbGlicy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9CYXNlTWF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1V0aWxzLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0dyYXBoVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvTWF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0ltYWdlQmFzZS5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9FdmVudENvbnZlcnRlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9JbWFnZUZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9Cb29rUHJvcHNCdWlsZGVyLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvU2hlZXRCbG9jay5qcyIsIndlYnBhY2s6Ly8vLi9qcy9wcm9wcy9ib29rLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0NTUzNEUmVuZGVyZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvQ1NTTGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9DdXN0b21FdmVudENvbnZlcnRlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9GaW5kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvRnVsbFNjcmVlblguanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvUGRmLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1RocmVlRXZlbnRDb252ZXJ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvVGhyZWVVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9XaWRnZXRDb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL3RhcmdldHMvVGFyZ2V0LmpzIiwid2VicGFjazovLy8uL2luZGV4LmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL0F1dG9OYXZpZ2F0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9CaW5kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9Cb29rLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvQm9va0NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9Cb29rUHJpbnRlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL0Jvb2tWaWV3LmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvQ2xiQm9va1Byb3BzQnVpbGRlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL0NvdmVyLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvQ3NzTGF5ZXJzTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL1BhZ2VNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvUGRmQm9va1Byb3BzQnVpbGRlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL1BkZkxpbmtzSGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL1NlYXJjaEVuZ2luZS5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL1NoYXJlQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL1NoZWV0Q3NzTGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9TaGVldFBoeXNpY3MuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9Tb3VuZHNFbnZpcm9tZW50LmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvVG9jQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9tb2RlbHMvc2hlZXRCbG9jay5qcyIsIndlYnBhY2s6Ly8vLi9qcy9wcm9wcy9ib29rQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9CbGFua0ltYWdlLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0Jvb2ttYXJrcy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9EZXRlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9Eb2NNb3VzZVNpbXVsYXRvci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9Eb20ySW1hZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvRHJhZy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9FdmVudHNUb0FjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvRnVsbFNjcmVlbi5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9JbnRlcmFjdGl2ZUltYWdlLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0xvYWRpbmdBbmltYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvTG9hZGluZ0NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvTW91c2VFdmVudENvbnZlcnRlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9PYmplY3QzRFdhdGNoZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvT3JiaXQuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvUGRmSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvU2VhcmNoLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1N0YXRpY0ltYWdlLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1RleHR1cmVBbmltYXRvci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9UaHJlZU1vdXNlRXZlbnRDb252ZXJ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvVGhyZWVUb3VjaEV2ZW50Q29udmVydGVyLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1RodW1ibmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvVG91Y2hFdmVudENvbnZlcnRlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9Vc2VyTWVzc2FnZUNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvVmlldy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9WaXN1YWxXb3JsZC5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9Zb3VUdWJlQXBpLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL3RhcmdldHMvQ2lyY2xlVGFyZ2V0LmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL3RhcmdldHMvUG9seVRhcmdldC5qcyIsIndlYnBhY2s6Ly8vLi4vfi9qcXVlcnktbW91c2V3aGVlbC9qcXVlcnkubW91c2V3aGVlbC5qcyIsIndlYnBhY2s6Ly8vLi4vfi9zdGF0cy5qcy9idWlsZC9zdGF0cy5taW4uanMiXSwibmFtZXMiOlsiXyQiLCJHTE9CQUxfTElCUyIsIndpbmRvdyIsImpRdWVyeSIsInJlcXVpcmUiLCJfaHRtbDJjYW52YXMiLCJodG1sMmNhbnZhcyIsIl9USFJFRSIsIlRIUkVFIiwiX1JlYWN0IiwiUmVhY3QiLCJfUmVhY3RET00iLCJSZWFjdERPTSIsIl9QREZKUyIsInBkZmpzTGliIiwiX3RyIiwicyIsImliZXJlemFuc2t5IiwidHIiLCIkIiwiUERGSlMiLCJGQjNEX0xPQ0FMRSIsImRpY3Rpb25hcnkiLCJCYXNlTWF0aFV0aWxzIiwic3VtMSIsImthIiwiYSIsImtiIiwiYiIsInN1bTIiLCJzdW0zIiwic3VtNCIsInJrNCIsImR5IiwidCIsImR0IiwieSIsInN1bSIsImxlbmd0aCIsImsxIiwiazIiLCJrMyIsIms0IiwiZXh0cmFwb2xhdGVMaW5lYXIiLCJ4IiwieGkiLCJpbnRlcnBvbGF0ZUxpbmVhciIsInlpIiwicmV2ZXJzZSIsImNhbGNTY2FsZSIsInNyY1ciLCJzcmNIIiwiZHN0VyIsImRzdEgiLCJtdWxNIiwiciIsImkiLCJwdXNoIiwiaiIsImsiLCJ0cmFuc00iLCJtIiwibWF0IiwiZGF0YSIsImRpc3AiLCJNIiwicHJlZGljdDEiLCJudW0iLCJsIiwiRCIsImFtIiwiYm0iLCJ0YSIsImQiLCJwIiwidiIsIk1hdGgiLCJyb3VuZCIsImluZGV4T2YiLCJwcmVkaWN0Iiwic2ducyIsInNpZ24iLCJhYnMiLCJjdXIiLCJnZXRVbmlxdWUiLCJjZWlsIiwicmFuZG9tIiwic2V0U3BsaW5lUG9pbnRzIiwic3BsaW5lIiwicHMiLCJwb2ludHMiLCJjb25zb2xlIiwid2FybiIsInNldCIsInoiLCJtYXBsMkwiLCJscyIsImxlbiIsIm4iLCJmIiwiZEwiLCJMIiwiZGV0MiIsImMiLCJzb2x2ZTJMaW4iLCJhMSIsImIxIiwiYTIiLCJiMiIsInJlcyIsImVwcyIsImR4IiwiaXNJbnNpZGVQb2x5IiwiZG9uZSIsImN0IiwidjJkaXN0IiwibnAiLCJybiIsInAwIiwicDEiLCJpcCIsIm1pbiIsIm1heCIsInRuIiwiaXNJbnNpZGVDb252UG9seSIsInNnIiwidjJsZW4iLCJ2MiIsInNxcnQiLCJ2MjEiLCJ2MjIiLCJjb21wdXRlU3F1YXJlIiwiY29tcHV0ZUludGVycENvZWZzIiwidHJpIiwiY29lZnMiLCJVdGlscyIsIm5vcm1hbGl6ZVVybCIsInVybCIsInNwbGl0IiwicmVwbGFjZSIsImJhc2UiLCJsb2NhdGlvbiIsImhyZWYiLCJqb2luIiwiX2VzY2FwZUhUTUxjbGIiLCJfZXNjYXBlSFRNTGNoYXJzIiwiZXNjYXBlSFRNTCIsImV4dGVuZHMiLCJkZXIiLCJuYW1lIiwiaGFzT3duUHJvcGVydHkiLCJkZWZhdWx0Q21wIiwibG93ZXJCb3VuZCIsImNtcCIsImgiLCJtaWQiLCJmbG9vciIsIk1PQklMRV9ESUFHIiwiR3JhcGhVdGlscyIsImNyZWF0ZUNhbnZhcyIsIndpZHRoIiwiaGVpZ2h0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW50ZXJwb2xhdGUwMSIsInkxIiwieTIiLCJnZXRDb2xvckJ5dGVzIiwiY29sb3IiLCJpbnZlcnNlQ29sb3IiLCJicyIsImlicyIsIm5icyIsImJ5dGVzMkNvbG9yIiwiY29sb3IyUmdiYSIsImJ5dGVzMlJnYmEiLCJNYXRoVXRpbHMiLCJzcGxpdFNwbGluZSIsIk4iLCJvIiwiZGwiLCJnZXRQb2ludCIsInYxIiwiZGlzdGFuY2VUbyIsImNvcHkiLCJnZXRMaW5lYXJJbmRlY2VzIiwiZGVsIiwiZERlbCIsInJlZmluZVBvbHkiLCJwb2x5IiwibWF4RGwiLCJWZWN0b3IyIiwiVmVjdG9yMyIsIkltYWdlQmFzZSIsImNvbnRleHQiLCJyZW5kZXJQYXVzZSIsInduZCIsImRvYyIsImVsZW1lbnQiLCJib2R5IiwicmVuZGVyQ2FudmFzIiwiY3R4IiwicmVuZGVyQ2FudmFzQ3R4IiwicmVzVyIsInJlc0giLCJzZXRSZW5kZXJDYW52YXMiLCJzZXRSZXNvbHV0aW9uIiwiZGlzcG9zZSIsInJlbmRlckJsYW5rUGFnZSIsImJlZ2luUGF0aCIsImZpbGxTdHlsZSIsInJlY3QiLCJmaWxsIiwic2V0UmVuZGVyUGF1c2UiLCJjb250aW51ZVJlbmRlciIsImNhbmNlbFJlbmRlciIsInJlbmRlclRhc2siLCJjYW5jZWwiLCJyZW5kZXJJbWFnZSIsImltYWdlIiwicHVzaEN0eCIsImNsZWFyUmVjdCIsImRyYXdJbWFnZSIsInBvcEN0eCIsIm5vcm1Ub0NvbnYiLCJyZW5kZXJIaXQiLCJtb3ZlVG8iLCJsaW5lVG8iLCJjbG9zZVBhdGgiLCJzYXZlIiwic2NhbGUiLCJyZXN0b3JlIiwicmVuZGVyTm90Rm91bmRQYWdlIiwiZmluaXNoUmVuZGVyIiwiY2FuY2VsZWQiLCJvbkNoYW5nZSIsImZpbmlzaExvYWQiLCJvbkxvYWQiLCJzdGFydFJlbmRlciIsImdldFNpbXVsYXRlZERvYyIsInVuZGVmaW5lZCIsImdldENvbnRleHQiLCJFdmVudENvbnZlcnRlciIsImVuYWJsZWQiLCJzZXRFbmFibGUiLCJ2bCIsIm1DYXBPYmplY3QiLCJub3RpZnkiLCJFdmVudCIsIm1Ib3ZPYmplY3QiLCJnZXRDYWxsYmFjayIsIm9iamVjdCIsImUiLCJ0eXBlIiwiY2FsbGJhY2siLCJwcm9wcyIsInZpZXciLCJqRSIsImNvbnZlcnQiLCJmaWx0ZXIiLCJnZXRPYmplY3QiLCJjb252ZXJ0VG91Y2giLCJjb252ZXJ0TW91c2UiLCJ0Q2FwT2JqZWN0IiwidGVzdCIsIm9yaWdpbmFsRXZlbnQiLCJzb3VyY2VDYXBhYmlsaXRpZXMiLCJmaXJlc1RvdWNoRXZlbnRzIiwiSW1hZ2VGYWN0b3J5IiwiY2FjaGUiLCJDYWNoZSIsImJ1aWxkIiwiaW5mbyIsIndpZHRoVGV4ZWxzIiwiaGVpZ2h0VGV4ZWxzIiwiaW5qZWN0b3IiLCJJbnRlcmFjdGl2ZUltYWdlIiwic3JjIiwiU3RhdGljSW1hZ2UiLCJQZGZJbWFnZSIsIkJsYW5rSW1hZ2UiLCJCb29rUHJvcHNCdWlsZGVyIiwib25SZWFkeSIsInN0eWxlIiwiZGVmYXVsdHMiLCJjYWxjU2l6ZSIsImNhbGNUZXhlbHMiLCJzaGVldCIsImNhbGNQcm9wcyIsInBhZ2VzIiwiY292ZXIiLCJwYWdlIiwiY2FsY1NoZWV0cyIsInNoZWV0cyIsImdldFNoZWV0cyIsImdldFByb3BzIiwiZ2V0UGFnZUNhbGxiYWNrIiwiYmluZHMiLCJwYWdlQ2FsbGJhY2siLCJyZWFkeSIsIlNoZWV0QmxvY2siLCJ2aXN1YWwiLCJmaXJzdCIsImxhc3QiLCJhbmdsZSIsInN0YXRlIiwibG9hZGVkUG9pbnRzIiwibG9hZFBvaW50cyIsIk9iamVjdCIsImtleXMiLCJtYXAiLCJzaGFwZSIsInBTcGxpbmUiLCJDYXRtdWxsUm9tQ3VydmUzIiwiaW50ZXJwb2xhdGlvblBvaW50cyIsImlTcGxpbmUiLCJzaGVldEJsb2NrIiwicmVzWCIsImFTcGxpbmVzIiwiZ2VvbWV0cnkiLCJjbG9uZSIsInNpZGVGYWNlcyIsImZhY2VzIiwic2lkZVRleHR1cmUiLCJUZXh0dXJlIiwid3JhcFQiLCJSZXBlYXRXcmFwcGluZyIsInJlcGVhdCIsIm5lZWRzVXBkYXRlIiwibWF0ZXJpYWxzIiwiTWVzaFBob25nTWF0ZXJpYWwiLCJzZXRUZXh0dXJlIiwibWVzaCIsIk1lc2giLCJjYXN0U2hhZG93IiwicmVjZWl2ZVNoYWRvdyIsInRocmVlIiwidXNlckRhdGEiLCJzZWxmIiwibWFya2VycyIsIm1hcmtlciIsInVzZSIsInZlcnRpY2VzIiwiaXMiLCJBcnJheSIsImFwcGx5IiwiXyIsIlRocmVlVXRpbHMiLCJjcmVhdGVNYXJrZXIiLCJzaXplIiwidmVydGV4IiwiYWRkIiwiY29ybmVyIiwibWF4RGlzdGFuY2UiLCJPWiIsImF4aXMiLCJnZXRTaXplIiwicmVkdWNlZFdpZHRoIiwicmVkdWNlV2lkdGgiLCJnZXRUb3BDZXJuZXJzIiwib2ZmIiwiUEkiLCJyZXNaIiwiZ2V0VG9wU2l6ZSIsInZzIiwidzAiLCJ3MSIsImxvY2FsVG9Xb3JsZCIsImdldFRvcFdvcmxkUm90YXRpb24iLCJxIiwiZ2V0VG9wV29ybGRQb3NpdGlvbiIsInciLCJ2aSIsImdldEludGVycG9sYXRpb25Qb2ludHMiLCJpbmRzIiwibW9kIiwiSyIsIndhdmUiLCJmbGlwRGlyZWN0aW9uIiwiY2xvc2VkQW5nbGUiLCJiaW5kZXJUdXJuIiwib3BlbmVkQW5nbGUiLCJjbG9zZWRJbnRlcnBvbGF0aW9uSW5kZWNlcyIsImZsYXRJbnRlcnBvbGF0aW9uSW5kZWNlcyIsImdldFBvaW50c0F0QW5nbGUiLCJvcGVuZWRJbnRlcnBvbGF0aW9uSW5kZWNlcyIsImhsIiwiaHIiLCJvZmZzZXQiLCJkZXB0aCIsImREZXB0aCIsImluQW5nbGUiLCJoQW5nbGUiLCJnZXRQb2ludHNBdEFuZ2xlQW5kSHMiLCJsZWZ0IiwicmlnaHQiLCJpbnZlcnNlIiwic2V0UG9pbnRzIiwieXMiLCJyZXNZIiwicGxhbmUiLCJQbGFuZSIsIm5vcm1hbCIsInBsYW5lT2Zmc2V0IiwiZmxleGlibGVDb3JuZXIiLCJwcm9qIiwic2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQiLCJub3JtYWxpemUiLCJwcm9qZWN0UG9pbnQiLCJzdWIiLCJkaXN0YW5jZSIsImQyQW5nbGUiLCJjb3JuZXJEZXZpYXRpb24iLCJleHAiLCJiZW5kaW5nIiwiYXBwbHlBeGlzQW5nbGUiLCJwb2ludCIsInBvc2l0aW9uIiwiY29tcHV0ZVZlcnRleE5vcm1hbHMiLCJjb21wdXRlQm91bmRpbmdTcGhlcmUiLCJ2ZXJ0aWNlc05lZWRVcGRhdGUiLCJtYXJrdXAiLCJjb21wdXRlVmVydGljZXMiLCJnZXRQb2ludHNBdEhzIiwiaHMiLCJibCIsInAyIiwiZHAiLCJsbiIsInNwIiwic2luIiwiY29zIiwibnBzIiwiYW5nbGVzIiwieHBzIiwieXBzIiwiaW50ZXJwb2xhdGUiLCJkZWYiLCJiYWNrZ3JvdW5kQ29sb3IiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJiYWNrZ3JvdW5kU3R5bGUiLCJoaWdobGlnaHRMaW5rcyIsImxpZ2h0aW5nIiwiZ3Jhdml0eSIsImNhY2hlZFBhZ2VzIiwicmVuZGVySW5hY3RpdmVQYWdlcyIsInJlbmRlckluYWN0aXZlUGFnZXNPbk1vYmlsZSIsInJlbmRlcldoaWxlRmxpcHBpbmciLCJwYWdlc0ZvclByZWRpY3RpbmciLCJwcmVsb2FkUGFnZXMiLCJhdXRvUGxheUR1cmF0aW9uIiwicnRsIiwiaW50ZXJhY3RpdmVDb3JuZXJzIiwibWF4RGVwdGgiLCJzdGFydFZlbG9jaXR5IiwiZmxleGliaWxpdHkiLCJzaWRlIiwiYmluZGVyVGV4dHVyZSIsInBhZGRpbmciLCJtYXNzIiwiY3NzTGF5ZXJQcm9wcyIsInN0eWxlcyIsInZvbHVtZSIsImZsYXQiLCJDU1MzRE9iamVjdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJPYmplY3QzRCIsIkNTUzNEU3ByaXRlIiwiQ1NTM0RSZW5kZXJlciIsIl93aWR0aCIsIl9oZWlnaHQiLCJfd2lkdGhIYWxmIiwiX2hlaWdodEhhbGYiLCJtYXRyaXgiLCJNYXRyaXg0IiwiY2FtZXJhIiwiZm92Iiwib2JqZWN0cyIsImRvbUVsZW1lbnQiLCJvdmVyZmxvdyIsImNhbWVyYUVsZW1lbnQiLCJXZWJraXRUcmFuc2Zvcm1TdHlsZSIsIk1velRyYW5zZm9ybVN0eWxlIiwidHJhbnNmb3JtU3R5bGUiLCJhcHBlbmRDaGlsZCIsImlzSUUiLCJzZXRDbGVhckNvbG9yIiwic2V0U2l6ZSIsImVwc2lsb24iLCJ2YWx1ZSIsIk51bWJlciIsIkVQU0lMT04iLCJnZXRDYW1lcmFDU1NNYXRyaXgiLCJlbGVtZW50cyIsImdldE9iamVjdENTU01hdHJpeCIsImNhbWVyYUNTU01hdHJpeCIsIm1hdHJpeDNkIiwicmVuZGVyT2JqZWN0IiwibWF0cml4V29ybGRJbnZlcnNlIiwidHJhbnNwb3NlIiwiY29weVBvc2l0aW9uIiwibWF0cml4V29ybGQiLCJjYWNoZWRTdHlsZSIsImlkIiwiV2Via2l0VHJhbnNmb3JtIiwiTW96VHJhbnNmb3JtIiwidHJhbnNmb3JtIiwiZGlzdGFuY2VUb0NhbWVyYVNxdWFyZWQiLCJnZXREaXN0YW5jZVRvU3F1YXJlZCIsImNoaWxkcmVuIiwib2JqZWN0MSIsIm9iamVjdDIiLCJzZXRGcm9tTWF0cml4UG9zaXRpb24iLCJkaXN0YW5jZVRvU3F1YXJlZCIsInpPcmRlciIsInNjZW5lIiwib3JkZXIiLCJzb3J0Iiwiek1heCIsInRyYXZlcnNlIiwiaW5kZXgiLCJ6SW5kZXgiLCJyZW5kZXIiLCJwcm9qZWN0aW9uTWF0cml4IiwiV2Via2l0UGVyc3BlY3RpdmUiLCJNb3pQZXJzcGVjdGl2ZSIsInBlcnNwZWN0aXZlIiwidXBkYXRlTWF0cml4V29ybGQiLCJwYXJlbnQiLCJfQ1NTM0RPYmplY3QiLCJfQ1NTM0RTcHJpdGUiLCJDU1NMYXllciIsImluaXQiLCJkZWxheSIsImZiM2RRRmlsdGVyIiwiYXBwZW5kVG8iLCJoZWFkIiwicmVtb3ZlIiwiakNvbnRhaW5lciIsInNldERhdGEiLCJ3aWR0aFB4cyIsImhlaWdodFB4cyIsImNhbGxJbnRlcm5hbCIsImVycm9yIiwiY2xlYXJJbnRlcm5hbHMiLCJjc3MiLCJodG1sIiwianMiLCJldmFsIiwicGVuZGVkQ2FsbCIsImNsYiIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJzZXRUaW1lb3V0IiwiaXNIaWRkZW4iLCJoYXNDbGFzcyIsImhpZGUiLCJhZGRDbGFzcyIsIlByb21pc2UiLCJyZXNvbHZlIiwic2hvdyIsInJlbW92ZUNsYXNzIiwibWF4U2l6ZSIsIkluZmluaXR5Iiwic2l6ZW9mIiwiY291bnRTaXplb2YiLCJvcyIsIk1hcCIsImZvckVhY2giLCJnZXQiLCJsb2NrZWQiLCJkZWxldGUiLCJmcmVlU3BhY2UiLCJhcnIiLCJrZXkiLCJyZWN1cnNpb25TaXplb2YiLCJnZXRUaW1lc3RhbXAiLCJwdXQiLCJDb250cm9sbGVyIiwiaGFuZGxlRGVmYXVsdCIsImRpc3BhdGNoQXN5bmMiLCJ0aGVuIiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50RGlzcGF0Y2hlciIsIkN1c3RvbUV2ZW50Q29udmVydGVyIiwiY3VzdG9tVGVzdCIsImVEb2MiLCJjdXN0b21zIiwidGFyZ2V0IiwiYWRkQ3VzdG9tIiwiY3VzdG9tIiwidGVzdEludGVyc2VjdGlvbiIsIkZpbmRlciIsImlzRGVsaW1ldHIiLCJERUxJTUlURVIiLCJtZXJnZSIsImFzIiwic3RycyIsImNoYXJBdCIsInN0ciIsImFkZEhpdHMiLCJjaGFycyIsInBhdHRlcm4iLCJkZWxpbWV0ZXIiLCJoaXRzIiwiYWRkQ29udGV4dCIsImRlbHMiLCJjb250ZXh0TGVuZ3RoIiwicHJldkRlbHMiLCJjb250ZXh0cyIsInN1YnN0ciIsImdldEhpdHMiLCJnZXRDb250ZXh0cyIsInRvTG93ZXJDYXNlIiwibHN0ciIsIkZ1bGxTY3JlZW5YIiwiYXZhaWxhYmxlIiwiYWN0aXZhdGVkIiwibm9kZSIsImNsYXNzWCIsImhhbmRsZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGVmSGFuZGxlciIsInJlcXVlc3QiLCJkZWZOb2RlIiwiRnVsbFNjcmVlbiIsIkdsb2JhbFdvcmtlck9wdGlvbnMiLCJ3b3JrZXJTcmMiLCJQREZKU19MT0NBTEUiLCJHTE9CQUxfUEFUSFMiLCJwZGZKc1dvcmtlciIsImNNYXBVcmwiLCJwZGZKc0NNYXBVcmwiLCJjTWFwUGFja2VkIiwiZGlzYWJsZUF1dG9GZXRjaCIsImRpc2FibGVTdHJlYW0iLCJkaXNhYmxlUmFuZ2UiLCJpbWFnZVJlc291cmNlc1BhdGgiLCJleHRlcm5hbExpbmtUYXJnZXQiLCJMaW5rVGFyZ2V0IiwiQkxBTksiLCJkaXNhYmxlRm9udEZhY2UiLCJQZGYiLCJsb2FkaW5nUHJvZ3Jlc3MiLCJvcGVuT3B0aW9ucyIsImhhbmRsZXJRdWV1ZSIsInByb2dyZXNEYXRhIiwibG9hZGVkIiwidG90YWwiLCJ0YXNrIiwiZ2V0RG9jdW1lbnQiLCJyYW5nZUNodW5rU2l6ZSIsIm9uUHJvZ3Jlc3MiLCJvbGQiLCJpc05hTiIsInByb21pc2UiLCJudW1QYWdlcyIsImFsbCIsImdldFBhZ2UiLCJjYXRjaCIsImVycm9ySGFuZGxlciIsInAwcyIsImdldFBhZ2VTaXplIiwicDFzIiwiZG91YmxlZFBhZ2VzIiwiZ2V0UGFnZVR5cGUiLCJnZXRQYWdlc051bSIsImdldERlc3RpbmF0aW9uIiwiZGVzdCIsImRlc3RQcm9taXNlIiwiZ2V0UGFnZUluZGV4IiwibnVtYmVyIiwic3BsaWNlIiwic2V0TG9hZGluZ1Byb2dyZXNzQ2xiIiwic2V0RXJyb3JIYW5kbGVyIiwiZWgiLCJyb3RhdGUiLCJnZXRIYW5kbGVyIiwiVGhyZWVFdmVudENvbnZlcnRlckZzIiwib2JqZWN0c1Rlc3QiLCJvYmplY3RzQW5kRmFjZXNUZXN0IiwiZmFjZSIsIm1hdGVyaWFsSW5kZXgiLCJ2aXN1YWxXb3JsZCIsImNvb3JkcyIsInJheWNhc3RlciIsInRocmVlcyIsImFkZFRocmVlIiwicmVtb3ZlVGhyZWUiLCJzZXRDb29yZHNGcm9tRXZlbnQiLCJzZXRGcm9tQ2FtZXJhIiwiaW50ZXJzZWN0cyIsImludGVyc2VjdE9iamVjdHMiLCJ2ZXJ0aWNlczJVVnMiLCJpbmRlY2VzIiwiY29udmVyQ2xiIiwidmlzIiwiY29tcHV0ZUZhY2VWZXJ0ZXhVdnMiLCJ1dnMiLCJ1dnNpIiwiZmFjZVZlcnRleFV2cyIsIlNwaGVyZUdlb21ldHJ5IiwiZmluZFV2VHJpcyIsImZvdW5kIiwiZmluZEludGVybmFsVmVydGljZXMiLCJ2ZXJ0ZXhOb3JtYWxzIiwidmFsdWVzIiwiV2lkZ2V0Q29udHJvbGxlciIsInZpc2libGUiLCJ0b2dsZSIsImZpcmVDaGFuZ2UiLCJ1cGRhdGVWaWV3Iiwic2V0U3RhdGUiLCJlbmFibGUiLCJhY3RpdmUiLCJUYXJnZXQiLCJmbiIsIkZsaXBCb29rIiwib3B0aW9ucyIsInBkZkxpbmtzSGFuZGxlciIsInNvdW5kcyIsInVzZXJNZXNzYWdlQ3RybCIsInRvY0N0cmwiLCJ0aHVtYm5haWxzIiwiYm9va21hcmtzIiwic2hhcmVDdHJsIiwiY3RybCIsImJvb2tQcmludGVyIiwiYm9vayIsInByb3BzQnVpbGRlciIsImJvb2tCdWlsZGVyIiwicGVuZGluZ0Rpc3Bvc2UiLCJwYXJlbnRDb250YWluZXIiLCJhY3RpdmF0ZUZ1bGxTY3JlZW4iLCJCb29rVmlldyIsIkRldGVjdG9yIiwid2ViZ2wiLCJhZGRHZXRXZWJHTE1lc3NhZ2UiLCJnZXRWaWV3IiwibG9hZGluZ0N0cmwiLCJMb2FkaW5nQ29udHJvbGxlciIsInByb2dyZXNzIiwiVXNlck1lc3NhZ2VDb250cm9sbGVyIiwiVmlzdWFsV29ybGQiLCJnZXRDb250YWluZXIiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJwcm9wZXJ0aWVzQ2FsbGJhY2siLCJDbGJCb29rUHJvcHNCdWlsZGVyIiwiQ29sb3IiLCJnZXRIZXhTdHJpbmciLCJhdHRyIiwiQm9vayIsIkJvb2tQcmludGVyIiwidGVtcGxhdGUiLCJwcmludFN0eWxlIiwiQm9va0NvbnRyb2xsZXIiLCJjb250cm9sc1Byb3BzIiwic2V0SW5qZWN0b3IiLCJib29rQ3RybCIsImFkZEhhbmRsZXIiLCJzZXRQcmludGVyIiwiVGh1bWJuYWlscyIsImdldFRodW1ibmFpbHNWaWV3IiwiZ2V0UGFnZXMiLCJrV3RvSCIsIlRvY0NvbnRyb2xsZXIiLCJzZXRUaHVtYm5haWxzIiwib3V0bGluZSIsIkJvb2ttYXJrcyIsImdldEJvb2ttYXJrc1ZpZXciLCJzZXRCb29rbWFya3MiLCJzZXRUb2NDdHJsIiwic2VhcmNoIiwiU2VhcmNoIiwiZ2V0U2VhcmNoVmlldyIsIm9uUXVlcnkiLCJzZXRRdWVyeSIsImJpbmQiLCJzZXRSZXN1bHRzIiwicmVzdWx0cyIsImxhc3RQYWdlIiwic2V0U2VhcmNoIiwiUGRmTGlua3NIYW5kbGVyIiwiaGFuZGxlRXZlbnQiLCJnZXRPdXRsaW5lIiwicGRmTGlua3MiLCJzZXRIYW5kbGVyIiwiU291bmRzRW52aXJvbWVudCIsInNldFNvdW5kcyIsInN1YnNjcmliZUZsaXBzIiwiYXV0b05hdmlnYXRvciIsIkF1dG9OYXZpZ2F0b3IiLCJhdXRvTmF2aWdhdGlvbiIsIlNoYXJlQ29udHJvbGxlciIsInNoYXJlTGlua0J1aWxkZXIiLCJ1IiwiUmVnRXhwIiwidXJsUGFyYW0iLCJoYXNoIiwic2V0U2hhcmVDdHJsIiwib25FcnJvciIsInNldEVycm9yIiwibWVzc2FnZSIsInBkZiIsIlBkZkJvb2tQcm9wc0J1aWxkZXIiLCJib29rU3R5bGUiLCJwZGZPcGVuT3B0aW9ucyIsInNldFByb2dyZXNzIiwib25QYWdlQ2FsbGJhY2tFcnJvciIsImNvbnRhaW5lcnMiLCJwcm90b3R5cGUiLCJUeXBlRXJyb3IiLCJPIiwic3RhcnQiLCJhcmd1bWVudHMiLCJyZWxhdGl2ZVN0YXJ0IiwiZW5kIiwicmVsYXRpdmVFbmQiLCJmaW5hbCIsImZpbmQiLCJkZWZpbmVQcm9wZXJ0eSIsInByZWRpY2F0ZSIsImxpc3QiLCJ0aGlzQXJnIiwiY2FsbCIsImZpbmRJbmRleCIsImVzY2FwZSIsIlN0cmluZyIsInJlcGxhY2VBbGwiLCJuYXZpZ2F0ZXMiLCJwYWdlTiIsImZiM2QiLCJuYXZpZ2F0b3IiLCJpbnN0YW5jZXMiLCJnb1RvUGFnZSIsImdldFBhZ2VOdW1iZXIiLCJnZXRQYXJhbWV0ZXJCeU5hbWUiLCJyZWdleCIsImV4ZWMiLCJkZWNvZGVVUklDb21wb25lbnQiLCJwYXJzZUludCIsIkJpbmRlciIsImhpZGRlbiIsImJhY2tTaXplIiwiYmFja0ciLCJCb3hHZW9tZXRyeSIsInRyYW5zcGFyZW50Iiwib3BhY2l0eSIsImJhY2tNIiwidGV4dHVyZUxvYWRlciIsImxvYWQiLCJ0ZXh0dXJlIiwic2V0SGV4IiwibWluRmlsdGVyIiwiTGluZWFyRmlsdGVyIiwiYmFjayIsImJhY2tSVCIsImJhY2tSUiIsImJhY2tMVCIsImJhY2tMUiIsImxlZnRQaXZvdCIsInJpZ2h0UGl2b3QiLCJ0cjEiLCJxdWF0ZXJuaW9uIiwic2V0RnJvbUF4aXNBbmdsZSIsInRyMiIsInNldExlZnQiLCJzZXRSaWdodCIsImpvaW5MZWZ0Q292ZXIiLCJkaXNjb25uZWN0TGVmdENvdmVyIiwiam9pblJpZ2h0Q292ZXIiLCJkaXNjb25uZWN0UmlnaHRDb3ZlciIsImNzc0ZzIiwicGxheSIsInBsYXllciIsImZiM2ROb1BsYXkiLCJwZW5kaW5nUGxheWVycyIsInBsYXlWaWRlbyIsInBhdXNlIiwicGF1c2VWaWRlbyIsIm1vdXNlQ29udHJvbGxlciIsInByZXBhcmVQcm9wcyIsInpvb20iLCJzaW5nbGVQYWdlIiwiYXV0b1Jlc29sdXRpb24iLCJ1c2VyRGlyZWN0aW9uIiwibGFzdFRvcFBhZ2UiLCJkaXJlY3Rpb24iLCJwYWdlTWFuYWdlciIsIlBhZ2VNYW5hZ2VyIiwibGF5ZXJNYW5hZ2VyIiwiQ3NzTGF5ZXJzTWFuYWdlciIsInNlYXJjaEVuZ2luZSIsIlNlYXJjaEVuZ2luZSIsIm9uUGFnZUhpdHNDaGFuZ2VkIiwicXVlcnkiLCJyZWZyZXNoUGFnZVF1ZXJ5IiwiYmluZGVyIiwiY292ZXJQIiwiZW5hYmxlTW91c2UiLCJsZWZ0Q292ZXIiLCJDb3ZlciIsInNldExlZnRDb3ZlclRleHR1cmUiLCJzdWJzY3JpYmVTaGVldEJsb2NrIiwicmlnaHRDb3ZlciIsInNldFJpZ2h0Q292ZXJUZXh0dXJlIiwidGhyZWVTaGVldEJsb2NrcyIsInNoZWV0QmxvY2tzIiwiYWRkU2hlZXRCbG9jayIsInNldFBhZ2VUZXh0dXJlIiwicmVkdWNlUGFnZXNXaWR0aCIsIm9wZW5lZEJveCIsIkJveDMiLCJzZXRGcm9tT2JqZWN0IiwidW5pb24iLCJsYXN0TW91c2VQb3MiLCJzaGVldFBoeXNpY3MiLCJTaGVldFBoeXNpY3MiLCJ1cGRhdGUiLCJwYWdlWCIsInBhZ2VZIiwiYWRkUmVuZGVyQ2FsbGJhY2siLCJvbiIsIm9uUGlja0NhbGxiYWNrIiwiZHJhZyIsIm9uRHJhZ0NhbGxiYWNrIiwib25SZWxlYXNlQ2FsbGJhY2siLCJkcmFnQW5nbGUiLCJ0bXAiLCJib3hzIiwiYWRkT2JqZWN0IiwidG1wQm94IiwiYm9va1NoYWRvd01hdGVyaWFsIiwiRG91YmxlU2lkZSIsImJvb2tTaGFkb3ciLCJQbGFuZUdlb21ldHJ5Iiwicm90YXRlWCIsImNhbGN1bGF0ZVNoYWRvdyIsInJlZnJlc2hab29tIiwiaXNQcm9jZXNzaW5nIiwibm90aWZ5QmVmb3JlQW5pbWF0aW9uIiwibm90aWZ5QWZ0ZXJBbmltYXRpb24iLCJ1cGRhdGVUaHJlZSIsImJveCIsImRkIiwic2hhZG93UGxhY2UiLCJyZW1vdmVPYmplY3QiLCJyZW1vdmVSZW5kZXJDYWxsYmFjayIsInJlbW92ZVNoZWV0QmxvY2tzIiwicmVtb3ZlU2hlZXRCbG9jayIsImhhc1BlbmRpbmdQbGF5ZXJzIiwicmVzb2x2ZVBlbmRpbmdQbGF5ZXJzIiwic2V0QXV0b1Jlc29sdXRpb24iLCJzZXRab29tIiwiZ2V0Qm9va1BhZ2VzIiwic2V0RmxpcFByb2dyZXNzQ2xiIiwiZmxpcFByb2dyZXNzQ2xiIiwiaXNBY3RpdmVQYWdlIiwiZ2V0QmxvY2tCeVBhZ2UiLCJibG9jayIsImdldEJsb2NrUGFnZXMiLCJyYW5nZSIsImdldFRvcFBhZ2VzIiwiZ2V0UGFnZVN0YXRlIiwiZW5hYmxlTG9hZGluZ0FuaW1hdGlvbiIsImdldExlZnRGbGlwcGluZyIsImdldFJpZ2h0RmxpcHBpbmciLCJnZXRDbG9zZWRCbG9ja0FuZ2xlIiwicGh5c2ljSWQiLCJnZXRQYXJhbWV0ciIsImZsaXBMZWZ0IiwicHJvZ3Jlc3NDbGIiLCJmbGlwRGlzYWJsZWQiLCJjb25uZWN0UGh5c2ljcyIsInNldFNoZWV0QmxvY2tzIiwic3BsaXRTaGVldEJsb2NrIiwiZmluaXNoQW5pbWF0aW9uQ2xiIiwiZmxpcFJpZ2h0IiwiY2xlYXJIb3ZlckluZm8iLCJ0dXJuT25FdmVudHMiLCJob3ZlckluZm8iLCJmb3JjZSIsImNvcm5lckZvcmNlIiwieFNlZ21lbnQiLCJjb21wdXRlVGFyZ2V0Iiwic2VnIiwidXYiLCJjb3JuZXJUYXJnZXQiLCJkcmFnRm9yY2VDbGIiLCJnZXREcmFnQ29ybmVyRm9yY2VDbGIiLCJkcmFnSW5mbyIsInR1cm5PZmZFdmVudHMiLCJnZXRGbGlwcGluZyIsImZsaXAiLCJjb3JuZXJDYWxsYmFjayIsInBlbmRpbmdzIiwiaG92ZXJBbmdsZSIsImhvdmVyIiwicG9zc2libGUiLCJuZXh0QmxvY2siLCJzZXRQYXJhbWV0ciIsImdldFRhcmdldEZvcmNlQ2xiIiwiaG92ZXJDb3JuZXJGb3JjZUNsYiIsImNvcm5lckNsaWNrRGF0YSIsInBvdyIsImV2ZW50Q29udmVydGVyIiwiQ2lyY2xlVGFyZ2V0IiwibW91c2VDYWxsYmFjayIsInRyYW5zZmVyRXZlbnRUb1RleHR1cmUiLCJ0b3VjaENhbGxiYWNrIiwibW91c2VFdmVudHMiLCJ0b3VjaEV2ZW50cyIsImJsb2NrcyIsIm1hdGVyaWFsIiwibWVyZ2VTaGVldEJsb2NrcyIsImNhbGNCbG9ja0ZvcmNlIiwidmVsb2NpdHkiLCJjb3JuZXJIZWlnaHQiLCJjYWxjQmxvY2tDb3JuZXJGb3JjZSIsInNldFZpc3VhbE1vZGUiLCJtb2RlIiwibGlnaHRNb2RlcyIsInNldExpZ2h0IiwiYW1iaWVudCIsImRpcmVjdGlvbmFsIiwiYW5pbWF0aW9uTm90aWZpY2F0aW9uIiwicmVqZWN0IiwiZ2V0VXNlckRpcmVjdGlvbiIsImNvdmVySGVpZ2h0Iiwic2ltdWxhdGVDbGIiLCJyZW1vdmVDbGIiLCJhbmdsIiwiY2giLCJsYXN0VCIsInRyaWdnZXIiLCJzaW11bGF0ZSIsImxlZnRTaXplIiwibmV3QmxvY2siLCJmaXJzdEJsb2NrIiwibGFzdEJsb2NrIiwiY3JlYXRlU2lkZVRleHR1cmUiLCJtZXJnZVByb3BzIiwic2Vjb25kIiwiZmxleGlibGVDb3JuZXJLIiwiY3NzTGF5ZXJzTG9hZGVyIiwibG9hZGVyIiwibmxzIiwiY3NzTGF5ZXJKc09iamVjdCIsImNsSWZFeCIsIm5vIiwiY3NzTGF5ZXJKc09iamVjdEluaXQiLCJybyIsInByZXZlbnREZWZhdWx0IiwicDAxIiwibm0iLCJZb3VUdWJlQXBpIiwicGxheWVyVmFycyIsImxvb3AiLCJjb250cm9scyIsIm11dGUiLCJwbGF5bGlzdCIsIllUIiwiUGxheWVyIiwidmlkZW9JZCIsImFkcyIsImFkc2J5Z29vZ2xlIiwic2NyaXB0IiwiYXN5bmMiLCJlYWNoIiwic2hvd24iLCJhZCIsInRyaW0iLCJzdGF0aWMiLCJsaXZlIiwibWl4ZWQiLCJuYXZpZ2F0aW9uQ29udHJvbHMiLCJvcmJpdCIsImdldE9yYml0IiwidXBkYXRlVmlld0lmU3RhdGUiLCJiaW5kQWN0aW9ucyIsInNtYXJ0UGFuIiwiYWN0aW9ucyIsImlzU2luZ2xlUGFnZUF2YWlsYWJsZSIsImFjdGl2ZUZvck1vYmlsZSIsImlzTW9iaWxlIiwic3RhdHMiLCJhY3RpdmVTaWRlIiwiYXV0b1BsYXkiLCJib3gwIiwiYm94MSIsImJvb2tXaWR0aCIsImJvb2tXYXRjaGVyIiwiT2JqZWN0M0RXYXRjaGVyIiwieDAiLCJkZWZhdWx0IiwiU3RhdHMiLCJ0b3AiLCJvblNjcmVlbk1vZGVDaGFuZ2VkIiwib25VcGRhdGVWaWV3IiwiZ2V0UGFyZW50Q29udGFpbmVyIiwiY21kU21hcnRQYW4iLCJsb2FkaW5nQW5pbWF0aW9uIiwic2tpbiIsImluaXRMb2FkaW5nQW5pbWF0aW9uIiwidGVtcGxhdGVPYmplY3QiLCJhcHBMb2FkZWQiLCJsb2FkaW5nQW5pbWF0aW9uSGFuZGxlciIsInByaW50ZXIiLCJsb2FkaW5nIiwicGVuZGluZ0xvYWRpbmdBbmltYXRpb24iLCJlbmFibGVOYXZpZ2F0aW9uIiwic2V0QWN0aXZlVGFiIiwiZGVmYXVsdFRhYiIsInNldEVuYWJsZWQiLCJjYW5ab29tSW4iLCJjYW5ab29tT3V0IiwiY2FuRGVmYXVsdFpvb20iLCJzZXRCb29rWm9vbSIsImNtZEF1dG9QbGF5IiwicGVuZGluZ0F1dG9QbGF5IiwiZmxpcHBlZCIsImNhbkZsaXBMZWZ0IiwiY21kQmFja3dhcmQiLCJjYW5GbGlwUmlnaHQiLCJjbWRGb3J3YXJkIiwiY21kWm9vbUluIiwiZGVsdGEiLCJ6b29tSW4iLCJjbWRab29tT3V0Iiwiem9vbU91dCIsInNldFNjYWxlIiwiY21kRGVmYXVsdFpvb20iLCJjbWRUb2MiLCJjbWRTaGFyZSIsInN0YXJ0RmxpcCIsImNtZEJpZ0JhY2t3YXJkIiwiY21kQmlnRm9yd2FyZCIsImNtZFNhdmUiLCJkb3dubG9hZFVSTCIsImNsaWNrIiwiY21kUHJpbnQiLCJwcmludCIsImNtZEZ1bGxTY3JlZW4iLCJtaW5BemltdXRoQW5nbGUiLCJtYXhBemltdXRoQW5nbGUiLCJtaW5Qb2xhckFuZ2xlIiwibWF4UG9sYXJBbmdsZSIsImNtZFNpbmdsZVBhZ2UiLCJjbWRTb3VuZHMiLCJjbWRTdGF0cyIsImFwcGVuZCIsImNtZFBlbmRpbmdQbGF5IiwiY21kR290b0ZpcnN0UGFnZSIsImNtZEdvdG9MYXN0UGFnZSIsInBhZ2VOdW0iLCJjdXJyZW50IiwiZmxpcHMiLCJjb3ZzIiwiY3YiLCJzZXRDbGIiLCJmbCIsInRpbWUiLCJuZXh0IiwiZmxpcFJlcyIsImVuZEZsaXAiLCJnZXRQYWdlRm9yR1VJIiwiaW5wUGFnZSIsImlzQ21kVmlzaWJsZSIsIm5hcnJvd1ZpZXciLCJlbmFibGVkSW5OYXJyb3ciLCJ1cGRhdGVWaWV3U3RhdGUiLCJ2aWV3U3RhdGUiLCJmbGlwcGVyc0VuYWJsZSIsImdldEFjdGlvbnMiLCJpc1N3aXBwaW5nIiwidG91Y2hDbWRTd2lwZSIsImNvZGUiLCJjbWRzIiwiYWN0aXZhdGUiLCJjbWRQYW5MZWZ0IiwicGFuIiwic3BlZWQiLCJjbWRQYW5SaWdodCIsImNtZFBhblVwIiwiY21kUGFuRG93biIsIm1vdXNlQ21kUm90YXRlIiwibW91c2VDbWREcmFnWm9vbSIsIm1vdXNlQ21kUGFuIiwibW91c2VDbWRXaGVlbFpvb20iLCJkZWx0YVkiLCJ0b3VjaENtZFJvdGF0ZSIsInRvdWNoQ21kWm9vbSIsInRvdWNoWm9vbURhdGEiLCJ0b3VjaENtZFBhbiIsInRvdWNoIiwidG91Y2hlcyIsInN3aXBlRGF0YSIsImhhbmRsZWQiLCJ5MCIsIndpZFNldHRpbmdzIiwid2lkVG9vbGJhciIsImVUb0EiLCJFdmVudHNUb0FjdGlvbnMiLCJhZGRBY3Rpb24iLCJtb3VzZUJ1dHRvbnMiLCJSaWdodCIsImFjdGlvbiIsImZsYWdzIiwic2V0QWN0aW9ucyIsImxldmVscyIsInN0eWxlU2hlZXQiLCJwZGZTcmMiLCJmcmFtZSIsInByaW50V25kIiwiY2FsbE1hbnVhbGx5IiwidXNlSUZyYW1lIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJyZW5kZXJDb250ZW50IiwiY29udGVudCIsInByaW50RG9jIiwid3JpdGUiLCJjbG9zZSIsIlNldCIsInJlbmRlckh0bWwiLCJyZW5kZXJIZWFkIiwid3JhcCIsImxpbmtzIiwibWF0Y2giLCJsaW5rIiwiZmFpbCIsInJlc3BvbnNlVGV4dCIsImRlZmF1bHRTdHlsZVNoZWV0IiwiaXNDaHJvbWl1bSIsImNocm9tZSIsIndpbk5hdiIsInZlbmRvck5hbWUiLCJ2ZW5kb3IiLCJpc0lFZWRnZSIsInVzZXJBZ2VudCIsImlzSU9TQ2hyb21lIiwiY29udGFpbmVyIiwiaW5pdFZpZXciLCJib29rbWFya3NWaWV3IiwidGh1bWJuYWlsc1ZpZXciLCJzZWFyY2hWaWV3IiwiZ2V0SGFuZGxlcnMiLCJoYW5kbGVycyIsImNhbGxMYXRlciIsIlBBR0VfSEFORExFUl9ERUxBWSIsIm9uSXRlbVN0YXRlQ2hhbmdlZCIsImdldEZvcm1zIiwiZ2V0TGlua3MiLCJnZXRXaWRnZXRzIiwiZ2V0SW5wdXRzIiwiZ2V0VGV4dHMiLCJnZXRUZW1wbGF0ZSIsInJlbCIsIlZpZXciLCJpbWFnZUZhY3RvcnkiLCJ3cmFwcGVycyIsImdldEFjdGl2ZXMiLCJhY3MiLCJsYXllcnMiLCJnZXRMYXllcnMiLCJmaW5pc2giLCJzbCIsIlNoZWV0Q3NzTGF5ZXIiLCJwYWdlTnVtYmVyIiwid2FpdCIsInBhZ2VRdWVyeSIsInBhZ2VDYWNoZSIsInJlc291cmNlc0NhY2hlIiwiY2FudmFzZXMiLCJ3aWxsUmVhZEZyZXF1ZW50bHkiLCJkZXN5bmNocm9uaXplZCIsIm5leHRDYW52YXMiLCJsb2FkaW5ncyIsInJlbmRlclF1ZXVlIiwicHJlZGljdGVkUmVxdWVzdHMiLCJ0bXBNYXRlcmlhbCIsIk1lc2hCYXNpY01hdGVyaWFsIiwiY3JlYXRlTG9hZGluZ1RleHR1cmUiLCJsb2FkUHJlZGljdGVkUGFnZXMiLCJ1cGRhdGVSZW5kZXJRdWV1ZSIsInNwcml0ZVRpbGVzIiwiYW5pbWF0aW9uIiwiTG9hZGluZ0FuaW1hdGlvbiIsImFuaW1hdG9yIiwiVGV4dHVyZUFuaW1hdG9yIiwiY3JlYXRlU3ByaXRlIiwiaXNDb3ZlciIsInNldHVwTWF0ZXJpYWwiLCJpc0FjdGl2ZSIsInJlbW92ZUZyb21Mb2FkaW5ncyIsInJlbW92ZUZyb21SZW5kZXJRdWV1ZSIsIndyYXBwZXIiLCJwdXNoSW5SZW5kZXJRdWV1ZSIsInJlbmRlcmluZyIsImVzIiwiZ2V0Q1NTTGF5ZXIiLCJhcmdzIiwicmVzb2x2ZVBlbmRpbmdzIiwicnRsUGFnZU4iLCJwaSIsImlzVG9wIiwic2V0TWF0ZXJpYWwiLCJjYWxjUmVzb2x1dGlvbiIsImludGVyYWN0aXZlIiwib25VcGRhdGUiLCJpc1NpbmdsZVBhZ2UiLCJjb2VmZmljaWVudCIsImRldmljZVBpeGVsUmF0aW8iLCJtaW5SZXMiLCJtYXhSZXMiLCJpc01vdmluZyIsInVkIiwibmVhciIsInRyYW5zZmVyRXZlbnRzIiwibW91c2V1cCIsIm1vdXNlb3V0IiwiZW50IiwidG9PYmplY3QiLCJnZXRPckxvYWRUZXh0dXJlT2JqZWN0IiwidG9Eb2MiLCJvYiIsInBhZ2VEZXNjcmlwdGlvbiIsInZpZXdwb3J0IiwiZ2V0Vmlld3BvcnQiLCJjdXJzb3JzIiwiZGVmYXVsdEhhbmRsZXIiLCJkZXN0aW5hdGlvbiIsImNhbGxIYW5kbGVycyIsImV2ZW50IiwiYW5ubyIsImFubm90YXRpb24iLCJwb3AiLCJwcm9jZXNzIiwic3RhbXAiLCJnZXRUZXh0Q29udGVudCIsInRleHRDb250ZW50IiwiaXRlbXMiLCJpdGVtIiwibGlua0J1aWxkZXIiLCJjbWRDbG9zZVNoYXJlIiwiY2xpY2tMaW5rIiwiYmxhbmsiLCJjbWRGYWNlYm9vayIsImVuY29kZVVSSUNvbXBvbmVudCIsImdldExpbmsiLCJjbWRUd2l0dGVyIiwiY21kRW1haWwiLCJjbWQiLCJsYXllciIsImFkZENzc09iamVjdCIsInJlbW92ZUNzc09iamVjdCIsInJvdGF0aW9uIiwidGFyZ2V0Rm9yY2VDbGIiLCJnIiwidGwiLCJ0YXJnZXRBbmdsZSIsImZsYnQiLCJkcmFnQ29ybmVyRm9yY2VDbGIiLCJmcHMiLCJzdGFydER0IiwibWFyZ2luIiwiaW5mTSIsImF0dGVtcHRzIiwibWF4SXRlcmF0aW9ucyIsImZvcmNlQ2xiIiwiY29ybmVyRm9yY2VDbGIiLCJjZiIsImdldFBhcmFtZXRyTWFwIiwiVCIsImF0dGVtcHQiLCJpdCIsIm5vcyIsImludGVncmF0ZSIsImNpIiwiZmluZENvbGxpc2lvbnMiLCJzY29zIiwic29sdmVDb2xsaXNpb24iLCJncyIsImkwIiwiZmluZEFuZFNvbHZlQ29ybmVyQ29sbGlzaW9ucyIsInJlbW92ZVN0YXRpY3MiLCJhbCIsImRDaCIsImR2IiwibW0iLCJhdiIsImJ2IiwiaXNDb2xsaXNpb24iLCJhbGYiLCJjb3NBbGYiLCJicmYiLCJhdWRpbyIsIkF1ZGlvIiwiY3VycmVudFRpbWUiLCJlbWl0dGVyIiwidGFiIiwib25OYXZpZ2F0ZSIsIm5hdmlnYXRlVGh1bWJuYWlscyIsIm5hdmlnYXRlU2VhcmNoIiwibmF2aWdhdGVCb29rbWFya3MiLCJpc0Jvb2ttYXJrcyIsImNtZEJvb2ttYXJrcyIsImNtZFRodW1ibmFpbHMiLCJjbWRTZWFyY2giLCJjbWRDbG9zZVRvYyIsIm9wZW5VcmwiLCJkc3REYXRhSGFuZGxlciIsImRzdERhdGEiLCJmcm9udEdlb21ldHJ5IiwidHJhbnNsYXRlIiwiYmFja0dlb21ldHJ5Iiwicm90YXRlWSIsImxlZnRHZW9tZXRyeSIsInJpZ2h0R2VvbWV0cnkiLCJ0b3BHZW9tZXRyeSIsImJvdHRvbUdlb21ldHJ5IiwiR2VvbWV0cnkiLCJhZGRGYWNlcyIsImZzIiwiRmFjZTMiLCJtYXBWZXJ0aWNlcyIsImRzdCIsImVxIiwiZnJvbnRNYXAiLCJiYWNrTWFwIiwibGVmdE1hcCIsInJpZ2h0TWFwIiwiTGVmdCIsIk1pZGRsZSIsImdldFRpdGxlIiwidGl0bGUiLCJnZXRJdGVtcyIsIm5vZGVzIiwibWFwTm9kZXMiLCJsaSIsIm1pbmltaXplZCIsInJlbmRlck5vZGUiLCJyZW5kZXJOb2RlcyIsImV4cGFuZCIsIm1pbmltaXplIiwibGV2ZWwiLCJnZXRXZWJHTEVycm9yTWVzc2FnZSIsImZvbnRGYW1pbHkiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJ0ZXh0QWxpZ24iLCJiYWNrZ3JvdW5kIiwiaW5uZXJIVE1MIiwiV2ViR0xSZW5kZXJpbmdDb250ZXh0IiwicGFyYW1ldGVycyIsImNhbnZhcyIsIkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCIsIndvcmtlcnMiLCJXb3JrZXIiLCJmaWxlYXBpIiwiRmlsZSIsIkZpbGVSZWFkZXIiLCJGaWxlTGlzdCIsIkJsb2IiLCJEb2NNb3VzZVNpbXVsYXRvciIsImpGcmFtZSIsImJFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwicmVzZW5kUHJvcGVydGllcyIsImdldERlZmF1bHRSZXNlbmRQcm9wZXJ0aWVzIiwidW5kZWZpbmVkUHJvcGVydGllcyIsImdldERlZmF1bHRVbmRlZmluZWRQcm9wZXJ0aWVzIiwib25Eb2NDaGFuZ2VDbGJzIiwidGVybXMiLCJIT1ZFUiIsIkFDVElWRSIsInN0eWxlU2hlZXRzIiwic3MiLCJjc3NSdWxlcyIsImNzc1RleHQiLCJ0ZXJtIiwic2VsZWN0b3JUZXh0IiwiY29udmVydENvb3JkcyIsImpFbGVtZW50IiwidHJpZ2dlckV2ZW50IiwiYWR2YW5jZWRQcm9wcyIsInRpbWVTdGFtcCIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZW50ZXJFbGVtZW50IiwibGVhdmVFbGVtZW50IiwiYWN0aXZhdGVFbGVtZW50IiwiZGVhY3RpdmF0ZUVsZW1lbnQiLCJhZGREb2NDaGFuZ2VDbGIiLCJlbGVtZW50RnJvbVBvaW50IiwiY2hpbGROb2RlcyIsImNoaWxkIiwiRWxlbWVudCIsImpDIiwiZ2V0RWxlbWVudCIsIm9mZjAiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJjYXBFbGVtZW50IiwibGVhdmVkIiwiaG92RWxlbWVudCIsInJlbGF0ZWRUYXJnZXQiLCJEb20ySW1hZ2UiLCJ1dGlsIiwibmV3VXRpbCIsImlubGluZXIiLCJuZXdJbmxpbmVyIiwiZm9udEZhY2VzIiwibmV3Rm9udEZhY2VzIiwiaW1hZ2VzIiwibmV3SW1hZ2VzIiwidG9TdmciLCJ0b1BuZyIsInRvSnBlZyIsInRvQmxvYiIsInRvUGl4ZWxEYXRhIiwiaW1wbCIsImNsb25lTm9kZSIsImVtYmVkRm9udHMiLCJpbmxpbmVJbWFnZXMiLCJhcHBseU9wdGlvbnMiLCJtYWtlU3ZnRGF0YVVyaSIsImJnY29sb3IiLCJwcm9wZXJ0eSIsImRyYXciLCJnZXRJbWFnZURhdGEiLCJ0b0RhdGFVUkwiLCJxdWFsaXR5IiwiY2FudmFzVG9CbG9iIiwiZG9tTm9kZSIsIm1ha2VJbWFnZSIsIm5ld0NhbnZhcyIsImZpbGxSZWN0Iiwicm9vdCIsIm1ha2VOb2RlQ29weSIsImNsb25lQ2hpbGRyZW4iLCJwcm9jZXNzQ2xvbmUiLCJpc0NhbnZhcyIsIm9yaWdpbmFsIiwiY2xvbmVDaGlsZHJlbkluT3JkZXIiLCJhc0FycmF5IiwiY2hpbGRDbG9uZSIsImlzRWxlbWVudCIsImNsb25lU3R5bGUiLCJjbG9uZVBzZXVkb0VsZW1lbnRzIiwiY29weVVzZXJJbnB1dCIsImZpeFN2ZyIsImNvcHlTdHlsZSIsInNvdXJjZSIsImNvcHlQcm9wZXJ0aWVzIiwic2V0UHJvcGVydHkiLCJnZXRQcm9wZXJ0eVByaW9yaXR5IiwiY2xvbmVQc2V1ZG9FbGVtZW50IiwiY2xhc3NOYW1lIiwidWlkIiwic3R5bGVFbGVtZW50IiwiZm9ybWF0UHNldWRvRWxlbWVudFN0eWxlIiwic2VsZWN0b3IiLCJmb3JtYXRDc3NUZXh0IiwiZm9ybWF0Q3NzUHJvcGVydGllcyIsImNyZWF0ZVRleHROb2RlIiwiZm9ybWF0UHJvcGVydHkiLCJpc1RleHRBcmVhIiwiaXNJbnB1dCIsInNldEF0dHJpYnV0ZSIsImlzU1ZHIiwiaXNTVkdSZWN0IiwiYXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwicmVzb2x2ZUFsbCIsInN0eWxlTm9kZSIsImlubGluZUFsbCIsIlhNTFNlcmlhbGl6ZXIiLCJzZXJpYWxpemVUb1N0cmluZyIsImVzY2FwZVhodG1sIiwieGh0bWwiLCJwYXJzZUV4dGVuc2lvbiIsIm1pbWVUeXBlIiwiZGF0YUFzVXJsIiwiaXNEYXRhVXJsIiwicmVzb2x2ZVVybCIsImdldEFuZEVuY29kZSIsImlzSW1hZ2UiLCJtaW1lcyIsIldPRkYiLCJKUEVHIiwiZXh0ZW5zaW9uIiwiYmluYXJ5U3RyaW5nIiwiYXRvYiIsImJpbmFyeUFycmF5IiwiVWludDhBcnJheSIsImNoYXJDb2RlQXQiLCJiYXNlVXJsIiwiaW1wbGVtZW50YXRpb24iLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJmb3VyUmFuZG9tQ2hhcnMiLCJ0b1N0cmluZyIsInNsaWNlIiwidXJpIiwiSW1hZ2UiLCJvbmxvYWQiLCJvbmVycm9yIiwiVElNRU9VVCIsIlhNTEh0dHBSZXF1ZXN0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwib250aW1lb3V0IiwidGltZW91dCIsInJlc3BvbnNlVHlwZSIsInNlbmQiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwiZW5jb2RlciIsIm9ubG9hZGVuZCIsInJlc3VsdCIsInJlYWRBc0RhdGFVUkwiLCJyZXNwb25zZSIsInN0cmluZyIsIm1zIiwiYXJnIiwiYXJyYXlMaWtlIiwiYXJyYXkiLCJsZWZ0Qm9yZGVyIiwicHgiLCJyaWdodEJvcmRlciIsInNjcm9sbFdpZHRoIiwidG9wQm9yZGVyIiwiYm90dG9tQm9yZGVyIiwic2Nyb2xsSGVpZ2h0Iiwic3R5bGVQcm9wZXJ0eSIsInBhcnNlRmxvYXQiLCJIVE1MQ2FudmFzRWxlbWVudCIsIkhUTUxUZXh0QXJlYUVsZW1lbnQiLCJIVE1MSW5wdXRFbGVtZW50IiwiU1ZHRWxlbWVudCIsIlNWR1JlY3RFbGVtZW50IiwiSFRNTEltYWdlRWxlbWVudCIsIlVSTF9SRUdFWCIsInNob3VsZFByb2Nlc3MiLCJyZWFkVXJscyIsImlubGluZSIsImRhdGFVcmwiLCJ1cmxBc1JlZ2V4Iiwibm90aGluZ1RvSW5saW5lIiwidXJscyIsInJlYWRBbGwiLCJ3ZWJGb250cyIsIndlYkZvbnQiLCJjc3NTdHJpbmdzIiwiZ2V0Q3NzUnVsZXMiLCJzZWxlY3RXZWJGb250UnVsZXMiLCJydWxlcyIsIm5ld1dlYkZvbnQiLCJydWxlIiwiQ1NTUnVsZSIsIkZPTlRfRkFDRV9SVUxFIiwibG9nIiwid2ViRm9udFJ1bGUiLCJwYXJlbnRTdHlsZVNoZWV0IiwibmV3SW1hZ2UiLCJpbmxpbmVCYWNrZ3JvdW5kIiwiaW5saW5lZCIsIkRyYWciLCJpbnRlcnNlY3Rpb24iLCJzZWxlY3RlZCIsImNvbnRyb2xzU3RhdGUiLCJnZXRDb250cm9sc1N0YXRlIiwib25Nb3VzZU1vdmUiLCJvbk1vdXNlRG93biIsIm9uTW91c2VVcCIsInJheSIsIm9yaWdpbiIsInNldENvbnRyb2xzU3RhdGUiLCJnZXRXb3JsZERpcmVjdGlvbiIsImludGVyc2VjdFBsYW5lIiwiZ2V0RXZlbnRGbGFncyIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsImdldFBvc2l0aW9uIiwiY29udGV4dE1lbnUiLCJtb3VzZURvd24iLCJtb3VzZU1vdmUiLCJtb3VzZVVwIiwibW91c2VXaGVlbCIsIm1vdXNlTW92ZURvYyIsIm1vdXNlVXBEb2MiLCJkYmxjbGljayIsInRvdWNoU3RhcnQiLCJ0b3VjaE1vdmUiLCJ0b3VjaEVuZCIsImtleURvd24iLCJrZXlQcmVzcyIsImtleVVwIiwiZmlyZUFjdGlvbnMiLCJidXR0b24iLCJwaWNrZWQiLCJjbGlja3MiLCJ0b3VjaFBpY2siLCJwb3MiLCJ0b3VjaFBpY2tlZCIsImtleUNvZGUiLCJtb2RLZXlzIiwiQ3RybCIsIlNoaWZ0IiwiQWx0IiwiX2hhc1dlYmtpdEZ1bGxTY3JlZW4iLCJfaGFzTW96RnVsbFNjcmVlbiIsIl9oYXNNc0Z1bGxzY3JlZW4iLCJ3ZWJraXRJc0Z1bGxTY3JlZW4iLCJtb3pGdWxsU2NyZWVuIiwibXNGdWxsc2NyZWVuRWxlbWVudCIsImFzc2VydCIsIndlYmtpdFJlcXVlc3RGdWxsU2NyZWVuIiwibW96UmVxdWVzdEZ1bGxTY3JlZW4iLCJtc1JlcXVlc3RGdWxsc2NyZWVuIiwid2Via2l0Q2FuY2VsRnVsbFNjcmVlbiIsIm1vekNhbmNlbEZ1bGxTY3JlZW4iLCJtc0V4aXRGdWxsc2NyZWVuIiwiZG9jdW1lbnRFbGVtZW50IiwiaUlkIiwiaGFzRmVhdHVyZSIsImltYWdlTG9hZCIsInN2Z1JlbmRlciIsImZyYW1lTG9hZCIsInNpbXVsYXRvciIsImNhbGNUaW1lVG8iLCJ1cGRhdGVJbnRlcnZhbCIsInNoYWRvd0JsdXIiLCJzaGFkb3dDb2xvciIsInNoYWRvd09mZnNldFgiLCJzaGFkb3dPZmZzZXRZIiwiZm9udCIsInRleHRCYXNlbGluZSIsImZpbGxUZXh0IiwiZGEiLCJfYSIsIl9yIiwiY3giLCJjeSIsIm54IiwibnkiLCJhcmMiLCJnZXRJbWFnZSIsInNob3dQcm9ncmVzcyIsImxvYWRpbmdNc2ciLCJnZXRMb2FkaW5nTXNnIiwiZGVmYXVsdExvYWRpbmdNc2ciLCJNb3VzZUV2ZW50Q29udmVydGVyIiwiYm91bmRCb3hDbGIiLCJ0ZXN0U2NhbGUiLCJlbGVtZW50U2l6ZSIsInZ4IiwidnkiLCJjb21wdXRlQ2xpZW50Qm91bmRCb3giLCJtb3ZlUGFuIiwic2V0UGFkZGluZyIsInZUb0NhbWVyYSIsInByb2plY3QiLCJ4cyIsInpzIiwic2V0T2JqZWN0IiwiY29tcHV0ZUNvcnIiLCJjb3JyIiwiY2VudGVyVmlldyIsIkt4IiwiS3kiLCJtb3ZpbmciLCJnZXRTY2FsZSIsIm1hcmciLCJwYWQiLCJkcGFkIiwicHkiLCJ0ZiIsInNldE1vdmluZyIsIlkiLCJ2ZCIsIk9yYml0Iiwid29ybGQiLCJtaW5EaXN0YW5jZSIsIm1pblpvb20iLCJtYXhab29tIiwiZW5hYmxlRGFtcGluZyIsImRhbXBpbmdGYWN0b3IiLCJlbmFibGVab29tIiwiem9vbVNwZWVkIiwiZW5hYmxlUm90YXRlIiwicm90YXRlU3BlZWQiLCJlbmFibGVQYW4iLCJhdXRvUm90YXRlIiwiYXV0b1JvdGF0ZVNwZWVkIiwidGFyZ2V0MCIsInBvc2l0aW9uMCIsInpvb20wIiwiZ2V0UG9sYXJBbmdsZSIsInNwaGVyaWNhbCIsInBoaSIsImdldEF6aW11dGhhbEFuZ2xlIiwidGhldGEiLCJyZXNldCIsInNjb3BlIiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsImNoYW5nZUV2ZW50IiwiX3NwZWVkIiwiZG9sbHlJbiIsImdldFpvb21TY2FsZSIsImRvbGx5T3V0IiwibmV3U2NhbGUiLCJxdWF0IiwiUXVhdGVybmlvbiIsInNldEZyb21Vbml0VmVjdG9ycyIsInVwIiwicXVhdEludmVyc2UiLCJsYXN0UG9zaXRpb24iLCJsYXN0UXVhdGVybmlvbiIsImFwcGx5UXVhdGVybmlvbiIsInNldEZyb21WZWN0b3IzIiwicm90YXRlTGVmdCIsImdldEF1dG9Sb3RhdGlvbkFuZ2xlIiwic3BoZXJpY2FsRGVsdGEiLCJtYWtlU2FmZSIsInJhZGl1cyIsInBhbk9mZnNldCIsInNldEZyb21TcGhlcmljYWwiLCJsb29rQXQiLCJ6b29tQ2hhbmdlZCIsIkVQUyIsImRvdCIsIlNwaGVyaWNhbCIsInJvdGF0ZVVwIiwicGFuTGVmdCIsIm9iamVjdE1hdHJpeCIsInNldEZyb21NYXRyaXhDb2x1bW4iLCJtdWx0aXBseVNjYWxhciIsInBhblVwIiwiZGVsdGFYIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsInRhcmdldERpc3RhbmNlIiwidGFuIiwiT3J0aG9ncmFwaGljQ2FtZXJhIiwiYm90dG9tIiwiZG9sbHlTY2FsZSIsIm9mZnNldERvbGx5Iiwid2hlZWxEb2xseSIsIm0wMCIsIm0wMSIsIm0wMiIsIm0xMCIsIm0xMSIsIm0xMiIsIm0yMCIsIm0yMSIsIm0yMiIsImNzc0xheWVyUmVxdWVzdHMiLCJzZXRIaXRzIiwicmVjdFNpemUiLCJjcmVhdGVQb2x5Iiwic2V0QW5ub3RhdGlvbnMiLCJhbm5vcyIsImh0bWxzIiwidGFyZ2V0cyIsInN1YnR5cGUiLCJhUG9zIiwiYVN6IiwiUG9seVRhcmdldCIsImFubm9DbGIiLCJjc3NMYXllciIsInJlc29sdmVDc3NMYXllclJlcXVlc3RzIiwiZmluZGVyIiwicmVuZGVySGl0cyIsInRlc3RTeiIsInRleHREaXYiLCJiYXNlT2Zmc2V0IiwiaGl0IiwiVXRpbCIsImZvbnROYW1lIiwiYXRhbjIiLCJ2ZXJ0aWNhbCIsImZvbnRIZWlnaHQiLCJmb250QXNjZW50IiwiYXNjZW50IiwiZGVzY2VudCIsInRlc3RTcGFuIiwiaXdpZHRoIiwicmVsYXRpdmVPZmZzZXQiLCJjYWxjVmlld3BvcnQiLCJvZmZzZXRYIiwiZ2V0QW5ub3RhdGlvbnMiLCJjYW52YXNDb250ZXh0Iiwib25Db250aW51ZSIsInByZXZSZXN1bHRzIiwibmF2aWdhdGUiLCJkb1F1ZXJ5IiwicXVlcnlTdGFtcCIsImNyb3NzT3JpZ2luIiwiaW1hZ2VFcnJvciIsImltZyIsInRpbGVzSG9yaXoiLCJ0aWxlc1ZlcnQiLCJudW1UaWxlcyIsInRpbGVEaXNwRHVyYXRpb24iLCJ0aWxlc0hvcml6b250YWwiLCJ0aWxlc1ZlcnRpY2FsIiwibnVtYmVyT2ZUaWxlcyIsInRpbGVEaXNwbGF5RHVyYXRpb24iLCJjdXJyZW50RGlzcGxheVRpbWUiLCJjdXJyZW50VGlsZSIsIm1pbGxpU2VjIiwiY3VycmVudENvbHVtbiIsImN1cnJlbnRSb3ciLCJUaHJlZU1vdXNlRXZlbnRDb252ZXJ0ZXIiLCJUaHJlZUV2ZW50Q29udmVydGVyIiwiVGhyZWVUb3VjaEV2ZW50Q29udmVydGVyIiwibGFzdFRvdWNoZXMiLCJUb3VjaEV2ZW50Q29udmVydGVyIiwidGh1bWJuYWlsc0NsYiIsInF1ZXVlIiwiaGVhZGluZyIsInRodW1ibmFpbCIsImRhdGFUaHVtYm5haWwiLCJzZXRMb2FkUXVldWUiLCJzZXRJbWFnZSIsImdldEFjdGl2ZSIsInNjcm9sbFRvcCIsImJ1aWx0IiwiVG91Y2hDb252ZXJ0ZXIiLCJzaG93TWVzc2FnZSIsInRleHQiLCJjbGFzc1Byb3BlcnR5IiwiYXR0cmlidXRlUHJvcGVydHkiLCJhdHRyaWJ1dGVOYW1lIiwicmVtb3ZlQXR0ciIsImhhbmRsZUxpbmtFdmVudCIsImhhbmRsZUlucHV0RXZlbnQiLCJoYW5kbGVGb3JtRXZlbnQiLCJnZXRUaW1lIiwicGVuZGluZyIsImxvYWRGaWxlcyIsImZpbGVzIiwidGFza3MiLCJnZXRSb290VXJsIiwiZ2V0Q3VycmVudFVybCIsImxhc3RJbmRleE9mIiwidXJsUmVzb2x2ZXIiLCJwYXJ0cyIsInBhcnQiLCJvYmpUb0F0dHJzU3RyIiwiY2hlY2tJZnJhbWVTaXplIiwib25SZXNpemUiLCJzMCIsInMxIiwiZmlyZUxpbmtzT25Mb2FkRXZlbnQiLCJsaW5rTG9hZGVkIiwiakxpbmsiLCJqTGlua3MiLCJpc0lPUyIsIk1TU3RyZWFtIiwiaXNTYWZhcmkiLCJpbml0VXJsIiwic3R5bGVEYXRhIiwidGVtcGxhdGVOYW1lIiwidGV4dENzcyIsInIxIiwiSlNPTiIsInBhcnNlIiwibGlua0NvbnRyb2xzIiwid2lkZ2V0Q29udHJvbHMiLCJpbnB1dENvbnRyb2xzIiwiZm9ybUNvbnRyb2xzIiwidGV4dENvbnRyb2xzIiwic3RhdGVTZXR0ZXJzIiwic2V0dGVyIiwic2V0TGlua0NvbnRyb2xTdGF0ZSIsInNldFdpZGdldENvbnRyb2xTdGF0ZSIsInNldElucHV0Q29udHJvbFN0YXRlIiwic2V0VGV4dENvbnRyb2xTdGF0ZSIsInN0b3AiLCJnZXRTdHlsZURhdGEiLCJzZXRDb250cm9sU3RhdGUiLCJzdGF0ZUhhbmRsZXJzIiwic3QiLCJsaW5rU3RhdGVIYW5kbGVycyIsIndpZGdldFN0YXRlSGFuZGxlcnMiLCJpbnB1dFN0YXRlSGFuZGxlcnMiLCJ0ZXh0U3RhdGVIYW5kbGVycyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInVzZUhlbHBlcnMiLCJjaGVja1VwZGF0ZUZsYWciLCJyZW5kZXJDYWxsYmFja3MiLCJkaWFnIiwiZ2V0RGlhZyIsImNsb2NrIiwiQ2xvY2siLCJSYXljYXN0ZXIiLCJTY2VuZSIsImNzc1NjZW5lIiwicmVuZGVyZXIiLCJXZWJHTFJlbmRlcmVyIiwiYWxwaGEiLCJwcmVjaXNpb24iLCJnZXRQcmVjaXNpb24iLCJhbnRpYWxpYXMiLCJzaGFkb3dNYXAiLCJQQ0ZTb2Z0U2hhZG93TWFwIiwic2V0UGl4ZWxSYXRpbyIsImNzc1JlbmRlcmVyIiwiVGV4dHVyZUxvYWRlciIsImFtYmllbnRMaWdodCIsIkFtYmllbnRMaWdodCIsImxpZ2h0IiwiRGlyZWN0aW9uYWxMaWdodCIsInNoYWRvdyIsImZhciIsIm1hcFNpemUiLCJTaGFkb3dNYXRlcmlhbCIsInRtcFZlY3RvciIsIkF4aXNIZWxwZXIiLCJvbldpbmRvd1Jlc2l6ZSIsImFuaW1hdGUiLCJmaWx0ZXJEYXRhIiwidHlwZXMiLCJjb250YWlucyIsInNjcmVlbiIsInNldEV4dHJhTGlnaHRpbmciLCJpbnRlbnNpdHkiLCJ1cGRhdGVDYW1lcmEiLCJhc3BlY3QiLCJ1cGRhdGVSZW5kZXJlciIsImxhc3RSZXNpemUiLCJyZXNpemVTdGFtcCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImRlbHRhVGltZSIsImdldERlbHRhIiwiZ2V0UGl4ZWwiLCJyZWFkUGl4ZWxzIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJvbllUUmVhZHkiLCJzZXRDb25maWciLCJZVENvbmZpZyIsImN1cnJlbnRTY3JpcHQiLCJub25jZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaW5zZXJ0QmVmb3JlIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLG1EQUEyQyxjQUFjOztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1DQUEyQiwwQkFBMEIsRUFBRTtBQUN2RCx5Q0FBaUMsZUFBZTtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4REFBc0QsK0RBQStEOztBQUVySDtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7O0FDaEVBLElBQU1BLEtBQUtDLEtBQUEsR0FBb0JDLE9BQU9DLE1BQTNCLEdBQW1DQyxRQUFRLFFBQVIsQ0FBOUM7QUFBQSxJQUNNQyxlQUFlSixLQUFBLEdBQXlCQyxPQUFP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QWlCLG9CQUFvQixPQUFPLDJCQUEyQixnQkFBZ0IsZ0JBQWdCLGNBQWMsZ0JBQWdCLG9CQUFvQixjQUFjLGtEQUFrRCxxQ0FBcUMsd0JBQXdCLGNBQWMsaUJBQWlCLHNDQUFzQyxTQUFTIiwiZmlsZSI6ImpzL2Rpc3QvM2RmbGlwYm9vay5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbiBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNzYpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDhmNjc1OWE5ZDEzOTA5NzJkYmM1IiwiY29uc3QgXyQgPSBHTE9CQUxfTElCUy5qUXVlcnk/IHdpbmRvdy5qUXVlcnk6IHJlcXVpcmUoJ2pxdWVyeScpLFxyXG4gICAgICBfaHRtbDJjYW52YXMgPSBHTE9CQUxfTElCUy5odG1sMmNhbnZhcz8gd2luZG93Lmh0bWwyY2FudmFzOiByZXF1aXJlKCdodG1sMmNhbnZhcycpLFxyXG4gICAgICBfVEhSRUUgPSBHTE9CQUxfTElCUy5USFJFRT8gd2luZG93LlRIUkVFOiByZXF1aXJlKCd0aHJlZScpLFxyXG4gICAgICBfUmVhY3QgPSBHTE9CQUxfTElCUy5SZWFjdD8gd2luZG93LlJlYWN0OiByZXF1aXJlKCdyZWFjdCcpLFxyXG4gICAgICBfUmVhY3RET00gPSBHTE9CQUxfTElCUy5SZWFjdD8gd2luZG93LlJlYWN0RE9NOiByZXF1aXJlKCdyZWFjdC1kb20nKSxcclxuICAgICAgX1BERkpTID0gR0xPQkFMX0xJQlMuUERGSlM/IHdpbmRvdy5wZGZqc0xpYjogcmVxdWlyZSgncGRmanMnKSxcclxuICAgICAgX3RyID0gKHMpPT4gKHdpbmRvdy5pYmVyZXphbnNreSB8fCB7fSkudHIgJiYgd2luZG93LmliZXJlemFuc2t5LnRyKHMpIHx8IHM7XHJcblxyXG5leHBvcnQge1xyXG4gIF8kIGFzICQsXHJcbiAgX2h0bWwyY2FudmFzIGFzIGh0bWwyY2FudmFzLFxyXG4gIF9USFJFRSBhcyBUSFJFRSxcclxuICBfUmVhY3QgYXMgUmVhY3QsXHJcbiAgX1JlYWN0RE9NIGFzIFJlYWN0RE9NLFxyXG4gIF9QREZKUyBhcyBQREZKUyxcclxuICBfdHIgYXMgdHJcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2xpYnMuanMiLCJjb25zdCBfJCA9IEdMT0JBTF9MSUJTLmpRdWVyeT8gd2luZG93LmpRdWVyeTogcmVxdWlyZSgnanF1ZXJ5JyksXHJcbiAgICAgIF9odG1sMmNhbnZhcyA9IEdMT0JBTF9MSUJTLmh0bWwyY2FudmFzPyB3aW5kb3cuaHRtbDJjYW52YXM6IHJlcXVpcmUoJ2h0bWwyY2FudmFzJyksXHJcbiAgICAgIF9USFJFRSA9IEdMT0JBTF9MSUJTLlRIUkVFPyB3aW5kb3cuVEhSRUU6IHJlcXVpcmUoJ3RocmVlJyksXHJcbiAgICAgIF9QREZKUyA9IEdMT0JBTF9MSUJTLlBERkpTPyB3aW5kb3cuUERGSlM6IHJlcXVpcmUoJ3BkZmpzJyksXHJcbiAgICAgIF90ciA9IChzKT0+ICh3aW5kb3cuaWJlcmV6YW5za3kgfHwge30pLnRyICYmIHdpbmRvdy5pYmVyZXphbnNreS50cihzKSB8fCBzO1xyXG5cclxuaWYod2luZG93LkZCM0RfTE9DQUxFKSB7XHJcbiAgd2luZG93LmliZXJlemFuc2t5ID0ge1xyXG4gICAgLi4ud2luZG93LmliZXJlemFuc2t5LFxyXG4gICAgdHI6IChzKT0+IChGQjNEX0xPQ0FMRS5kaWN0aW9uYXJ5IHx8IHt9KVtzXSB8fCBzXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IHtcclxuICBfJCBhcyAkLFxyXG4gIF9odG1sMmNhbnZhcyBhcyBodG1sMmNhbnZhcyxcclxuICBfVEhSRUUgYXMgVEhSRUUsXHJcbiAgX1BERkpTIGFzIFBERkpTLFxyXG4gIF90ciBhcyB0clxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9saWJzLmpzIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFzZU1hdGhVdGlscyB7XHJcbiAgc3RhdGljIHN1bSA9IFtCYXNlTWF0aFV0aWxzLnN1bTEsIEJhc2VNYXRoVXRpbHMuc3VtMiwgQmFzZU1hdGhVdGlscy5zdW0zLCBCYXNlTWF0aFV0aWxzLnN1bTRdO1xyXG4gIHN0YXRpYyBlcHMgPSAxZS00O1xyXG5cclxuICBzdGF0aWMgc3VtMShrYSxhLGtiLGIpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGthKmFbMF0ra2IqYlswXVxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzdW0yKGthLGEsa2IsYikge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAga2EqYVswXStrYipiWzBdLFxyXG4gICAgICBrYSphWzFdK2tiKmJbMV1cclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc3VtMyhrYSxhLGtiLGIpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGthKmFbMF0ra2IqYlswXSxcclxuICAgICAga2EqYVsxXStrYipiWzFdLFxyXG4gICAgICBrYSphWzJdK2tiKmJbMl1cclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc3VtNChrYSxhLGtiLGIpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGthKmFbMF0ra2IqYlswXSxcclxuICAgICAga2EqYVsxXStrYipiWzFdLFxyXG4gICAgICBrYSphWzJdK2tiKmJbMl0sXHJcbiAgICAgIGthKmFbM10ra2IqYlszXVxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyByazQoZHksIHQsIGR0LCB5LCBzdW09QmFzZU1hdGhVdGlscy5zdW1beS5sZW5ndGgtMV0pIHtcclxuICAgIGNvbnN0IGsxPWR5KHQseSksXHJcbiAgICAgICAgICBrMj1keSh0K2R0LzIsc3VtKDEseSxkdC8yLGsxKSksXHJcbiAgICAgICAgICBrMz1keSh0K2R0LzIsc3VtKDEseSxkdC8yLGsyKSksXHJcbiAgICAgICAgICBrND1keSh0K2R0LHN1bSgxLHksZHQsazMpKTtcclxuICAgIHJldHVybiBzdW0oMSx5LGR0LzYsc3VtKDEsc3VtKDEsazEsMixrMiksMSxzdW0oMixrMywxLGs0KSkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGV4dHJhcG9sYXRlTGluZWFyKHgseSx4aSkge1xyXG4gICAgcmV0dXJuIHlbMF0rKHlbMV0teVswXSkvKHhbMV0teFswXSkqKHhpLXhbMF0pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGludGVycG9sYXRlTGluZWFyKHgseSx4aSkge1xyXG4gICAgbGV0IHlpO1xyXG4gICAgaWYoeFswXT54WzFdKSB7XHJcbiAgICAgIHg9eC5yZXZlcnNlKCk7XHJcbiAgICAgIHk9eS5yZXZlcnNlKCk7XHJcbiAgICB9XHJcbiAgICBpZih4aTx4WzBdKSB7XHJcbiAgICAgIHlpPXlbMF07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHhpPnhbMV0pIHtcclxuICAgICAgeWk9eVsxXTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB5aT1CYXNlTWF0aFV0aWxzLmV4dHJhcG9sYXRlTGluZWFyKHgseSx4aSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geWk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2FsY1NjYWxlKHNyY1csIHNyY0gsIGRzdFcsIGRzdEgpIHtcclxuICAgIHJldHVybiBkc3RXL3NyY1c7IC8vIE1hdGgubWluKGRzdFcvc3JjVywgZHN0SC9zcmNIKVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIG11bE0oYSwgYikge1xyXG4gICAgY29uc3Qgcj1bXTtcclxuICAgIGZvcihsZXQgaT0wO2k8YS5sZW5ndGg7KytpKSB7XHJcbiAgICAgIHIucHVzaChbXSk7XHJcbiAgICAgIGZvcihsZXQgaj0wO2o8YlswXS5sZW5ndGg7KytqKSB7XHJcbiAgICAgICAgcltpXVtqXSA9IDA7XHJcbiAgICAgICAgZm9yKGxldCBrPTA7azxiLmxlbmd0aDsrK2spIHtcclxuICAgICAgICAgIHJbaV1bal0rPWFbaV1ba10qYltrXVtqXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHRyYW5zTShtKSB7XHJcbiAgICBjb25zdCByPVtdO1xyXG4gICAgZm9yKGxldCBpPTA7aTxtLmxlbmd0aDsrK2kpIHtcclxuICAgICAgZm9yKGxldCBqPTA7ajxtWzBdLmxlbmd0aDsrK2opIHtcclxuICAgICAgICBpZighcltqXSkge1xyXG4gICAgICAgICAgcltqXT1bXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcltqXVtpXT1tW2ldW2pdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtYXQoZGF0YSkge1xyXG4gICAgbGV0IHM9MDtcclxuICAgIGZvcihsZXQgeCBvZiBkYXRhKSB7XHJcbiAgICAgIHMrPXg7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcy9kYXRhLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkaXNwKGRhdGEpIHtcclxuICAgIGNvbnN0IE09QmFzZU1hdGhVdGlscy5tYXQoZGF0YSk7XHJcbiAgICBsZXQgcz0wO1xyXG4gICAgZm9yKGxldCB4IG9mIGRhdGEpIHtcclxuICAgICAgcys9KHgtTSkqKHgtTSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcy9kYXRhLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBwcmVkaWN0MShkYXRhLCBudW0pIHtcclxuICAgIGNvbnN0IHI9W10sIGw9ZGF0YS5sZW5ndGgsIEQ9QmFzZU1hdGhVdGlscy5kaXNwKGRhdGEpO1xyXG4gICAgaWYoRDxsICYmIGw+MSkge1xyXG4gICAgICBjb25zdCBhbT1bXSwgYm09W107XHJcbiAgICAgIGZvcihsZXQgaT0wO2k8bDsrK2kpIHtcclxuICAgICAgICBhbS5wdXNoKFtpLDFdKTtcclxuICAgICAgICBibS5wdXNoKFtkYXRhW2ldXSk7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgdGE9QmFzZU1hdGhVdGlscy50cmFuc00oYW0pLCBhPUJhc2VNYXRoVXRpbHMubXVsTSh0YSxhbSksIGI9QmFzZU1hdGhVdGlscy5tdWxNKHRhLGJtKSxcclxuICAgICAgZD0oYVswXVswXSphWzFdWzFdLWFbMV1bMF0qYVswXVsxXSksXHJcbiAgICAgIHA9W1xyXG4gICAgICAgIC0oYVswXVsxXSpiWzFdWzBdLWJbMF1bMF0qYVsxXVsxXSkvZCxcclxuICAgICAgICAoYVswXVswXSpiWzFdWzBdLWFbMV1bMF0qYlswXVswXSkvZFxyXG4gICAgICBdO1xyXG4gICAgICBmb3IobGV0IGk9MDtpPG51bTsrK2kpIHtcclxuICAgICAgICBjb25zdCB2ID0gTWF0aC5yb3VuZChwWzBdKihpK2wpK3BbMV0pO1xyXG4gICAgICAgIGlmKHIuaW5kZXhPZih2KT09PS0xKSB7XHJcbiAgICAgICAgICByLnB1c2godik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBwcmVkaWN0KGRhdGEsIG51bSkge1xyXG4gICAgY29uc3Qgcj1bXSwgbD1kYXRhLmxlbmd0aDtcclxuICAgIGxldCBzZ25zPTA7XHJcbiAgICBmb3IobGV0IGk9MDtpPGwtMTsrK2kpIHtcclxuICAgICAgc2ducys9TWF0aC5zaWduKGRhdGFbaSsxXS1kYXRhW2ldKTtcclxuICAgIH1cclxuICAgIGlmKE1hdGguYWJzKHNnbnMpPD0obC0xKSUyKSB7XHJcbiAgICAgIHNnbnMgPSAtMTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBzZ25zID0gTWF0aC5zaWduKHNnbnMpO1xyXG4gICAgfVxyXG4gICAgZm9yKGxldCBpPTAsIGN1cj1kYXRhW2wtMV07IGk8bnVtICYmIGN1cj4wOyArK2kpIHtcclxuICAgICAgY3VyKz1zZ25zO1xyXG4gICAgICByLnB1c2goY3VyKTtcclxuICAgIH1cclxuICAgIHJldHVybiByO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldFVuaXF1ZSgpIHtcclxuICAgIHJldHVybiBNYXRoLmNlaWwoMWU5Kk1hdGgucmFuZG9tKCkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNldFNwbGluZVBvaW50cyhzcGxpbmUsIHBzKSB7XHJcbiAgICBpZihzcGxpbmUucG9pbnRzLmxlbmd0aCE9PXBzLngubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnNvbGUud2Fybignc2V0U3BsaW5lUG9pbnRzOiBiYWQgcG9pbnRzJyk7XHJcbiAgICB9XHJcbiAgICBmb3IobGV0IGk9MDsgaTxzcGxpbmUucG9pbnRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIHNwbGluZS5wb2ludHNbaV0uc2V0KHBzLnhbaV0sIHBzLnlbaV0sIHBzLno/IHBzLnpbaV06IDApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1hcGwyTChscywgbGVuLCBuLCBmKSB7XHJcbiAgICBjb25zdCBkTCA9IGxlbi8obi0xKTtcclxuICAgIGxldCBMPTA7XHJcbiAgICBmb3IobGV0IGk9MCwgZD1sc1swXTsgaTxscy5sZW5ndGgtMSAmJiBMPGxlbiswLjEqZEw7ICsraSwgZCs9bHNbaV0pIHtcclxuICAgICAgaWYoTWF0aC5hYnMoTC1kKTxNYXRoLmFicyhMLWQtbHNbaSsxXSkpIHtcclxuICAgICAgICBmKGksIEwpO1xyXG4gICAgICAgIEwrPWRMO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZihMPGxlbiswLjEqZEwpIHtcclxuICAgICAgY29uc29sZS53YXJuKCdtYXBsMkw6IGxzIGlzIG5vdCBlbm91Z2h0Jyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZGV0MihhLGIsYyxkKSB7XHJcbiAgICByZXR1cm4gYSpkLWIqYztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzb2x2ZTJMaW4oYTEsYjEsYTIsYjIpIHtcclxuICAgIGxldCByZXM7XHJcbiAgICBjb25zdCBkPUJhc2VNYXRoVXRpbHMuZGV0MihhMVswXSxhMVsxXSxhMlswXSxhMlsxXSk7XHJcbiAgICBpZihNYXRoLmFicyhkKT5CYXNlTWF0aFV0aWxzLmVwcykge1xyXG4gICAgICBjb25zdCBkeD1CYXNlTWF0aFV0aWxzLmRldDIoYjEsYTFbMV0sYjIsYTJbMV0pLCBkeT1CYXNlTWF0aFV0aWxzLmRldDIoYTFbMF0sYjEsYTJbMF0sYjIpO1xyXG4gICAgICByZXMgPSB7XHJcbiAgICAgICAgeDogZHgvZCxcclxuICAgICAgICB5OiBkeS9kXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGlzSW5zaWRlUG9seShwcywgcCkge1xyXG4gICAgbGV0IGRvbmUgPSBmYWxzZSwgY3Q7XHJcbiAgICBmb3IobGV0IGk9MDsgaTxwcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICBpZihCYXNlTWF0aFV0aWxzLnYyZGlzdChwLCBwc1tpXSk8QmFzZU1hdGhVdGlscy5lcHMpIHtcclxuICAgICAgICBjdD0xO1xyXG4gICAgICAgIGRvbmUgPSB0cnVlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB3aGlsZSghZG9uZSkge1xyXG4gICAgICBkb25lID0gdHJ1ZTtcclxuICAgICAgY3QgPSAwO1xyXG4gICAgICBsZXQgbnAgPSB7eDogcC54K01hdGgucmFuZG9tKCktMC41LCB5OiBwLnkrTWF0aC5yYW5kb20oKS0wLjV9LCBybiA9IHt4OiBucC54LXAueCwgeTogbnAueS1wLnl9LCBhMT1bcm4ueSwgLXJuLnhdLCBiMT1wLngqcm4ueS1wLnkqcm4ueDtcclxuICAgICAgZm9yKGxldCBpPTA7IGk8cHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBjb25zdCBwMD1wc1tpXSwgcDE9cHNbKGkrMSklcHMubGVuZ3RoXSwgbiA9IHt4OiBwMS54LXAwLngsIHk6IHAxLnktcDAueX0sIGEyPVtuLnksIC1uLnhdLCBiMj1wMC54Km4ueS1wMC55Km4ueCxcclxuICAgICAgICAgIGlwID0gQmFzZU1hdGhVdGlscy5zb2x2ZTJMaW4oYTEsYjEsYTIsYjIpO1xyXG4gICAgICAgIGlmKGlwKSB7XHJcbiAgICAgICAgICBpZihCYXNlTWF0aFV0aWxzLnYyZGlzdChpcCwgcDApPEJhc2VNYXRoVXRpbHMuZXBzIHx8IEJhc2VNYXRoVXRpbHMudjJkaXN0KGlwLCBwMSk8QmFzZU1hdGhVdGlscy5lcHMpIHtcclxuICAgICAgICAgICAgZG9uZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYoaXAueD5NYXRoLm1pbihwMC54LHAxLngpLUJhc2VNYXRoVXRpbHMuZXBzJiZpcC54PE1hdGgubWF4KHAwLngscDEueCkrQmFzZU1hdGhVdGlscy5lcHMgJiZcclxuICAgICAgICAgICAgICAgICAgaXAueT5NYXRoLm1pbihwMC55LHAxLnkpLUJhc2VNYXRoVXRpbHMuZXBzJiZpcC55PE1hdGgubWF4KHAwLnkscDEueSkrQmFzZU1hdGhVdGlscy5lcHMpIHtcclxuICAgICAgICAgICAgaWYoQmFzZU1hdGhVdGlscy52MmRpc3QoaXAsIHApPEJhc2VNYXRoVXRpbHMuZXBzKSB7XHJcbiAgICAgICAgICAgICAgY3Q9MTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICBjb25zdCB0bj17eDogaXAueC1wLngsIHk6IGlwLnktcC55fTtcclxuICAgICAgICAgICAgICBjdCArPSB0bi54KnJuLngrdG4ueSpybi55PjA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjdCUyO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGlzSW5zaWRlQ29udlBvbHkocHMsIHApIHtcclxuICAgIGxldCBzZyA9IFswLCAwXTtcclxuICAgIGZvcihsZXQgaT0wOyBpPHBzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGNvbnN0IHAwPXBzW2ldLCBwMT1wc1soaSsxKSVwcy5sZW5ndGhdLCBhPXt4OiBwMC54LXAueCwgeTogcDAueS1wLnl9LCBiPXt4OiBwMS54LXAueCwgeTogcDEueS1wLnl9O1xyXG4gICAgICArK3NnWyhhLngqYi55LWEueSpiLng8MCkrMF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gfnNnLmluZGV4T2YocHMubGVuZ3RoKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB2Mmxlbih2Mikge1xyXG4gICAgcmV0dXJuIE1hdGguc3FydCh2Mi54KnYyLngrdjIueSp2Mi55KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB2MmRpc3QodjIxLCB2MjIpIHtcclxuICAgIHJldHVybiBCYXNlTWF0aFV0aWxzLnYybGVuKHtcclxuICAgICAgeDogdjIyLngtdjIxLngsXHJcbiAgICAgIHk6IHYyMi55LXYyMS55XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjb21wdXRlU3F1YXJlKHBzKSB7XHJcbiAgICBjb25zdCBhID0gW107XHJcbiAgICBsZXQgcCA9IDA7XHJcbiAgICBmb3IobGV0IGk9MDsgaTxwcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICBhLnB1c2goQmFzZU1hdGhVdGlscy52MmRpc3QocHNbaV0sIHBzWyhpKzEpJXBzLmxlbmd0aF0pKTtcclxuICAgICAgcCArPSAwLjUqYVtpXTtcclxuICAgIH1cclxuICAgIHJldHVybiBNYXRoLnNxcnQocCoocC1hWzBdKSoocC1hWzFdKSoocC1hWzJdKSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY29tcHV0ZUludGVycENvZWZzKHRyaSwgcCkge1xyXG4gICAgY29uc3QgcyA9IEJhc2VNYXRoVXRpbHMuY29tcHV0ZVNxdWFyZSh0cmkpLCBjb2Vmcz1bXSwgbCA9IHRyaS5sZW5ndGg7XHJcbiAgICBmb3IobGV0IGk9MDsgaTxsOyArK2kpIHtcclxuICAgICAgY29lZnNbaV0gPSBCYXNlTWF0aFV0aWxzLmNvbXB1dGVTcXVhcmUoW3AsIHRyaVsoaSsxKSVsXSwgdHJpWyhpKzIpJWxdXSkvcztcclxuICAgIH1cclxuICAgIHJldHVybiBjb2VmcztcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0Jhc2VNYXRoVXRpbHMuanMiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVdGlscyB7XHJcblxyXG4gIHN0YXRpYyBNT0JJTEVfRElBRyA9IDExO1xyXG5cclxuICBzdGF0aWMgbm9ybWFsaXplVXJsKHVybCkge1xyXG4gICAgZnVuY3Rpb24gc3BsaXQocykge1xyXG4gICAgICByZXR1cm4gcy5yZXBsYWNlKC9cXFxcL2csICcvJykuc3BsaXQoJy8nKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGJhc2UgPSBzcGxpdCh3aW5kb3cubG9jYXRpb24uaHJlZik7XHJcbiAgICB1cmwgPSBzcGxpdCh1cmwpO1xyXG4gICAgaWYoYmFzZVsyXT09PXVybFsyXSkge1xyXG4gICAgICB1cmxbMF0gPSBiYXNlWzBdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVybC5qb2luKCcvJyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgX2VzY2FwZUhUTUxjaGFycyA9IHtcclxuICAgICcmJzogJyZhbXA7JyxcclxuICAgICc8JzogJyZsdDsnLFxyXG4gICAgJz4nOiAnJmd0OydcclxuICB9O1xyXG4gIHN0YXRpYyBfZXNjYXBlSFRNTGNsYihjKSB7XHJcbiAgICByZXR1cm4gVXRpbHMuX2VzY2FwZUhUTUxjaGFyc1tjXSB8fCBjO1xyXG4gIH1cclxuICBzdGF0aWMgZXNjYXBlSFRNTChzKSB7XHJcbiAgICAgIHJldHVybiBzLnJlcGxhY2UoL1smPD5dL2csIFV0aWxzLl9lc2NhcGVIVE1MY2xiKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBleHRlbmRzKGRlciwgYmFzZSkge1xyXG4gICAgZm9yKGxldCBuYW1lIGluIGJhc2UpIHtcclxuICAgICAgaWYoIWRlci5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xyXG4gICAgICAgIGRlcltuYW1lXSA9IGJhc2VbbmFtZV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBkZWZhdWx0Q21wKGEsIGIpIHtcclxuICAgIHJldHVybiBhLWI7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbG93ZXJCb3VuZChhLCB4LCBjbXApIHtcclxuICAgIGNtcCA9IGNtcCB8fCBVdGlscy5kZWZhdWx0Q21wO1xyXG4gICAgbGV0IGwgPSAwLCBoID0gYS5sZW5ndGgtMTtcclxuICAgIHdoaWxlKGgtbD4xKSB7XHJcbiAgICAgIGxldCBtaWQgPSBNYXRoLmZsb29yKChsICsgaCkgLyAyKTtcclxuICAgICAgaWYoY21wKHgsIGFbbWlkXSk8MCkge1xyXG4gICAgICAgIGggPSBtaWQ7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgbCA9IG1pZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNtcCh4LCBhW2hdKT49MD8gaDogbDtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1V0aWxzLmpzIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JhcGhVdGlscyB7XHJcblxyXG4gIHN0YXRpYyBjcmVhdGVDYW52YXMod2lkdGgsIGhlaWdodCkge1xyXG4gICAgY29uc3QgYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG4gICAgaWYod2lkdGgpIHtcclxuICAgICAgYy53aWR0aCA9IHdpZHRoO1xyXG4gICAgfVxyXG4gICAgaWYoaGVpZ2h0KSB7XHJcbiAgICAgIGMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGM7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZXh0cmFwb2xhdGVMaW5lYXIoeCx5LHhpKSB7XHJcbiAgICByZXR1cm4geVswXSsoeVsxXS15WzBdKS8oeFsxXS14WzBdKSooeGkteFswXSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaW50ZXJwb2xhdGUwMSh5MSx5Mix0KSB7XHJcbiAgICByZXR1cm4gR3JhcGhVdGlscy5leHRyYXBvbGF0ZUxpbmVhcihbMCwxXSxbeTEseTJdLHQpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldENvbG9yQnl0ZXMoY29sb3IpIHtcclxuICAgIHJldHVybiBbKGNvbG9yPj4xNikmMHhGRiwgKGNvbG9yPj44KSYweEZGLCBjb2xvciYweEZGXTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBpbnZlcnNlQ29sb3IoY29sb3IsIHQ9MSkge1xyXG4gICAgY29uc3QgYnM9R3JhcGhVdGlscy5nZXRDb2xvckJ5dGVzKGNvbG9yKSxcclxuICAgICAgICAgIGlicz1bMHhGRi1ic1swXSwweEZGLWJzWzFdLDB4RkYtYnNbMl1dLFxyXG4gICAgICAgICAgbmJzPVtNYXRoLnJvdW5kKEdyYXBoVXRpbHMuaW50ZXJwb2xhdGUwMShic1swXSxpYnNbMF0sdCkpLE1hdGgucm91bmQoR3JhcGhVdGlscy5pbnRlcnBvbGF0ZTAxKGJzWzFdLGlic1sxXSx0KSksTWF0aC5yb3VuZChHcmFwaFV0aWxzLmludGVycG9sYXRlMDEoYnNbMl0saWJzWzJdLHQpKV07XHJcbiAgICByZXR1cm4gR3JhcGhVdGlscy5ieXRlczJDb2xvcihuYnMpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNvbG9yMlJnYmEoY29sb3IsIGEpIHtcclxuICAgIHJldHVybiBHcmFwaFV0aWxzLmJ5dGVzMlJnYmEoR3JhcGhVdGlscy5nZXRDb2xvckJ5dGVzKGNvbG9yKSwgYSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYnl0ZXMyUmdiYShicywgYSkge1xyXG4gICAgcmV0dXJuICdyZ2JhKCcrYnMuam9pbignLCcpKycsJythKycpJztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBieXRlczJDb2xvcihicykge1xyXG4gICAgcmV0dXJuIGJzWzJdfChic1sxXTw8OCl8KGJzWzBdPDwxNilcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvR3JhcGhVdGlscy5qcyIsImltcG9ydCB7VEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgQmFzZU1hdGhVdGlscyBmcm9tICcuL0Jhc2VNYXRoVXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWF0aFV0aWxzIGV4dGVuZHMgQmFzZU1hdGhVdGlscyB7XHJcbiAgc3RhdGljIHYxID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuXHJcbiAgc3RhdGljIHNwbGl0U3BsaW5lKHNwbGluZSwgTikge1xyXG4gICAgY29uc3QgbyA9IHtsZW46IDAsIGxzOiBbMF19LCBkbD0xL047XHJcbiAgICBmb3IobGV0IGk9MDsgaTw9TjsgKytpKSB7XHJcbiAgICAgIGNvbnN0IHAgPSBzcGxpbmUuZ2V0UG9pbnQoaSpkbCk7XHJcbiAgICAgIGlmKGkpIHtcclxuICAgICAgICBjb25zdCBkID0gTWF0aFV0aWxzLnYxLmRpc3RhbmNlVG8ocCk7XHJcbiAgICAgICAgby5sZW4gKz0gZDtcclxuICAgICAgICBvLmxzLnB1c2goZCk7XHJcbiAgICAgIH1cclxuICAgICAgTWF0aFV0aWxzLnYxLmNvcHkocCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRMaW5lYXJJbmRlY2VzKHNwbGluZSwgbikge1xyXG4gICAgY29uc3QgZGVsID0gNTAwMCwgZERlbCA9IDEvZGVsO1xyXG4gICAgY29uc3QgbHM9WzBdO1xyXG4gICAgbGV0IGwgPSAwO1xyXG4gICAgZm9yKGxldCBpPTA7IGk8PWRlbDsgKytpKSB7XHJcbiAgICAgIGNvbnN0IHAgPSBzcGxpbmUuZ2V0UG9pbnQoaSpkRGVsKTtcclxuICAgICAgaWYoaSkge1xyXG4gICAgICAgIGNvbnN0IGQ9TWF0aFV0aWxzLnYxLmRpc3RhbmNlVG8ocCk7XHJcbiAgICAgICAgbCArPSBkO1xyXG4gICAgICAgIGxzLnB1c2goZCk7XHJcbiAgICAgIH1cclxuICAgICAgTWF0aFV0aWxzLnYxLmNvcHkocCk7XHJcbiAgICB9XHJcbiAgICBscy5wdXNoKDFlNyk7XHJcblxyXG4gICAgY29uc3QgcmVzID0gW10sIGRsID0gbC8obi0xKTtcclxuICAgIGZvcihsZXQgaT0wLCBMPTAsIGQ9bHNbMF07IGk8bHMubGVuZ3RoLTE7ICsraSwgZCs9bHNbaV0pIHtcclxuICAgICAgaWYoTWF0aC5hYnMoTC1kKTxNYXRoLmFicyhMLWQtbHNbaSsxXSkpIHtcclxuICAgICAgICByZXMucHVzaChpKmREZWwpO1xyXG4gICAgICAgIEwrPWRsO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIHN0YXRpYyByZWZpbmVQb2x5KHBvbHksIG1heERsKSB7XHJcbiAgICBjb25zdCByZXMgPSBbXTtcclxuICAgIGZvcihsZXQgaT0wOyBpPHBvbHkubGVuZ3RoOyArK2kpIHtcclxuICAgICAgY29uc3QgcDAgPSBwb2x5W2ldLCBwMSA9IHBvbHlbKGkrMSklcG9seS5sZW5ndGhdLCBsID0gQmFzZU1hdGhVdGlscy52MmRpc3QocDAsIHAxKSwgbiA9IE1hdGguY2VpbChsL21heERsKSwgZGwgPSBsL247XHJcbiAgICAgIHJlcy5wdXNoKHAwKTtcclxuICAgICAgZm9yKGxldCBqPTE7IGo8bjsgKytqKSB7XHJcbiAgICAgICAgcmVzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjIoXHJcbiAgICAgICAgICBwMC54K2oqZGwqKHAxLngtcDAueCkvbCxcclxuICAgICAgICAgIHAwLnkraipkbCoocDEueS1wMC55KS9sXHJcbiAgICAgICAgKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9NYXRoVXRpbHMuanMiLCJpbXBvcnQgR3JhcGhVdGlscyBmcm9tICcuL0dyYXBoVXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW1hZ2VCYXNlIHtcclxuXHJcbiAgc3RhdGljIHJlbmRlckNhbnZhcyA9ICBHcmFwaFV0aWxzLmNyZWF0ZUNhbnZhcygpO1xyXG4gIHN0YXRpYyByZW5kZXJDYW52YXNDdHggPSBJbWFnZUJhc2UucmVuZGVyQ2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGNvbG9yKSB7XHJcbiAgICB0aGlzLnJlbmRlclBhdXNlID0gZmFsc2U7XHJcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgdGhpcy53bmQgPSBjb250ZXh0LnduZDtcclxuICAgIHRoaXMuZG9jID0gY29udGV4dC5kb2M7XHJcbiAgICB0aGlzLmVsZW1lbnQgPSBjb250ZXh0LmVsZW1lbnQgfHwgY29udGV4dC5kb2MuYm9keTtcclxuICAgIHRoaXMuYyA9IGNvbnRleHQucmVuZGVyQ2FudmFzIHx8IEltYWdlQmFzZS5yZW5kZXJDYW52YXM7XHJcbiAgICB0aGlzLmN0eCA9IGNvbnRleHQucmVuZGVyQ2FudmFzQ3R4IHx8IEltYWdlQmFzZS5yZW5kZXJDYW52YXNDdHg7XHJcbiAgICB0aGlzLnJlc1cgPSB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgICB0aGlzLnJlc0ggPSB0aGlzLmhlaWdodCA9IGhlaWdodDtcclxuICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcclxuICB9XHJcblxyXG4gIHNldFJlbmRlckNhbnZhcyhjLCBjdHgpIHtcclxuICAgIHRoaXMuYyA9IGM7XHJcbiAgICB0aGlzLmN0eCA9IGN0eDtcclxuICB9XHJcblxyXG4gIHNldFJlc29sdXRpb24ocmVzKSB7XHJcbiAgICBjb25zdCBrID0gcmVzLndpZHRoL3RoaXMucmVzVztcclxuICAgIHRoaXMucmVzVyA9IHJlcy53aWR0aDtcclxuICAgIHRoaXMucmVzSCA9IGsqdGhpcy5yZXNIOyAvLyByZXMuaGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuXHJcbiAgfVxyXG5cclxuICByZW5kZXJCbGFua1BhZ2UoKSB7XHJcbiAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcclxuICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IEdyYXBoVXRpbHMuY29sb3IyUmdiYSh0aGlzLmNvbG9yLCAxKTtcclxuICAgIHRoaXMuY3R4LnJlY3QoMCwgMCwgdGhpcy5jLndpZHRoLCB0aGlzLmMuaGVpZ2h0KTtcclxuICAgIHRoaXMuY3R4LmZpbGwoKTtcclxuICB9XHJcblxyXG4gIHNldFJlbmRlclBhdXNlKHJlbmRlclBhdXNlKSB7XHJcbiAgICB0aGlzLnJlbmRlclBhdXNlID0gcmVuZGVyUGF1c2U7XHJcbiAgICBpZighcmVuZGVyUGF1c2UgJiYgdGhpcy5jb250aW51ZVJlbmRlcikge1xyXG4gICAgICB0aGlzLmNvbnRpbnVlUmVuZGVyKCk7XHJcbiAgICAgIGRlbGV0ZSB0aGlzLmNvbnRpbnVlUmVuZGVyO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2FuY2VsUmVuZGVyKCkge1xyXG4gICAgaWYodGhpcy5yZW5kZXJUYXNrICYmIHRoaXMucmVuZGVyVGFzay5jYW5jZWwpIHtcclxuICAgICAgdGhpcy5yZW5kZXJUYXNrLmNhbmNlbCgpO1xyXG4gICAgICBkZWxldGUgdGhpcy5yZW5kZXJUYXNrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVySW1hZ2UoaW1hZ2UpIHtcclxuICAgIHRoaXMucHVzaEN0eCgpO1xyXG4gICAgdGhpcy5jdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMuYy53aWR0aCwgdGhpcy5jLmhlaWdodCk7XHJcbiAgICB0aGlzLmN0eC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDApO1xyXG4gICAgdGhpcy5wb3BDdHgoKTtcclxuICB9XHJcblxyXG4gIG5vcm1Ub0NvbnYocCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgeDogcC54KnRoaXMuYy53aWR0aCxcclxuICAgICAgeTogKDEtcC55KSp0aGlzLmMuaGVpZ2h0XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySGl0KHBvbHkpIHtcclxuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xyXG4gICAgY3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwyNTUsMCwwLjQpJztcclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIGxldCBwID0gdGhpcy5ub3JtVG9Db252KHBvbHlbMF0pO1xyXG4gICAgY3R4Lm1vdmVUbyhwLngsIHAueSk7XHJcbiAgICBmb3IobGV0IGk9MTsgaTxwb2x5Lmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIHAgPSB0aGlzLm5vcm1Ub0NvbnYocG9seVtpXSk7XHJcbiAgICAgIGN0eC5saW5lVG8ocC54LCBwLnkpO1xyXG4gICAgfVxyXG4gICAgY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgY3R4LmZpbGwoKTtcclxuICB9XHJcblxyXG4gIHB1c2hDdHgoKSB7XHJcbiAgICBpZihNYXRoLmFicyh0aGlzLnJlc1ctdGhpcy5jLndpZHRoKT49MSkge1xyXG4gICAgICB0aGlzLmMud2lkdGggPSBNYXRoLmNlaWwodGhpcy5yZXNXKTtcclxuICAgIH1cclxuICAgIGlmKE1hdGguYWJzKHRoaXMucmVzSC10aGlzLmMuaGVpZ2h0KT49MSkge1xyXG4gICAgICB0aGlzLmMuaGVpZ2h0ID0gTWF0aC5jZWlsKHRoaXMucmVzSCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmN0eC5zYXZlKCk7XHJcbiAgICB0aGlzLmN0eC5zY2FsZSh0aGlzLmMud2lkdGgvdGhpcy53aWR0aCwgdGhpcy5jLmhlaWdodC90aGlzLmhlaWdodCk7XHJcbiAgICByZXR1cm4gdGhpcy5jdHg7XHJcbiAgfVxyXG5cclxuICBwb3BDdHgoKSB7XHJcbiAgICB0aGlzLmN0eC5yZXN0b3JlKCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJOb3RGb3VuZFBhZ2UoKSB7XHJcbiAgICB0aGlzLnJlbmRlckJsYW5rUGFnZSgpO1xyXG4gIH1cclxuXHJcbiAgZmluaXNoUmVuZGVyKGNhbmNlbGVkID0gZmFsc2UpIHtcclxuICAgIGlmKHRoaXMub25DaGFuZ2UpIHtcclxuICAgICAgdGhpcy5vbkNoYW5nZSh0aGlzLmMsIGNhbmNlbGVkKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZpbmlzaExvYWQoKSB7XHJcbiAgICBpZih0aGlzLm9uTG9hZCkge1xyXG4gICAgICB0aGlzLm9uTG9hZCgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuc3RhcnRSZW5kZXIoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFNpbXVsYXRlZERvYygpIHtcclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9JbWFnZUJhc2UuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRDb252ZXJ0ZXIge1xyXG5cclxuICAvLyB2aXJ0dWFsc1xyXG4gIC8vIGdldE9iamVjdChlLCBkYXRhKTtcclxuICAvLyBnZXRDYWxsYmFjayhvYmplY3QpO1xyXG4gIC8vIHRlc3Qob2JqZWN0MSwgb2JqZWN0MSk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHduZCwgZG9jKSB7XHJcbiAgICB0aGlzLnduZCA9IHduZDtcclxuICAgIHRoaXMuZG9jID0gZG9jO1xyXG4gICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHNldEVuYWJsZSh2bCkge1xyXG4gICAgaWYoIXZsKSB7XHJcbiAgICAgIGlmKHRoaXMubUNhcE9iamVjdCkge1xyXG4gICAgICAgIHRoaXMubm90aWZ5KHRoaXMubUNhcE9iamVjdCwgJC5FdmVudCgnbW91c2V1cCcpLCAnbW91c2V1cCcpO1xyXG4gICAgICAgIHRoaXMubUNhcE9iamVjdCA9IHVuZGVmaW5lZDtcclxuICAgICAgfVxyXG4gICAgICBpZih0aGlzLm1Ib3ZPYmplY3QpIHtcclxuICAgICAgICB0aGlzLm5vdGlmeSh0aGlzLm1Ib3ZPYmplY3QsICQuRXZlbnQoJ21vdXNlb3V0JyksICdtb3VzZW91dCcpO1xyXG4gICAgICAgIHRoaXMubUhvdk9iamVjdCA9IHVuZGVmaW5lZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5lbmFibGVkID0gdmw7XHJcbiAgfVxyXG5cclxuICBnZXRDYWxsYmFjayhvYmplY3QpIHtcclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICBub3RpZnkob2JqZWN0LCBlLCB0eXBlKSB7XHJcbiAgICBjb25zdCBjYWxsYmFjayA9IHRoaXMuZ2V0Q2FsbGJhY2sob2JqZWN0KTtcclxuICAgIGlmKGNhbGxiYWNrKSB7XHJcbiAgICAgIGNvbnN0IHByb3BzID0ge1xyXG4gICAgICAgIC4uLmUsXHJcbiAgICAgICAgdHlwZSxcclxuICAgICAgICB2aWV3OiB0aGlzLnduZFxyXG4gICAgICB9O1xyXG4gICAgICBjb25zdCBqRSA9ICQuRXZlbnQodHlwZSwgcHJvcHMpO1xyXG4gICAgICBjYWxsYmFjayhqRSwgb2JqZWN0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnZlcnQoZSwgZGF0YSkge1xyXG4gICAgaWYoIXRoaXMuZW5hYmxlZCkgcmV0dXJuO1xyXG5cclxuICAgIGlmKHRoaXMuZmlsdGVyKSB7XHJcbiAgICAgIGUgPSB0aGlzLmZpbHRlcih0aGlzLmVsZW1lbnQsIGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG9iamVjdCA9IHRoaXMuZ2V0T2JqZWN0KGUsIGRhdGEpLFxyXG4gICAgICBub3RpZnkgPSB+ZS50eXBlLmluZGV4T2YoJ3RvdWNoJyk/IHRoaXMuY29udmVydFRvdWNoKGUsIGRhdGEsIG9iamVjdCk6IHRoaXMuY29udmVydE1vdXNlKGUsIGRhdGEsIG9iamVjdCk7XHJcbiAgICBpZihub3RpZnkgJiYgb2JqZWN0KSB7XHJcbiAgICAgIHRoaXMubm90aWZ5KG9iamVjdCwgZSwgZS50eXBlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnZlcnRUb3VjaChlLCBkYXRhLCBvYmplY3QpIHtcclxuICAgIGxldCBub3RpZnkgPSB0cnVlO1xyXG4gICAgc3dpdGNoKGUudHlwZSkge1xyXG4gICAgICBjYXNlICd0b3VjaHN0YXJ0Jzoge1xyXG4gICAgICAgIGlmKHRoaXMudENhcE9iamVjdCkge1xyXG4gICAgICAgICAgdGhpcy5ub3RpZnkodGhpcy50Q2FwT2JqZWN0LCBlLCAndG91Y2hlbmQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50Q2FwT2JqZWN0ID0gb2JqZWN0O1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ3RvdWNoZW5kJzoge1xyXG4gICAgICAgIGlmKHRoaXMudENhcE9iamVjdCAmJiAhdGhpcy50ZXN0KHRoaXMudENhcE9iamVjdCwgb2JqZWN0KSkge1xyXG4gICAgICAgICAgdGhpcy5ub3RpZnkodGhpcy50Q2FwT2JqZWN0LCBlLCAndG91Y2hlbmQnKTtcclxuICAgICAgICAgIG5vdGlmeSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKG9iamVjdCAmJiB0aGlzLnRlc3QodGhpcy50Q2FwT2JqZWN0LCBvYmplY3QpKSB7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeShvYmplY3QsIGUsICd0b3VjaHRhcCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnRDYXBPYmplY3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAndG91Y2h0YXAnOiB7XHJcbiAgICAgICAgbm90aWZ5ID0gZmFsc2U7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBub3RpZnk7XHJcbiAgfVxyXG5cclxuICBjb252ZXJ0TW91c2UoZSwgZGF0YSwgb2JqZWN0KSB7XHJcbiAgICBpZihlLm9yaWdpbmFsRXZlbnQgJiYgZS5vcmlnaW5hbEV2ZW50LnNvdXJjZUNhcGFiaWxpdGllcyAmJiBlLm9yaWdpbmFsRXZlbnQuc291cmNlQ2FwYWJpbGl0aWVzLmZpcmVzVG91Y2hFdmVudHMpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgbGV0IG5vdGlmeSA9IHRydWU7XHJcbiAgICBzd2l0Y2goZS50eXBlKSB7XHJcbiAgICAgIGNhc2UgJ21vdXNlZG93bic6IHtcclxuICAgICAgICBpZih0aGlzLm1DYXBPYmplY3QpIHtcclxuICAgICAgICAgIHRoaXMubm90aWZ5KHRoaXMubUNhcE9iamVjdCwgZSwgJ21vdXNldXAnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5tQ2FwT2JqZWN0ID0gb2JqZWN0O1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ21vdXNldXAnOiB7XHJcbiAgICAgICAgaWYodGhpcy5tQ2FwT2JqZWN0ICYmICF0aGlzLnRlc3QodGhpcy5tQ2FwT2JqZWN0LCBvYmplY3QpKSB7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeSh0aGlzLm1DYXBPYmplY3QsIGUsICdtb3VzZXVwJyk7XHJcbiAgICAgICAgICBub3RpZnkgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnY2xpY2snOiB7XHJcbiAgICAgICAgbm90aWZ5ID0gdGhpcy50ZXN0KHRoaXMubUNhcE9iamVjdCwgb2JqZWN0KTtcclxuICAgICAgICB0aGlzLm1DYXBPYmplY3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnbW91c2VlbnRlcic6XHJcbiAgICAgIGNhc2UgJ21vdXNlb3Zlcic6XHJcbiAgICAgIGNhc2UgJ21vdXNlbW92ZSc6IHtcclxuICAgICAgICBpZighdGhpcy50ZXN0KHRoaXMubUhvdk9iamVjdCwgb2JqZWN0KSAmJiB0aGlzLm1Ib3ZPYmplY3QpIHtcclxuICAgICAgICAgIHRoaXMubm90aWZ5KHRoaXMubUhvdk9iamVjdCwgZSwgJ21vdXNlb3V0Jyk7XHJcbiAgICAgICAgICB0aGlzLm1Ib3ZPYmplY3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKCF0aGlzLm1Ib3ZPYmplY3QgJiYgb2JqZWN0KSB7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeShvYmplY3QsIGUsICdtb3VzZW92ZXInKTtcclxuICAgICAgICAgIHRoaXMubUhvdk9iamVjdCA9IG9iamVjdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbm90aWZ5ID0gZS50eXBlID09PSAnbW91c2Vtb3ZlJztcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdtb3VzZWxlYXZlJzpcclxuICAgICAgY2FzZSAnbW91c2VvdXQnOiB7XHJcbiAgICAgICAgaWYodGhpcy5tSG92T2JqZWN0KSB7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeSh0aGlzLm1Ib3ZPYmplY3QsIGUsICdtb3VzZW91dCcpO1xyXG4gICAgICAgICAgdGhpcy5tSG92T2JqZWN0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBub3RpZnkgPSBmYWxzZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vdGlmeTtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0V2ZW50Q29udmVydGVyLmpzIiwiaW1wb3J0IENhY2hlIGZyb20gJy4vQ2FjaGUnO1xyXG5pbXBvcnQgQmxhbmtJbWFnZSBmcm9tICcuL0JsYW5rSW1hZ2UnO1xyXG5pbXBvcnQgU3RhdGljSW1hZ2UgZnJvbSAnLi9TdGF0aWNJbWFnZSc7XHJcbmltcG9ydCBQZGZJbWFnZSBmcm9tICcuL1BkZkltYWdlJztcclxuaW1wb3J0IEludGVyYWN0aXZlSW1hZ2UgZnJvbSAnLi9JbnRlcmFjdGl2ZUltYWdlJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEltYWdlRmFjdG9yeSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNhY2hlKSB7XHJcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgdGhpcy5jYWNoZSA9IGNhY2hlIHx8IG5ldyBDYWNoZSgpO1xyXG4gIH1cclxuXHJcbiAgYnVpbGQoaW5mbywgbj0wLCB3aWR0aFRleGVscz0yMTAsIGhlaWdodFRleGVscz0yOTcsIGNvbG9yPTB4RkZGRkZGLCBpbmplY3Rvcj11bmRlZmluZWQpIHtcclxuICAgIGxldCBpbWFnZTtcclxuICAgIHN3aXRjaChpbmZvLnR5cGUpIHtcclxuICAgICAgY2FzZSAnaHRtbCc6IHtcclxuICAgICAgICBpbWFnZSA9IG5ldyBJbnRlcmFjdGl2ZUltYWdlKHRoaXMuY29udGV4dCwgd2lkdGhUZXhlbHMsIGhlaWdodFRleGVscywgY29sb3IsIGluZm8uc3JjLCB0aGlzLmNhY2hlLCBpbmplY3Rvcik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnaW1hZ2UnOiB7XHJcbiAgICAgICAgaW1hZ2UgPSBuZXcgU3RhdGljSW1hZ2UodGhpcy5jb250ZXh0LCB3aWR0aFRleGVscywgaGVpZ2h0VGV4ZWxzLCBjb2xvciwgaW5mby5zcmMpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ3BkZic6IHtcclxuICAgICAgICBpbWFnZSA9IG5ldyBQZGZJbWFnZSh0aGlzLmNvbnRleHQsIHdpZHRoVGV4ZWxzLCBoZWlnaHRUZXhlbHMsIGNvbG9yLCBpbmZvLnNyYywgbik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnYmxhbmsnOlxyXG4gICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgaW1hZ2UgPSBuZXcgQmxhbmtJbWFnZSh0aGlzLmNvbnRleHQsIHdpZHRoVGV4ZWxzLCBoZWlnaHRUZXhlbHMsIGNvbG9yKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGltYWdlO1xyXG4gIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9JbWFnZUZhY3RvcnkuanMiLCJpbXBvcnQge3Byb3BzIGFzICBib29rUHJvcHN9IGZyb20gJy4uL3Byb3BzL2Jvb2snO1xyXG5pbXBvcnQgQmFzZU1hdGhVdGlscyBmcm9tICdCYXNlTWF0aFV0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb2tQcm9wc0J1aWxkZXIge1xyXG4gIGNvbnN0cnVjdG9yKG9uUmVhZHksIHN0eWxlKSB7XHJcbiAgICB0aGlzLm9uUmVhZHkgPSBvblJlYWR5O1xyXG4gICAgdGhpcy5kZWZhdWx0cyA9IGJvb2tQcm9wcyhzdHlsZSk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG5cclxuICB9XHJcblxyXG4gIGNhbGNTaXplKHdpZHRoLCBoZWlnaHQpIHtcclxuICAgIGNvbnN0IHNjYWxlID0gQmFzZU1hdGhVdGlscy5jYWxjU2NhbGUod2lkdGgsIGhlaWdodCwgdGhpcy5kZWZhdWx0cy53aWR0aCwgdGhpcy5kZWZhdWx0cy5oZWlnaHQpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgd2lkdGg6IHNjYWxlKndpZHRoLFxyXG4gICAgICBoZWlnaHQ6IHNjYWxlKmhlaWdodFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNhbGNUZXhlbHMod2lkdGgsIGhlaWdodCkge1xyXG4gICAgY29uc3Qgc2hlZXQgPSB0aGlzLmRlZmF1bHRzLnNoZWV0LCBzY2FsZSA9IEJhc2VNYXRoVXRpbHMuY2FsY1NjYWxlKHdpZHRoLCBoZWlnaHQsIHNoZWV0LndpZHRoVGV4ZWxzLCBzaGVldC5oZWlnaHRUZXhlbHMpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgd2lkdGhUZXhlbHM6IHNjYWxlKndpZHRoLFxyXG4gICAgICBoZWlnaHRUZXhlbHM6IHNjYWxlKmhlaWdodFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNhbGNQcm9wcyh3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICB0aGlzLnByb3BzID0ge1xyXG4gICAgICAuLi50aGlzLmRlZmF1bHRzLFxyXG4gICAgICBwYWdlczogdGhpcy5wYWdlcyxcclxuICAgICAgLi4udGhpcy5jYWxjU2l6ZSh3aWR0aCwgaGVpZ2h0KSxcclxuICAgICAgc2hlZXQ6IHtcclxuICAgICAgICAuLi50aGlzLmRlZmF1bHRzLnNoZWV0LFxyXG4gICAgICAgIC4uLnRoaXMuY2FsY1RleGVscyh3aWR0aCwgaGVpZ2h0KVxyXG4gICAgICB9LFxyXG4gICAgICBjb3Zlcjoge1xyXG4gICAgICAgIC4uLnRoaXMuZGVmYXVsdHMuY292ZXIsXHJcbiAgICAgIH0sXHJcbiAgICAgIHBhZ2U6IHtcclxuICAgICAgICAuLi50aGlzLmRlZmF1bHRzLnBhZ2UsXHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjYWxjU2hlZXRzKHBhZ2VzKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zaGVldHMgPSBNYXRoLmNlaWwoTWF0aC5tYXgoMCwgcGFnZXMtNCkvMik7XHJcbiAgfVxyXG5cclxuICBnZXRTaGVldHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zaGVldHM7XHJcbiAgfVxyXG5cclxuICBnZXRQcm9wcygpIHtcclxuICAgIHJldHVybiB0aGlzLnByb3BzO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGFnZUNhbGxiYWNrKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuYmluZHMucGFnZUNhbGxiYWNrO1xyXG4gIH1cclxuXHJcbiAgcmVhZHkoKSB7XHJcbiAgICBpZih0aGlzLm9uUmVhZHkpIHtcclxuICAgICAgdGhpcy5vblJlYWR5KHRoaXMuZ2V0UHJvcHMoKSwgdGhpcy5nZXRTaGVldHMoKSwgdGhpcy5nZXRQYWdlQ2FsbGJhY2soKSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvQm9va1Byb3BzQnVpbGRlci5qcyIsImltcG9ydCB7VEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgc2hlZXRCbG9jayBmcm9tICcuLi9tb2RlbHMvc2hlZXRCbG9jayc7XHJcbmltcG9ydCBNYXRoVXRpbHMgZnJvbSAnTWF0aFV0aWxzJztcclxuaW1wb3J0IFRocmVlVXRpbHMgZnJvbSAnVGhyZWVVdGlscyc7XHJcbi8vIGltcG9ydCBUaHJlZU1hcmt1cCBmcm9tICcuL1RocmVlTWFya3VwJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoZWV0QmxvY2sge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2aXN1YWwsIHAsIGZpcnN0LCBsYXN0LCBhbmdsZT0wLCBzdGF0ZT0nY2xvc2VkJywgaGVpZ2h0PTApIHtcclxuICAgIHRoaXMudmlzdWFsID0gdmlzdWFsO1xyXG4gICAgdGhpcy5wID0ge1xyXG4gICAgICAuLi5wLFxyXG4gICAgICBmaXJzdCxcclxuICAgICAgbGFzdFxyXG4gICAgfTtcclxuICAgIGNvbnN0IHByb3BzID0gdGhpcy5nZXRQcm9wcygpO1xyXG5cclxuICAgIGNvbnN0IGxvYWRlZFBvaW50cyA9IHRoaXMubG9hZFBvaW50cygpO1xyXG4gICAgT2JqZWN0LmtleXMobG9hZGVkUG9pbnRzKS5tYXAoKGspPT4ge1xyXG4gICAgICB0aGlzW2tdID0gbG9hZGVkUG9pbnRzW2tdW3Byb3BzLnNoYXBlXSB8fCBsb2FkZWRQb2ludHNba11bMF07XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnBTcGxpbmUgPSBuZXcgVEhSRUUuQ2F0bXVsbFJvbUN1cnZlMyhbXSk7XHJcbiAgICBmb3IobGV0IGk9MDsgaTx0aGlzLmludGVycG9sYXRpb25Qb2ludHMueFswXS5sZW5ndGg7ICsraSkge1xyXG4gICAgXHR0aGlzLnBTcGxpbmUucG9pbnRzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5pU3BsaW5lID0gbmV3IFRIUkVFLkNhdG11bGxSb21DdXJ2ZTMoW10pO1xyXG4gICAgZm9yKGxldCBpPTA7IGk8c2hlZXRCbG9jay5yZXNYOyArK2kpIHtcclxuICAgIFx0dGhpcy5pU3BsaW5lLnBvaW50cy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYVNwbGluZXMgPSBbXTtcclxuXHJcbiAgICAvL3RoaXMudGhyZWUgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuXHJcbiAgICB0aGlzLmdlb21ldHJ5ID0gc2hlZXRCbG9jay5nZW9tZXRyeS5jbG9uZSgpO1xyXG5cclxuICAgIHRoaXMucC5zaWRlRmFjZXMgPSBbe1xyXG4gICAgICAgIGZpcnN0OiAwLFxyXG4gICAgICAgIGxhc3Q6IHNoZWV0QmxvY2suZmFjZXNbMF1cclxuICAgICAgfSwge1xyXG4gICAgICAgIGZpcnN0OiBzaGVldEJsb2NrLmZhY2VzWzBdLFxyXG4gICAgICAgIGxhc3Q6IHNoZWV0QmxvY2suZmFjZXNbMV1cclxuICAgICAgfVxyXG4gICAgXTtcclxuXHJcbiAgICB0aGlzLnNpZGVUZXh0dXJlID0gbmV3IFRIUkVFLlRleHR1cmUoKTtcclxuICAgIHRoaXMuc2lkZVRleHR1cmUud3JhcFQgPSBUSFJFRS5SZXBlYXRXcmFwcGluZztcclxuICAgIHRoaXMuc2lkZVRleHR1cmUucmVwZWF0LnNldCgwLCBsYXN0LWZpcnN0KTtcclxuICAgIHRoaXMuc2lkZVRleHR1cmUuaW1hZ2UgPSBwcm9wcy5zaWRlVGV4dHVyZTtcclxuICAgIHRoaXMuc2lkZVRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuICAgIHRoaXMubWF0ZXJpYWxzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7bWFwOiB0aGlzLnNpZGVUZXh0dXJlfSksXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHttYXA6IHRoaXMuc2lkZVRleHR1cmV9KSxcclxuICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoKSwvL3tvcGFjaXR5OiAwLCB0cmFuc3BhcmVudDogdHJ1ZX1cclxuICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe21hcDogdGhpcy5zaWRlVGV4dHVyZX0pXHJcbiAgICAgICAgICAgICAgICAgIF07XHJcblxyXG4gICAgdGhpcy5wLnNldFRleHR1cmUodGhpcy5tYXRlcmlhbHNbMF0sIDIqZmlyc3QpO1xyXG4gICAgdGhpcy5wLnNldFRleHR1cmUodGhpcy5tYXRlcmlhbHNbMV0sIDIqbGFzdC0xKTtcclxuXHJcbiAgICB0aGlzLm1lc2ggPSBuZXcgVEhSRUUuTWVzaCh0aGlzLmdlb21ldHJ5LCB0aGlzLm1hdGVyaWFscyk7XHJcbiAgICB0aGlzLm1lc2guY2FzdFNoYWRvdyA9IHRydWU7XHJcbiAgICB0aGlzLm1lc2gucmVjZWl2ZVNoYWRvdyA9IHRydWU7XHJcbiAgICAvLyB0aGlzLm1lc2guZnJ1c3R1bUN1bGxlZCA9IHRydWU7XHJcblxyXG4gICAgLy90aGlzLnRocmVlLmFkZCh0aGlzLm1lc2gpO1xyXG4gICAgdGhpcy50aHJlZSA9IHRoaXMubWVzaDtcclxuICAgIHRoaXMudGhyZWUudXNlckRhdGEuc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgdGhpcy5tYXJrZXJzID0gW107XHJcbiAgICBpZih0aGlzLnAubWFya2VyLnVzZSkge1xyXG4gICAgICBjb25zdCBsPXRoaXMuZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoO1xyXG4gICAgICBsZXQgaXM7XHJcbiAgICAgIC8vIGlzID0gWzAsIHNoZWV0QmxvY2sucmVzWC0xLCAoc2hlZXRCbG9jay5yZXNaLTEpKnNoZWV0QmxvY2sucmVzWCwgc2hlZXRCbG9jay5yZXNaKnNoZWV0QmxvY2sucmVzWC0xXTtcclxuICAgICAgaXMgPSBBcnJheS5hcHBseSgwLCBBcnJheShsKSkubWFwKChfLCBpKT0+IGkpO1xyXG5cclxuICAgICAgZm9yKGxldCBpIG9mIGlzKSB7XHJcbiAgICAgICAgY29uc3QgbWFya2VyID0gVGhyZWVVdGlscy5jcmVhdGVNYXJrZXIodGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1tpXSwgaTxsLzI/MHhGRjAwMDA6MHgwMEZGMDAsIHRoaXMucC5tYXJrZXIuc2l6ZSk7XHJcbiAgICAgICAgdGhpcy5tYXJrZXJzLnB1c2goe1xyXG4gICAgICAgICAgbWFya2VyLFxyXG4gICAgICAgICAgdmVydGV4OiBpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50aHJlZS5hZGQobWFya2VyKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY29ybmVyID0ge1xyXG4gICAgICB1c2U6IHRydWUsXHJcbiAgICAgIGhlaWdodDogMCxcclxuICAgICAgbWF4RGlzdGFuY2U6IDAsXHJcbiAgICAgIHBvaW50czogW10sXHJcbiAgICAgIE9aOiBuZXcgVEhSRUUuVmVjdG9yMygwLDAsMSksXHJcbiAgICAgIGF4aXM6IG5ldyBUSFJFRS5WZWN0b3IzKClcclxuICAgIH07XHJcbiAgICB0aGlzLnNldCgwLCAnY2xvc2VkJywgaGVpZ2h0LCBmaXJzdCwgbGFzdCk7IC8vIGNhbGN1bGF0ZSBjb3JuZXIgcG9pbnRzXHJcblxyXG4gICAgdGhpcy5zZXQoYW5nbGUsIHN0YXRlLCBoZWlnaHQsIGZpcnN0LCBsYXN0KTsgLy8gaW5pdCBwb3NpdGlvblxyXG5cclxuICAgIC8vIGlmKCFTaGVldEJsb2NrLm1hcmt1cCkge1xyXG4gICAgLy8gICBTaGVldEJsb2NrLm1hcmt1cD10cnVlO1xyXG4gICAgLy8gICB0aGlzLm1hcmt1cCA9IG5ldyBUaHJlZU1hcmt1cCh0aGlzLCAwLCBbe1xyXG4gICAgLy8gICAgIHg6IDAsXHJcbiAgICAvLyAgICAgeTogMCxcclxuICAgIC8vICAgfSwge1xyXG4gICAgLy8gICAgIHg6IDAuNSxcclxuICAgIC8vICAgICB5OiAxXHJcbiAgICAvLyAgIH0sIHtcclxuICAgIC8vICAgICB4OiAxLFxyXG4gICAgLy8gICAgIHk6IDBcclxuICAgIC8vICAgfV0ubWFwKChwKT0+bmV3IFRIUkVFLlZlY3RvcjIocC54LCBwLnkpKSwge30pO1xyXG4gICAgLy8gfVxyXG5cclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBmb3IobGV0IG0gb2YgdGhpcy5tYXRlcmlhbHMpIHtcclxuICAgICAgaWYobS5tYXApIHtcclxuICAgICAgICBtLm1hcCA9IG51bGw7XHJcbiAgICAgICAgbS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgbS5kaXNwb3NlKCk7XHJcbiAgICB9XHJcbiAgICBkZWxldGUgdGhpcy5tYXRlcmlhbHM7XHJcbiAgICB0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIGdldFNpemUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wLmxhc3QtdGhpcy5wLmZpcnN0O1xyXG4gIH1cclxuXHJcbiAgZ2V0UHJvcHMoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAuLi50aGlzLnAucGFnZSxcclxuICAgICAgd2lkdGg6IHRoaXMucC5wYWdlLndpZHRoLSh0aGlzLnJlZHVjZWRXaWR0aD8gMWUtMyp0aGlzLnAucGFnZS53aWR0aDogMCksXHJcbiAgICAgIHNoZWV0czogdGhpcy5wLnNoZWV0c1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHJlZHVjZVdpZHRoKHJlZHVjZWRXaWR0aCkge1xyXG4gICAgdGhpcy5yZWR1Y2VkV2lkdGggPSByZWR1Y2VkV2lkdGg7XHJcbiAgICB0aGlzLnNldCh0aGlzLmFuZ2xlKTtcclxuICB9XHJcblxyXG4gIGdldFRvcENlcm5lcnMoKSB7XHJcbiAgICBjb25zdCBvZmYgPSAhKHRoaXMuYW5nbGU+TWF0aC5QSS8yKT8gdGhpcy5nZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGgvMjogMDtcclxuICAgIHJldHVybiBbXHJcbiAgICAgICAgdGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1tvZmZdLFxyXG4gICAgICAgIHRoaXMuZ2VvbWV0cnkudmVydGljZXNbc2hlZXRCbG9jay5yZXNYLTErb2ZmXSxcclxuICAgICAgICB0aGlzLmdlb21ldHJ5LnZlcnRpY2VzWyhzaGVldEJsb2NrLnJlc1otMSkqc2hlZXRCbG9jay5yZXNYK29mZl0sXHJcbiAgICAgICAgdGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1tzaGVldEJsb2NrLnJlc1oqc2hlZXRCbG9jay5yZXNYLTErb2ZmXVxyXG4gICAgICBdO1xyXG4gIH1cclxuXHJcbiAgZ2V0VG9wU2l6ZSgpIHtcclxuICAgIGNvbnN0IHZzID0gdGhpcy5nZXRUb3BDZXJuZXJzKCk7XHJcbiAgICBjb25zdCB3MCA9IG5ldyBUSFJFRS5WZWN0b3IzKCksIHcxID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICAgIHcwLmNvcHkodnNbMF0pO1xyXG4gICAgdGhpcy50aHJlZS5sb2NhbFRvV29ybGQodzApO1xyXG4gICAgdzEuY29weSh2c1sxXSk7XHJcbiAgICB0aGlzLnRocmVlLmxvY2FsVG9Xb3JsZCh3MSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB3aWR0aDogTWF0aC5hYnModzEueC13MC54KSxcclxuICAgICAgaGVpZ2h0OiB2c1swXS5kaXN0YW5jZVRvKHZzWzJdKVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGdldFRvcFdvcmxkUm90YXRpb24ocSkge1xyXG4gICAgcS54ID0gLU1hdGguUEkvMjtcclxuICAgIHJldHVybiBxO1xyXG4gIH1cclxuXHJcbiAgZ2V0VG9wV29ybGRQb3NpdGlvbih2KSB7XHJcbiAgICBjb25zdCB2cyA9IHRoaXMuZ2V0VG9wQ2VybmVycygpO1xyXG4gICAgdi5zZXQoMCwgLTEwMCwgMCk7XHJcbiAgICBjb25zdCB3ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICAgIGZvcihsZXQgdmkgb2YgdnMpIHtcclxuICAgICAgdy5jb3B5KHZpKTtcclxuICAgICAgdGhpcy50aHJlZS5sb2NhbFRvV29ybGQodyk7XHJcbiAgICAgIHYueCArPSAwLjI1KncueDtcclxuICAgICAgdi55ID0gTWF0aC5tYXgody55LCB3LnkpO1xyXG4gICAgICB2LnogKz0gMC4yNSp3Lno7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdjtcclxuICB9XHJcblxyXG4gIGdldEludGVycG9sYXRpb25Qb2ludHMoaW5kcywgbW9kKSB7XHJcbiAgICBjb25zdCBwcyA9IHt4OiBbXSwgeTogW119LCBLID0gdGhpcy5nZXRQcm9wcygpLndhdmU7XHJcbiAgICBmb3IobGV0IGkgb2YgaW5kcykge1xyXG4gICAgICBwcy54LnB1c2goWy4uLnRoaXMuaW50ZXJwb2xhdGlvblBvaW50cy54W2ldXSk7XHJcbiAgICAgIHBzLnkucHVzaCh+bW9kLmluZGV4T2YoaSk/IHRoaXMuaW50ZXJwb2xhdGlvblBvaW50cy55W2ldLm1hcCgobik9PiBLKm4pOiBbLi4udGhpcy5pbnRlcnBvbGF0aW9uUG9pbnRzLnlbaV1dKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcztcclxuICB9XHJcblxyXG4gIHNldChhbmdsZSwgc3RhdGU9dGhpcy5zdGF0ZSwgaGVpZ2h0PXRoaXMuY29ybmVyLmhlaWdodCwgZmlyc3Q9dGhpcy5wLmZpcnN0LCBsYXN0PXRoaXMucC5sYXN0LCBmbGlwRGlyZWN0aW9uPSdyaWdodCcpIHtcclxuICAgIGNvbnN0IFBJID0gTWF0aC5QSTtcclxuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgIGxldCBjbG9zZWRBbmdsZSwgYmluZGVyVHVybjtcclxuICAgIGlmKHR5cGVvZiBhbmdsZT09PSdvYmplY3QnKSB7XHJcbiAgICAgIHRoaXMuYW5nbGUgPSBhbmdsZS5vcGVuZWRBbmdsZTtcclxuICAgICAgY2xvc2VkQW5nbGUgPSBhbmdsZS5jbG9zZWRBbmdsZTtcclxuICAgICAgYmluZGVyVHVybiA9IGFuZ2xlLmJpbmRlclR1cm4+UEkvMj9QSS1hbmdsZS5iaW5kZXJUdXJuOmFuZ2xlLmJpbmRlclR1cm47XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5hbmdsZSA9IGFuZ2xlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY29ybmVyLmhlaWdodCA9IGhlaWdodDtcclxuICAgIGlmKHRoaXMucC5maXJzdCE9PWZpcnN0IHx8IHRoaXMucC5sYXN0IT09bGFzdCkge1xyXG4gICAgICB0aGlzLnNpZGVUZXh0dXJlLnJlcGVhdC5zZXQoMCwgbGFzdC1maXJzdCk7XHJcbiAgICAgIHRoaXMuc2lkZVRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICBpZih0aGlzLnAuZmlyc3QhPT1maXJzdCkge1xyXG4gICAgICAgIHRoaXMucC5zZXRUZXh0dXJlKHRoaXMubWF0ZXJpYWxzWzBdLCAyKmZpcnN0KTtcclxuICAgICAgfVxyXG4gICAgICBpZih0aGlzLnAubGFzdCE9PWxhc3QpIHtcclxuICAgICAgICB0aGlzLnAuc2V0VGV4dHVyZSh0aGlzLm1hdGVyaWFsc1sxXSwgMipsYXN0LTEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLnAuZmlyc3QgPSBmaXJzdDtcclxuICAgIHRoaXMucC5sYXN0ID0gbGFzdDtcclxuICAgIGxldCBwb2ludHM7XHJcbiAgICBjb25zdCBwcm9wcyA9IHRoaXMuZ2V0UHJvcHMoKTtcclxuICAgIGlmKHRoaXMuc3RhdGUgPT09ICdjbG9zZWQnKSB7XHJcbiAgICAgIHBvaW50cyA9IHRoaXMuZ2V0SW50ZXJwb2xhdGlvblBvaW50cyh0aGlzLmNsb3NlZEludGVycG9sYXRpb25JbmRlY2VzLCB0aGlzLmNsb3NlZEludGVycG9sYXRpb25JbmRlY2VzKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYodGhpcy5zdGF0ZSA9PT0gJ29wZW5lZCcpIHtcclxuICAgICAgaWYoY2xvc2VkQW5nbGUhPT11bmRlZmluZWQgJiYgTWF0aC5hYnMoY2xvc2VkQW5nbGUtUEkvMik+MWUtMikge1xyXG4gICAgICAgIHBvaW50cyA9IHRoaXMuZ2V0SW50ZXJwb2xhdGlvblBvaW50cyh0aGlzLmZsYXRJbnRlcnBvbGF0aW9uSW5kZWNlcywgW10pO1xyXG4gICAgICAgIGNvbnN0IHBzID0gdGhpcy5nZXRQb2ludHNBdEFuZ2xlKHRoaXMuZ2V0SW50ZXJwb2xhdGlvblBvaW50cyh0aGlzLmNsb3NlZEludGVycG9sYXRpb25JbmRlY2VzLCB0aGlzLmNsb3NlZEludGVycG9sYXRpb25JbmRlY2VzKSwgY2xvc2VkQW5nbGU+UEkvMj9QSS1jbG9zZWRBbmdsZTpjbG9zZWRBbmdsZSk7XHJcbiAgICAgICAgcG9pbnRzLnggPSBbcHMueCwuLi5wb2ludHMueF07XHJcbiAgICAgICAgcG9pbnRzLnkgPSBbcHMueSwuLi5wb2ludHMueV07XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocHMpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHBvaW50cyA9IHRoaXMuZ2V0SW50ZXJwb2xhdGlvblBvaW50cyh0aGlzLm9wZW5lZEludGVycG9sYXRpb25JbmRlY2VzW2ZsaXBEaXJlY3Rpb249PT0ncmlnaHQnPyAodGhpcy5hbmdsZT5QSS8yPydsZWZ0JzoncmlnaHQnKTogKHRoaXMuYW5nbGU8UEkvMj8nbGVmdCc6J3JpZ2h0JyldLCB0aGlzLmNsb3NlZEludGVycG9sYXRpb25JbmRlY2VzKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgbGV0IGhsLCBociwgb2Zmc2V0ID0gMC41KnByb3BzLnNoZWV0cypwcm9wcy5kZXB0aDtcclxuICAgIGlmKHRoaXMuc3RhdGU9PT0nY2xvc2VkJykge1xyXG4gICAgICBvZmZzZXQgLT0gN2UtNip0aGlzLnAuc2NhbGU7XHJcbiAgICB9XHJcbiAgICBpZih0aGlzLmFuZ2xlPD1QSS8yKSB7XHJcbiAgICAgIGhsID0gKHByb3BzLnNoZWV0cy1maXJzdCkqcHJvcHMuZGVwdGg7XHJcbiAgICAgIGhyID0gKHByb3BzLnNoZWV0cy1sYXN0KSpwcm9wcy5kZXB0aDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBobCA9IGZpcnN0KnByb3BzLmRlcHRoO1xyXG4gICAgICBociA9IGxhc3QqcHJvcHMuZGVwdGg7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZERlcHRoID0gMC4xKnByb3BzLmRlcHRoO1xyXG4gICAgaWYoaGw+aHIpIHtcclxuICAgICAgaHItPWREZXB0aDtcclxuICAgICAgaGwrPWREZXB0aDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBocis9ZERlcHRoO1xyXG4gICAgICBobC09ZERlcHRoO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGluQW5nbGUgPSB0aGlzLmFuZ2xlPlBJLzI/UEktdGhpcy5hbmdsZTp0aGlzLmFuZ2xlLCBoQW5nbGUgPSB0aGlzLnN0YXRlID09PSAnY2xvc2VkJz8gaW5BbmdsZTogKGJpbmRlclR1cm49PT11bmRlZmluZWQ/IFBJLzI6IGJpbmRlclR1cm4pO1xyXG4gICAgY29uc3QgW2xlZnQsIHJpZ2h0XSA9IHRoaXMuZ2V0UG9pbnRzQXRBbmdsZUFuZEhzKHBvaW50cywgaW5BbmdsZSwgaEFuZ2xlLCBbaGwvcHJvcHMud2lkdGgsIGhyL3Byb3BzLndpZHRoXSk7XHJcbiAgICBpZih0aGlzLmFuZ2xlPlBJLzIpIHtcclxuICAgICAgdGhpcy5pbnZlcnNlKGxlZnQpO1xyXG4gICAgICB0aGlzLmludmVyc2UocmlnaHQpO1xyXG4gICAgICBvZmZzZXQgPSAtb2Zmc2V0O1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRQb2ludHMobGVmdCwgcmlnaHQsIG9mZnNldCk7XHJcbiAgfVxyXG5cclxuICBzZXRQb2ludHMobGVmdCwgcmlnaHQsIG9mZnNldCkge1xyXG4gICAgY29uc3QgcCA9IHRoaXMuZ2V0UHJvcHMoKTtcclxuICAgIGxldCBpID0gMDtcclxuXHJcbiAgICBjb25zdCB5cyA9IFtyaWdodCwgbGVmdF07XHJcbiAgICBmb3IobGV0IHkgPSAwOyB5PHNoZWV0QmxvY2sucmVzWTsgKyt5KSB7XHJcbiAgICAgIGZvcihsZXQgeiA9IDA7IHo8c2hlZXRCbG9jay5yZXNaOyArK3opIHtcclxuICAgICAgICBmb3IobGV0IHggPSAwOyB4PHNoZWV0QmxvY2sucmVzWDsgKyt4KSB7XHJcbiAgICAgICAgICB0aGlzLmdlb21ldHJ5LnZlcnRpY2VzW2krK10uc2V0KFxyXG4gICAgICAgICAgICB5c1t5XS54W3hdKnAud2lkdGgrb2Zmc2V0LFxyXG4gICAgICAgICAgICB5c1t5XS55W3hdKnAud2lkdGgsXHJcbiAgICAgICAgICAgIHoqcC5oZWlnaHQvKHNoZWV0QmxvY2sucmVzWi0xKS0wLjUqcC5oZWlnaHRcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZihpIT09dGhpcy5nZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGgpIHtcclxuICAgICAgY29uc29sZS53YXJuKCdzZXRQb2ludHM6IGJhZCBtYXBwaW5nIScpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKHRoaXMuY29ybmVyLnVzZSAmJiAhdGhpcy5jb3JuZXIucG9pbnRzLmxlbmd0aCkge1xyXG4gICAgICBjb25zdCBwbGFuZSA9IG5ldyBUSFJFRS5QbGFuZSgpLCBub3JtYWwgPSBwbGFuZS5ub3JtYWwsIHBsYW5lT2Zmc2V0ID0gKDEtdGhpcy5nZXRQcm9wcygpLmZsZXhpYmxlQ29ybmVyKSpNYXRoLm1pbihwLndpZHRoLCBwLmhlaWdodCksIHByb2ogPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gICAgICBwbGFuZS5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludChuZXcgVEhSRUUuVmVjdG9yMygtMSwwLC0xKS5ub3JtYWxpemUoKSwgbmV3IFRIUkVFLlZlY3RvcjMocGxhbmVPZmZzZXQrb2Zmc2V0LCAwLCAwLjUqcC5oZWlnaHQpKTtcclxuICAgICAgZm9yKGxldCBpPTAsIGw9dGhpcy5nZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGg7aTxsOysraSkge1xyXG4gICAgICAgIHBsYW5lLnByb2plY3RQb2ludCh0aGlzLmdlb21ldHJ5LnZlcnRpY2VzW2ldLCBwcm9qKTtcclxuICAgICAgICBwcm9qLnN1Yih0aGlzLmdlb21ldHJ5LnZlcnRpY2VzW2ldKTtcclxuICAgICAgICBpZihwcm9qLngqbm9ybWFsLngrcHJvai55Km5vcm1hbC55K3Byb2oueipub3JtYWwuej4wKSB7XHJcbiAgICAgICAgICBjb25zdCBkID0gcHJvai5sZW5ndGgoKS9wbGFuZU9mZnNldDtcclxuICAgICAgICAgIHRoaXMuY29ybmVyLm1heERpc3RhbmNlID0gTWF0aC5tYXgodGhpcy5jb3JuZXIubWF4RGlzdGFuY2UsIGQpO1xyXG4gICAgICAgICAgdGhpcy5jb3JuZXIucG9pbnRzLnB1c2goe3ZlcnRleDogaSwgZGlzdGFuY2U6IGR9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZih0aGlzLmNvcm5lci51c2UgJiYgTWF0aC5hYnModGhpcy5jb3JuZXIuaGVpZ2h0KT4xZS0zKSB7XHJcbiAgICAgIGNvbnN0IGQyQW5nbGUgPSAoZCk9PiBwLmNvcm5lckRldmlhdGlvbip0aGlzLmNvcm5lci5oZWlnaHQvKDErTWF0aC5leHAoLXAuYmVuZGluZyooZC0wLjUqdGhpcy5jb3JuZXIubWF4RGlzdGFuY2UpKSk7XHJcbiAgICAgIHRoaXMuY29ybmVyLmF4aXMuc2V0KC0xLDAsMSkubm9ybWFsaXplKCk7XHJcbiAgICAgIHRoaXMuY29ybmVyLmF4aXMuYXBwbHlBeGlzQW5nbGUodGhpcy5jb3JuZXIuT1osIHRoaXMuYW5nbGUpO1xyXG4gICAgICBmb3IobGV0IHBvaW50IG9mIHRoaXMuY29ybmVyLnBvaW50cykge1xyXG4gICAgICAgIHRoaXMuZ2VvbWV0cnkudmVydGljZXNbcG9pbnQudmVydGV4XS5hcHBseUF4aXNBbmdsZSh0aGlzLmNvcm5lci5heGlzLCBkMkFuZ2xlKHBvaW50LmRpc3RhbmNlKSlcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvcihsZXQgbSBvZiB0aGlzLm1hcmtlcnMpIHtcclxuICAgICAgbS5tYXJrZXIucG9zaXRpb24uY29weSh0aGlzLmdlb21ldHJ5LnZlcnRpY2VzW20udmVydGV4XSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5nZW9tZXRyeS5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xyXG4gICAgLy90aGlzLmdlb21ldHJ5LmNvbXB1dGVGYWNlTm9ybWFscygpO1xyXG4gICAgdGhpcy5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcclxuICAgIC8vdGhpcy5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3goKTtcclxuICAgIHRoaXMuZ2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlID0gdHJ1ZTtcclxuXHJcbiAgICBpZih0aGlzLm1hcmt1cCkge1xyXG4gICAgICB0aGlzLm1hcmt1cC5jb21wdXRlVmVydGljZXMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGludmVyc2UocHMpIHtcclxuICAgIGZvcihsZXQgaSA9IDA7aTxwcy54Lmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIHBzLnhbaV09LXBzLnhbaV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHM7XHJcbiAgfVxyXG5cclxuICBnZXRQb2ludHNBdEhzKHBzLCBhbmdsZSwgaHMpIHtcclxuICAgIGNvbnN0IE4gPSAxMDAwO1xyXG4gICAgTWF0aFV0aWxzLnNldFNwbGluZVBvaW50cyh0aGlzLnBTcGxpbmUsIHBzKTtcclxuICAgIGxldCBibC8qID0gTWF0aFV0aWxzLnNwbGl0U3BsaW5lKHRoaXMucFNwbGluZSwgTikqLywgcj1bXTtcclxuICAgIHtcclxuICAgICAgY29uc3QgcDEgPSB7Li4udGhpcy5wU3BsaW5lLmdldFBvaW50KChOLTEpL04pfSwgcDIgPSB7Li4udGhpcy5wU3BsaW5lLmdldFBvaW50KDEpfSxcclxuICAgICAgICBkcCA9IHt4OiBwMi54LXAxLngsIHk6IHAyLnktcDEueX0sIGxuID0gTWF0aC5zcXJ0KGRwLngqZHAueCtkcC55KmRwLnkpLFxyXG4gICAgICAgIHNwID0gdGhpcy5wU3BsaW5lLnBvaW50c1t0aGlzLnBTcGxpbmUucG9pbnRzLmxlbmd0aC0xXTtcclxuICAgICAgc3Auc2V0KHNwLngrMC4yKmRwLngvbG4sIHNwLnkrMC4yKmRwLnkvbG4sIDApO1xyXG4gICAgICBibCA9IE1hdGhVdGlscy5zcGxpdFNwbGluZSh0aGlzLnBTcGxpbmUsIE4pO1xyXG4gICAgfVxyXG4gICAgYmwubHMucHVzaCgxZTcpO1xyXG4gICAgTWF0aFV0aWxzLm1hcGwyTChibC5scywgYmwubGVuLCBzaGVldEJsb2NrLnJlc1gsIChpKT0+IHtcclxuICAgICAgZm9yKGxldCBqPTA7IGo8aHMubGVuZ3RoOyArK2opIHtcclxuICAgICAgICBpZighaSkge1xyXG4gICAgICAgICAgcltqXSA9IHt4OiBbLWhzW2pdKk1hdGguc2luKGFuZ2xlKV0sIHk6IFtoc1tqXSpNYXRoLmNvcyhhbmdsZSldfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBjb25zdCBwMCA9IHsuLi50aGlzLnBTcGxpbmUuZ2V0UG9pbnQoKGktMSkvTil9LFxyXG4gICAgICAgICAgICAgICAgcDEgPSB0aGlzLnBTcGxpbmUuZ2V0UG9pbnQoaS9OKSxcclxuICAgICAgICAgICAgICAgIHg9LShwMS55LXAwLnkpLCB5PShwMS54LXAwLngpLCBsPU1hdGguc3FydCh4KngreSp5KTtcclxuICAgICAgICAgIHJbal0ueC5wdXNoKHAxLngreC9sKmhzW2pdKTtcclxuICAgICAgICAgIHJbal0ueS5wdXNoKHAxLnkreS9sKmhzW2pdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IG5wcz1bXTtcclxuICAgIGZvcihsZXQgaj0wOyBqPGhzLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgIG5wc1tqXT17eDpbXSx5OltdfTtcclxuICAgICAgTWF0aFV0aWxzLnNldFNwbGluZVBvaW50cyh0aGlzLmlTcGxpbmUsIHJbal0pO1xyXG4gICAgICBjb25zdCBsID0gTWF0aFV0aWxzLnNwbGl0U3BsaW5lKHRoaXMuaVNwbGluZSwgTik7XHJcbiAgICAgIGwubHMucHVzaCgxZTcpO1xyXG4gICAgICBNYXRoVXRpbHMubWFwbDJMKGwubHMsIDEsIHNoZWV0QmxvY2sucmVzWCwgKGkpPT4ge1xyXG4gICAgICAgIGNvbnN0IHAgPSB0aGlzLmlTcGxpbmUuZ2V0UG9pbnQoaS9OKTtcclxuICAgICAgICBucHNbal0ueC5wdXNoKHAueCk7XHJcbiAgICAgICAgbnBzW2pdLnkucHVzaChwLnkpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBucHM7XHJcbiAgfVxyXG5cclxuICBnZXRQb2ludHNBdEFuZ2xlQW5kSHMocG9pbnRzLCBhbmdsZSwgaEFuZ2xlLCBocykge1xyXG4gICAgY29uc3QgcHMgPSB0aGlzLmdldFBvaW50c0F0QW5nbGUocG9pbnRzLCBhbmdsZSk7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRQb2ludHNBdEhzKHBzLCBoQW5nbGUsIGhzKTtcclxuICB9XHJcblxyXG4gIGdldFBvaW50c0F0QW5nbGUocG9pbnRzLCBhbmdsZSkge1xyXG4gICAgY29uc3QgcHM9e3g6IFtdLCB5OltdfSwgYW5nbGVzPVtdO1xyXG4gICAgYW5nbGUvPU1hdGguUEkvMjtcclxuICAgIGZvcihsZXQgaiA9IDA7IGo8cG9pbnRzLngubGVuZ3RoOyArK2opIHtcclxuICAgICAgYW5nbGVzLnB1c2goai8ocG9pbnRzLngubGVuZ3RoLTEpKTtcclxuICAgIH1cclxuICAgIGZvcihsZXQgaSA9IDA7IGk8cG9pbnRzLnhbMF0ubGVuZ3RoOyArK2kpIHtcclxuICAgICAgY29uc3QgeHBzID0gW10sIHlwcyA9IFtdO1xyXG4gICAgICBmb3IobGV0IGogPSAwOyBqPHBvaW50cy54Lmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgeHBzLnB1c2gocG9pbnRzLnhbal1baV0pO1xyXG4gICAgICAgIHlwcy5wdXNoKHBvaW50cy55W2pdW2ldKTtcclxuICAgICAgfVxyXG4gICAgICBwcy54LnB1c2godGhpcy5pbnRlcnBvbGF0ZShhbmdsZXMseHBzLGFuZ2xlKSk7XHJcbiAgICAgIHBzLnkucHVzaCh0aGlzLmludGVycG9sYXRlKGFuZ2xlcyx5cHMsYW5nbGUpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcztcclxuICB9XHJcblxyXG4gIGludGVycG9sYXRlKHgseSx4aSkge1xyXG4gICAgaWYoIXRoaXMuYVNwbGluZXNbeC5sZW5ndGhdKSB7XHJcbiAgICAgIHRoaXMuYVNwbGluZXNbeC5sZW5ndGhdID0gbmV3IFRIUkVFLkNhdG11bGxSb21DdXJ2ZTMoW10pO1xyXG4gICAgICBjb25zdCBwcyA9IHRoaXMuYVNwbGluZXNbeC5sZW5ndGhdLnBvaW50cztcclxuICAgICAgZm9yKGxldCBpPTA7aTx4Lmxlbmd0aDsrK2kpIHtcclxuICAgICAgICBwcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKCkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBzcGxpbmUgPSB0aGlzLmFTcGxpbmVzW3gubGVuZ3RoXTtcclxuICAgIGZvcihsZXQgaT0wO2k8eC5sZW5ndGg7KytpKSB7XHJcbiAgICAgIHNwbGluZS5wb2ludHNbaV0uc2V0KHhbaV0sIHlbaV0sIDApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNwbGluZS5nZXRQb2ludChNYXRoLm1pbigxLCBNYXRoLm1heCh4aSwgMCkpKS55O1xyXG4gIH1cclxuXHJcbiAgbG9hZFBvaW50cygpIHtcclxuICAgIGNvbnN0IHg9W10seT1bXTtcclxuICAgIGZvcihsZXQgciBvZiBbMCwgMC4yODc3LCAwLjYzNDcsIDAuODE3NCwgMS4wMDAwXSkge1xyXG4gICAgICB4LnB1c2gocipNYXRoLmNvcygwLjkqTWF0aC5QSS80KSk7XHJcbiAgICAgIHkucHVzaChyKk1hdGguc2luKDAuOSpNYXRoLlBJLzQpKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG9wZW5lZEludGVycG9sYXRpb25JbmRlY2VzID0gW1xyXG4gICAgICB7XHJcbiAgICAgICAgbGVmdDogWzIsMyw0XSxcclxuICAgICAgICByaWdodDogWzIsMyw0XVxyXG4gICAgICB9LCB7XHJcbiAgICAgICAgbGVmdDogWzIsNiw1XSxcclxuICAgICAgICByaWdodDogWzIsMyw0XVxyXG4gICAgICB9LCB7XHJcbiAgICAgICAgbGVmdDogWzIsMyw0XSxcclxuICAgICAgICByaWdodDogWzIsMyw0XVxyXG4gICAgICB9XHJcbiAgICBdLFxyXG4gICAgY2xvc2VkSW50ZXJwb2xhdGlvbkluZGVjZXMgPSBbXHJcbiAgICAgIFswLDEsMl0sXHJcbiAgICAgIFswLDEsMl0sXHJcbiAgICAgIFswLDEsMl1cclxuICAgIF0sXHJcbiAgICBmbGF0SW50ZXJwb2xhdGlvbkluZGVjZXMgPSBbXHJcbiAgICAgIFs1LDRdLFxyXG4gICAgICBbOCw3XSxcclxuICAgICAgWzUsNF1cclxuICAgIF0sXHJcbiAgICBpbnRlcnBvbGF0aW9uUG9pbnRzID0gW1xyXG4gICAgICB7XHJcbiAgICAgICAgeDogW1xyXG4gICAgICAgICAgWzAsMC4yNTAwLDAuNTAwMCwwLjc1MDAsMS4wMDAwXSxcclxuICAgICAgICAgIFswLDAuMjQ4MiwwLjQ5OTcsMC43NTAwLDEuMDAwMF0sXHJcbiAgICAgICAgICBbMCwwLjI0MjgsMC40OTg5LDAuNzUwMCwxLjAwMDBdLFxyXG4gICAgICAgICAgWzAsMC4xMjUwLDAuMzIxNCwwLjU2NjAsMC44MTkyXSxcclxuICAgICAgICAgIC8vIFswLDAuMTI1MCwwLjMyMTQsMC41NzQ1LDAuODY2MF0sXHJcbiAgICAgICAgICBbMCwwLDAsMCwwXSxcclxuICAgICAgICAgIHhcclxuICAgICAgICBdLFxyXG4gICAgICAgIHk6IFtcclxuICAgICAgICAgIFswLDAsMCwwLDBdLFxyXG4gICAgICAgICAgWzAsMC4wMzAwLDAuMDE2NiwwLjAwMzMsMC4wMDAxXSxcclxuICAgICAgICAgIFswLDAuMDU5NiwwLjAzMzEsMC4wMDY1LDAuMDAwMl0sXHJcbiAgICAgICAgICBbMCwwLjIxNjUsMC4zODMwLDAuNDkyMCwwLjU3MzZdLFxyXG4gICAgICAgICAgLy8gWzAsMC4yMTY1LDAuMzgzMCwwLjQ4MjEsMC41MDAwXSxcclxuICAgICAgICAgIFswLDAuMjUwMCwwLjUwMDAsMC43NTAwLDEuMDAwMF0sXHJcbiAgICAgICAgICB5XHJcbiAgICAgICAgXVxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgeDogW1xyXG4gICAgICAgICAgWzAsMC4yNTAwLDAuNTAwMCwwLjc1MDAsMS4wMDAwXSwvL2Nsb3NlZFxyXG4gICAgICAgICAgWzAsMC4yNDgyLDAuNDk5NywwLjc1MDAsMS4wMDAwXSxcclxuICAgICAgICAgIFswLDAuMjQyOCwwLjQ5ODksMC43NTAwLDEuMDAwMF0sXHJcbiAgICAgICAgICBbMCwwLjEyNTAsMC4zMjE0LDAuNTU3NCwwLjgxOTJdLC8vcmlnaHRcclxuICAgICAgICAgIFswLC0wLjA0MzQsMC4wMDAwLDAuMTMwMiwwLjM0MjBdLFxyXG4gICAgICAgICAgWzAsMC4wNDM0LC0wLjAwMDAsLTAuMTMwMiwtMC4zNDIwXSwvL2xlZnRcclxuICAgICAgICAgIFswLDAuMTcwNSwwLjM0MTAsMC40ODIxLDAuNTczNl0sXHJcbiAgICAgICAgICBbMCwwLDAsMCwwXSwvL2ZsYXRcclxuICAgICAgICAgIHhcclxuICAgICAgICBdLFxyXG4gICAgICAgIHk6IFtcclxuICAgICAgICAgIFswLDAsMCwwLDBdLC8vY2xvc2VkXHJcbiAgICAgICAgICBbMCwwLjAzMDAsMC4wMTY2LDAuMDAzMywwLjAwMDFdLFxyXG4gICAgICAgICAgWzAsMC4wNTk2LDAuMDMzMSwwLjAwNjUsMC4wMDAyXSxcclxuICAgICAgICAgIFswLDAuMjE2NSwwLjM4MzAsMC41MDE4LDAuNTczNl0sLy9yaWdodFxyXG4gICAgICAgICAgWzAsMC4yNDYyLDAuNTAwMCwwLjczODYsMC45Mzk3XSxcclxuICAgICAgICAgIFswLDAuMjQ2MiwwLjUwMDAsMC43Mzg2LDAuOTM5N10sLy9sZWZ0XHJcbiAgICAgICAgICBbMCwwLjE4MjgsMC4zNjU3LDAuNTc0NSwwLjgxOTJdLFxyXG4gICAgICAgICAgWzAsMC4yNTAwLDAuNTAwMCwwLjc1MDAsMS4wMDAwXSwvL2ZsYXRcclxuICAgICAgICAgIHlcclxuICAgICAgICBdXHJcbiAgICAgIH0sXHJcbiAgICAgIC8vIE9sZCBpbnRlcnBvbGF0aW9uIHBvaW50c1xyXG4gICAgICB7XHJcbiAgICAgICAgeDogW1xyXG4gICAgICAgICAgWzAsMC4yODc3LDAuNjM0NywwLjgxNzQsMS4wMDAwXSxcclxuICAgICAgICAgIFswLjAwMCwwLjI4NiwwLjYzMiwwLjgxNSwwLjk5N10sXHJcbiAgICAgICAgICBbMC4wMDAsMC4yNzksMC42MjMsMC44MDYsMC45ODhdLFxyXG4gICAgICAgICAgWzAuMDAwLDAuMTI2LDAuNDExLDAuNTkzLDAuNzc0XSxcclxuICAgICAgICAgIFswLDAsMCwwLDBdLFxyXG4gICAgICAgICAgeFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgeTogW1xyXG4gICAgICAgICAgWzAsMCwwLDAsMF0sXHJcbiAgICAgICAgICBbMC4wMDAsMC4wMzAsMC4wMTAsMC4wMDIsMC4wMDBdLFxyXG4gICAgICAgICAgWzAuMDAwLDAuMDYwLDAuMDE3LDAuMDA0LDAuMDAwXSxcclxuICAgICAgICAgIFswLjAwMCwwLjI1OSwwLjQ0MCwwLjQ0NiwwLjQyOV0sXHJcbiAgICAgICAgICBbMCwgMC4yODc3LCAwLjYzNDcsIDAuODE3NCwgMS4wMDAwXSxcclxuICAgICAgICAgIHlcclxuICAgICAgICBdXHJcbiAgICAgIH1cclxuICAgIF07XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaW50ZXJwb2xhdGlvblBvaW50cyxcclxuICAgICAgb3BlbmVkSW50ZXJwb2xhdGlvbkluZGVjZXMsXHJcbiAgICAgIGNsb3NlZEludGVycG9sYXRpb25JbmRlY2VzLFxyXG4gICAgICBmbGF0SW50ZXJwb2xhdGlvbkluZGVjZXNcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvU2hlZXRCbG9jay5qcyIsIlxyXG5leHBvcnQgZnVuY3Rpb24gcHJvcHMoc3R5bGUgPSAndm9sdW1lJykge1xyXG4gIC8vIGNvbnN0IHByb3BzID0ge1xyXG4gIC8vICAgaGVpZ2h0LFxyXG4gIC8vICAgd2lkdGgsXHJcbiAgLy8gICBncmF2aXR5LFxyXG4gIC8vICAgaW5qZWN0b3IsXHJcbiAgLy8gICBjYWNoZWRQYWdlcyxcclxuICAvLyAgIHJlbmRlckluYWN0aXZlUGFnZXMsXHJcbiAgLy8gICByZW5kZXJXaGlsZUZsaXBwaW5nLFxyXG4gIC8vICAgcGFnZXNGb3JQcmVkaWN0aW5nLFxyXG4gIC8vICAgcHJlbG9hZFBhZ2VzLFxyXG4gIC8vICAgc2hlZXQ6IHtcclxuICAvLyAgICAgc3RhcnRWZWxvY2l0eSxcclxuICAvLyAgICAgY29ybmVyRGV2aWF0aW9uLFxyXG4gIC8vICAgICBmbGV4aWJpbGl0eSxcclxuICAvLyAgICAgZmxleGlibGVDb3JuZXIsXHJcbiAgLy8gICAgIGJlbmRpbmcsXHJcbiAgLy8gICAgIHdhdmUsXHJcbiAgLy8gICAgIHNoYXBlLFxyXG4gIC8vICAgICB3aWR0aFRleGVscyxcclxuICAvLyAgICAgaGVpZ2h0VGV4ZWxzLFxyXG4gIC8vICAgICBjb2xvcixcclxuICAvLyAgICAgc2lkZVRleHR1cmVcclxuICAvLyAgIH0sXHJcbiAgLy8gICBjb3Zlcjoge1xyXG4gIC8vICAgICAuLi5zaGVldCxcclxuICAvLyAgICAgcGFkZGluZyxcclxuICAvLyAgICAgYmluZGVyVGV4dHVyZSxcclxuICAvLyAgICAgZGVwdGgsXHJcbiAgLy8gICAgIG1hc3NcclxuICAvLyAgIH0sXHJcbiAgLy8gICBwYWdlOiB7XHJcbiAgLy8gICAgIC4uLnNoZWV0LFxyXG4gIC8vICAgICBkZXB0aCxcclxuICAvLyAgICAgbWFzc1xyXG4gIC8vICAgfVxyXG4gIC8vIH07XHJcblxyXG4gIGNvbnN0IGRlZiA9IHtcclxuICAgIGhlaWdodDogMC4yOTcsXHJcbiAgICB3aWR0aDogMC4yMSxcclxuICAgIGJhY2tncm91bmRDb2xvcjogJycsXHJcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6ICcnLFxyXG4gICAgYmFja2dyb3VuZFN0eWxlOiAnJyxcclxuICAgIGhpZ2hsaWdodExpbmtzOiB0cnVlLFxyXG4gICAgbGlnaHRpbmc6ICdtaXhlZCcsXHJcbiAgICBncmF2aXR5OiAxLFxyXG4gICAgY2FjaGVkUGFnZXM6IDUwLFxyXG4gICAgcmVuZGVySW5hY3RpdmVQYWdlczogdHJ1ZSxcclxuICAgIHJlbmRlckluYWN0aXZlUGFnZXNPbk1vYmlsZTogdHJ1ZSxcclxuICAgIHJlbmRlcldoaWxlRmxpcHBpbmc6IGZhbHNlLFxyXG4gICAgcGFnZXNGb3JQcmVkaWN0aW5nOiA1LFxyXG4gICAgcHJlbG9hZFBhZ2VzOiA1LFxyXG4gICAgYXV0b1BsYXlEdXJhdGlvbjogNTAwMCxcclxuICAgIHJ0bDogZmFsc2UsXHJcbiAgICBpbnRlcmFjdGl2ZUNvcm5lcnM6IHRydWUsXHJcbiAgICBtYXhEZXB0aDogMC4wMDgsXHJcbiAgICBzaGVldDoge1xyXG4gICAgICBzdGFydFZlbG9jaXR5OiAxLjIsXHJcbiAgICAgIGNvcm5lckRldmlhdGlvbjogMC4xNSxcclxuICAgICAgZmxleGliaWxpdHk6IDEwLFxyXG4gICAgICBmbGV4aWJsZUNvcm5lcjogMC41LFxyXG4gICAgICBiZW5kaW5nOiAxMSxcclxuICAgICAgd2F2ZTogMC4zLFxyXG4gICAgICBzaGFwZTogMCxcclxuICAgICAgd2lkdGhUZXhlbHM6IDE5MjAsXHJcbiAgICAgIGhlaWdodFRleGVsczogMTA4MCxcclxuICAgICAgY29sb3I6IDB4RkZGRkZGLFxyXG4gICAgICBzaWRlOiAnY29sb3InXHJcbiAgICB9LFxyXG4gICAgY292ZXI6IHtcclxuICAgICAgc2lkZTogJ3RyYW5zcGFyZW50JyxcclxuICAgICAgYmluZGVyVGV4dHVyZTogJycsXHJcbiAgICAgIGRlcHRoOiAwLjAwMDMsXHJcbiAgICAgIHBhZGRpbmc6IDAsXHJcbiAgICAgIG1hc3M6IDAuMDAxXHJcbiAgICB9LFxyXG4gICAgcGFnZToge1xyXG4gICAgICBkZXB0aDogMC4wMDAxLFxyXG4gICAgICBtYXNzOiAwLjAwMVxyXG4gICAgfSxcclxuICAgIGNzc0xheWVyUHJvcHM6IHtcclxuICAgICAgd2lkdGg6IDEwMjRcclxuICAgIH1cclxuICB9LFxyXG4gIHN0eWxlcyA9IHtcclxuICAgIHZvbHVtZTogZGVmLFxyXG4gICAgZmxhdDoge1xyXG4gICAgICAuLi5kZWYsXHJcbiAgICAgIGxpZ2h0aW5nOiAnYW1iaWVudCcsXHJcbiAgICAgIHNoZWV0OiB7XHJcbiAgICAgICAgLi4uZGVmLnNoZWV0LFxyXG4gICAgICAgIHdhdmU6IDAuMDUsXHJcbiAgICAgICAgc2lkZTogJ3RyYW5zcGFyZW50JyxcclxuICAgICAgICBzaGFwZTogMVxyXG4gICAgICB9LFxyXG4gICAgICBjb3Zlcjoge1xyXG4gICAgICAgIC4uLmRlZi5jb3ZlcixcclxuICAgICAgICBkZXB0aDogMC4wMDAwMlxyXG4gICAgICB9LFxyXG4gICAgICBwYWdlOiB7XHJcbiAgICAgICAgLi4uZGVmLnBhZ2UsXHJcbiAgICAgICAgZGVwdGg6IDAuMDAwMDFcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgICd2b2x1bWUtcGFkZGluZ3MnOiB7XHJcbiAgICAgIC4uLmRlZixcclxuICAgICAgY292ZXI6IHtcclxuICAgICAgICAuLi5kZWYuY292ZXIsXHJcbiAgICAgICAgcGFkZGluZzogMC4wMDI1XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG4gIHN0eWxlc1sndm9sdW1lLXVucm9sbGluZyddID0ge1xyXG4gICAgLi4uc3R5bGVzLnZvbHVtZSxcclxuICAgIHNoZWV0OiB7XHJcbiAgICAgIC4uLnN0eWxlcy52b2x1bWUuc2hlZXQsXHJcbiAgICAgIHNoYXBlOiAxXHJcbiAgICB9XHJcbiAgfTtcclxuICBzdHlsZXNbJ3ZvbHVtZS1wYWRkaW5ncy11bnJvbGxpbmcnXSA9IHtcclxuICAgIC4uLnN0eWxlc1sndm9sdW1lLXBhZGRpbmdzJ10sXHJcbiAgICBzaGVldDoge1xyXG4gICAgICAuLi5zdHlsZXNbJ3ZvbHVtZS1wYWRkaW5ncyddLnNoZWV0LFxyXG4gICAgICBzaGFwZTogMVxyXG4gICAgfVxyXG4gIH07XHJcbiAgcmV0dXJuIHN0eWxlc1tzdHlsZV0gfHwgZGVmO1xyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9wcm9wcy9ib29rLmpzIiwiaW1wb3J0IHtUSFJFRX0gZnJvbSAnLi4vbGlicyc7XHJcblxyXG5USFJFRS5DU1MzRE9iamVjdCA9IGNsYXNzIENTUzNET2JqZWN0IGV4dGVuZHMgVEhSRUUuT2JqZWN0M0Qge1xyXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQ9dW5kZWZpbmVkKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIGlmKGVsZW1lbnQpIHtcclxuICAgICAgdGhpcy5zZXQoZWxlbWVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXQoZWxlbWVudCkge1xyXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICBcdHRoaXMuZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcblxyXG4gIFx0dGhpcy5hZGRFdmVudExpc3RlbmVyKCdyZW1vdmVkJywgZnVuY3Rpb24oKSB7XHJcbiAgXHRcdGlmICh0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xyXG4gIFx0XHRcdHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XHJcbiAgXHRcdH1cclxuICBcdH0pO1xyXG4gIH1cclxufTtcclxuXHJcblRIUkVFLkNTUzNEU3ByaXRlID0gY2xhc3MgQ1NTM0RTcHJpdGUgZXh0ZW5kcyBUSFJFRS5DU1MzRE9iamVjdCB7XHJcbiAgY29uc3RydWN0b3IoZWxlbWVudCkge1xyXG4gICAgc3VwZXIoZWxlbWVudCk7XHJcbiAgfVxyXG59O1xyXG5cclxuVEhSRUUuQ1NTM0RSZW5kZXJlciA9IGNsYXNzIENTUzNEUmVuZGVyZXIge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICBcdHZhciBfd2lkdGgsIF9oZWlnaHQ7XHJcbiAgXHR2YXIgX3dpZHRoSGFsZiwgX2hlaWdodEhhbGY7XHJcblxyXG4gIFx0dmFyIG1hdHJpeCA9IG5ldyBUSFJFRS5NYXRyaXg0KCk7XHJcblxyXG4gIFx0dmFyIGNhY2hlID0ge1xyXG4gIFx0XHRjYW1lcmE6IHsgZm92OiAwLCBzdHlsZTogJycgfSxcclxuICBcdFx0b2JqZWN0czoge31cclxuICBcdH07XHJcblxyXG4gIFx0dmFyIGRvbUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2Jyk7XHJcbiAgXHRkb21FbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XHJcblxyXG4gIFx0dGhpcy5kb21FbGVtZW50ID0gZG9tRWxlbWVudDtcclxuXHJcbiAgXHR2YXIgY2FtZXJhRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnKTtcclxuXHJcbiAgXHRjYW1lcmFFbGVtZW50LnN0eWxlLldlYmtpdFRyYW5zZm9ybVN0eWxlID0gJ3ByZXNlcnZlLTNkJztcclxuICBcdGNhbWVyYUVsZW1lbnQuc3R5bGUuTW96VHJhbnNmb3JtU3R5bGUgPSAncHJlc2VydmUtM2QnO1xyXG4gIFx0Y2FtZXJhRWxlbWVudC5zdHlsZS50cmFuc2Zvcm1TdHlsZSA9ICdwcmVzZXJ2ZS0zZCc7XHJcblxyXG4gIFx0ZG9tRWxlbWVudC5hcHBlbmRDaGlsZCggY2FtZXJhRWxlbWVudCk7XHJcblxyXG4gIFx0dmFyIGlzSUUgPSAxOy8vL1RyaWRlbnQvaS50ZXN0KCBuYXZpZ2F0b3IudXNlckFnZW50KTtcclxuXHJcbiAgXHR0aGlzLnNldENsZWFyQ29sb3IgPSBmdW5jdGlvbiAoKSB7fTtcclxuXHJcbiAgXHR0aGlzLmdldFNpemUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gIFx0XHRyZXR1cm4ge1xyXG4gIFx0XHRcdHdpZHRoOiBfd2lkdGgsXHJcbiAgXHRcdFx0aGVpZ2h0OiBfaGVpZ2h0XHJcbiAgXHRcdH07XHJcblxyXG4gIFx0fTtcclxuXHJcbiAgXHR0aGlzLnNldFNpemUgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XHJcblxyXG4gIFx0XHRfd2lkdGggPSB3aWR0aDtcclxuICBcdFx0X2hlaWdodCA9IGhlaWdodDtcclxuICBcdFx0X3dpZHRoSGFsZiA9IF93aWR0aCAvIDI7XHJcbiAgXHRcdF9oZWlnaHRIYWxmID0gX2hlaWdodCAvIDI7XHJcblxyXG4gIFx0XHRkb21FbGVtZW50LnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xyXG4gIFx0XHRkb21FbGVtZW50LnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XHJcblxyXG4gIFx0XHRjYW1lcmFFbGVtZW50LnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xyXG4gIFx0XHRjYW1lcmFFbGVtZW50LnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XHJcblxyXG4gIFx0fTtcclxuXHJcbiAgXHRmdW5jdGlvbiBlcHNpbG9uKCB2YWx1ZSkge1xyXG4gICAgICBsZXQgcjtcclxuICAgICAgLy9yPU1hdGguYWJzKCB2YWx1ZSkgPCAxZS02ID8gMCA6IHZhbHVlO1xyXG4gICAgICByPU1hdGgucm91bmQoKHZhbHVlICsgTnVtYmVyLkVQU0lMT04pICogMWU1KSAvIDFlNTtcclxuICBcdFx0cmV0dXJuIHI7XHJcblxyXG4gIFx0fVxyXG5cclxuICBcdGZ1bmN0aW9uIGdldENhbWVyYUNTU01hdHJpeCggbWF0cml4KSB7XHJcblxyXG4gIFx0XHR2YXIgZWxlbWVudHMgPSBtYXRyaXguZWxlbWVudHM7XHJcbiAgXHRcdHJldHVybiAnbWF0cml4M2QoJyArIFtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMCBdKSxcclxuICBcdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyAxIF0pLFxyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAyIF0pLFxyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAzIF0pLFxyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyA0IF0pLFxyXG4gIFx0XHRcdGVwc2lsb24oIC0gZWxlbWVudHNbIDUgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDYgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDcgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDggXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggLSBlbGVtZW50c1sgOSBdKSxcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTAgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDExIF0pLFxyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAxMiBdKSxcclxuICBcdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyAxMyBdKSxcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTQgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDE1IF0pXHJcbiAgICAgIF0uam9pbignLCcpICsnKSc7XHJcblxyXG4gIFx0fVxyXG5cclxuICBcdGZ1bmN0aW9uIGdldE9iamVjdENTU01hdHJpeCggbWF0cml4LCBjYW1lcmFDU1NNYXRyaXgpIHtcclxuXHJcbiAgXHRcdHZhciBlbGVtZW50cyA9IG1hdHJpeC5lbGVtZW50cztcclxuICBcdFx0dmFyIG1hdHJpeDNkID0gJ21hdHJpeDNkKCcgKyBbXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDAgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDEgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDIgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDMgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggLSBlbGVtZW50c1sgNCBdKSxcclxuICBcdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyA1IF0pLFxyXG4gIFx0XHRcdGVwc2lsb24oIC0gZWxlbWVudHNbIDYgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggLSBlbGVtZW50c1sgNyBdKSxcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgOCBdKSxcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgOSBdKSxcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTAgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDExIF0pLFxyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAxMiBdKSxcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTMgXSksXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDE0IF0pLFxyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAxNSBdKVxyXG4gIFx0XHRdLmpvaW4oJywnKSArJyknO1xyXG5cclxuICBcdFx0aWYoaXNJRSkge1xyXG5cclxuICBcdFx0XHRyZXR1cm4gJ3RyYW5zbGF0ZSgtNTAlLC01MCUpJyArXHJcbiAgXHRcdFx0XHQndHJhbnNsYXRlKCcgKyBfd2lkdGhIYWxmICsgJ3B4LCcgKyBfaGVpZ2h0SGFsZiArICdweCknICtcclxuICBcdFx0XHRcdGNhbWVyYUNTU01hdHJpeCArXHJcbiAgXHRcdFx0XHRtYXRyaXgzZDtcclxuXHJcbiAgXHRcdH1cclxuXHJcbiAgXHRcdHJldHVybiAndHJhbnNsYXRlKC01MCUsLTUwJSknICsgbWF0cml4M2Q7XHJcblxyXG4gIFx0fVxyXG5cclxuICBcdGZ1bmN0aW9uIHJlbmRlck9iamVjdCggb2JqZWN0LCBjYW1lcmEsIGNhbWVyYUNTU01hdHJpeCkge1xyXG5cclxuICBcdFx0aWYob2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuQ1NTM0RPYmplY3QpIHtcclxuXHJcbiAgXHRcdFx0dmFyIHN0eWxlO1xyXG5cclxuICBcdFx0XHRpZihvYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5DU1MzRFNwcml0ZSkge1xyXG4gIFx0XHRcdFx0bWF0cml4LmNvcHkoIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UpO1xyXG4gIFx0XHRcdFx0bWF0cml4LnRyYW5zcG9zZSgpO1xyXG4gIFx0XHRcdFx0bWF0cml4LmNvcHlQb3NpdGlvbiggb2JqZWN0Lm1hdHJpeFdvcmxkKTtcclxuICBcdFx0XHRcdG1hdHJpeC5zY2FsZSggb2JqZWN0LnNjYWxlKTtcclxuXHJcbiAgXHRcdFx0XHRtYXRyaXguZWxlbWVudHNbIDMgXSA9IDA7XHJcbiAgXHRcdFx0XHRtYXRyaXguZWxlbWVudHNbIDcgXSA9IDA7XHJcbiAgXHRcdFx0XHRtYXRyaXguZWxlbWVudHNbIDExIF0gPSAwO1xyXG4gIFx0XHRcdFx0bWF0cml4LmVsZW1lbnRzWyAxNSBdID0gMTtcclxuXHJcbiAgXHRcdFx0XHRzdHlsZSA9IGdldE9iamVjdENTU01hdHJpeCggbWF0cml4LCBjYW1lcmFDU1NNYXRyaXgpO1xyXG5cclxuICBcdFx0XHR9IGVsc2Uge1xyXG5cclxuICBcdFx0XHRcdHN0eWxlID0gZ2V0T2JqZWN0Q1NTTWF0cml4KCBvYmplY3QubWF0cml4V29ybGQsIGNhbWVyYUNTU01hdHJpeCk7XHJcblxyXG4gIFx0XHRcdH1cclxuXHJcbiAgXHRcdFx0dmFyIGVsZW1lbnQgPSBvYmplY3QuZWxlbWVudDtcclxuICBcdFx0XHR2YXIgY2FjaGVkU3R5bGUgPSBjYWNoZS5vYmplY3RzWyBvYmplY3QuaWQgXSAmJiBjYWNoZS5vYmplY3RzWyBvYmplY3QuaWQgXS5zdHlsZTtcclxuXHJcbiAgXHRcdFx0aWYoY2FjaGVkU3R5bGUgPT09IHVuZGVmaW5lZCB8fCBjYWNoZWRTdHlsZSAhPT0gc3R5bGUpIHtcclxuICBcdFx0XHRcdGVsZW1lbnQuc3R5bGUuV2Via2l0VHJhbnNmb3JtID0gc3R5bGU7XHJcbiAgXHRcdFx0XHRlbGVtZW50LnN0eWxlLk1velRyYW5zZm9ybSA9IHN0eWxlO1xyXG4gIFx0XHRcdFx0ZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBzdHlsZTtcclxuXHJcbiAgXHRcdFx0XHRjYWNoZS5vYmplY3RzWyBvYmplY3QuaWQgXSA9IHsgc3R5bGU6IHN0eWxlIH07XHJcbiAgXHRcdFx0XHRpZihpc0lFKSB7XHJcbiAgXHRcdFx0XHRcdGNhY2hlLm9iamVjdHNbIG9iamVjdC5pZCBdLmRpc3RhbmNlVG9DYW1lcmFTcXVhcmVkID0gZ2V0RGlzdGFuY2VUb1NxdWFyZWQoIGNhbWVyYSwgb2JqZWN0KTtcclxuICBcdFx0XHRcdH1cclxuICBcdFx0XHR9XHJcblxyXG4gIFx0XHRcdGlmKGVsZW1lbnQucGFyZW50Tm9kZSAhPT0gY2FtZXJhRWxlbWVudCkge1xyXG4gIFx0XHRcdFx0Y2FtZXJhRWxlbWVudC5hcHBlbmRDaGlsZCggZWxlbWVudCk7XHJcbiAgXHRcdFx0fVxyXG4gIFx0XHR9XHJcblxyXG4gIFx0XHRmb3IodmFyIGkgPSAwLCBsID0gb2JqZWN0LmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKyspIHtcclxuXHJcbiAgXHRcdFx0cmVuZGVyT2JqZWN0KCBvYmplY3QuY2hpbGRyZW5bIGkgXSwgY2FtZXJhLCBjYW1lcmFDU1NNYXRyaXgpO1xyXG5cclxuICBcdFx0fVxyXG5cclxuICBcdH1cclxuXHJcbiAgXHR2YXIgZ2V0RGlzdGFuY2VUb1NxdWFyZWQgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gIFx0XHR2YXIgYSA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcbiAgXHRcdHZhciBiID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuXHJcbiAgXHRcdHJldHVybiBmdW5jdGlvbihvYmplY3QxLCBvYmplY3QyKSB7XHJcblxyXG4gIFx0XHRcdGEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBvYmplY3QxLm1hdHJpeFdvcmxkKTtcclxuICBcdFx0XHRiLnNldEZyb21NYXRyaXhQb3NpdGlvbiggb2JqZWN0Mi5tYXRyaXhXb3JsZCk7XHJcblxyXG4gIFx0XHRcdHJldHVybiBhLmRpc3RhbmNlVG9TcXVhcmVkKCBiKTtcclxuXHJcbiAgXHRcdH07XHJcblxyXG4gIFx0fSgpO1xyXG5cclxuICBcdGZ1bmN0aW9uIHpPcmRlciggc2NlbmUpIHtcclxuXHJcbiAgXHRcdHZhciBvcmRlciA9IE9iamVjdC5rZXlzKCBjYWNoZS5vYmplY3RzKS5zb3J0KCBmdW5jdGlvbihhLCBiKSB7XHJcblxyXG4gIFx0XHRcdHJldHVybiBjYWNoZS5vYmplY3RzWyBhIF0uZGlzdGFuY2VUb0NhbWVyYVNxdWFyZWQgLSBjYWNoZS5vYmplY3RzWyBiIF0uZGlzdGFuY2VUb0NhbWVyYVNxdWFyZWQ7XHJcblxyXG4gIFx0XHR9KTtcclxuICBcdFx0dmFyIHpNYXggPSBvcmRlci5sZW5ndGg7XHJcblxyXG4gIFx0XHRzY2VuZS50cmF2ZXJzZSggZnVuY3Rpb24ob2JqZWN0KSB7XHJcblxyXG4gIFx0XHRcdHZhciBpbmRleCA9IG9yZGVyLmluZGV4T2YoIG9iamVjdC5pZCArICcnKTtcclxuXHJcbiAgXHRcdFx0aWYoaW5kZXggIT09IC0gMSkge1xyXG5cclxuICBcdFx0XHRcdG9iamVjdC5lbGVtZW50LnN0eWxlLnpJbmRleCA9IHpNYXggLSBpbmRleDtcclxuXHJcbiAgXHRcdFx0fVxyXG5cclxuICBcdFx0fSk7XHJcblxyXG4gIFx0fVxyXG5cclxuICBcdHRoaXMucmVuZGVyID0gZnVuY3Rpb24oc2NlbmUsIGNhbWVyYSkge1xyXG5cclxuICBcdFx0dmFyIGZvdiA9IGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyA1IF0gKiBfaGVpZ2h0SGFsZjtcclxuXHJcbiAgXHRcdGlmKGNhY2hlLmNhbWVyYS5mb3YgIT09IGZvdikge1xyXG5cclxuICBcdFx0XHRkb21FbGVtZW50LnN0eWxlLldlYmtpdFBlcnNwZWN0aXZlID0gZm92ICsgJ3B4JztcclxuICBcdFx0XHRkb21FbGVtZW50LnN0eWxlLk1velBlcnNwZWN0aXZlID0gZm92ICsgJ3B4JztcclxuICBcdFx0XHRkb21FbGVtZW50LnN0eWxlLnBlcnNwZWN0aXZlID0gZm92ICsgJ3B4JztcclxuXHJcbiAgXHRcdFx0Y2FjaGUuY2FtZXJhLmZvdiA9IGZvdjtcclxuXHJcbiAgXHRcdH1cclxuXHJcbiAgXHRcdHNjZW5lLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XHJcblxyXG4gIFx0XHRpZihjYW1lcmEucGFyZW50ID09PSBudWxsKSBjYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcclxuXHJcbiAgXHRcdHZhciBjYW1lcmFDU1NNYXRyaXggPSAndHJhbnNsYXRlWignICsgZm92ICsgJ3B4KScgK1xyXG4gIFx0XHRcdGdldENhbWVyYUNTU01hdHJpeCggY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSk7XHJcblxyXG4gIFx0XHR2YXIgc3R5bGUgPSBjYW1lcmFDU1NNYXRyaXggK1xyXG4gIFx0XHRcdCd0cmFuc2xhdGUoJyArIF93aWR0aEhhbGYgKyAncHgsJyArIF9oZWlnaHRIYWxmICsgJ3B4KSc7XHJcblxyXG4gIFx0XHRpZihjYWNoZS5jYW1lcmEuc3R5bGUgIT09IHN0eWxlICYmICEgaXNJRSkge1xyXG5cclxuICBcdFx0XHRjYW1lcmFFbGVtZW50LnN0eWxlLldlYmtpdFRyYW5zZm9ybSA9IHN0eWxlO1xyXG4gIFx0XHRcdGNhbWVyYUVsZW1lbnQuc3R5bGUuTW96VHJhbnNmb3JtID0gc3R5bGU7XHJcbiAgXHRcdFx0Y2FtZXJhRWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBzdHlsZTtcclxuXHJcbiAgXHRcdFx0Y2FjaGUuY2FtZXJhLnN0eWxlID0gc3R5bGU7XHJcblxyXG4gIFx0XHR9XHJcblxyXG4gIFx0XHRyZW5kZXJPYmplY3QoIHNjZW5lLCBjYW1lcmEsIGNhbWVyYUNTU01hdHJpeCk7XHJcblxyXG4gIFx0XHRpZihpc0lFKSB7XHJcblxyXG4gIFx0XHRcdC8vIElFMTAgYW5kIDExIGRvZXMgbm90IHN1cHBvcnQgJ3ByZXNlcnZlLTNkJy5cclxuICBcdFx0XHQvLyBUaHVzLCB6LW9yZGVyIGluIDNEIHdpbGwgbm90IHdvcmsuXHJcbiAgXHRcdFx0Ly8gV2UgaGF2ZSB0byBjYWxjIHotb3JkZXIgbWFudWFsbHkgYW5kIHNldCBDU1Mgei1pbmRleCBmb3IgSUUuXHJcbiAgXHRcdFx0Ly8gRllJOiB6LWluZGV4IGNhbid0IGhhbmRsZSBvYmplY3QgaW50ZXJzZWN0aW9uXHJcbiAgXHRcdFx0ek9yZGVyKCBzY2VuZSk7XHJcblxyXG4gIFx0XHR9XHJcblxyXG4gIFx0fTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUSFJFRS5DU1MzRFJlbmRlcmVyO1xyXG5cclxuY29uc3QgX0NTUzNET2JqZWN0ID0gVEhSRUUuQ1NTM0RPYmplY3QsIF9DU1MzRFNwcml0ZSA9IFRIUkVFLkNTUzNEU3ByaXRlO1xyXG5leHBvcnQge1xyXG4gIF9DU1MzRE9iamVjdCBhcyBDU1MzRE9iamVjdCxcclxuICBfQ1NTM0RTcHJpdGUgYXMgQ1NTM0RTcHJpdGVcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvQ1NTM0RSZW5kZXJlci5qcyIsImltcG9ydCB7VEhSRUUsICR9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQge0NTUzNET2JqZWN0fSBmcm9tICcuL0NTUzNEUmVuZGVyZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ1NTTGF5ZXIgZXh0ZW5kcyBDU1MzRE9iamVjdCB7XHJcblxyXG4gIHN0YXRpYyBkZWxheTtcclxuICBzdGF0aWMgc3R5bGU7XHJcbiAgc3RhdGljIGluaXQoZG9jLCBkZWxheT0xNTApIHtcclxuICAgIENTU0xheWVyLmRlbGF5ID0gZGVsYXk7XHJcbiAgICBDU1NMYXllci5zdHlsZSA9ICQoYDxzdHlsZSB0eXBlPXRleHQvY3NzPlxyXG4gICAgICAuY3NzLWxheWVyIHtcclxuICAgIFx0XHRvcGFjaXR5OiAxO1xyXG4gICAgXHRcdHRyYW5zaXRpb246IG9wYWNpdHkgJHtkZWxheX1tcyBlYXNlLW91dDtcclxuICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xyXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICBcdH1cclxuICAgIFx0LmNzcy1sYXllci5oaWRkZW4ge1xyXG4gICAgXHRcdHRyYW5zaXRpb246IG9wYWNpdHkgJHtkZWxheX1tcyBlYXNlLWluLCB2aXNpYmlsaXR5ICR7ZGVsYXl9bXMgc3RlcC1lbmQ7XHJcbiAgICBcdFx0b3BhY2l0eTogMDtcclxuICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgIH1cclxuICAgICAgLmZiM2QtYmxvY2sge1xyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgfVxyXG4gICAgICAuZmIzZC1hdWRpbyBhdWRpbywgLmZiM2QtbGluayBhLCAuZmIzZC1pZnJhbWUgaWZyYW1lLCAuZmIzZC12aWRlbyB2aWRlbywgLmZiM2QteW91dHViZSAueW91dHViZSB7XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGxlZnQ6IDA7XHJcbiAgICAgICAgdG9wOiAwO1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgfVxyXG4gICAgICAuZmIzZC1pbWFnZSB7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICB9XHJcbiAgICAgIC5mYjNkLWxpbmsgYSB7XHJcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LDI1NSwwLC4xKTtcclxuICAgICAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIC4xNXMgZWFzZS1pbjtcclxuICAgICAgfVxyXG4gICAgICAuZmIzZC1saW5rIGE6aG92ZXIge1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LDI1NSwwLC4yKTtcclxuICAgICAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIC4xNXMgZWFzZS1vdXQ7XHJcbiAgICAgIH1cclxuICAgICAgLmZiM2QtaWZyYW1lIGlmcmFtZSB7XHJcbiAgICAgICAgYm9yZGVyOiAwO1xyXG4gICAgICB9XHJcbiAgICAgIC5mYjNkLWltYWdlIGltZyB7XHJcbiAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgICAgIG1heC1oZWlnaHQ6IDEwMCU7XHJcbiAgICAgIH1cclxuICAgIDwvc3R5bGU+YC5mYjNkUUZpbHRlcigpKS5hcHBlbmRUbyhkb2MuaGVhZCk7XHJcbiAgfVxyXG4gIHN0YXRpYyBkaXNwb3NlKCkge1xyXG4gICAgQ1NTTGF5ZXIuc3R5bGUucmVtb3ZlKCk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcih3aWR0aCwgaGVpZ2h0LCBwcm9wcykge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMucHJvcHMgPSBwcm9wcztcclxuICAgIHRoaXMuakNvbnRhaW5lciA9ICQoJzxkaXYgY2xhc3M9XCJoaWRkZW4gY3NzLWxheWVyXCI+PC9kaXY+Jyk7XHJcbiAgICB0aGlzLnNldFNpemUod2lkdGgsIGhlaWdodCk7XHJcbiAgICB0aGlzLnNldERhdGEoKTtcclxuICAgIHRoaXMuc2V0KHRoaXMuakNvbnRhaW5lclswXSk7XHJcbiAgfVxyXG5cclxuICBzZXRTaXplKHdpZHRoLCBoZWlnaHQpIHtcclxuICAgIGNvbnN0IHdpZHRoUHhzID0gdGhpcy5wcm9wcy53aWR0aCwgaGVpZ2h0UHhzID0gaGVpZ2h0L3dpZHRoKndpZHRoUHhzO1xyXG4gICAgdGhpcy5qQ29udGFpbmVyLndpZHRoKHdpZHRoUHhzKS5oZWlnaHQoaGVpZ2h0UHhzKTtcclxuICBcdHRoaXMuc2NhbGUueCA9IDEvKHdpZHRoUHhzL3dpZHRoKTtcclxuICBcdHRoaXMuc2NhbGUueSA9IDEvKHdpZHRoUHhzL3dpZHRoKTtcclxuICB9XHJcblxyXG4gIGNhbGxJbnRlcm5hbChuYW1lKSB7XHJcbiAgICBpZih0aGlzLm9iamVjdCAmJiB0aGlzLm9iamVjdFtuYW1lXSkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHRoaXMub2JqZWN0W25hbWVdKCk7XHJcbiAgICAgIH1cclxuICAgICAgY2F0Y2goZSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmNsZWFySW50ZXJuYWxzKCk7XHJcbiAgfVxyXG5cclxuICBjbGVhckludGVybmFscygpIHtcclxuICAgIHRoaXMuY2FsbEludGVybmFsKCdkaXNwb3NlJyk7XHJcbiAgICAhdGhpcy5jc3MgfHwgdGhpcy5jc3MucmVtb3ZlKCk7XHJcbiAgICAhdGhpcy5odG1sIHx8IHRoaXMuaHRtbC5yZW1vdmUoKTtcclxuICB9XHJcblxyXG4gIHNldERhdGEoY3NzPScnLCBodG1sPScnLCBqcz0nJykge1xyXG4gICAgdGhpcy5jbGVhckludGVybmFscygpO1xyXG5cclxuICAgIHRoaXMuY3NzID0gJChgPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPiR7Y3NzfTwvc3R5bGU+YCkuYXBwZW5kVG8odGhpcy5qQ29udGFpbmVyKTtcclxuICAgIHRoaXMuaHRtbCA9ICQoaHRtbCkuYXBwZW5kVG8odGhpcy5qQ29udGFpbmVyKTtcclxuICAgIGNvbnN0IGluaXQgPSBldmFsKGpzKTtcclxuICAgIGlmKGluaXQpIHtcclxuICAgICAgdGhpcy5vYmplY3QgPSBpbml0KHRoaXMuakNvbnRhaW5lciwgdGhpcy5wcm9wcykgfHwge307XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwZW5kZWRDYWxsKGNsYikge1xyXG4gICAgY29uc3QgdGltZXN0YW1wID0gdGhpcy50aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xyXG4gICAgc2V0VGltZW91dCgoKT0+IHtcclxuICAgICAgaWYodGltZXN0YW1wPT09dGhpcy50aW1lc3RhbXApIHtcclxuICAgICAgICBjbGIoKTtcclxuICAgICAgfVxyXG4gICAgfSwgQ1NTTGF5ZXIuZGVsYXkqLjUpO1xyXG4gIH1cclxuXHJcbiAgaXNIaWRkZW4oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5qQ29udGFpbmVyLmhhc0NsYXNzKCdoaWRkZW4nKTtcclxuICB9XHJcblxyXG4gIGhpZGUoKSB7XHJcbiAgICBsZXQgcmVzO1xyXG4gICAgaWYoIXRoaXMuaXNIaWRkZW4oKSkge1xyXG4gICAgICB0aGlzLmpDb250YWluZXIuYWRkQ2xhc3MoJ2hpZGRlbicpO1xyXG4gICAgICB0aGlzLmNhbGxJbnRlcm5hbCgnaGlkZScpO1xyXG4gICAgICByZXMgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSk9PiB7XHJcbiAgICAgICAgdGhpcy5wZW5kZWRDYWxsKCgpPT4ge1xyXG4gICAgICAgICAgdGhpcy5jYWxsSW50ZXJuYWwoJ2hpZGRlbicpO1xyXG4gICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXMgPSBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBzaG93KCkge1xyXG4gICAgbGV0IHJlcztcclxuICAgIGlmKHRoaXMuaXNIaWRkZW4oKSkge1xyXG4gICAgICB0aGlzLmpDb250YWluZXIucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xyXG4gICAgICB0aGlzLmNhbGxJbnRlcm5hbCgnc2hvdycpO1xyXG4gICAgICByZXMgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSk9PiB7XHJcbiAgICAgICAgdGhpcy5wZW5kZWRDYWxsKCgpPT4ge1xyXG4gICAgICAgICAgdGhpcy5jYWxsSW50ZXJuYWwoJ3Nob3duJyk7XHJcbiAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJlcyA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0NTU0xheWVyLmpzIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FjaGUge1xyXG5cclxuICBjb25zdHJ1Y3RvcihtYXhTaXplPUluZmluaXR5LCBzaXplb2Y9Q2FjaGUuY291bnRTaXplb2YpIHtcclxuICAgIHRoaXMub3MgPSBuZXcgTWFwKCk7XHJcbiAgICB0aGlzLnNpemVvZiA9IHNpemVvZjtcclxuICAgIHRoaXMubWF4U2l6ZSA9IG1heFNpemU7XHJcbiAgICB0aGlzLnNpemUgPSAwO1xyXG4gIH1cclxuXHJcbiAgZm9yRWFjaChjbGIpIHtcclxuICAgIHRoaXMub3MuZm9yRWFjaCgodiwgayk9PiBjbGIoW2ssdl0pKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjb3VudFNpemVvZih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIDE7XHJcbiAgfVxyXG5cclxuICByZW1vdmUoaykge1xyXG4gICAgbGV0IHJlcyA9IGZhbHNlO1xyXG4gICAgY29uc3QgdiA9IHRoaXMub3MuZ2V0KGspO1xyXG4gICAgaWYoIXYubG9ja2VkIHx8ICF2LmxvY2tlZChrKSkge1xyXG4gICAgICB0aGlzLnNpemUgLT0gdGhpcy5zaXplb2Yodik7XHJcbiAgICAgIGlmKHYuZGlzcG9zZSkge1xyXG4gICAgICAgIHYuZGlzcG9zZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMub3MuZGVsZXRlKGspO1xyXG4gICAgICByZXMgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIGZyZWVTcGFjZSgpIHtcclxuICAgIGNvbnN0IGFyciA9IFtdO1xyXG4gICAgZm9yKGxldCBwIG9mIHRoaXMub3MpIHtcclxuICAgICAgYXJyLnB1c2goe3RpbWVzdGFtcDogcFsxXS50aW1lc3RhbXAsIGtleTogcFswXX0pO1xyXG4gICAgfVxyXG4gICAgYXJyLnNvcnQoKGEsIGIpPT4gYS50aW1lc3RhbXAtYi50aW1lc3RhbXApO1xyXG4gICAgZm9yKGxldCBpPTA7IGk8YXJyLmxlbmd0aCAmJiB0aGlzLnNpemU+Myp0aGlzLm1heFNpemUvNDsgKytpKSB7XHJcbiAgICAgIHRoaXMucmVtb3ZlKGFycltpXS5rZXkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGNvbnN0IGFyciA9IFtdO1xyXG4gICAgZm9yKGxldCBwIG9mIHRoaXMub3MpIHtcclxuICAgICAgYXJyLnB1c2goe3Y6IHBbMV0sIGs6IHBbMF19KTtcclxuICAgIH1cclxuICAgIGZvcihsZXQgbyBvZiBhcnIpIHtcclxuICAgICAgaWYoby52LmRpc3Bvc2UpIHtcclxuICAgICAgICBvLnYuZGlzcG9zZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMub3MuZGVsZXRlKG8uayk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcmVjdXJzaW9uU2l6ZW9mKHZhbHVlKSB7XHJcbiAgICBsZXQgc2l6ZSA9IDA7XHJcbiAgICBpZih2YWx1ZSkge1xyXG4gICAgICArK3NpemU7XHJcbiAgICAgIGNvbnN0IGxlbiA9IHZhbHVlLmxlbmd0aDtcclxuICAgICAgaWYobGVuPT09dW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZm9yIChsZXQgcCBpbiB2YWx1ZSkge1xyXG4gICAgICAgICAgaWYodmFsdWUuaGFzT3duUHJvcGVydHkocCkpIHtcclxuICAgICAgICAgICAgc2l6ZSs9Q2FjaGUucmVjdXJzaW9uU2l6ZW9mKHZhbHVlW3BdKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgc2l6ZSs9bGVuXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBzaXplO1xyXG4gIH1cclxuXHJcbiAgZ2V0VGltZXN0YW1wKCkge1xyXG4gICAgcmV0dXJuIERhdGUubm93KCk7XHJcbiAgfVxyXG5cclxuXHJcbiAgZ2V0KGtleSkge1xyXG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLm9zLmdldChrZXkpO1xyXG4gICAgaWYodmFsdWUpIHtcclxuICAgICAgdmFsdWUudGltZXN0YW1wID0gdGhpcy5nZXRUaW1lc3RhbXAoKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZTtcclxuICB9XHJcblxyXG4gIHB1dChrZXksIHZhbHVlKSB7XHJcbiAgICB2YWx1ZS50aW1lc3RhbXAgPSB0aGlzLmdldFRpbWVzdGFtcCgpO1xyXG4gICAgdGhpcy5vcy5zZXQoa2V5LCB2YWx1ZSk7XHJcbiAgICB0aGlzLnNpemUrPXRoaXMuc2l6ZW9mKHZhbHVlKTtcclxuICAgIGlmKHRoaXMuc2l6ZT50aGlzLm1heFNpemUpIHtcclxuICAgICAgdGhpcy5mcmVlU3BhY2UoKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvQ2FjaGUuanMiLCJpbXBvcnQge1RIUkVFfSBmcm9tICcuLi9saWJzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRyb2xsZXIgZXh0ZW5kcyBUSFJFRS5FdmVudERpc3BhdGNoZXIge1xyXG5cclxuICBoYW5kbGVEZWZhdWx0KGlkLCBlLCBkYXRhKSB7XHJcbiAgICAvL2NvbnNvbGUubG9nKGlkKyctJytlLnR5cGUrJy0nK2RhdGEpO1xyXG4gIH1cclxuXHJcbiAgZGlzcGF0Y2hBc3luYyhlKSB7XHJcbiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT4gdGhpcy5kaXNwYXRjaEV2ZW50KGUpKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcblxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvQ29udHJvbGxlci5qcyIsImltcG9ydCBFdmVudENvbnZlcnRlciBmcm9tICcuL0V2ZW50Q29udmVydGVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1c3RvbUV2ZW50Q29udmVydGVyIGV4dGVuZHMgRXZlbnRDb252ZXJ0ZXIge1xyXG5cclxuICAvLyBjdXN0b21cclxuICAvLyB0ZXN0SW50ZXJzZWN0aW9uKGUsIGRhdGEpO1xyXG4gIC8vIGN1c3RvbS5vYmplY3RcclxuICAvLyB0ZXN0KG9iamVjdCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHduZCwgZG9jLCBjdXN0b21UZXN0PSgpPT4gZmFsc2UsIGVEb2MpIHtcclxuICAgIHN1cGVyKHduZCwgZG9jKTtcclxuXHJcbiAgICB0aGlzLmVEb2MgPSBlRG9jO1xyXG4gICAgdGhpcy5jdXN0b21UZXN0ID0gY3VzdG9tVGVzdDtcclxuICAgIHRoaXMuY3VzdG9tcyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgdGVzdChvYmplY3QxLCBvYmplY3QyKSB7XHJcbiAgICByZXR1cm4gb2JqZWN0MSAmJiBvYmplY3QyPyB0aGlzLmN1c3RvbVRlc3Qob2JqZWN0MSwgb2JqZWN0Mik6IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q2FsbGJhY2sob2JqZWN0KSB7XHJcbiAgICByZXR1cm4gb2JqZWN0LnRhcmdldC5jYWxsYmFjaztcclxuICB9XHJcblxyXG4gIGFkZEN1c3RvbShjdXN0b20pIHtcclxuICAgIHRoaXMuY3VzdG9tcy5wdXNoKGN1c3RvbSk7XHJcbiAgfVxyXG5cclxuICBnZXRPYmplY3QoZSwgZGF0YSkge1xyXG4gICAgbGV0IG9iamVjdDtcclxuICAgIGlmKGRhdGEuZG9jPT09dGhpcy5lRG9jKSB7XHJcbiAgICAgIGZvcihsZXQgY3VzdG9tIG9mIHRoaXMuY3VzdG9tcykge1xyXG4gICAgICAgIG9iamVjdCA9IGN1c3RvbS50ZXN0SW50ZXJzZWN0aW9uKGUsIGRhdGEpO1xyXG4gICAgICAgIGlmKG9iamVjdCkge1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2JqZWN0O1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvQ3VzdG9tRXZlbnRDb252ZXJ0ZXIuanMiLCJpbXBvcnQgVXRpbHMgZnJvbSAnLi9VdGlscyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaW5kZXIge1xyXG5cclxuICBzdGF0aWMgREVMSU1JVEVSID0gJyAnO1xyXG5cclxuICBzdGF0aWMgaXNEZWxpbWV0cihzKSB7XHJcbiAgICByZXR1cm4gcz09PUZpbmRlci5ERUxJTUlURVI7XHJcbiAgfVxyXG5cclxuICBtZXJnZSgpIHtcclxuICAgIGNvbnN0IGFzID0gW10sIG1hcCA9IFtdLCBzdHJzID0gdGhpcy5zdHJzO1xyXG4gICAgbGV0IHAgPSAwO1xyXG4gICAgZm9yKGxldCBpPTA7IGk8c3Rycy5sZW5ndGg7ICsraSkge1xyXG4gICAgICBpZihzdHJzW2ldLmxlbmd0aCkge1xyXG4gICAgICAgIG1hcC5wdXNoKHtcclxuICAgICAgICAgIGJhc2U6IGksXHJcbiAgICAgICAgICBvZmZzZXQ6IHBcclxuICAgICAgICB9KTtcclxuICAgICAgICBhcy5wdXNoKHN0cnNbaV0pO1xyXG4gICAgICAgIHAgKz0gc3Ryc1tpXS5sZW5ndGg7XHJcbiAgICAgICAgaWYoaTxzdHJzLmxlbmd0aC0xICYmICFGaW5kZXIuaXNEZWxpbWV0cihzdHJzW2ldLmNoYXJBdChzdHJzW2ldLmxlbmd0aC0xKSkgJiYgIUZpbmRlci5pc0RlbGltZXRyKHN0cnNbaSsxXS5jaGFyQXQoMCkpKSB7XHJcbiAgICAgICAgICBhcy5wdXNoKEZpbmRlci5ERUxJTUlURVIpO1xyXG4gICAgICAgICAgKytwO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5tYXAgPSBtYXA7XHJcbiAgICB0aGlzLnN0ciA9IGFzLmpvaW4oJycpO1xyXG4gIH1cclxuXHJcbiAgYWRkSGl0cyhwKSB7XHJcbiAgICBjb25zdCBpbmZvID0gdGhpcy5tYXBbVXRpbHMubG93ZXJCb3VuZCh0aGlzLm1hcCwge29mZnNldDogcH0sIChhLCBiKT0+IGEub2Zmc2V0LWIub2Zmc2V0KV07XHJcbiAgICBsZXQgY2hhcnMgPSB0aGlzLnBhdHRlcm4ubGVuZ3RoLCBpID0gaW5mby5iYXNlO1xyXG4gICAgcCAtPSBpbmZvLm9mZnNldDtcclxuICAgIHdoaWxlKGNoYXJzKSB7XHJcbiAgICAgIGlmKHRoaXMuc3Ryc1tpXS5sZW5ndGgpIHtcclxuICAgICAgICBjb25zdCBkZWxpbWV0ZXIgPSBpPHRoaXMuc3Rycy5sZW5ndGgtMSAmJiAhRmluZGVyLmlzRGVsaW1ldHIodGhpcy5zdHJzW2ldLmNoYXJBdCh0aGlzLnN0cnNbaV0ubGVuZ3RoLTEpKSAmJiAhRmluZGVyLmlzRGVsaW1ldHIodGhpcy5zdHJzW2krMV0uY2hhckF0KDApKSxcclxuICAgICAgICAgICAgICBsZW5ndGggPSBNYXRoLm1pbih0aGlzLnN0cnNbaV0ubGVuZ3RoKyhkZWxpbWV0ZXI/IDE6IDApLXAsIGNoYXJzKTtcclxuICAgICAgICBpZihwPHRoaXMuc3Ryc1tpXS5sZW5ndGgpIHtcclxuICAgICAgICAgIHRoaXMuaGl0cy5wdXNoKHtcclxuICAgICAgICAgICAgaW5kZXg6IGksXHJcbiAgICAgICAgICAgIG9mZnNldDogcCxcclxuICAgICAgICAgICAgbGVuZ3RoOiBNYXRoLm1pbihsZW5ndGgsIHRoaXMuc3Ryc1tpXS5sZW5ndGgtcCksXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2hhcnMgLT0gbGVuZ3RoO1xyXG4gICAgICAgICsraTtcclxuICAgICAgICBwID0gMDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYWRkQ29udGV4dChwKSB7XHJcbiAgICBsZXQgZiA9IHAsIGwgPSBwK3RoaXMucGF0dGVybi5sZW5ndGgtMSwgZGVscyA9IHRoaXMucHJvcHMuY29udGV4dExlbmd0aCwgcHJldkRlbHMgPSBkZWxzKzE7XHJcbiAgICB3aGlsZShkZWxzICYmIHByZXZEZWxzLWRlbHMpIHtcclxuICAgICAgcHJldkRlbHMgPSBkZWxzO1xyXG4gICAgICBpZihkZWxzJTIpIHtcclxuICAgICAgICBmb3IobGV0IGk9Zi0yOyBpPj0wOyAtLWkpIHtcclxuICAgICAgICAgIGlmKEZpbmRlci5pc0RlbGltZXRyKHRoaXMuc3RyW2ldKSB8fCBpPT09MCkge1xyXG4gICAgICAgICAgICBmID0gaT09PTA/IDA6IGkrMTtcclxuICAgICAgICAgICAgLS1kZWxzO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgZm9yKGxldCBpPWwrMjsgaTx0aGlzLnN0ci5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgaWYoRmluZGVyLmlzRGVsaW1ldHIodGhpcy5zdHJbaV0pIHx8IGk9PT10aGlzLnN0ci5sZW5ndGgtMSkge1xyXG4gICAgICAgICAgICBsID0gaT09PXRoaXMuc3RyLmxlbmd0aC0xPyBpPT09dGhpcy5zdHIubGVuZ3RoLTE6IGktMTtcclxuICAgICAgICAgICAgLS1kZWxzO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuY29udGV4dHMucHVzaCh0aGlzLnN0ci5zdWJzdHIoZiwgbC1mKzEpKTtcclxuICB9XHJcblxyXG4gIGdldEhpdHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5oaXRzO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q29udGV4dHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0cztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkZWZhdWx0cyA9IHtcclxuICAgIGNvbnRleHRMZW5ndGg6IDcsXHJcbiAgICBoaXRzOiB0cnVlLFxyXG4gICAgY29udGV4dHM6IHRydWVcclxuICB9O1xyXG5cclxuICBjb25zdHJ1Y3RvcihzdHJzLCBwYXR0ZXJuLCBwcm9wcykge1xyXG4gICAgdGhpcy5wcm9wcyA9IHtcclxuICAgICAgLi4uRmluZGVyLmRlZmF1bHRzLFxyXG4gICAgICAuLi5wcm9wc1xyXG4gICAgfTtcclxuICAgIHRoaXMuc3RycyA9IHN0cnM7XHJcbiAgICBjb25zdCBkYXRhID0gdGhpcy5tZXJnZShzdHJzKTtcclxuICAgIHRoaXMuaGl0cyA9IFtdO1xyXG4gICAgdGhpcy5jb250ZXh0cyA9IFtdO1xyXG4gICAgdGhpcy5wYXR0ZXJuID0gcGF0dGVybi50b0xvd2VyQ2FzZSgpO1xyXG4gICAgdGhpcy5sc3RyID0gdGhpcy5zdHIudG9Mb3dlckNhc2UoKTtcclxuICAgIGxldCBwID0gMDtcclxuICAgIHdoaWxlKHRydWUpIHtcclxuICAgICAgcCA9IHRoaXMubHN0ci5pbmRleE9mKHRoaXMucGF0dGVybiwgcCk7XHJcbiAgICAgIGlmKHA9PT0tMSkge1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMuYWRkSGl0cyhwKTtcclxuICAgICAgICB0aGlzLmFkZENvbnRleHQocCk7XHJcbiAgICAgICAgcCArPSB0aGlzLnBhdHRlcm4ubGVuZ3RoO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0ZpbmRlci5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBGdWxsU2NyZWVuIGZyb20gJy4vRnVsbFNjcmVlbic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGdWxsU2NyZWVuWCBleHRlbmRzIEZ1bGxTY3JlZW4ge1xyXG5cclxuXHRzdGF0aWMgYXZhaWxhYmxlKCkge1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZGVmTm9kZSA9ICQoKTtcclxuXHRzdGF0aWMgbm9kZSA9IEZ1bGxTY3JlZW5YLmRlZk5vZGU7XHJcblx0c3RhdGljIGRlZkhhbmRsZXIgPSAoKT0+IHVuZGVmaW5lZFxyXG5cdHN0YXRpYyBoYW5kbGVyID0gRnVsbFNjcmVlblguZGVmSGFuZGxlcjtcclxuXHRzdGF0aWMgY2xhc3NYID0gJ2ZiM2QtZnVsbHNjcmVlbngnO1xyXG5cdHN0YXRpYyBzdHlsZSA9ICQoYFxyXG5cdFx0PHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPlxyXG4gICAgICAuJHtGdWxsU2NyZWVuWC5jbGFzc1h9IHtcclxuICAgICAgICBwb3NpdGlvbjogZml4ZWQgIWltcG9ydGFudDtcclxuXHRcdFx0XHRsZWZ0OiAwICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgdG9wOiAwICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcclxuICAgICAgICBoZWlnaHQ6IDEwMCUgIWltcG9ydGFudDtcclxuXHRcdFx0XHR6LWluZGV4OiAyMTQ3NDgzNjQ3ICFpbXBvcnRhbnQ7XHJcblx0XHRcdFx0bWFyZ2luOiAwICFpbXBvcnRhbnQ7XHJcblx0XHRcdFx0Ym94LXNpemluZzogYm9yZGVyLWJveCAhaW1wb3J0YW50O1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMzMzM7XHJcbiAgICAgIH1cclxuICAgIDwvc3R5bGU+XHJcblx0YC5mYjNkUUZpbHRlcigpKS5hcHBlbmRUbygnaGVhZCcpO1xyXG5cclxuXHRzdGF0aWMgYWN0aXZhdGVkKCkge1xyXG5cdFx0cmV0dXJuIHN1cGVyLmF2YWlsYWJsZSgpPyBzdXBlci5hY3RpdmF0ZWQoKTogRnVsbFNjcmVlblgubm9kZS5oYXNDbGFzcyhGdWxsU2NyZWVuWC5jbGFzc1gpO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGFkZEV2ZW50TGlzdGVuZXIoZWxlbWVudCwgaGFuZGxlcikge1xyXG5cdFx0aWYoc3VwZXIuYXZhaWxhYmxlKCkpIHtcclxuXHRcdFx0c3VwZXIuYWRkRXZlbnRMaXN0ZW5lcihlbGVtZW50LCBoYW5kbGVyKTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRGdWxsU2NyZWVuWC5oYW5kbGVyID0gaGFuZGxlcjtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHN0YXRpYyByZW1vdmVFdmVudExpc3RlbmVyKGVsZW1lbnQsIGhhbmRsZXIpIHtcclxuXHRcdGlmKHN1cGVyLmF2YWlsYWJsZSgpKSB7XHJcblx0XHRcdHN1cGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoZWxlbWVudCwgaGFuZGxlcik7XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0RnVsbFNjcmVlblguaGFuZGxlciA9IEZ1bGxTY3JlZW5YLmRlZkhhbmRsZXI7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgcmVxdWVzdChlbGVtZW50KSB7XHJcblx0XHRpZihzdXBlci5hdmFpbGFibGUoKSkge1xyXG5cdFx0XHRzdXBlci5yZXF1ZXN0KGVsZW1lbnQpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdGlmKCFGdWxsU2NyZWVuWC5ub2RlLmhhc0NsYXNzKEZ1bGxTY3JlZW5YLmNsYXNzWCkpIHtcclxuXHRcdFx0XHRGdWxsU2NyZWVuWC5ub2RlID0gJChlbGVtZW50IHx8IGRvY3VtZW50LmJvZHkpO1xyXG5cdFx0XHRcdEZ1bGxTY3JlZW5YLm5vZGUuYWRkQ2xhc3MoRnVsbFNjcmVlblguY2xhc3NYKTtcclxuXHRcdFx0XHRQcm9taXNlLnJlc29sdmUoKS50aGVuKEZ1bGxTY3JlZW5YLmhhbmRsZXIpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgY2FuY2VsKCkge1xyXG5cdFx0aWYoc3VwZXIuYXZhaWxhYmxlKCkpIHtcclxuXHRcdFx0c3VwZXIuY2FuY2VsKCk7XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0aWYoRnVsbFNjcmVlblgubm9kZS5oYXNDbGFzcyhGdWxsU2NyZWVuWC5jbGFzc1gpKSB7XHJcblx0XHRcdFx0RnVsbFNjcmVlblgubm9kZS5yZW1vdmVDbGFzcyhGdWxsU2NyZWVuWC5jbGFzc1gpO1xyXG5cdFx0XHRcdEZ1bGxTY3JlZW5YLm5vZGUgPSBGdWxsU2NyZWVuWC5kZWZOb2RlO1xyXG5cdFx0XHRcdFByb21pc2UucmVzb2x2ZSgpLnRoZW4oRnVsbFNjcmVlblguaGFuZGxlcik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0Z1bGxTY3JlZW5YLmpzIiwiaW1wb3J0IHtQREZKU30gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuL1V0aWxzJztcclxuXHJcblBERkpTLkdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyU3JjID0gKHdpbmRvdy5QREZKU19MT0NBTEU/IFBERkpTX0xPQ0FMRTogR0xPQkFMX1BBVEhTKS5wZGZKc1dvcmtlcjtcclxuUERGSlMuY01hcFVybCA9ICh3aW5kb3cuUERGSlNfTE9DQUxFPyBQREZKU19MT0NBTEU6IEdMT0JBTF9QQVRIUykucGRmSnNDTWFwVXJsO1xyXG5QREZKUy5jTWFwUGFja2VkID0gdHJ1ZTtcclxuUERGSlMuZGlzYWJsZUF1dG9GZXRjaCA9IHRydWU7XHJcblBERkpTLmRpc2FibGVTdHJlYW0gPSB0cnVlO1xyXG5QREZKUy5kaXNhYmxlUmFuZ2UgPSBmYWxzZTtcclxuUERGSlMuaW1hZ2VSZXNvdXJjZXNQYXRoID0gJ2ltYWdlcy9wZGZqcy8nO1xyXG5QREZKUy5leHRlcm5hbExpbmtUYXJnZXQgPSBQREZKUy5MaW5rVGFyZ2V0LkJMQU5LO1xyXG5QREZKUy5kaXNhYmxlRm9udEZhY2UgPSB1bmRlZmluZWQ7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZGYge1xyXG5cclxuICBjb25zdHJ1Y3RvcihzcmMsIGxvYWRpbmdQcm9ncmVzcywgb3Blbk9wdGlvbnMpIHtcclxuICAgIHRoaXMuc3JjID0gVXRpbHMubm9ybWFsaXplVXJsKHNyYyk7XHJcbiAgICB0aGlzLmhhbmRsZXJRdWV1ZSA9IFtdO1xyXG4gICAgdGhpcy5wcm9ncmVzRGF0YSA9IHtsb2FkZWQ6IC0xLCB0b3RhbDogMX07XHJcbiAgICB0aGlzLmxvYWRpbmdQcm9ncmVzcyA9IGxvYWRpbmdQcm9ncmVzcztcclxuXHJcbiAgICB0aGlzLnRhc2sgPSBQREZKUy5nZXREb2N1bWVudCh7XHJcbiAgICAgIHVybDogdGhpcy5zcmMsXHJcbiAgICAgIHJhbmdlQ2h1bmtTaXplOiA1MTIqMTAyNCxcclxuICAgICAgY01hcFVybDogUERGSlMuY01hcFVybCxcclxuICAgICAgY01hcFBhY2tlZDogUERGSlMuY01hcFBhY2tlZCxcclxuICAgICAgZGlzYWJsZUF1dG9GZXRjaDogUERGSlMuZGlzYWJsZUF1dG9GZXRjaCxcclxuICAgICAgZGlzYWJsZVN0cmVhbTogUERGSlMuZGlzYWJsZVN0cmVhbSxcclxuICAgICAgZGlzYWJsZVJhbmdlOiBQREZKUy5kaXNhYmxlUmFuZ2UsXHJcbiAgICAgIGltYWdlUmVzb3VyY2VzUGF0aDogUERGSlMuaW1hZ2VSZXNvdXJjZXNQYXRoLFxyXG4gICAgICBleHRlcm5hbExpbmtUYXJnZXQ6IFBERkpTLmV4dGVybmFsTGlua1RhcmdldCxcclxuICAgICAgZGlzYWJsZUZvbnRGYWNlOiBQREZKUy5kaXNhYmxlRm9udEZhY2UsXHJcbiAgICAgIC4uLm9wZW5PcHRpb25zXHJcbiAgICB9KTtcclxuICAgIHRoaXMudGFzay5vblByb2dyZXNzID0gKGRhdGEpPT4ge1xyXG4gICAgICBpZih0aGlzLmxvYWRpbmdQcm9ncmVzcykge1xyXG4gICAgICAgIGxldCBjdXIgPSBNYXRoLmZsb29yKDEwMCpkYXRhLmxvYWRlZC9kYXRhLnRvdGFsKSxcclxuICAgICAgICAgICAgICBvbGQgPSBNYXRoLmZsb29yKDEwMCp0aGlzLnByb2dyZXNEYXRhLmxvYWRlZC90aGlzLnByb2dyZXNEYXRhLnRvdGFsKTtcclxuICAgICAgICBpZihjdXIhPT1vbGQpIHtcclxuICAgICAgICAgIGN1ciA9IGlzTmFOKGN1cik/IDA6IGN1cjtcclxuICAgICAgICAgIGN1ciA9IGN1cj4xMDA/IDEwMDogY3VyO1xyXG4gICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+IHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkaW5nUHJvZ3Jlc3MoY3VyKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB0aGlzLnByb2dyZXNEYXRhID0gZGF0YTtcclxuICAgIH07XHJcbiAgICB0aGlzLnRhc2sucHJvbWlzZS50aGVuKChoYW5kbGVyKT0+IHtcclxuICAgICAgaWYoaGFuZGxlci5udW1QYWdlcz4xKSB7XHJcbiAgICAgICAgUHJvbWlzZS5hbGwoW2hhbmRsZXIuZ2V0UGFnZSgxKSwgaGFuZGxlci5nZXRQYWdlKDIpXSkuXHJcbiAgICAgICAgdGhlbigocGFnZXMpPT4ge1xyXG4gICAgICAgICAgdGhpcy5pbml0KGhhbmRsZXIsIHBhZ2VzKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB0aGlzLmluaXQoaGFuZGxlcik7XHJcbiAgICAgIH1cclxuICAgIH0pLlxyXG4gICAgY2F0Y2goKGUpPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICBpZih0aGlzLmVycm9ySGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMuZXJyb3JIYW5kbGVyKGUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGluaXQoaGFuZGxlciwgcGFnZXMpIHtcclxuICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XHJcbiAgICBpZihwYWdlcykge1xyXG4gICAgICBjb25zdCBwMHMgPSBQZGYuZ2V0UGFnZVNpemUocGFnZXNbMF0pLCBwMXMgPSBQZGYuZ2V0UGFnZVNpemUocGFnZXNbMV0pO1xyXG4gICAgICB0aGlzLmRvdWJsZWRQYWdlcyA9IChwMHMud2lkdGgvcDBzLmhlaWdodCkvKHAxcy53aWR0aC9wMXMuaGVpZ2h0KTwwLjc1O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuZG91YmxlZFBhZ2VzID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBsZXQgZG9uZSA9IFByb21pc2UucmVzb2x2ZShoYW5kbGVyKTtcclxuICAgIGZvcihsZXQgY2xiIG9mIHRoaXMuaGFuZGxlclF1ZXVlLnJldmVyc2UoKSkge1xyXG4gICAgICBkb25lID0gZG9uZS50aGVuKChoYW5kbGVyKT0+IHtcclxuICAgICAgICBjbGIoaGFuZGxlcik7XHJcbiAgICAgICAgcmV0dXJuIGhhbmRsZXI7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0UGFnZVR5cGUobikge1xyXG4gICAgcmV0dXJuICF0aGlzLmRvdWJsZWRQYWdlcyB8fCBuPT09MCB8fCBuPT09dGhpcy5nZXRQYWdlc051bSgpLTE/ICdmdWxsJzogKG4mMT8gJ2xlZnQnOiAncmlnaHQnKTtcclxuICB9XHJcblxyXG4gIGdldFBhZ2Uobikge1xyXG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlci5nZXRQYWdlKHRoaXMuZG91YmxlZFBhZ2VzPyBNYXRoLmNlaWwobi8yKSsxOiBuKzEpO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGVzdGluYXRpb24oZGVzdCkge1xyXG4gICAgbGV0IGRlc3RQcm9taXNlO1xyXG4gICAgaWYodHlwZW9mIGRlc3Q9PT0nc3RyaW5nJykge1xyXG4gICAgICBkZXN0UHJvbWlzZSA9IHRoaXMuaGFuZGxlci5nZXREZXN0aW5hdGlvbihkZXN0KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBkZXN0UHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShkZXN0KTtcclxuICAgIH1cclxuICAgIGRlc3RQcm9taXNlID0gZGVzdFByb21pc2UuXHJcbiAgICAgIHRoZW4oKGRlc3QpPT4gdGhpcy5oYW5kbGVyLmdldFBhZ2VJbmRleChkZXN0WzBdKSkuXHJcbiAgICAgIHRoZW4oKG51bWJlcik9PiB0aGlzLmRvdWJsZWRQYWdlcz8gKG51bWJlcjwxPyBudW1iZXI6IDErMioobnVtYmVyLTEpKTogbnVtYmVyKS5cclxuICAgICAgY2F0Y2goKCk9PiBjb25zb2xlLmVycm9yKCdCYWQgYm9va21hcmsnKSk7XHJcbiAgICByZXR1cm4gZGVzdFByb21pc2U7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5oYW5kbGVyUXVldWUuc3BsaWNlKDAsIHRoaXMuaGFuZGxlclF1ZXVlLmxlbmd0aCk7XHJcbiAgICBkZWxldGUgdGhpcy5oYW5kbGVyO1xyXG4gIH1cclxuXHJcbiAgc2V0TG9hZGluZ1Byb2dyZXNzQ2xiKGNsYikge1xyXG4gICAgdGhpcy5sb2FkaW5nUHJvZ3Jlc3MgPSBjbGI7XHJcbiAgfVxyXG5cclxuICBzZXRFcnJvckhhbmRsZXIoZWgpIHtcclxuICAgIHRoaXMuZXJyb3JIYW5kbGVyID0gZWg7XHJcbiAgfVxyXG5cclxuICBnZXRQYWdlc051bSgpIHtcclxuICAgIHJldHVybiB0aGlzLmhhbmRsZXI/ICh0aGlzLmRvdWJsZWRQYWdlcz8gMioodGhpcy5oYW5kbGVyLm51bVBhZ2VzLTEpOiB0aGlzLmhhbmRsZXIubnVtUGFnZXMpOiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0UGFnZVNpemUocGFnZSkge1xyXG4gICAgY29uc3QgeCA9IHBhZ2Uudmlld1syXS1wYWdlLnZpZXdbMF0sIHkgPSBwYWdlLnZpZXdbM10tcGFnZS52aWV3WzFdLCBhID0gcGFnZS5yb3RhdGUqTWF0aC5QSS8xODA7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB3aWR0aDogTWF0aC5hYnMoeCpNYXRoLmNvcyhhKS15Kk1hdGguc2luKGEpKSxcclxuICAgICAgaGVpZ2h0OiBNYXRoLmFicyh4Kk1hdGguc2luKGEpK3kqTWF0aC5jb3MoYSkpXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbi8vICAgaWYocGFnZXM+MSkge1xyXG4vLyAgIGhhbmRsZXIuZ2V0UGFnZSgyKS5cclxuLy8gICB0aGVuKChwYWdlKT0+IHtcclxuLy8gICAgIGNvbnN0IHNpemUxID0gUGRmLmdldFBhZ2VTaXplKHBhZ2UpO1xyXG4vLyAgICAgdGhpcy5wcm9wcy5kb3VibGVkUGFnZXMgPSAyKnNpemUwLndpZHRoPT09c2l6ZTEud2lkdGg7XHJcbi8vICAgICB0aGlzLnJlYWR5KCk7XHJcbi8vICAgfSkuXHJcbi8vICAgY2F0Y2goKCk9PiB0aGlzLnJlYWR5KCkpO1xyXG4vLyB9XHJcbi8vIGVsc2Uge1xyXG5cclxuICBnZXRIYW5kbGVyKGNsYikge1xyXG4gICAgaWYodGhpcy5oYW5kbGVyKSB7XHJcbiAgICAgIGNsYih0aGlzLmhhbmRsZXIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuaGFuZGxlclF1ZXVlLnB1c2goY2xiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1BkZi5qcyIsImltcG9ydCB7VEhSRUUsICR9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGhyZWVFdmVudENvbnZlcnRlckZzIHtcclxuXHJcbiAgc3RhdGljIG9iamVjdHNUZXN0KG9iamVjdDEsIG9iamVjdDIpIHtcclxuICAgIHJldHVybiBvYmplY3QxICYmIG9iamVjdDI/IG9iamVjdDEub2JqZWN0PT09b2JqZWN0Mi5vYmplY3Q6IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG9iamVjdHNBbmRGYWNlc1Rlc3Qob2JqZWN0MSwgb2JqZWN0Mikge1xyXG4gICAgcmV0dXJuIG9iamVjdDEgJiYgb2JqZWN0Mj8gb2JqZWN0MS5vYmplY3Q9PT1vYmplY3QyLm9iamVjdCAmJiBvYmplY3QxLmZhY2UubWF0ZXJpYWxJbmRleD09PW9iamVjdDIuZmFjZS5tYXRlcmlhbEluZGV4OiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbFdvcmxkLCB0ZXN0PVRocmVlRXZlbnRDb252ZXJ0ZXJGcy5vYmplY3RzQW5kRmFjZXNUZXN0KSB7XHJcbiAgICB0aGlzLnZpc3VhbCA9IHZpc3VhbFdvcmxkO1xyXG4gICAgdGhpcy5jb29yZHMgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xyXG4gICAgdGhpcy5yYXljYXN0ZXIgPSB0aGlzLnZpc3VhbC5yYXljYXN0ZXI7XHJcbiAgICB0aGlzLmNhbWVyYSA9IHRoaXMudmlzdWFsLmNhbWVyYTtcclxuICAgIHRoaXMudGhyZWVzID0gW107XHJcbiAgICB0aGlzLnRlc3QgPSB0ZXN0O1xyXG4gIH1cclxuXHJcbiAgYWRkVGhyZWUodGhyZWUpIHtcclxuICAgIHRoaXMudGhyZWVzLnB1c2godGhyZWUpO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlVGhyZWUodGhyZWUpIHtcclxuICAgIGNvbnN0IGkgPSB0aGlzLnRocmVlcy5pbmRleE9mKHRocmVlKTtcclxuICAgIGlmKH5pKSB7XHJcbiAgICAgIHRoaXMudGhyZWVzLnNwbGljZShpLCAxKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldE9iamVjdChlKSB7XHJcbiAgICB0aGlzLnNldENvb3Jkc0Zyb21FdmVudChlKTtcclxuICAgIHRoaXMucmF5Y2FzdGVyLnNldEZyb21DYW1lcmEodGhpcy5jb29yZHMsIHRoaXMuY2FtZXJhKTtcclxuICAgIGNvbnN0IGludGVyc2VjdHMgPSB0aGlzLnJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKHRoaXMudGhyZWVzKTtcclxuICAgIHJldHVybiBpbnRlcnNlY3RzWzBdO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvVGhyZWVFdmVudENvbnZlcnRlci5qcyIsImltcG9ydCBCYXNlTWF0aFV0aWxzIGZyb20gJy4vQmFzZU1hdGhVdGlscyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaHJlZVV0aWxzIHtcclxuXHJcbiAgc3RhdGljIHZlcnRpY2VzMlVWcyh2ZXJ0aWNlcywgaW5kZWNlcywgZmlyc3QsIGxhc3QsIGNvbnZlckNsYikge1xyXG4gICAgY29uc3QgciA9IFtdO1xyXG4gICAgZm9yKGxldCBpID0gZmlyc3Q7IGk8bGFzdDsgKytpKSB7XHJcbiAgICAgIGNvbnN0IHZpcyA9IFtpbmRlY2VzW2ldLmEsaW5kZWNlc1tpXS5iLGluZGVjZXNbaV0uY107XHJcbiAgICAgIGZvcihsZXQgaiA9IDA7IGo8dmlzLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgaWYoIXJbdmlzW2pdXSkge1xyXG4gICAgICAgICAgclt2aXNbal1dID0gY29udmVyQ2xiKHZlcnRpY2VzW3Zpc1tqXV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHI7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY29tcHV0ZUZhY2VWZXJ0ZXhVdnMoZ2VvbWV0cnksIGZhY2VzKSB7XHJcbiAgICBjb25zdCB1dnMgPSBbXHJcbiAgICAgICAgICAgICAgICBUaHJlZVV0aWxzLnZlcnRpY2VzMlVWcyhnZW9tZXRyeS52ZXJ0aWNlcywgZ2VvbWV0cnkuZmFjZXMsIDAsIGZhY2VzWzBdLCAocCk9Pm5ldyBUSFJFRS5WZWN0b3IyKHAueCwgMS1wLnopKSxcclxuICAgICAgICAgICAgICAgIFRocmVlVXRpbHMudmVydGljZXMyVVZzKGdlb21ldHJ5LnZlcnRpY2VzLCBnZW9tZXRyeS5mYWNlcywgZmFjZXNbMF0sIGZhY2VzWzFdLCAocCk9Pm5ldyBUSFJFRS5WZWN0b3IyKDEtcC54LCAxLXAueikpLFxyXG4gICAgICAgICAgICAgICAgVGhyZWVVdGlscy52ZXJ0aWNlczJVVnMoZ2VvbWV0cnkudmVydGljZXMsIGdlb21ldHJ5LmZhY2VzLCBmYWNlc1sxXSwgZmFjZXNbMl0sIChwKT0+bmV3IFRIUkVFLlZlY3RvcjIocC54LCBwLnkpKSxcclxuICAgICAgICAgICAgICAgIFRocmVlVXRpbHMudmVydGljZXMyVVZzKGdlb21ldHJ5LnZlcnRpY2VzLCBnZW9tZXRyeS5mYWNlcywgZmFjZXNbMl0sIGZhY2VzWzNdLCAocCk9Pm5ldyBUSFJFRS5WZWN0b3IyKDEtcC54LCBwLnkpKSxcclxuICAgICAgICAgICAgICAgIFRocmVlVXRpbHMudmVydGljZXMyVVZzKGdlb21ldHJ5LnZlcnRpY2VzLCBnZW9tZXRyeS5mYWNlcywgZmFjZXNbM10sIGZhY2VzWzRdLCAocCk9Pm5ldyBUSFJFRS5WZWN0b3IyKHAueiwgcC55KSksXHJcbiAgICAgICAgICAgICAgICBUaHJlZVV0aWxzLnZlcnRpY2VzMlVWcyhnZW9tZXRyeS52ZXJ0aWNlcywgZ2VvbWV0cnkuZmFjZXMsIGZhY2VzWzRdLCBnZW9tZXRyeS5mYWNlcy5sZW5ndGgsIChwKT0+bmV3IFRIUkVFLlZlY3RvcjIoMS1wLnosIHAueSkpXHJcbiAgICBdO1xyXG5cclxuICAgIGxldCB1dnNpID0gMDtcclxuICAgIGZvcihsZXQgaSA9IDA7IGk8Z2VvbWV0cnkuZmFjZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgdXZzaSArPSBmYWNlc1t1dnNpXSA9PT0gaTtcclxuICAgICAgY29uc3QgZiA9IGdlb21ldHJ5LmZhY2VzW2ldO1xyXG4gICAgICBmLm1hdGVyaWFsSW5kZXggPSB1dnNpO1xyXG4gICAgICBnZW9tZXRyeS5mYWNlVmVydGV4VXZzWzBdW2ldID0gW3V2c1t1dnNpXVtmLmFdLCB1dnNbdXZzaV1bZi5iXSwgdXZzW3V2c2ldW2YuY11dO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNyZWF0ZU1hcmtlcihwLCBjLCBzaXplKSB7XHJcbiAgICBjb25zdCBtYXJrZXIgPSBuZXcgVEhSRUUuTWVzaChuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoc2l6ZSksIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7IGNvbG9yOiBjIH0pKTtcclxuICAgIG1hcmtlci5wb3NpdGlvbi5zZXQocC54LHAueSxwLnopO1xyXG4gICAgcmV0dXJuIG1hcmtlcjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmaW5kVXZUcmlzKGdlb21ldHJ5LCBwcywgZmlyc3QsIGxhc3QpIHtcclxuICAgIGNvbnN0IHJlcyA9IFtdO1xyXG4gICAgZm9yKGxldCBwIG9mIHBzKSB7XHJcbiAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xyXG4gICAgICBmb3IobGV0IGk9Zmlyc3Q7IGk8bGFzdCAmJiAhZm91bmQ7ICsraSkge1xyXG4gICAgICAgIGNvbnN0IHRyaSA9IGdlb21ldHJ5LmZhY2VWZXJ0ZXhVdnNbMF1baV07XHJcbiAgICAgICAgaWYoQmFzZU1hdGhVdGlscy5pc0luc2lkZUNvbnZQb2x5KHRyaSwgcCkpIHtcclxuICAgICAgICAgIHJlcy5wdXNoKHtcclxuICAgICAgICAgICAgY29lZnM6IEJhc2VNYXRoVXRpbHMuY29tcHV0ZUludGVycENvZWZzKHRyaSwgcCksXHJcbiAgICAgICAgICAgIGlcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZighZm91bmQpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdCYWQgcG9pbnQnKTtcclxuICAgICAgICByZXMucHVzaCh1bmRlZmluZWQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGZpbmRJbnRlcm5hbFZlcnRpY2VzKGdlb21ldHJ5LCBwcywgZmlyc3QsIGxhc3QpIHtcclxuICAgIGNvbnN0IHJlcyA9IHt9O1xyXG4gICAgZm9yKGxldCBpPWZpcnN0OyBpPGxhc3Q7ICsraSkge1xyXG4gICAgICBjb25zdCB0cmkgPSBnZW9tZXRyeS5mYWNlVmVydGV4VXZzWzBdW2ldLCBmID0gZ2VvbWV0cnkuZmFjZXNbaV0sIHZzID0gW2YuYSwgZi5iLCBmLmNdO1xyXG4gICAgICBmb3IobGV0IGo9MDsgajx0cmkubGVuZ3RoOyArK2opIHtcclxuICAgICAgICBpZihyZXNbdnNbal1dPT09dW5kZWZpbmVkICYmIEJhc2VNYXRoVXRpbHMuaXNJbnNpZGVQb2x5KHBzLCB0cmlbal0pKSB7XHJcbiAgICAgICAgICByZXNbdnNbal1dID0ge1xyXG4gICAgICAgICAgICBwOiB0cmlbal0sXHJcbiAgICAgICAgICAgIGk6IHZzW2pdLFxyXG4gICAgICAgICAgICBuOiBmLnZlcnRleE5vcm1hbHNbal1cclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhyZXMpO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvVGhyZWVVdGlscy5qcyIsImltcG9ydCBDb250cm9sbGVyIGZyb20gJy4vQ29udHJvbGxlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXaWRnZXRDb250cm9sbGVyIGV4dGVuZHMgQ29udHJvbGxlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpZXcsIG5hbWUpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgdGhpcy52aWV3ID0gdmlldztcclxuICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgdG9nbGUoKSB7XHJcbiAgICB0aGlzLnZpc2libGUgPSAhdGhpcy52aXNpYmxlO1xyXG4gICAgdGhpcy5maXJlQ2hhbmdlKCk7XHJcbiAgfVxyXG5cclxuICBoaWRlKCkge1xyXG4gICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XHJcbiAgICB0aGlzLmZpcmVDaGFuZ2UoKTtcclxuICB9XHJcblxyXG4gIGZpcmVDaGFuZ2UoKSB7XHJcbiAgICBpZih0aGlzLm9uQ2hhbmdlKSB7XHJcbiAgICAgIHRoaXMub25DaGFuZ2UoKTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVmlldygpIHtcclxuICAgIGlmKHRoaXMudmlldykge1xyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUodGhpcy5uYW1lLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMudmlzaWJsZSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvV2lkZ2V0Q29udHJvbGxlci5qcyIsIlxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYXJnZXQge1xyXG5cclxuICBzdGF0aWMgdGVzdChvYmplY3QxLCBvYmplY3QyKSB7XHJcbiAgICByZXR1cm4gb2JqZWN0MS50YXJnZXQ9PT1vYmplY3QyLnRhcmdldDtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL3RhcmdldHMvVGFyZ2V0LmpzIiwiaW1wb3J0IHskLCB0cn0gZnJvbSAnLi9qcy9saWJzJztcclxuaW1wb3J0IERldGVjdG9yIGZyb20gJ0RldGVjdG9yJztcclxuaW1wb3J0IFZpc3VhbFdvcmxkIGZyb20gJ1Zpc3VhbFdvcmxkJztcclxuaW1wb3J0IFBkZkxpbmtzSGFuZGxlciBmcm9tICcuL2pzL2NsYXNzZXMvUGRmTGlua3NIYW5kbGVyJztcclxuaW1wb3J0IEJvb2sgZnJvbSAnLi9qcy9jbGFzc2VzL0Jvb2snO1xyXG5pbXBvcnQgQm9va1ZpZXcgZnJvbSAnLi9qcy9jbGFzc2VzL0Jvb2tWaWV3JztcclxuaW1wb3J0IEJvb2tDb250cm9sbGVyIGZyb20gJy4vanMvY2xhc3Nlcy9Cb29rQ29udHJvbGxlcic7XHJcbmltcG9ydCBQZGZCb29rUHJvcHNCdWlsZGVyIGZyb20gJy4vanMvY2xhc3Nlcy9QZGZCb29rUHJvcHNCdWlsZGVyJztcclxuaW1wb3J0IENsYkJvb2tQcm9wc0J1aWxkZXIgZnJvbSAnLi9qcy9jbGFzc2VzL0NsYkJvb2tQcm9wc0J1aWxkZXInO1xyXG5pbXBvcnQgTG9hZGluZ0NvbnRyb2xsZXIgZnJvbSAnTG9hZGluZ0NvbnRyb2xsZXInO1xyXG5pbXBvcnQgVXNlck1lc3NhZ2VDb250cm9sbGVyIGZyb20gJ1VzZXJNZXNzYWdlQ29udHJvbGxlcic7XHJcbmltcG9ydCBTZWFyY2ggZnJvbSAnU2VhcmNoJztcclxuaW1wb3J0IEJvb2ttYXJrcyBmcm9tICdCb29rbWFya3MnO1xyXG5pbXBvcnQgVGh1bWJuYWlscyBmcm9tICdUaHVtYm5haWxzJztcclxuaW1wb3J0IFRvY0NvbnRyb2xsZXIgZnJvbSAnLi9qcy9jbGFzc2VzL1RvY0NvbnRyb2xsZXInO1xyXG5pbXBvcnQgU2hhcmVDb250cm9sbGVyIGZyb20gJy4vanMvY2xhc3Nlcy9TaGFyZUNvbnRyb2xsZXInO1xyXG5pbXBvcnQgQm9va1ByaW50ZXIgZnJvbSAnLi9qcy9jbGFzc2VzL0Jvb2tQcmludGVyJztcclxuaW1wb3J0IEF1dG9OYXZpZ2F0b3IgZnJvbSAnLi9qcy9jbGFzc2VzL0F1dG9OYXZpZ2F0b3InO1xyXG5pbXBvcnQgU291bmRzRW52aXJvbWVudCBmcm9tICcuL2pzL2NsYXNzZXMvU291bmRzRW52aXJvbWVudCc7XHJcbmltcG9ydCBGdWxsU2NyZWVuWCBmcm9tICdGdWxsU2NyZWVuWCc7XHJcblxyXG4kLmZuLkZsaXBCb29rID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gIGNvbnN0IHNjZW5lID0ge1xyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgaWYodGhpcy5yZWFkeSkge1xyXG4gICAgICAgICFzY2VuZS5wZGZMaW5rc0hhbmRsZXIgfHwgc2NlbmUucGRmTGlua3NIYW5kbGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUucGRmTGlua3NIYW5kbGVyO1xyXG4gICAgICAgIHNjZW5lLnNvdW5kcy5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLnNvdW5kcztcclxuICAgICAgICBzY2VuZS51c2VyTWVzc2FnZUN0cmwuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS51c2VyTWVzc2FnZUN0cmw7XHJcbiAgICAgICAgc2NlbmUudG9jQ3RybC5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLnRvY0N0cmw7XHJcbiAgICAgICAgc2NlbmUudGh1bWJuYWlscy5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLnRodW1ibmFpbHM7XHJcbiAgICAgICAgIXNjZW5lLmJvb2ttYXJrcyB8fCBzY2VuZS5ib29rbWFya3MuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS5ib29rbWFya3M7XHJcbiAgICAgICAgc2NlbmUuc2hhcmVDdHJsLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUuc2hhcmVDdHJsO1xyXG4gICAgICAgIHNjZW5lLmN0cmwuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS5jdHJsO1xyXG4gICAgICAgIHNjZW5lLmJvb2tQcmludGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUuYm9va1ByaW50ZXI7XHJcbiAgICAgICAgc2NlbmUuYm9vay5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLmJvb2s7XHJcbiAgICAgICAgc2NlbmUucHJvcHNCdWlsZGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUucHJvcHNCdWlsZGVyO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS5ib29rQnVpbGRlcjtcclxuICAgICAgICBzY2VuZS52aXN1YWwuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS52aXN1YWw7XHJcbiAgICAgICAgc2NlbmUudmlldy5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLnZpZXc7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLmRpc3Bvc2U7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy5wZW5kaW5nRGlzcG9zZSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG4gIG9wdGlvbnMgPSB7Li4ub3B0aW9uc307XHJcbiAgY29uc3QgcGFyZW50Q29udGFpbmVyID0gdGhpcy5sZW5ndGg/IHRoaXNbMF06ICQoJzxkaXY+JykuYXBwZW5kVG8oJ2JvZHknKTtcclxuICBpZihvcHRpb25zLmFjdGl2YXRlRnVsbFNjcmVlbikge1xyXG4gICAgRnVsbFNjcmVlblgucmVxdWVzdChwYXJlbnRDb250YWluZXIpO1xyXG4gIH1cclxuICBzY2VuZS52aWV3ID0gbmV3IEJvb2tWaWV3KHBhcmVudENvbnRhaW5lciwgKCk9PiB7XHJcbiAgICBpZighRGV0ZWN0b3Iud2ViZ2wpIHtcclxuICAgICAgRGV0ZWN0b3IuYWRkR2V0V2ViR0xNZXNzYWdlKHtwYXJlbnQ6IHNjZW5lLnZpZXcuZ2V0VmlldygpfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgc2NlbmUubG9hZGluZ0N0cmwgPSBuZXcgTG9hZGluZ0NvbnRyb2xsZXIoc2NlbmUudmlldywgdHJ1ZSwgKHByb2dyZXNzKT0+IHByb2dyZXNzPT09MD8gdHIoJ1BsZWFzZSB3YWl0Li4uIHRoZSBBcHBsaWNhdGlvbiBpcyBMb2FkaW5nJyk6IHRyKCdQREYgaXMgTG9hZGluZzonKSsnICcrcHJvZ3Jlc3MrJyUnKTtcclxuICAgICAgc2NlbmUudXNlck1lc3NhZ2VDdHJsID0gbmV3IFVzZXJNZXNzYWdlQ29udHJvbGxlcihzY2VuZS52aWV3KTtcclxuICAgICAgc2NlbmUudmlzdWFsID0gbmV3IFZpc3VhbFdvcmxkKHNjZW5lLnZpZXcuZ2V0Q29udGFpbmVyKCkub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldywgc2NlbmUudmlldy5nZXRDb250YWluZXIoKS5vd25lckRvY3VtZW50LCBzY2VuZS52aWV3LmdldFZpZXcoKSk7XHJcbiAgICAgIGlmKG9wdGlvbnMucHJvcGVydGllc0NhbGxiYWNrKSB7XHJcbiAgICAgICAgbmV3IENsYkJvb2tQcm9wc0J1aWxkZXIoc2NlbmUudmlzdWFsLCAoKT0+ICh7dHlwZTogJ2JsYW5rJ30pLCAxLCAocHJvcHMpPT4ge1xyXG4gICAgICAgICAgcHJvcHMgPSBvcHRpb25zLnByb3BlcnRpZXNDYWxsYmFjayhwcm9wcyk7XHJcbiAgICAgICAgICBjb25zdCBzdHlsZSA9IFtdO1xyXG4gICAgICAgICAgaWYocHJvcHMuYmFja2dyb3VuZENvbG9yIT09JycpIHtcclxuICAgICAgICAgICAgc3R5bGUucHVzaCgnYmFja2dyb3VuZC1jb2xvcjojJytuZXcgVEhSRUUuQ29sb3IocHJvcHMuYmFja2dyb3VuZENvbG9yKS5nZXRIZXhTdHJpbmcoKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZihwcm9wcy5iYWNrZ3JvdW5kSW1hZ2UhPT0nJykge1xyXG4gICAgICAgICAgICBzdHlsZS5wdXNoKCdiYWNrZ3JvdW5kLWltYWdlOnVybChcXCcnK3Byb3BzLmJhY2tncm91bmRJbWFnZSsnXFwnKScpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYocHJvcHMuYmFja2dyb3VuZFN0eWxlIT09JycpIHtcclxuICAgICAgICAgICAgc3R5bGUucHVzaChwcm9wcy5iYWNrZ3JvdW5kU3R5bGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYoc3R5bGUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHNjZW5lLnZpZXcuZ2V0VmlldygpLmF0dHIoJ3N0eWxlJywgc3R5bGUuam9pbignOycpKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBzY2VuZS5ib29rQnVpbGRlciA9IChwcm9wcywgc2hlZXRzLCBwYWdlQ2FsbGJhY2spPT4ge1xyXG4gICAgICAgIHByb3BzLmNzc0xheWVyUHJvcHMgPSB7XHJcbiAgICAgICAgICAuLi5wcm9wcy5jc3NMYXllclByb3BzLFxyXG4gICAgICAgICAgc2NlbmVcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmKG9wdGlvbnMucHJvcGVydGllc0NhbGxiYWNrKSB7XHJcbiAgICAgICAgICBwcm9wcyA9IG9wdGlvbnMucHJvcGVydGllc0NhbGxiYWNrKHByb3BzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2NlbmUuYm9vayA9IG5ldyBCb29rKHNjZW5lLnZpc3VhbCwgc2hlZXRzLCBwYWdlQ2FsbGJhY2ssIHByb3BzKTtcclxuICAgICAgICBzY2VuZS5ib29rUHJpbnRlciA9IG5ldyBCb29rUHJpbnRlcihzY2VuZS52aXN1YWwsIHNjZW5lLmJvb2ssIChvcHRpb25zLnRlbXBsYXRlIHx8IHt9KS5wcmludFN0eWxlKTtcclxuICAgICAgICBzY2VuZS5sb2FkaW5nQ3RybC5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLmxvYWRpbmdDdHJsO1xyXG4gICAgICAgIHNjZW5lLmN0cmwgPSBuZXcgQm9va0NvbnRyb2xsZXIoc2NlbmUuYm9vaywgc2NlbmUudmlldywgb3B0aW9ucy5jb250cm9sc1Byb3BzKTtcclxuICAgICAgICBzY2VuZS5ib29rLnNldEluamVjdG9yKCh3KT0+IHtcclxuICAgICAgICAgIHcualF1ZXJ5ID0gdy4kID0gJDtcclxuICAgICAgICAgIHcuYm9vayA9IHNjZW5lLmJvb2s7XHJcbiAgICAgICAgICB3LmJvb2tDdHJsID0gc2NlbmUuY3RybDtcclxuICAgICAgICAgIGlmKHByb3BzLmluamVjdG9yKSB7XHJcbiAgICAgICAgICAgIHByb3BzLmluamVjdG9yKHcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHNjZW5lLnZpZXcuYWRkSGFuZGxlcihzY2VuZS5jdHJsKTtcclxuICAgICAgICBzY2VuZS5jdHJsLnNldFByaW50ZXIoc2NlbmUuYm9va1ByaW50ZXIpO1xyXG4gICAgICAgIGNvbnN0IHRlc3QgPSBwYWdlQ2FsbGJhY2soMCk7XHJcblxyXG4gICAgICAgIHNjZW5lLnRodW1ibmFpbHMgPSBuZXcgVGh1bWJuYWlscyhzY2VuZS52aXN1YWwsIHNjZW5lLnZpZXcuZ2V0VGh1bWJuYWlsc1ZpZXcoKSwgcGFnZUNhbGxiYWNrLCBzY2VuZS5ib29rLmdldFBhZ2VzKCksIHtrV3RvSDogcHJvcHMud2lkdGgvcHJvcHMuaGVpZ2h0fSk7XHJcbiAgICAgICAgc2NlbmUudG9jQ3RybCA9IG5ldyBUb2NDb250cm9sbGVyKHNjZW5lLnZpZXcsIHNjZW5lLmN0cmwpO1xyXG4gICAgICAgIHNjZW5lLnRvY0N0cmwuc2V0VGh1bWJuYWlscyhzY2VuZS50aHVtYm5haWxzKTtcclxuICAgICAgICBpZihvcHRpb25zLm91dGxpbmUpIHtcclxuICAgICAgICAgIHNjZW5lLmJvb2ttYXJrcyA9IG5ldyBCb29rbWFya3Moc2NlbmUudmlldy5nZXRCb29rbWFya3NWaWV3KCksIG9wdGlvbnMub3V0bGluZSk7XHJcbiAgICAgICAgICBzY2VuZS50b2NDdHJsLnNldEJvb2ttYXJrcyhzY2VuZS5ib29rbWFya3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzY2VuZS5jdHJsLnNldFRvY0N0cmwoc2NlbmUudG9jQ3RybCk7XHJcbiAgICAgICAgc2NlbmUudmlldy5hZGRIYW5kbGVyKHNjZW5lLnRvY0N0cmwpO1xyXG5cclxuICAgICAgICBpZih0ZXN0LnR5cGU9PT0ncGRmJykge1xyXG4gICAgICAgICAgc2NlbmUuc2VhcmNoID0gbmV3IFNlYXJjaChzY2VuZS52aWV3LmdldFNlYXJjaFZpZXcoKSwgc2NlbmUuYm9vay5nZXRQYWdlcygpKTtcclxuICAgICAgICAgIHNjZW5lLnNlYXJjaC5vblF1ZXJ5ID0gc2NlbmUuYm9vay5zZXRRdWVyeS5iaW5kKHNjZW5lLmJvb2spO1xyXG4gICAgICAgICAgc2NlbmUuYm9vay5hZGRFdmVudExpc3RlbmVyKCdzZWFyY2hSZXN1bHRzJywgKGUpPT4ge1xyXG4gICAgICAgICAgICBzY2VuZS5zZWFyY2guc2V0UmVzdWx0cyhlLnJlc3VsdHMsIGUubGFzdFBhZ2UpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBzY2VuZS50b2NDdHJsLnNldFNlYXJjaChzY2VuZS5zZWFyY2gpO1xyXG4gICAgICAgICAgc2NlbmUuY3RybC5zZXRUb2NDdHJsKHNjZW5lLnRvY0N0cmwpO1xyXG5cclxuICAgICAgICAgIHNjZW5lLnBkZkxpbmtzSGFuZGxlciA9IG5ldyBQZGZMaW5rc0hhbmRsZXIodGVzdC5zcmMsIHNjZW5lLmN0cmwsIHNjZW5lLnZpc3VhbC5lbGVtZW50KTtcclxuICAgICAgICAgIHNjZW5lLmJvb2suYWRkRXZlbnRMaXN0ZW5lcigncGRmQW5ub3RhdGlvbicsIHNjZW5lLnBkZkxpbmtzSGFuZGxlci5oYW5kbGVFdmVudC5iaW5kKHNjZW5lLnBkZkxpbmtzSGFuZGxlcikpO1xyXG4gICAgICAgICAgaWYoIXNjZW5lLmJvb2ttYXJrcykge1xyXG4gICAgICAgICAgICB0ZXN0LnNyYy5nZXRIYW5kbGVyKChoYW5kbGVyKT0+IHtcclxuICAgICAgICAgICAgICBoYW5kbGVyLmdldE91dGxpbmUoKS5cclxuICAgICAgICAgICAgICAgIHRoZW4oKG91dGxpbmUpPT4ge1xyXG4gICAgICAgICAgICAgICAgICBpZihvdXRsaW5lICYmIG91dGxpbmUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NlbmUuYm9va21hcmtzID0gbmV3IEJvb2ttYXJrcyhzY2VuZS52aWV3LmdldEJvb2ttYXJrc1ZpZXcoKSwgb3V0bGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NlbmUudG9jQ3RybC5zZXRCb29rbWFya3Moc2NlbmUuYm9va21hcmtzLCB0ZXN0LnNyYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NlbmUuY3RybC5zZXRUb2NDdHJsKHNjZW5lLnRvY0N0cmwpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZihvcHRpb25zLnBkZkxpbmtzICYmIG9wdGlvbnMucGRmTGlua3MuaGFuZGxlcikge1xyXG4gICAgICAgICAgICBzY2VuZS5wZGZMaW5rc0hhbmRsZXIuc2V0SGFuZGxlcihvcHRpb25zLnBkZkxpbmtzLmhhbmRsZXIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2NlbmUuc291bmRzID0gbmV3IFNvdW5kc0Vudmlyb21lbnQob3B0aW9ucy50ZW1wbGF0ZSk7XHJcbiAgICAgICAgc2NlbmUuY3RybC5zZXRTb3VuZHMoc2NlbmUuc291bmRzKTtcclxuICAgICAgICBzY2VuZS5zb3VuZHMuc3Vic2NyaWJlRmxpcHMoc2NlbmUuY3RybCk7XHJcblxyXG4gICAgICAgIHNjZW5lLnJlYWR5ID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCBhdXRvTmF2aWdhdG9yID0gbmV3IEF1dG9OYXZpZ2F0b3Ioc2NlbmUudmlzdWFsLCBzY2VuZS5jdHJsLCBvcHRpb25zLmF1dG9OYXZpZ2F0aW9uKTtcclxuICAgICAgICBzY2VuZS5zaGFyZUN0cmwgPSBuZXcgU2hhcmVDb250cm9sbGVyKHNjZW5lLnZpZXcsIHNjZW5lLmN0cmwsIG9wdGlvbnMuc2hhcmVMaW5rQnVpbGRlcj8gb3B0aW9ucy5zaGFyZUxpbmtCdWlsZGVyOiAocGFnZSk9PiB7XHJcbiAgICAgICAgICBsZXQgdTtcclxuICAgICAgICAgIGlmKG5ldyBSZWdFeHAoJyhbPyZdKScrYXV0b05hdmlnYXRvci51cmxQYXJhbSsnPVswLTldKycpLnRlc3QobG9jYXRpb24uaHJlZikpIHtcclxuICAgICAgICAgICAgdSA9IGxvY2F0aW9uLmhyZWYucmVwbGFjZShuZXcgUmVnRXhwKCcoWz8mXSknK2F1dG9OYXZpZ2F0b3IudXJsUGFyYW0rJz1bMC05XSsnKSwgJyQxJythdXRvTmF2aWdhdG9yLnVybFBhcmFtKyc9JytwYWdlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB1ID0gbG9jYXRpb24uaHJlZi5zcGxpdCgnIycpWzBdKyh+bG9jYXRpb24uaHJlZi5pbmRleE9mKCc/Jyk/ICcmJzogJz8nKSthdXRvTmF2aWdhdG9yLnVybFBhcmFtKyc9JytwYWdlK2xvY2F0aW9uLmhhc2g7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gdTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBzY2VuZS5jdHJsLnNldFNoYXJlQ3RybChzY2VuZS5zaGFyZUN0cmwpO1xyXG4gICAgICAgIHNjZW5lLnZpZXcuYWRkSGFuZGxlcihzY2VuZS5zaGFyZUN0cmwpO1xyXG4gICAgICAgIGF1dG9OYXZpZ2F0b3IuZGlzcG9zZSgpO1xyXG4gICAgICAgIGlmKG9wdGlvbnMucmVhZHkpIHtcclxuICAgICAgICAgIG9wdGlvbnMucmVhZHkoc2NlbmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzY2VuZS5jdHJsLnJlYWR5KHNjZW5lKTtcclxuICAgICAgICBpZihzY2VuZS5wZW5kaW5nRGlzcG9zZSkge1xyXG4gICAgICAgICAgc2NlbmUuZGlzcG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgICAgY29uc3Qgb25FcnJvciA9IChlKT0+IHtcclxuICAgICAgICAhc2NlbmUubG9hZGluZ0N0cmwgfHwgc2NlbmUubG9hZGluZ0N0cmwuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS5sb2FkaW5nQ3RybDtcclxuICAgICAgICBzY2VuZS51c2VyTWVzc2FnZUN0cmwuc2V0RXJyb3IoZS5tZXNzYWdlKTtcclxuICAgICAgfTtcclxuICAgICAgaWYob3B0aW9ucy5wZGYpIHtcclxuICAgICAgICBzY2VuZS5wcm9wc0J1aWxkZXIgPSBuZXcgUGRmQm9va1Byb3BzQnVpbGRlcihvcHRpb25zLnBkZiwgc2NlbmUuYm9va0J1aWxkZXIsIG9wdGlvbnMuYm9va1N0eWxlLCBvcHRpb25zLnBkZk9wZW5PcHRpb25zKTtcclxuICAgICAgICBzY2VuZS5wcm9wc0J1aWxkZXIucGRmLnNldExvYWRpbmdQcm9ncmVzc0NsYihzY2VuZS5sb2FkaW5nQ3RybC5zZXRQcm9ncmVzcy5iaW5kKHNjZW5lLmxvYWRpbmdDdHJsKSk7XHJcbiAgICAgICAgc2NlbmUucHJvcHNCdWlsZGVyLnBkZi5zZXRFcnJvckhhbmRsZXIob3B0aW9ucy5lcnJvciB8fCBvbkVycm9yKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKG9wdGlvbnMucGFnZUNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYob3B0aW9ucy5vblBhZ2VDYWxsYmFja0Vycm9yKSB7XHJcbiAgICAgICAgICBvcHRpb25zLm9uUGFnZUNhbGxiYWNrRXJyb3IucHVzaChvcHRpb25zLmVycm9yIHx8IG9uRXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzY2VuZS5wcm9wc0J1aWxkZXIgPSBuZXcgQ2xiQm9va1Byb3BzQnVpbGRlcihzY2VuZS52aXN1YWwsIG9wdGlvbnMucGFnZUNhbGxiYWNrLCBvcHRpb25zLnBhZ2VzLCBzY2VuZS5ib29rQnVpbGRlciwgb3B0aW9ucy5ib29rU3R5bGUpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHNjZW5lLnByb3BzQnVpbGRlciA9IG5ldyBDbGJCb29rUHJvcHNCdWlsZGVyKHNjZW5lLnZpc3VhbCwgQm9vay5wYWdlQ2FsbGJhY2ssIDYsIHNjZW5lLmJvb2tCdWlsZGVyLCBvcHRpb25zLmJvb2tTdHlsZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LCBvcHRpb25zLnRlbXBsYXRlKTtcclxuICByZXR1cm4gc2NlbmU7XHJcbn1cclxuXHJcbiQoKCk9PiB7XHJcbiAgbGV0IGNvbnRhaW5lcnMgPSAkKCcuZmxpcC1ib29rLWNvbnRhaW5lcicpO1xyXG4gIGZvcihsZXQgaSA9IDA7IGk8Y29udGFpbmVycy5sZW5ndGg7ICsraSkge1xyXG4gICAgY29uc3QgakNvbnRhaW5lciA9ICQoY29udGFpbmVyc1tpXSksIHNyYyA9IGpDb250YWluZXIuYXR0cignc3JjJyk7XHJcbiAgICBpZighIXNyYykge1xyXG4gICAgICBqQ29udGFpbmVyLkZsaXBCb29rKHtwZGY6IHNyY30pO1xyXG4gICAgfVxyXG4gIH1cclxufSk7XHJcblxyXG53aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSAkO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9pbmRleC5qcyIsImlmICghQXJyYXkucHJvdG90eXBlLmZpbGwpIHtcclxuICBBcnJheS5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcblxyXG4gICAgLy8g0KjQsNCz0LggMS0yLlxyXG4gICAgaWYgKHRoaXMgPT0gbnVsbCkge1xyXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG51bGwgb3Igbm90IGRlZmluZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgTyA9IE9iamVjdCh0aGlzKTtcclxuXHJcbiAgICAvLyDQqNCw0LPQuCAzLTUuXHJcbiAgICB2YXIgbGVuID0gTy5sZW5ndGggPj4+IDA7XHJcblxyXG4gICAgLy8g0KjQsNCz0LggNi03LlxyXG4gICAgdmFyIHN0YXJ0ID0gYXJndW1lbnRzWzFdO1xyXG4gICAgdmFyIHJlbGF0aXZlU3RhcnQgPSBzdGFydCA+PiAwO1xyXG5cclxuICAgIC8vINCo0LDQsyA4LlxyXG4gICAgdmFyIGsgPSByZWxhdGl2ZVN0YXJ0IDwgMCA/XHJcbiAgICAgIE1hdGgubWF4KGxlbiArIHJlbGF0aXZlU3RhcnQsIDApIDpcclxuICAgICAgTWF0aC5taW4ocmVsYXRpdmVTdGFydCwgbGVuKTtcclxuXHJcbiAgICAvLyDQqNCw0LPQuCA5LTEwLlxyXG4gICAgdmFyIGVuZCA9IGFyZ3VtZW50c1syXTtcclxuICAgIHZhciByZWxhdGl2ZUVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID9cclxuICAgICAgbGVuIDogZW5kID4+IDA7XHJcblxyXG4gICAgLy8g0KjQsNCzIDExLlxyXG4gICAgdmFyIGZpbmFsID0gcmVsYXRpdmVFbmQgPCAwID9cclxuICAgICAgTWF0aC5tYXgobGVuICsgcmVsYXRpdmVFbmQsIDApIDpcclxuICAgICAgTWF0aC5taW4ocmVsYXRpdmVFbmQsIGxlbik7XHJcblxyXG4gICAgLy8g0KjQsNCzIDEyLlxyXG4gICAgd2hpbGUgKGsgPCBmaW5hbCkge1xyXG4gICAgICBPW2tdID0gdmFsdWU7XHJcbiAgICAgIGsrKztcclxuICAgIH1cclxuXHJcbiAgICAvLyDQqNCw0LMgMTMuXHJcbiAgICByZXR1cm4gTztcclxuICB9O1xyXG59XHJcblxyXG5pZiAoIUFycmF5LnByb3RvdHlwZS5maW5kKSB7XHJcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgJ2ZpbmQnLCB7XHJcbiAgICB2YWx1ZTogZnVuY3Rpb24ocHJlZGljYXRlKSB7XHJcbiAgICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgIGlmICh0aGlzID09IG51bGwpIHtcclxuICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LnByb3RvdHlwZS5maW5kIGNhbGxlZCBvbiBudWxsIG9yIHVuZGVmaW5lZCcpO1xyXG4gICAgIH1cclxuICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncHJlZGljYXRlIG11c3QgYmUgYSBmdW5jdGlvbicpO1xyXG4gICAgIH1cclxuICAgICB2YXIgbGlzdCA9IE9iamVjdCh0aGlzKTtcclxuICAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGggPj4+IDA7XHJcbiAgICAgdmFyIHRoaXNBcmcgPSBhcmd1bWVudHNbMV07XHJcbiAgICAgdmFyIHZhbHVlO1xyXG5cclxuICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICB2YWx1ZSA9IGxpc3RbaV07XHJcbiAgICAgICBpZiAocHJlZGljYXRlLmNhbGwodGhpc0FyZywgdmFsdWUsIGksIGxpc3QpKSB7XHJcbiAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgIH1cclxuICAgICB9XHJcbiAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuaWYgKCFBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KSB7XHJcbiAgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xyXG4gICAgaWYgKHRoaXMgPT0gbnVsbCkge1xyXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUuZmluZEluZGV4IGNhbGxlZCBvbiBudWxsIG9yIHVuZGVmaW5lZCcpO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncHJlZGljYXRlIG11c3QgYmUgYSBmdW5jdGlvbicpO1xyXG4gICAgfVxyXG4gICAgdmFyIGxpc3QgPSBPYmplY3QodGhpcyk7XHJcbiAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGggPj4+IDA7XHJcbiAgICB2YXIgdGhpc0FyZyA9IGFyZ3VtZW50c1sxXTtcclxuICAgIHZhciB2YWx1ZTtcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHZhbHVlID0gbGlzdFtpXTtcclxuICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpLCBsaXN0KSkge1xyXG4gICAgICAgIHJldHVybiBpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gLTE7XHJcbiAgfTtcclxufVxyXG5cclxuaWYgKCFPYmplY3QudmFsdWVzKSB7XHJcblx0T2JqZWN0LnZhbHVlcyA9IGZ1bmN0aW9uIHZhbHVlcyhPKSB7XHJcblx0XHRyZXR1cm4gT2JqZWN0LmtleXMoTykubWFwKChuYW1lKT0+T1tuYW1lXSkgfHwgW107XHJcblx0fTtcclxufVxyXG5cclxuaWYoIVJlZ0V4cC5lc2NhcGUpIHtcclxuICBSZWdFeHAuZXNjYXBlID0gZnVuY3Rpb24ocykge1xyXG4gICAgcmV0dXJuIHMucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XHJcbiAgfTtcclxufVxyXG5cclxuaWYoIVN0cmluZy5wcm90b3R5cGUucmVwbGFjZUFsbCkge1xyXG4gIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZUFsbCA9IGZ1bmN0aW9uKHNlYXJjaCwgcmVwbGFjZSkge1xyXG4gICAgcmV0dXJuIHRoaXMucmVwbGFjZShuZXcgUmVnRXhwKFJlZ0V4cC5lc2NhcGUoc2VhcmNoKSwgJ2cnKSwgcmVwbGFjZSk7XHJcbiAgfTtcclxufVxyXG5cclxuaWYoIVN0cmluZy5wcm90b3R5cGUuZmIzZFFGaWx0ZXIpIHtcclxuICBTdHJpbmcucHJvdG90eXBlLmZiM2RRRmlsdGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC8oXFxufFxcdHwgICkvZywgJycpO1xyXG4gIH07XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL3BvbHlmaWxsLmpzIiwiXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF1dG9OYXZpZ2F0b3Ige1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBib29rQ3RybCwgcHJvcHM9e30pIHtcclxuICAgIHByb3BzID0ge1xyXG4gICAgICAuLi5wcm9wcyxcclxuICAgICAgdXJsUGFyYW06IHByb3BzLnVybFBhcmFtIHx8ICdmYjNkLXBhZ2UnLFxyXG4gICAgICBuYXZpZ2F0ZXM6IHByb3BzLm5hdmlnYXRlcz09PXVuZGVmaW5lZD8gMTogcHJvcHMubmF2aWdhdGVzLFxyXG4gICAgICBwYWdlTjogcHJvcHMucGFnZU4gfHwgMFxyXG4gICAgfTtcclxuICAgIHRoaXMucHJvcHMgPSBwcm9wcztcclxuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICB0aGlzLmJvb2tDdHJsID0gYm9va0N0cmw7XHJcbiAgICB0aGlzLnVybFBhcmFtID0gcHJvcHMudXJsUGFyYW07XHJcbiAgICB0aGlzLnBhZ2VOID0gcHJvcHMucGFnZU47XHJcbiAgICB0aGlzLnduZCA9IGNvbnRleHQud25kO1xyXG5cclxuICAgIHRoaXMud25kLmZiM2QgPSB7XHJcbiAgICAgIC4uLnRoaXMud25kLmZiM2RcclxuICAgIH07XHJcbiAgICB0aGlzLnduZC5mYjNkLm5hdmlnYXRvciA9IHtcclxuICAgICAgLi4udGhpcy53bmQuZmIzZC5uYXZpZ2F0b3JcclxuICAgIH07XHJcbiAgICB0aGlzLm5hdmlnYXRvciA9IHRoaXMud25kLmZiM2QubmF2aWdhdG9yW3RoaXMudXJsUGFyYW1dID0ge1xyXG4gICAgICAuLi50aGlzLnduZC5mYjNkLm5hdmlnYXRvclt0aGlzLnVybFBhcmFtXVxyXG4gICAgfTtcclxuICAgIHRoaXMubmF2aWdhdG9yLmluc3RhbmNlcyA9ICh0aGlzLm5hdmlnYXRvci5pbnN0YW5jZXMgfHwgMCkrMTtcclxuXHJcbiAgICBpZih0aGlzLm5hdmlnYXRvci5pbnN0YW5jZXM8PXRoaXMucHJvcHMubmF2aWdhdGVzKSB7XHJcbiAgICAgIHRoaXMuYm9va0N0cmwuZ29Ub1BhZ2UodGhpcy5nZXRQYWdlTnVtYmVyKCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuXHJcbiAgfVxyXG5cclxuICBnZXRQYXJhbWV0ZXJCeU5hbWUobmFtZSwgdXJsKSB7XHJcbiAgICBpZiAoIXVybCkge1xyXG4gICAgICB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcclxuICAgIH1cclxuICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtcXF1dL2csICdcXFxcJCYnKTtcclxuICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cCgnWz8mXScgKyBuYW1lICsgJyg9KFteXSopfCZ8I3wkKScpLFxyXG4gICAgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTtcclxuICAgIGlmICghcmVzdWx0cykgcmV0dXJuIG51bGw7XHJcbiAgICBpZiAoIXJlc3VsdHNbMl0pIHJldHVybiAnJztcclxuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0c1syXS5yZXBsYWNlKC9cXCsvZywgJyAnKSk7XHJcbiAgfVxyXG5cclxuICBnZXRQYWdlTnVtYmVyKCkge1xyXG4gICAgbGV0IG51bWJlciA9IHBhcnNlSW50KHRoaXMucGFnZU4pO1xyXG4gICAgaWYoaXNOYU4obnVtYmVyKXx8bnVtYmVyPT09MCkge1xyXG4gICAgICBudW1iZXIgPSB0aGlzLmdldFBhcmFtZXRlckJ5TmFtZSh0aGlzLnVybFBhcmFtKTtcclxuICAgICAgbnVtYmVyID0gcGFyc2VJbnQobnVtYmVyKTtcclxuICAgICAgaWYoaXNOYU4obnVtYmVyKSkge1xyXG4gICAgICAgIG51bWJlciA9IDE7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudW1iZXItMTtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvQXV0b05hdmlnYXRvci5qcyIsImltcG9ydCB7VEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgTWF0aFV0aWxzIGZyb20gJ01hdGhVdGlscydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJpbmRlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbCwgcCwgaGlkZGVuPWZhbHNlKSB7XHJcbiAgICB0aGlzLnZpc3VhbCA9IHZpc3VhbDtcclxuICAgIHRoaXMucCA9IHtcclxuICAgICAgLi4ucCxcclxuICAgICAgYmFja1NpemU6IDIqcC5jb3Zlci5kZXB0aCtwLnNoZWV0cypwLnBhZ2UuZGVwdGhcclxuICAgIH07XHJcbiAgICB0aGlzLk9aID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwwLDEpO1xyXG4gICAgdGhpcy5iYWNrRyA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgwLjAwMSwgdGhpcy5wLmJhY2tTaXplLCBwLmNvdmVyLmhlaWdodCk7XHJcblxyXG4gICAgLy8gY29uc3QgY29sb3IgPSB0aGlzLnAuY292ZXIuc2lkZT09PSdjb2xvcic/IHtjb2xvcjogcC5jb3Zlci5jb2xvcn06IHtcclxuICAgIC8vICAgY29sb3I6IHAuY292ZXIuY29sb3IsXHJcbiAgICAvLyAgIG9wYWNpdHk6IDAsXHJcbiAgICAvLyAgIHRyYW5zcGFyZW50OiB0cnVlXHJcbiAgICAvLyB9O1xyXG4gICAgY29uc3QgY29sb3IgPSB7Y29sb3I6IHAuY292ZXIuY29sb3J9O1xyXG5cclxuICAgIGNvbnN0IHRyYW5zcGFyZW50ID0ge29wYWNpdHk6IDAsIHRyYW5zcGFyZW50OiB0cnVlfTtcclxuICAgIHRoaXMubWF0ZXJpYWxzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKGNvbG9yKSxcclxuICAgICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbChjb2xvciksXHJcbiAgICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwodHJhbnNwYXJlbnQpLC8ve29wYWNpdHk6IDAsIHRyYW5zcGFyZW50OiB0cnVlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHRyYW5zcGFyZW50KSxcclxuICAgICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh0cmFuc3BhcmVudCksXHJcbiAgICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwodHJhbnNwYXJlbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgIF07XHJcblxyXG4gICAgY29uc3QgYmFja00gPSBuZXcgVEhSRUUuTWVzaCh0aGlzLmJhY2tHLCB0aGlzLm1hdGVyaWFscyk7XHJcblxyXG4gICAgaWYocC5jb3Zlci5iaW5kZXJUZXh0dXJlIT09JycpIHtcclxuICAgICAgdGhpcy52aXN1YWwudGV4dHVyZUxvYWRlci5sb2FkKHAuY292ZXIuYmluZGVyVGV4dHVyZSwgKHRleHR1cmUpPT4ge1xyXG4gICAgICAgIHRoaXMubWF0ZXJpYWxzWzFdLmNvbG9yLnNldEhleCgweEZGRkZGRik7XHJcbiAgICAgICAgdGhpcy5tYXRlcmlhbHNbMV0ubWFwID0gdGV4dHVyZTtcclxuICAgICAgICB0ZXh0dXJlLm1pbkZpbHRlciA9IFRIUkVFLkxpbmVhckZpbHRlcjtcclxuICAgICAgICB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm1hdGVyaWFsc1sxXS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudGhyZWUgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuICAgIHRoaXMuYmFjayA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG4gICAgdGhpcy5iYWNrUlQgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuICAgIHRoaXMuYmFja1JSID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XHJcbiAgICB0aGlzLmJhY2tMVCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG4gICAgdGhpcy5iYWNrTFIgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuICAgIHRoaXMubGVmdFBpdm90ID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XHJcbiAgICB0aGlzLnJpZ2h0UGl2b3QgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuXHJcbiAgICBpZighaGlkZGVuKSB7XHJcbiAgICAgICBiYWNrTS5wb3NpdGlvbi5zZXQoLjUqKHAuY292ZXIuZGVwdGgtMC4wMDEpLDAsMCk7XHJcbiAgICAgIHRoaXMuYmFjay5hZGQoYmFja00pO1xyXG4gICAgfVxyXG4gICAgdGhpcy5iYWNrLmFkZCh0aGlzLmxlZnRQaXZvdCk7XHJcbiAgICB0aGlzLmJhY2suYWRkKHRoaXMucmlnaHRQaXZvdCk7XHJcbiAgICB0aGlzLmJhY2tSVC5hZGQodGhpcy5iYWNrKTtcclxuICAgIHRoaXMuYmFja1JSLmFkZCh0aGlzLmJhY2tSVCk7XHJcbiAgICB0aGlzLmJhY2tMVC5hZGQodGhpcy5iYWNrUlIpO1xyXG4gICAgdGhpcy5iYWNrTFIuYWRkKHRoaXMuYmFja0xUKTtcclxuICAgIHRoaXMudGhyZWUuYWRkKHRoaXMuYmFja0xSKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBmb3IobGV0IG0gb2YgdGhpcy5tYXRlcmlhbHMpIHtcclxuICAgICAgaWYobS5tYXApIHtcclxuICAgICAgICBtLm1hcCA9IG51bGw7XHJcbiAgICAgICAgbS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgbS5kaXNwb3NlKCk7XHJcbiAgICB9XHJcbiAgICBkZWxldGUgdGhpcy5tYXRlcmlhbHM7XHJcbiAgICB0aGlzLmJhY2tHLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIHNldChhbmdsZSkge1xyXG4gICAgbGV0IHJpZ2h0LCBsZWZ0O1xyXG4gICAgaWYoYW5nbGU+TWF0aC5QSS8yKSB7XHJcbiAgICAgIHJpZ2h0ID0gTWF0aC5QSS8yO1xyXG4gICAgICBsZWZ0ID0gYW5nbGUtTWF0aC5QSS8yO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJpZ2h0ID0gYW5nbGU7XHJcbiAgICAgIGxlZnQgPSAwO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcCA9IHRoaXMucCx0cjE9e3g6LTAuNSpwLmNvdmVyLmRlcHRoLHk6MC41KnAuYmFja1NpemUtcC5jb3Zlci5kZXB0aH07XHJcbiAgICB0aGlzLmJhY2tSVC5wb3NpdGlvbi5zZXQodHIxLngsdHIxLnksMCk7XHJcbiAgICB0aGlzLmJhY2tSUi5wb3NpdGlvbi5zZXQoLXRyMS54LC10cjEueSwwKTtcclxuICAgIHRoaXMuYmFja1JSLnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZSh0aGlzLk9aLCByaWdodCk7XHJcblxyXG4gICAgY29uc3QgdHIyPXt4OnAuYmFja1NpemUtMipwLmNvdmVyLmRlcHRoLTAuNSpwLmNvdmVyLmRlcHRoLHk6MC41KnAuYmFja1NpemUtcC5jb3Zlci5kZXB0aH07XHJcbiAgICB0aGlzLmJhY2tMVC5wb3NpdGlvbi5zZXQodHIyLngsdHIyLnksMCk7XHJcbiAgICB0aGlzLmJhY2tMUi5wb3NpdGlvbi5zZXQoLXRyMi54LC10cjIueSwwKTtcclxuICAgIHRoaXMuYmFja0xSLnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZSh0aGlzLk9aLCBsZWZ0KTtcclxuICB9XHJcblxyXG4gIHNldExlZnQoYW5nbGUpIHtcclxuICAgIGNvbnN0IFBJID0gTWF0aC5QSTtcclxuICAgIHRoaXMubGVmdFBpdm90LnBvc2l0aW9uLnNldChNYXRoVXRpbHMuaW50ZXJwb2xhdGVMaW5lYXIoWy1QSSwtUEkvMl0sWzAsdGhpcy5wLmNvdmVyLmRlcHRoXSxhbmdsZSksMC41KnRoaXMucC5iYWNrU2l6ZS0wLjUqdGhpcy5wLmNvdmVyLmRlcHRoLDApO1xyXG4gICAgdGhpcy5sZWZ0UGl2b3QucXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKHRoaXMuT1osIGFuZ2xlKTtcclxuICB9XHJcblxyXG4gIHNldFJpZ2h0KGFuZ2xlKSB7XHJcbiAgICBjb25zdCBQSSA9IE1hdGguUEk7XHJcbiAgICAgIHRoaXMucmlnaHRQaXZvdC5wb3NpdGlvbi5zZXQoTWF0aFV0aWxzLmludGVycG9sYXRlTGluZWFyKFstUEkvMiwwXSxbdGhpcy5wLmNvdmVyLmRlcHRoLDBdLGFuZ2xlKSwtMC41KnRoaXMucC5iYWNrU2l6ZSswLjUqdGhpcy5wLmNvdmVyLmRlcHRoLDApO1xyXG4gICAgICB0aGlzLnJpZ2h0UGl2b3QucXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKHRoaXMuT1osIGFuZ2xlKTtcclxuICB9XHJcblxyXG4gIGpvaW5MZWZ0Q292ZXIoY292ZXIpIHtcclxuICAgIGNvdmVyLnRocmVlLnBvc2l0aW9uLnNldCgwLC0wLjUqdGhpcy5wLmNvdmVyLmRlcHRoLDApO1xyXG4gICAgdGhpcy5sZWZ0UGl2b3QuYWRkKGNvdmVyLnRocmVlKTtcclxuICB9XHJcblxyXG4gIGRpc2Nvbm5lY3RMZWZ0Q292ZXIoY292ZXIpIHtcclxuICAgIHRoaXMubGVmdFBpdm90LnJlbW92ZShjb3Zlci50aHJlZSk7XHJcbiAgfVxyXG5cclxuICBqb2luUmlnaHRDb3Zlcihjb3Zlcikge1xyXG4gICAgY292ZXIudGhyZWUucG9zaXRpb24uc2V0KDAsLTAuNSp0aGlzLnAuY292ZXIuZGVwdGgsMCk7XHJcbiAgICB0aGlzLnJpZ2h0UGl2b3QuYWRkKGNvdmVyLnRocmVlKTtcclxuICB9XHJcblxyXG4gIGRpc2Nvbm5lY3RSaWdodENvdmVyKGNvdmVyKSB7XHJcbiAgICB0aGlzLnJpZ2h0UGl2b3QucmVtb3ZlKGNvdmVyLnRocmVlKTtcclxuICB9XHJcblxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL0JpbmRlci5qcyIsImltcG9ydCB7JCwgVEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQge3Byb3BzIGFzICBib29rUHJvcHN9IGZyb20gJy4uL3Byb3BzL2Jvb2snO1xyXG5pbXBvcnQgR3JhcGhVdGlscyBmcm9tICdHcmFwaFV0aWxzJztcclxuaW1wb3J0IEJpbmRlciBmcm9tICcuL0JpbmRlcic7XHJcbmltcG9ydCBDb3ZlciBmcm9tICcuL0NvdmVyJztcclxuaW1wb3J0IFNoZWV0QmxvY2sgZnJvbSAnLi9TaGVldEJsb2NrJztcclxuaW1wb3J0IFNoZWV0UGh5c2ljcyBmcm9tICcuL1NoZWV0UGh5c2ljcyc7XHJcbmltcG9ydCBQYWdlTWFuYWdlciBmcm9tICcuL1BhZ2VNYW5hZ2VyJztcclxuaW1wb3J0IENTU0xheWVyIGZyb20gJ0NTU0xheWVyJztcclxuaW1wb3J0IENzc0xheWVyc01hbmFnZXIgZnJvbSAnLi9Dc3NMYXllcnNNYW5hZ2VyJztcclxuaW1wb3J0IFNlYXJjaEVuZ2luZSBmcm9tICcuL1NlYXJjaEVuZ2luZSc7XHJcbmltcG9ydCBDdXN0b21FdmVudENvbnZlcnRlciBmcm9tICdDdXN0b21FdmVudENvbnZlcnRlcic7XHJcbmltcG9ydCBDaXJjbGVUYXJnZXQgZnJvbSAndGFyZ2V0cy9DaXJjbGVUYXJnZXQnO1xyXG5pbXBvcnQgWW91VHViZUFwaSBmcm9tICdZb3VUdWJlQXBpJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb2sgZXh0ZW5kcyBUSFJFRS5FdmVudERpc3BhdGNoZXIge1xyXG4gIC8vIHBhZ2VDYWxsYmFjayBzYW1wbGVzXHJcblxyXG4gIC8vIChuKT0+ICh7XHJcbiAgLy8gICB0eXBlOiAnaW1hZ2UnLFxyXG4gIC8vICAgc3JjOiAnc2FtcGxlLnBuZycsXHJcbiAgLy8gICBpbnRlcmFjdGl2ZTogZmFsc2VcclxuICAvLyB9KTtcclxuICAvL1xyXG4gIC8vIChuKT0+ICh7XHJcbiAgLy8gICB0eXBlOiAnaHRtbCcsXHJcbiAgLy8gICBzcmM6ICdzYW1wbGUuaHRtbCcsXHJcbiAgLy8gICBpbnRlcmFjdGl2ZTogdHJ1ZVxyXG4gIC8vIH0pO1xyXG4gIC8vXHJcbiAgLy8gY29uc3QgcGRmID0gbmV3IFBkZignc2FtcGxlLnBkZicpO1xyXG4gIC8vIChuKT0+ICh7XHJcbiAgLy8gICB0eXBlOiAncGRmJyxcclxuICAvLyAgIHNyYzogcGRmLFxyXG4gIC8vICAgaW50ZXJhY3RpdmU6IGZhbHNlXHJcbiAgLy8gfSk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbCwgc2hlZXRzLCBwYWdlQ2FsbGJhY2ssIHByb3BzKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy52aXN1YWwgPSB2aXN1YWw7XHJcbiAgICB0aGlzLm1vdXNlQ29udHJvbGxlciA9IHRydWU7XHJcbiAgICB0aGlzLnAgPSB7XHJcbiAgICAgIC4uLnRoaXMucHJlcGFyZVByb3BzKHsuLi5wcm9wcywgc2hlZXRzfSksXHJcbiAgICAgIHBhZ2VDYWxsYmFjayxcclxuICAgICAgem9vbTogMSxcclxuICAgICAgc2luZ2xlUGFnZTogZmFsc2UsXHJcbiAgICAgIGF1dG9SZXNvbHV0aW9uOiB7XHJcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRoaXMudXNlckRpcmVjdGlvbiA9IHtcclxuICAgICAgbGFzdFRvcFBhZ2U6IDAsXHJcbiAgICAgIGRpcmVjdGlvbjogMVxyXG4gICAgfTtcclxuICAgIHRoaXMucGFnZU1hbmFnZXIgPSBuZXcgUGFnZU1hbmFnZXIodmlzdWFsLCB0aGlzLCB0aGlzLnApO1xyXG4gICAgQ1NTTGF5ZXIuaW5pdCh2aXN1YWwuZG9jKTtcclxuICAgIHRoaXMubGF5ZXJNYW5hZ2VyID0gbmV3IENzc0xheWVyc01hbmFnZXIodGhpcyk7XHJcbiAgICB0aGlzLnNlYXJjaEVuZ2luZSA9IG5ldyBTZWFyY2hFbmdpbmUocGFnZUNhbGxiYWNrLCAyKihzaGVldHMrMikpO1xyXG4gICAgdGhpcy5zZWFyY2hFbmdpbmUub25QYWdlSGl0c0NoYW5nZWQgPSAocGFnZSwgcXVlcnkpPT4ge1xyXG4gICAgICB0aGlzLnBhZ2VNYW5hZ2VyLnJlZnJlc2hQYWdlUXVlcnkocGFnZSwgcXVlcnkpO1xyXG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoe1xyXG4gICAgICAgIHR5cGU6ICdzZWFyY2hSZXN1bHRzJyxcclxuICAgICAgICByZXN1bHRzOiB0aGlzLnNlYXJjaEVuZ2luZS5yZXN1bHRzLFxyXG4gICAgICAgIGxhc3RQYWdlOiBwYWdlLFxyXG4gICAgICAgIHF1ZXJ5XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnRocmVlID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XHJcblxyXG4gICAgdGhpcy5iaW5kZXIgPSBuZXcgQmluZGVyKHZpc3VhbCwgdGhpcy5wLCB0aGlzLmdldFBhZ2VzKCk8IDMpO1xyXG4gICAgdGhpcy50aHJlZS5hZGQodGhpcy5iaW5kZXIudGhyZWUpO1xyXG5cclxuICAgIGNvbnN0IGNvdmVyUCA9IHtcclxuICAgICAgbGVmdDogdGhpcy5wLmNvdmVyLFxyXG4gICAgICByaWdodDogdGhpcy5wLmNvdmVyXHJcbiAgICB9O1xyXG4gICAgdGhpcy5lbmFibGVNb3VzZSh0aGlzLnAuaW50ZXJhY3RpdmVDb3JuZXJzKTtcclxuICAgIGlmKHRoaXMuZ2V0UGFnZXMoKT09PTIpIHtcclxuICAgICAgdGhpcy5lbmFibGVNb3VzZShmYWxzZSk7XHJcbiAgICAgIGNvdmVyUFt0aGlzLnAucnRsPyAnbGVmdCc6ICdyaWdodCddID0ge1xyXG4gICAgICAgIC4uLnRoaXMucC5jb3ZlcixcclxuICAgICAgICB3aWR0aDogMWUtNixcclxuICAgICAgICBoZWlnaHQ6IDFlLTZcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIHRoaXMubGVmdENvdmVyID0gbmV3IENvdmVyKHZpc3VhbCwgey4uLnRoaXMucCwgY292ZXI6IGNvdmVyUC5sZWZ0LCBzZXRUZXh0dXJlOiB0aGlzLnNldExlZnRDb3ZlclRleHR1cmUuYmluZCh0aGlzKX0sIE1hdGguUEkvMiwgJ29wZW5lZCcpO1xyXG4gICAgdGhpcy5iaW5kZXIuam9pbkxlZnRDb3Zlcih0aGlzLmxlZnRDb3Zlcik7XHJcbiAgICB0aGlzLnN1YnNjcmliZVNoZWV0QmxvY2sodGhpcy5sZWZ0Q292ZXIsIDApO1xyXG4gICAgdGhpcy5yaWdodENvdmVyID0gbmV3IENvdmVyKHZpc3VhbCwgey4uLnRoaXMucCwgY292ZXI6IGNvdmVyUC5yaWdodCwgc2V0VGV4dHVyZTogdGhpcy5zZXRSaWdodENvdmVyVGV4dHVyZS5iaW5kKHRoaXMpfSwgMCwgJ2Nsb3NlZCcpO1xyXG4gICAgdGhpcy5iaW5kZXIuam9pblJpZ2h0Q292ZXIodGhpcy5yaWdodENvdmVyKTtcclxuICAgIHRoaXMuc3Vic2NyaWJlU2hlZXRCbG9jayh0aGlzLnJpZ2h0Q292ZXIsIDIqKHRoaXMucC5zaGVldHMrMSkpO1xyXG5cclxuICAgIHRoaXMudGhyZWVTaGVldEJsb2NrcyA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG4gICAgdGhpcy50aHJlZS5hZGQodGhpcy50aHJlZVNoZWV0QmxvY2tzKTtcclxuICAgIHRoaXMudGhyZWVTaGVldEJsb2Nrcy5wb3NpdGlvbi5zZXQoMC41KnRoaXMucC5jb3Zlci5kZXB0aC0wLjUqc2hlZXRzKnRoaXMucC5wYWdlLmRlcHRoLC0wLjUqc2hlZXRzKnRoaXMucC5wYWdlLmRlcHRoLDApO1xyXG5cclxuICAgIHRoaXMuc2hlZXRCbG9ja3MgPSBbXTtcclxuICAgIGlmKHNoZWV0cz4wKSB7XHJcbiAgICAgIHRoaXMuYWRkU2hlZXRCbG9jaygwLCBuZXcgU2hlZXRCbG9jayh2aXN1YWwsIHsuLi50aGlzLnAsIHNldFRleHR1cmU6IHRoaXMuc2V0UGFnZVRleHR1cmUuYmluZCh0aGlzKX0sIDAsIHNoZWV0cywgMCwgJ2Nsb3NlZCcpKTtcclxuICAgIH1cclxuICAgIHRoaXMucmVkdWNlUGFnZXNXaWR0aCh0cnVlKTtcclxuXHJcbiAgICB0aGlzLnNldChNYXRoLlBJLzIpO1xyXG4gICAgdGhpcy5vcGVuZWRCb3ggPSBuZXcgVEhSRUUuQm94MygpLnNldEZyb21PYmplY3QodGhpcy5sZWZ0Q292ZXIudGhyZWUpO1xyXG4gICAgdGhpcy5vcGVuZWRCb3gudW5pb24obmV3IFRIUkVFLkJveDMoKS5zZXRGcm9tT2JqZWN0KHRoaXMucmlnaHRDb3Zlci50aHJlZSkpO1xyXG5cclxuICAgIHRoaXMuYW5nbGUgPSB0aGlzLnAucnRsPyBNYXRoLlBJOiAwO1xyXG4gICAgdGhpcy5jbG9zZWRBbmdsZSA9IDA7XHJcbiAgICB0aGlzLnNldCh0aGlzLmFuZ2xlLDApO1xyXG4gICAgdGhpcy5sYXN0TW91c2VQb3MgPSB7XHJcbiAgICAgIHQ6IDBcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5wZW5kaW5nUGxheWVycyA9IFtdO1xyXG5cclxuICAgIHRoaXMudGhyZWUucG9zaXRpb24uc2V0KC0wLjUqdGhpcy5wLmNvdmVyLmRlcHRoKzAuNSpzaGVldHMqdGhpcy5wLnBhZ2UuZGVwdGgsMCwwKTtcclxuICAgIHRoaXMuc2hlZXRQaHlzaWNzID0gbmV3IFNoZWV0UGh5c2ljcyh0aGlzLnAucGFnZS53aWR0aC90aGlzLnAuc2NhbGUsIHRoaXMucC5ncmF2aXR5LCB0aGlzLnAucGFnZS5jb3JuZXJEZXZpYXRpb24pO1xyXG5cclxuICAgIHRoaXMuYmluZHMgPSB7XHJcbiAgICAgIHVwZGF0ZTogdGhpcy51cGRhdGUuYmluZCh0aGlzKSxcclxuICAgICAgbGFzdE1vdXNlUG9zOiAoZSk9PiB7XHJcbiAgICAgICAgdGhpcy5sYXN0TW91c2VQb3MgPSB7XHJcbiAgICAgICAgICAuLi50aGlzLmxhc3RNb3VzZVBvcyxcclxuICAgICAgICAgIHBhZ2VYOiBlLnBhZ2VYLFxyXG4gICAgICAgICAgcGFnZVk6IGUucGFnZVlcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhpcy52aXN1YWwuYWRkUmVuZGVyQ2FsbGJhY2sodGhpcy5iaW5kcy51cGRhdGUpO1xyXG4gICAgJCh0aGlzLnZpc3VhbC5lbGVtZW50KS5vbignbW91c2Vtb3ZlJywgdGhpcy5iaW5kcy5sYXN0TW91c2VQb3MpO1xyXG5cclxuICAgIHRoaXMuYmluZHMub25QaWNrQ2FsbGJhY2sgPSB0aGlzLm9uUGlja0NhbGxiYWNrLmJpbmQodGhpcylcclxuICAgIHRoaXMudmlzdWFsLmRyYWcub25QaWNrQ2FsbGJhY2sgPSB0aGlzLmJpbmRzLm9uUGlja0NhbGxiYWNrO1xyXG4gICAgdGhpcy5iaW5kcy5vbkRyYWdDYWxsYmFjayA9IHRoaXMub25EcmFnQ2FsbGJhY2suYmluZCh0aGlzKVxyXG4gICAgdGhpcy52aXN1YWwuZHJhZy5vbkRyYWdDYWxsYmFjayA9IHRoaXMuYmluZHMub25EcmFnQ2FsbGJhY2s7XHJcbiAgICB0aGlzLmJpbmRzLm9uUmVsZWFzZUNhbGxiYWNrID0gdGhpcy5vblJlbGVhc2VDYWxsYmFjay5iaW5kKHRoaXMpXHJcbiAgICB0aGlzLnZpc3VhbC5kcmFnLm9uUmVsZWFzZUNhbGxiYWNrID0gdGhpcy5iaW5kcy5vblJlbGVhc2VDYWxsYmFjaztcclxuXHJcbiAgICB0aGlzLmRyYWdBbmdsZSA9IDAuMDU7XHJcbiAgICB0aGlzLnRtcCA9IHtcclxuICAgICAgYm94czogW1xyXG4gICAgICAgIG5ldyBUSFJFRS5Cb3gzKCksXHJcbiAgICAgICAgbmV3IFRIUkVFLkJveDMoKVxyXG4gICAgICBdXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMudmlzdWFsLmFkZE9iamVjdCh0aGlzLnRocmVlKTtcclxuXHJcbiAgICB0aGlzLnRtcEJveCA9IG5ldyBUSFJFRS5Cb3gzKCk7XHJcbiAgICB0aGlzLmJvb2tTaGFkb3dNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7Y29sb3I6IDB4MDAwMDAwLCBzaWRlOiBUSFJFRS5Eb3VibGVTaWRlLCB0cmFuc3BhcmVudDogdHJ1ZX0pXHJcbiAgICB0aGlzLmJvb2tTaGFkb3cgPSBuZXcgVEhSRUUuTWVzaChuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSgxLDEpLnJvdGF0ZVgoLU1hdGguUEkvMiksIHRoaXMuYm9va1NoYWRvd01hdGVyaWFsKTtcclxuICAgIHRoaXMudmlzdWFsLmFkZE9iamVjdCh0aGlzLmJvb2tTaGFkb3cpO1xyXG4gICAgdGhpcy5jYWxjdWxhdGVTaGFkb3coKTtcclxuXHJcbiAgICB0aGlzLnZpc3VhbC5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnBhZ2VNYW5hZ2VyLnJlZnJlc2hab29tLmJpbmQodGhpcy5wYWdlTWFuYWdlcikpO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgIGlmKCF0aGlzLmlzUHJvY2Vzc2luZygpKSB7XHJcbiAgICAgICAgdGhpcy5ub3RpZnlCZWZvcmVBbmltYXRpb24oKTtcclxuICAgICAgICB0aGlzLm5vdGlmeUFmdGVyQW5pbWF0aW9uKCk7XHJcbiAgICAgIH1cclxuICAgIH0sIDEwMCk7XHJcblxyXG4gICAgdGhpcy51cGRhdGVUaHJlZSgpO1xyXG4gIH1cclxuXHJcbiAgY2FsY3VsYXRlU2hhZG93KCkge1xyXG4gICAgY29uc3QgYm94ID0gdGhpcy50bXBCb3g7XHJcbiAgICBib3guc2V0RnJvbU9iamVjdCh0aGlzLnRocmVlKTtcclxuICAgIHRoaXMuYm9va1NoYWRvdy5zY2FsZS5zZXQoYm94Lm1heC54LWJveC5taW4ueCwxLGJveC5tYXguei1ib3gubWluLnopO1xyXG4gICAgY29uc3QgZGQgPSAuMDE1O1xyXG4gICAgdGhpcy5ib29rU2hhZG93LnBvc2l0aW9uLnNldCguNSooYm94Lm1heC54K2JveC5taW4ueCktZGQsYm94Lm1pbi55LS4xKmRkLC41Kihib3gubWF4LnorYm94Lm1pbi56KS1kZCk7XHJcbiAgICB0aGlzLmJvb2tTaGFkb3dNYXRlcmlhbC5vcGFjaXR5ID0gLjAzO1xyXG4gICAgdGhpcy52aXN1YWwuc2hhZG93UGxhY2UucG9zaXRpb24uc2V0KDAsIGJveC5taW4ueS1kZCwgMCk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy52aXN1YWwucmVtb3ZlT2JqZWN0KHRoaXMudGhyZWUpO1xyXG4gICAgdGhpcy5zaGVldFBoeXNpY3MuZGlzcG9zZSgpO1xyXG4gICAgZGVsZXRlIHRoaXMudmlzdWFsLmRyYWcub25QaWNrQ2FsbGJhY2s7XHJcbiAgICBkZWxldGUgdGhpcy52aXN1YWwuZHJhZy5vbkRyYWdDYWxsYmFjaztcclxuICAgIGRlbGV0ZSB0aGlzLnZpc3VhbC5kcmFnLm9uUmVsZWFzZUNhbGxiYWNrO1xyXG4gICAgJCh0aGlzLnZpc3VhbC5lbGVtZW50KS5vZmYoJ21vdXNlbW92ZScsIHRoaXMuYmluZHMubGFzdE1vdXNlUG9zKTtcclxuICAgIHRoaXMudmlzdWFsLnJlbW92ZVJlbmRlckNhbGxiYWNrKHRoaXMuYmluZHMudXBkYXRlKTtcclxuICAgIHRoaXMucmVtb3ZlU2hlZXRCbG9ja3MoMCwgdGhpcy5zaGVldEJsb2Nrcy5sZW5ndGgpO1xyXG4gICAgdGhpcy5iaW5kZXIuZGlzY29ubmVjdExlZnRDb3Zlcih0aGlzLmxlZnRDb3Zlcik7XHJcbiAgICB0aGlzLnJlbW92ZVNoZWV0QmxvY2sodGhpcy5sZWZ0Q292ZXIpO1xyXG4gICAgdGhpcy5iaW5kZXIuZGlzY29ubmVjdFJpZ2h0Q292ZXIodGhpcy5yaWdodENvdmVyKTtcclxuICAgIHRoaXMucmVtb3ZlU2hlZXRCbG9jayh0aGlzLnJpZ2h0Q292ZXIpO1xyXG4gICAgdGhpcy5iaW5kZXIuZGlzcG9zZSgpO1xyXG4gICAgdGhpcy5sYXllck1hbmFnZXIuZGlzcG9zZSgpO1xyXG4gICAgQ1NTTGF5ZXIuZGlzcG9zZSgpO1xyXG4gICAgdGhpcy5wYWdlTWFuYWdlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICAvLyBwdWJsaWNzIHtcclxuXHJcbiAgaGFzUGVuZGluZ1BsYXllcnMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wZW5kaW5nUGxheWVycy5sZW5ndGg+MDtcclxuICB9XHJcblxyXG4gIHJlc29sdmVQZW5kaW5nUGxheWVycygpIHtcclxuICAgIGZvcihsZXQgcCBvZiB0aGlzLnBlbmRpbmdQbGF5ZXJzKSB7XHJcbiAgICAgIHAucGxheSgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5wZW5kaW5nUGxheWVycyA9IFtdO1xyXG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KHtcclxuICAgICAgdHlwZTogJ3BlbmRpbmdQbGF5ZXJzJ1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVUaHJlZSgpIHtcclxuICAgIHRoaXMudGhyZWUudXNlckRhdGEubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgc2V0QXV0b1Jlc29sdXRpb24oYXV0b1Jlc29sdXRpb24pIHtcclxuICAgIHRoaXMucC5hdXRvUmVzb2x1dGlvbiA9IHtcclxuICAgICAgLi4udGhpcy5wLmF1dG9SZXNvbHV0aW9uLFxyXG4gICAgICAuLi5hdXRvUmVzb2x1dGlvblxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHNldFpvb20oem9vbSwgc2luZ2xlUGFnZSkge1xyXG4gICAgaWYoTWF0aC5hYnModGhpcy5wLnpvb20tem9vbSk+MWUtMyB8fCBzaW5nbGVQYWdlIT09dGhpcy5wLnNpbmdsZVBhZ2UpIHtcclxuICAgICAgdGhpcy5wLnpvb20gPSB6b29tO1xyXG4gICAgICB0aGlzLnAuc2luZ2xlUGFnZSA9IHNpbmdsZVBhZ2U7XHJcbiAgICAgIHRoaXMucGFnZU1hbmFnZXIucmVmcmVzaFpvb20oKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFBhZ2VDYWxsYmFjaygpIHtcclxuICAgIHJldHVybiB0aGlzLnAucGFnZUNhbGxiYWNrO1xyXG4gIH1cclxuXHJcbiAgc2V0UXVlcnkocXVlcnkpIHtcclxuICAgIHRoaXMuc2VhcmNoRW5naW5lLnNldFF1ZXJ5KHF1ZXJ5KTtcclxuICB9XHJcblxyXG4gIGlzUHJvY2Vzc2luZygpIHtcclxuICAgIHJldHVybiB0aGlzLnNoZWV0UGh5c2ljcy5nZXRTaXplKCkhPT0wO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGFnZXMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wLnBhZ2VzO1xyXG4gIH1cclxuXHJcbiAgZ2V0Qm9va1BhZ2VzKCkge1xyXG4gICAgcmV0dXJuIDQrMip0aGlzLnAuc2hlZXRzO1xyXG4gIH1cclxuXHJcbiAgc2V0RmxpcFByb2dyZXNzQ2xiKGNsYikge1xyXG4gICAgdGhpcy5wLmZsaXBQcm9ncmVzc0NsYiA9IGNsYjtcclxuICB9XHJcblxyXG4gIHNldEluamVjdG9yKGluamVjdG9yKSB7XHJcbiAgICB0aGlzLnAuaW5qZWN0b3IgPSBpbmplY3RvcjtcclxuICB9XHJcblxyXG4gIGlzQWN0aXZlUGFnZShuKSB7XHJcbiAgICBsZXQgcmVzID0gdHJ1ZTtcclxuICAgIGlmKG4+MSAmJiBuPHRoaXMuZ2V0Qm9va1BhZ2VzKCktMikge1xyXG4gICAgICBmb3IobGV0IGIgb2YgdGhpcy5zaGVldEJsb2Nrcykge1xyXG4gICAgICAgIGlmKG4tMj4yKmIucC5maXJzdCAmJiBuLTI8MipiLnAubGFzdC0xKSB7XHJcbiAgICAgICAgICByZXMgPSBmYWxzZTtcclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgZ2V0QmxvY2tCeVBhZ2Uobikge1xyXG4gICAgbGV0IGJsb2NrO1xyXG4gICAgaWYobjwyKSB7XHJcbiAgICAgIGJsb2NrID0gdGhpcy5sZWZ0Q292ZXI7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKG48MioodGhpcy5wLnNoZWV0cysxKSkge1xyXG4gICAgICBmb3IobGV0IGIgb2YgdGhpcy5zaGVldEJsb2Nrcykge1xyXG4gICAgICAgIGlmKG4tMj49MipiLnAuZmlyc3QgJiYgbi0yPDIqYi5wLmxhc3QpIHtcclxuICAgICAgICAgIGJsb2NrID0gYjtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGJsb2NrID0gdGhpcy5yaWdodENvdmVyO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGJsb2NrO1xyXG4gIH1cclxuXHJcbiAgZ2V0QmxvY2tQYWdlcyhibG9jaykge1xyXG4gICAgbGV0IHJhbmdlO1xyXG4gICAgc3dpdGNoIChibG9jaykge1xyXG4gICAgICBjYXNlIHRoaXMubGVmdENvdmVyOiB7XHJcbiAgICAgICAgICByYW5nZSA9IFswLCAxXTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlIHRoaXMucmlnaHRDb3Zlcjoge1xyXG4gICAgICAgIHJhbmdlID0gWzIqKHRoaXMucC5zaGVldHMrMSksIDIqKHRoaXMucC5zaGVldHMrMSkrMV07XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgIHJhbmdlID0gYmxvY2s/IFsyKihibG9jay5wLmZpcnN0KzEpLCAyKihibG9jay5wLmxhc3QrMSktMV06IHVuZGVmaW5lZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJhbmdlO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGFnZSgpIHtcclxuICAgIGNvbnN0IFBJID0gTWF0aC5QSTtcclxuICAgIGxldCBwO1xyXG4gICAgaWYodGhpcy5hbmdsZSA9PT0gUEkvMiB8fCB0aGlzLmFuZ2xlID09PSAzKlBJLzIpIHtcclxuICAgICAgZm9yKGxldCBibG9jayBvZiB0aGlzLnNoZWV0QmxvY2tzKSB7XHJcbiAgICAgICAgaWYoYmxvY2suYW5nbGU8PVBJLzIpIHtcclxuICAgICAgICAgIHAgPSB0aGlzLmdldEJsb2NrUGFnZXMoYmxvY2spWzBdLTE7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYoIXApIHtcclxuICAgICAgICBwID0gdGhpcy5nZXRCb29rUGFnZXMoKS0zO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHRoaXMuYW5nbGU8UEkvMikge1xyXG4gICAgICBwID0gMDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYodGhpcy5hbmdsZT4zKlBJLzIpIHtcclxuICAgICAgcCA9IDE7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHRoaXMuYW5nbGU8UEkpIHtcclxuICAgICAgcCA9IHRoaXMuZ2V0Qm9va1BhZ2VzKCktMztcclxuICAgIH1cclxuICAgIGVsc2UgaWYodGhpcy5hbmdsZT49UEkpIHtcclxuICAgICAgcCA9IHRoaXMuZ2V0Qm9va1BhZ2VzKCktMTtcclxuICAgIH1cclxuICAgIHJldHVybiBwO1xyXG4gIH1cclxuXHJcbiAgZ2V0VG9wUGFnZXMoKSB7XHJcbiAgICBjb25zdCBwID0gdGhpcy5nZXRQYWdlKCk7XHJcbiAgICByZXR1cm4gcD09PTAgfHwgcD09PXRoaXMuZ2V0Qm9va1BhZ2VzKCktMT8gW3BdOiBbcCwgcCsxXTtcclxuICB9XHJcblxyXG4gIGdldFBhZ2VTdGF0ZShuKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wYWdlTWFuYWdlci5nZXRQYWdlU3RhdGUobik7XHJcbiAgfVxyXG5cclxuICBlbmFibGVMb2FkaW5nQW5pbWF0aW9uKGVuYWJsZSkge1xyXG4gICAgdGhpcy5wYWdlTWFuYWdlci5lbmFibGVMb2FkaW5nQW5pbWF0aW9uKGVuYWJsZSk7XHJcbiAgfVxyXG5cclxuICBnZXRMZWZ0RmxpcHBpbmcoKSB7XHJcbiAgICBsZXQgYmxvY2s7XHJcbiAgICBjb25zdCBsZWZ0ID0gdGhpcy5zaGVldEJsb2Nrc1swXSwgUEkgPSBNYXRoLlBJO1xyXG4gICAgaWYodGhpcy5hbmdsZT09PVBJKSB7XHJcbiAgICAgIGlmKHRoaXMuZ2V0UGFnZXMoKT4xKSB7XHJcbiAgICAgICAgYmxvY2sgPSB0aGlzLnJpZ2h0Q292ZXI7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBpZihsZWZ0ICYmIGxlZnQuc3RhdGU9PT0nY2xvc2VkJyAmJiBsZWZ0LmFuZ2xlPlBJLzIpIHtcclxuICAgICAgICBibG9jayA9IGxlZnQ7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZih0aGlzLmFuZ2xlID09PSBQSS8yIHx8IHRoaXMuYW5nbGUgPT09IDMqUEkvMikge1xyXG4gICAgICAgIGlmKCF0aGlzLnAucnRsIHx8IHRoaXMuZ2V0UGFnZXMoKT09PXRoaXMuZ2V0Qm9va1BhZ2VzKCkpIHtcclxuICAgICAgICAgIGJsb2NrID0gdGhpcy5sZWZ0Q292ZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYmxvY2s7XHJcbiAgfVxyXG5cclxuICBnZXRSaWdodEZsaXBwaW5nKCkge1xyXG4gICAgbGV0IGJsb2NrO1xyXG4gICAgY29uc3QgcmlnaHQgPSB0aGlzLnNoZWV0QmxvY2tzW3RoaXMuc2hlZXRCbG9ja3MubGVuZ3RoLTFdLCBQSSA9IE1hdGguUEk7XHJcbiAgICBpZih0aGlzLmFuZ2xlPT09MCkge1xyXG4gICAgICBpZih0aGlzLmdldFBhZ2VzKCk+MSkge1xyXG4gICAgICAgIGJsb2NrID0gdGhpcy5sZWZ0Q292ZXI7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBpZihyaWdodCAmJiByaWdodC5zdGF0ZT09PSdjbG9zZWQnICYmIHJpZ2h0LmFuZ2xlPD1QSS8yKSB7XHJcbiAgICAgICAgYmxvY2sgPSByaWdodDtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKHRoaXMuYW5nbGU9PT1QSS8yIHx8IHRoaXMuYW5nbGUgPT09IDMqUEkvMikge1xyXG4gICAgICAgIGlmKHRoaXMucC5ydGwgfHwgdGhpcy5nZXRQYWdlcygpPT09dGhpcy5nZXRCb29rUGFnZXMoKSkge1xyXG4gICAgICAgICAgYmxvY2sgPSB0aGlzLnJpZ2h0Q292ZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYmxvY2s7XHJcbiAgfVxyXG5cclxuICBnZXRDbG9zZWRCbG9ja0FuZ2xlKGFuZ2xlKSB7XHJcbiAgICBsZXQgY2xvc2VkQW5nbGUsIHtQSX0gPSBNYXRoO1xyXG5cclxuICAgIGlmKHRoaXMubGVmdENvdmVyLnBoeXNpY0lkKSB7XHJcbiAgICAgIGxldCB0ZXN0O1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHRlc3QgPSBNYXRoLmFicyh0aGlzLnNoZWV0UGh5c2ljcy5nZXRQYXJhbWV0cih0aGlzLmxlZnRDb3Zlci5waHlzaWNJZCwgJ2FuZ2xlJyktYW5nbGUpXHJcbiAgICAgIH1cclxuICAgICAgY2F0Y2goZSkge1xyXG4gICAgICAgIHRlc3QgPSAwO1xyXG4gICAgICB9XHJcbiAgICAgIGNsb3NlZEFuZ2xlID0gYW5nbGU+UEkvMiB8fCB0ZXN0PlBJLzY/IFBJLzI6IHRoaXMuY2xvc2VkQW5nbGU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHRoaXMucmlnaHRDb3Zlci5waHlzaWNJZCkge1xyXG4gICAgICBsZXQgdGVzdDtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB0ZXN0ID0gTWF0aC5hYnModGhpcy5zaGVldFBoeXNpY3MuZ2V0UGFyYW1ldHIodGhpcy5yaWdodENvdmVyLnBoeXNpY0lkLCAnYW5nbGUnKS1hbmdsZSlcclxuICAgICAgfVxyXG4gICAgICBjYXRjaChlKSB7XHJcbiAgICAgICAgdGVzdCA9IDA7XHJcbiAgICAgIH1cclxuICAgICAgY2xvc2VkQW5nbGUgPSBhbmdsZTxQSS8yIHx8IHRlc3Q+UEkvNj8gUEkvMisxZS03OiB0aGlzLmNsb3NlZEFuZ2xlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGNsb3NlZEFuZ2xlID0gUEkvMisoYW5nbGUhPT0wKSoxZS03O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIG9wZW5lZEFuZ2xlOiBhbmdsZSxcclxuICAgICAgY2xvc2VkQW5nbGUsXHJcbiAgICAgIGJpbmRlclR1cm46IHRoaXMuY2xvc2VkQW5nbGVcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmbGlwTGVmdChzaXplPTEsIHByb2dyZXNzQ2xiPXRoaXMucC5mbGlwUHJvZ3Jlc3NDbGIpIHtcclxuICAgIGlmKHRoaXMuZmxpcERpc2FibGVkKSB7XHJcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBpZighdGhpcy5zaGVldFBoeXNpY3MuZ2V0U2l6ZSgpKSB7XHJcbiAgICAgIHRoaXMuZmxpcERpcmVjdGlvbiA9ICdsZWZ0JztcclxuICAgIH1cclxuICAgIGxldCBibG9jaywgcmVzO1xyXG4gICAgaWYodGhpcy5zaGVldFBoeXNpY3MuZ2V0U2l6ZSgpPDI1KSB7XHJcbiAgICAgIGNvbnN0IGxlZnQgPSB0aGlzLnNoZWV0QmxvY2tzWzBdLCBQSSA9IE1hdGguUEk7XHJcbiAgICAgIGlmKHRoaXMuYW5nbGU9PT1QSSkge1xyXG4gICAgICAgIHJlcyA9IHRoaXMuY29ubmVjdFBoeXNpY3MoXHJcbiAgICAgICAgICBibG9jaz10aGlzLnJpZ2h0Q292ZXIsXHJcbiAgICAgICAgICB0aGlzLnAuY292ZXIubWFzcyxcclxuICAgICAgICAgIFBJLFxyXG4gICAgICAgICAgLXRoaXMucC5jb3Zlci5zdGFydFZlbG9jaXR5LFxyXG4gICAgICAgICAgdGhpcy5wLmNvdmVyLmZsZXhpYmlsaXR5LFxyXG4gICAgICAgICAgMCxcclxuICAgICAgICAgIChhbmdsZSxoZWlnaHQpPT50aGlzLnNldCgzKlBJLzItYW5nbGUvMixoZWlnaHQpLFxyXG4gICAgICAgICAgKGFuZ2xlLGhlaWdodCk9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0KDMqUEkvMi1hbmdsZS8yLDApO1xyXG4gICAgICAgICAgICB0aGlzLnNldFNoZWV0QmxvY2tzKGFuZ2xlPyBQSTogUEkvMisxZS03LCdjbG9zZWQnKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBwcm9ncmVzc0NsYlxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgaWYobGVmdCAmJiBsZWZ0LnN0YXRlPT09J2Nsb3NlZCcgJiYgbGVmdC5hbmdsZT5QSS8yKSB7XHJcbiAgICAgICAgICBibG9jayA9IHNpemU8bGVmdC5nZXRTaXplKCk/IHRoaXMuc3BsaXRTaGVldEJsb2NrKDAsIGxlZnQuZ2V0U2l6ZSgpLXNpemUpWzFdOiBsZWZ0O1xyXG4gICAgICAgICAgcmVzID0gdGhpcy5jb25uZWN0UGh5c2ljcyhcclxuICAgICAgICAgICAgYmxvY2ssXHJcbiAgICAgICAgICAgIHRoaXMucC5wYWdlLm1hc3MqYmxvY2suZ2V0U2l6ZSgpLFxyXG4gICAgICAgICAgICBQSSxcclxuICAgICAgICAgICAgLXRoaXMucC5wYWdlLnN0YXJ0VmVsb2NpdHksXHJcbiAgICAgICAgICAgIHRoaXMucC5wYWdlLmZsZXhpYmlsaXR5LFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAoYW5nbGUsaGVpZ2h0KT0+YmxvY2suc2V0KHRoaXMuZ2V0Q2xvc2VkQmxvY2tBbmdsZShhbmdsZSksJ29wZW5lZCcsaGVpZ2h0LGJsb2NrLnAuZmlyc3QsYmxvY2sucC5sYXN0LHRoaXMuZmxpcERpcmVjdGlvbiksXHJcbiAgICAgICAgICAgIEJvb2suZmluaXNoQW5pbWF0aW9uQ2xiLmJpbmQoe2Jvb2s6IHRoaXMsIGJsb2NrfSksXHJcbiAgICAgICAgICAgIHByb2dyZXNzQ2xiXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHRoaXMuYW5nbGUgPT09IFBJLzIgfHwgdGhpcy5hbmdsZSA9PT0gMypQSS8yKSB7XHJcbiAgICAgICAgICByZXMgPSB0aGlzLmNvbm5lY3RQaHlzaWNzKFxyXG4gICAgICAgICAgICBibG9jaz10aGlzLmxlZnRDb3ZlcixcclxuICAgICAgICAgICAgdGhpcy5wLmNvdmVyLm1hc3MsXHJcbiAgICAgICAgICAgIFBJLFxyXG4gICAgICAgICAgICAtdGhpcy5wLmNvdmVyLnN0YXJ0VmVsb2NpdHksXHJcbiAgICAgICAgICAgIHRoaXMucC5jb3Zlci5mbGV4aWJpbGl0eSxcclxuICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgKGFuZ2xlLGhlaWdodCk9PiB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zZXQoMipQSS1hbmdsZS8yLGhlaWdodCk7XHJcbiAgICAgICAgICAgICAgaWYoYW5nbGU+UEkvMikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTaGVldEJsb2NrcyhhbmdsZT8gUEkvMjogMCwnY2xvc2VkJyk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAoYW5nbGUsaGVpZ2h0KT0+IHRoaXMuc2V0KGFuZ2xlPT09MD8gMDogMipQSS1hbmdsZS8yLDApLFxyXG4gICAgICAgICAgICBwcm9ncmVzc0NsYlxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBmbGlwUmlnaHQoc2l6ZT0xLCBwcm9ncmVzc0NsYj10aGlzLnAuZmxpcFByb2dyZXNzQ2xiKSB7XHJcbiAgICBpZih0aGlzLmZsaXBEaXNhYmxlZCkge1xyXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgaWYoIXRoaXMuc2hlZXRQaHlzaWNzLmdldFNpemUoKSkge1xyXG4gICAgICB0aGlzLmZsaXBEaXJlY3Rpb24gPSAncmlnaHQnO1xyXG4gICAgfVxyXG4gICAgbGV0IGJsb2NrLCByZXM7XHJcbiAgICBpZih0aGlzLnNoZWV0UGh5c2ljcy5nZXRTaXplKCk8MjUpIHtcclxuICAgICAgY29uc3QgcmlnaHQgPSB0aGlzLnNoZWV0QmxvY2tzW3RoaXMuc2hlZXRCbG9ja3MubGVuZ3RoLTFdLCBQSSA9IE1hdGguUEk7XHJcbiAgICAgIGlmKHRoaXMuYW5nbGU9PT0wKSB7XHJcbiAgICAgICAgcmVzID0gdGhpcy5jb25uZWN0UGh5c2ljcyhcclxuICAgICAgICAgIGJsb2NrPXRoaXMubGVmdENvdmVyLFxyXG4gICAgICAgICAgdGhpcy5wLmNvdmVyLm1hc3MsXHJcbiAgICAgICAgICAwLFxyXG4gICAgICAgICAgdGhpcy5wLmNvdmVyLnN0YXJ0VmVsb2NpdHksXHJcbiAgICAgICAgICB0aGlzLnAuY292ZXIuZmxleGliaWxpdHksXHJcbiAgICAgICAgICAwLFxyXG4gICAgICAgICAgKGFuZ2xlLGhlaWdodCk9PnRoaXMuc2V0KGFuZ2xlLzIsaGVpZ2h0KSxcclxuICAgICAgICAgIChhbmdsZSxoZWlnaHQpPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldChhbmdsZS8yLDApO1xyXG4gICAgICAgICAgICB0aGlzLnNldFNoZWV0QmxvY2tzKGFuZ2xlPyBQSS8yOiAwLCdjbG9zZWQnKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBwcm9ncmVzc0NsYlxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgaWYocmlnaHQgJiYgcmlnaHQuc3RhdGU9PT0nY2xvc2VkJyAmJiByaWdodC5hbmdsZTw9UEkvMikge1xyXG4gICAgICAgICAgYmxvY2sgPSBzaXplPHJpZ2h0LmdldFNpemUoKT8gdGhpcy5zcGxpdFNoZWV0QmxvY2sodGhpcy5zaGVldEJsb2Nrcy5sZW5ndGgtMSwgc2l6ZSlbMF06IHJpZ2h0O1xyXG4gICAgICAgICAgcmVzID0gdGhpcy5jb25uZWN0UGh5c2ljcyhcclxuICAgICAgICAgICAgYmxvY2ssXHJcbiAgICAgICAgICAgIHRoaXMucC5wYWdlLm1hc3MqYmxvY2suZ2V0U2l6ZSgpLFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICB0aGlzLnAucGFnZS5zdGFydFZlbG9jaXR5LFxyXG4gICAgICAgICAgICB0aGlzLnAucGFnZS5mbGV4aWJpbGl0eSxcclxuICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgKGFuZ2xlLGhlaWdodCk9PmJsb2NrLnNldCh0aGlzLmdldENsb3NlZEJsb2NrQW5nbGUoYW5nbGUpLCdvcGVuZWQnLGhlaWdodCxibG9jay5wLmZpcnN0LGJsb2NrLnAubGFzdCx0aGlzLmZsaXBEaXJlY3Rpb24pLFxyXG4gICAgICAgICAgICBCb29rLmZpbmlzaEFuaW1hdGlvbkNsYi5iaW5kKHtib29rOiB0aGlzLCBibG9ja30pLFxyXG4gICAgICAgICAgICBwcm9ncmVzc0NsYlxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZih0aGlzLmFuZ2xlPT09UEkvMiB8fCB0aGlzLmFuZ2xlID09PSAzKlBJLzIpIHtcclxuICAgICAgICAgIHJlcyA9IHRoaXMuY29ubmVjdFBoeXNpY3MoXHJcbiAgICAgICAgICAgIGJsb2NrPXRoaXMucmlnaHRDb3ZlcixcclxuICAgICAgICAgICAgdGhpcy5wLmNvdmVyLm1hc3MsXHJcbiAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgIHRoaXMucC5jb3Zlci5zdGFydFZlbG9jaXR5LFxyXG4gICAgICAgICAgICB0aGlzLnAuY292ZXIuZmxleGliaWxpdHksXHJcbiAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgIChhbmdsZSxoZWlnaHQpPT4ge1xyXG4gICAgICAgICAgICAgIHRoaXMuc2V0KFBJLzIrYW5nbGUvMixoZWlnaHQpO1xyXG4gICAgICAgICAgICAgIGlmKGFuZ2xlPFBJLzIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoUEkvMisxZS03LCdjbG9zZWQnKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIChhbmdsZSxoZWlnaHQpPT50aGlzLnNldChQSS8yK2FuZ2xlLzIsMCksXHJcbiAgICAgICAgICAgIHByb2dyZXNzQ2xiXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIC8vIH1cclxuXHJcbiAgY2xlYXJIb3ZlckluZm8oKSB7XHJcbiAgICB0aGlzLnBhZ2VNYW5hZ2VyLnR1cm5PbkV2ZW50cygpO1xyXG4gICAgZGVsZXRlIHRoaXMuaG92ZXJJbmZvLmJsb2NrLmZvcmNlO1xyXG4gICAgZGVsZXRlIHRoaXMuaG92ZXJJbmZvLmJsb2NrLmNvcm5lckZvcmNlO1xyXG4gICAgZGVsZXRlIHRoaXMuaG92ZXJJbmZvO1xyXG4gIH1cclxuXHJcbiAgeFNlZ21lbnQoKSB7XHJcbiAgICBjb25zdCBib3hzID0gdGhpcy50bXAuYm94cywgcmVzID0ge307XHJcbiAgICBpZih0aGlzLmxlZnRDb3Zlci5waHlzaWNJZCkge1xyXG4gICAgICBib3hzWzBdLnNldEZyb21PYmplY3QodGhpcy5yaWdodENvdmVyLnRocmVlKTtcclxuICAgICAgcmVzLm1pbiA9IC0ocmVzLm1heCA9IGJveHNbMF0ubWF4LngpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZih0aGlzLnJpZ2h0Q292ZXIucGh5c2ljSWQpIHtcclxuICAgICAgYm94c1swXS5zZXRGcm9tT2JqZWN0KHRoaXMubGVmdENvdmVyLnRocmVlKTtcclxuICAgICAgcmVzLm1heCA9IC0ocmVzLm1pbiA9IGJveHNbMF0ubWluLngpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGJveHNbMF0uc2V0RnJvbU9iamVjdCh0aGlzLmxlZnRDb3Zlci50aHJlZSk7XHJcbiAgICAgIGJveHNbMV0uc2V0RnJvbU9iamVjdCh0aGlzLnJpZ2h0Q292ZXIudGhyZWUpO1xyXG4gICAgICBib3hzWzBdLnVuaW9uKGJveHNbMV0pO1xyXG4gICAgICByZXMubWluID0gYm94c1swXS5taW4ueDtcclxuICAgICAgcmVzLm1heCA9IGJveHNbMF0ubWF4Lng7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgY29tcHV0ZVRhcmdldChwb2ludCkge1xyXG4gICAgbGV0IHt4LCB5fSA9IHBvaW50LCBzZWcgPSB0aGlzLnhTZWdtZW50KCksIGFuZ2xlO1xyXG4gICAgYW5nbGUgPSAoc2VnLm1heC14KS8oc2VnLm1heC1zZWcubWluKSpNYXRoLlBJO1xyXG4gICAgLy8gYW5nbGUgPSBNYXRoLmFjb3MoeC9NYXRoLnNxcnQoeCp4K3kqeSkpO1xyXG4gICAgcmV0dXJuIE1hdGgubWF4KHRoaXMuZHJhZ0FuZ2xlLCBNYXRoLm1pbihNYXRoLlBJLXRoaXMuZHJhZ0FuZ2xlLCBhbmdsZSkpO1xyXG4gIH1cclxuXHJcbiAgb25QaWNrQ2FsbGJhY2sob2JqZWN0KSB7XHJcbiAgICBsZXQgcmVzID0gZmFsc2U7XHJcbiAgICBjb25zdCBibG9jayA9IG9iamVjdC5vYmplY3QudXNlckRhdGEuc2VsZixcclxuICAgICAgICAgIHAgPSB7Li4ub2JqZWN0LnV2fSwgaSA9IG9iamVjdC5mYWNlLm1hdGVyaWFsSW5kZXg7XHJcbiAgICBpZihpPDIpIHtcclxuICAgICAgcC54ID0gaT09PTA/IHAueDogMS1wLng7XHJcbiAgICAgIGlmKGJsb2NrLmNvcm5lclRhcmdldC50ZXN0SW50ZXJzZWN0aW9uKG51bGwsIHApICYmIGJsb2NrLnBoeXNpY0lkKSB7XHJcbiAgICAgICAgaWYodGhpcy5ob3ZlckluZm8pIHtcclxuICAgICAgICAgIHRoaXMuY2xlYXJIb3ZlckluZm8oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYmxvY2suZm9yY2UgPSBTaGVldFBoeXNpY3MuZHJhZ0ZvcmNlQ2xiO1xyXG4gICAgICAgIGJsb2NrLmNvcm5lckZvcmNlID0gU2hlZXRQaHlzaWNzLmdldERyYWdDb3JuZXJGb3JjZUNsYih0aGlzLmNvbXB1dGVUYXJnZXQob2JqZWN0LnBvaW50KSk7XHJcbiAgICAgICAgdGhpcy5kcmFnSW5mbyA9IHtcclxuICAgICAgICAgIG9iamVjdCxcclxuICAgICAgICAgIGJsb2NrXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXMgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucGFnZU1hbmFnZXIudHVybk9mZkV2ZW50cygpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgb25EcmFnQ2FsbGJhY2socG9pbnQpIHtcclxuICAgIGNvbnN0IGJsb2NrID0gdGhpcy5kcmFnSW5mby5ibG9jaywgcCA9IGJsb2NrLmdldFByb3BzKCk7XHJcbiAgICBibG9jay5mb3JjZSA9IFNoZWV0UGh5c2ljcy5kcmFnRm9yY2VDbGI7XHJcbiAgICBibG9jay5jb3JuZXJGb3JjZSA9IFNoZWV0UGh5c2ljcy5nZXREcmFnQ29ybmVyRm9yY2VDbGIodGhpcy5jb21wdXRlVGFyZ2V0KHBvaW50KSk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIG9uUmVsZWFzZUNhbGxiYWNrKCkge1xyXG4gICAgZGVsZXRlIHRoaXMuZHJhZ0luZm8uYmxvY2suZm9yY2U7XHJcbiAgICBkZWxldGUgdGhpcy5kcmFnSW5mby5ibG9jay5jb3JuZXJGb3JjZTtcclxuICAgIGRlbGV0ZSB0aGlzLmRyYWdJbmZvO1xyXG4gICAgdGhpcy5wYWdlTWFuYWdlci50dXJuT25FdmVudHMoKTtcclxuICB9XHJcblxyXG4gIGdldEZsaXBwaW5nKGkpIHtcclxuICAgIHJldHVybiBpPyB0aGlzLmdldExlZnRGbGlwcGluZygpOiB0aGlzLmdldFJpZ2h0RmxpcHBpbmcoKTtcclxuICB9XHJcblxyXG4gIGZsaXAoaSwgc2l6ZT0xKSB7XHJcbiAgICByZXR1cm4gaT8gdGhpcy5mbGlwTGVmdChzaXplKTogdGhpcy5mbGlwUmlnaHQoc2l6ZSk7XHJcbiAgfVxyXG5cclxuICBlbmFibGVNb3VzZShlbmFibGUpIHtcclxuICAgIHRoaXMubW91c2VDb250cm9sbGVyID0gZW5hYmxlO1xyXG4gIH1cclxuXHJcbiAgY29ybmVyQ2FsbGJhY2soZSwgZGF0YSkge1xyXG4gICAgaWYodGhpcy5tb3VzZUNvbnRyb2xsZXIpIHtcclxuICAgICAgY29uc3Qge2ksIG59ID0gZGF0YS5kYXRhO1xyXG4gICAgICBpZihlLnR5cGU9PT0nbW91c2VvdmVyJykge1xyXG4gICAgICAgIGlmKHRoaXMuaG92ZXJJbmZvICYmIHRoaXMuaG92ZXJJbmZvLnBlbmRpbmdzIT09dW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICArK3RoaXMuaG92ZXJJbmZvLnBlbmRpbmdzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGlmKHRoaXMuaG92ZXJJbmZvKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignV3Jvbmcgc3RhdGU6IGVsZW1lbnQgaXMgYWxyZWFkeSBob3ZlcicpO1xyXG4gICAgICAgICAgICBpZih0aGlzLmhvdmVySW5mby5uIT09bikge1xyXG4gICAgICAgICAgICAgIHRoaXMuY2xlYXJIb3ZlckluZm8oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYoIXRoaXMuaG92ZXJJbmZvICYmICF0aGlzLmRyYWdJbmZvKSB7XHJcbiAgICAgICAgICAgIGxldCByZXMgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgY29uc3QgaG92ZXJBbmdsZSA9IDAuMDIsXHJcbiAgICAgICAgICAgICAgICAgIGhvdmVyID0gdGhpcy5nZXRCbG9ja0J5UGFnZShuKSxcclxuICAgICAgICAgICAgICAgICAgcG9zc2libGUgPSB0aGlzLmdldEZsaXBwaW5nKGkpO1xyXG4gICAgICAgICAgICBpZihuPjEgJiYgbjwyKih0aGlzLnAuc2hlZXRzKzEpICYmIGhvdmVyLnBoeXNpY0lkICYmIChob3Zlci5hbmdsZTxob3ZlckFuZ2xlIHx8IGhvdmVyLmFuZ2xlPk1hdGguUEktaG92ZXJBbmdsZSkpIHtcclxuICAgICAgICAgICAgICByZXMgPSBQcm9taXNlLnJlc29sdmUoaG92ZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYoaG92ZXI9PT1wb3NzaWJsZSkge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHNoZWV0QmxvY2tzID0gW1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sZWZ0Q292ZXIsXHJcbiAgICAgICAgICAgICAgICAuLi50aGlzLnNoZWV0QmxvY2tzLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodENvdmVyXHJcbiAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICBjb25zdCBqID0gc2hlZXRCbG9ja3MuaW5kZXhPZihob3ZlciksIG5leHRCbG9jayA9IH5qPyBzaGVldEJsb2Nrc1tqKzIqaS0xXTogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgIGlmKCFuZXh0QmxvY2sgfHwgIW5leHRCbG9jay5waHlzaWNJZCB8fCBuZXh0QmxvY2suYW5nbGU+aG92ZXJBbmdsZSAmJiBuZXh0QmxvY2suYW5nbGU8TWF0aC5QSS1ob3ZlckFuZ2xlKSB7XHJcbiAgICAgICAgICAgICAgICByZXMgPSB0aGlzLmZsaXAoaSwgMSkudGhlbigoYmxvY2spPT4ge1xyXG4gICAgICAgICAgICAgICAgICBpZighYmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5ob3ZlckluZm87XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGVldFBoeXNpY3Muc2V0UGFyYW1ldHIoYmxvY2sucGh5c2ljSWQsICd2ZWxvY2l0eScsIDApO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBibG9jaztcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ob3ZlckluZm8gPSB7XHJcbiAgICAgICAgICAgICAgICAgIHBlbmRpbmdzOiAxXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXMudGhlbigoYmxvY2spPT4ge1xyXG4gICAgICAgICAgICAgIGlmKHRoaXMuaG92ZXJJbmZvICYmIHRoaXMuaG92ZXJJbmZvLnBlbmRpbmdzPDEpIHtcclxuICAgICAgICAgICAgICAgIGJsb2NrID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuaG92ZXJJbmZvO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBpZihibG9jaykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlTWFuYWdlci50dXJuT2ZmRXZlbnRzKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCAgcCA9IGJsb2NrLmdldFByb3BzKCk7XHJcbiAgICAgICAgICAgICAgICBibG9jay5mb3JjZSA9IHRoaXMuc2hlZXRQaHlzaWNzLmdldFRhcmdldEZvcmNlQ2xiKHAubWFzcypibG9jay5nZXRTaXplKCksIGk/IE1hdGguUEktaG92ZXJBbmdsZTogaG92ZXJBbmdsZSk7XHJcbiAgICAgICAgICAgICAgICBibG9jay5jb3JuZXJGb3JjZSA9ICgpPT4gKGk/IC0xOiAxKSpTaGVldFBoeXNpY3MuaG92ZXJDb3JuZXJGb3JjZUNsYigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaGVldFBoeXNpY3Muc2V0UGFyYW1ldHIoYmxvY2sucGh5c2ljSWQsICdhbmdsZScsIGk/IE1hdGguUEktMC41KmhvdmVyQW5nbGU6IDAuNSpob3ZlckFuZ2xlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaG92ZXJJbmZvID0ge1xyXG4gICAgICAgICAgICAgICAgICBuLFxyXG4gICAgICAgICAgICAgICAgICBibG9ja1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKDEvMzApO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKHRoaXMuaG92ZXJJbmZvICYmIGUudHlwZT09PSdtb3VzZW91dCcpIHtcclxuICAgICAgICBpZih0aGlzLmhvdmVySW5mby5wZW5kaW5ncyE9PXVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgLS10aGlzLmhvdmVySW5mby5wZW5kaW5ncztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihuPT09dGhpcy5ob3ZlckluZm8ubikge1xyXG4gICAgICAgICAgdGhpcy5jbGVhckhvdmVySW5mbygpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKGUudHlwZT09PSdtb3VzZWRvd24nKSB7XHJcbiAgICAgICAgdGhpcy5jb3JuZXJDbGlja0RhdGEgPSB7XHJcbiAgICAgICAgICB4OiBlLnBhZ2VYLFxyXG4gICAgICAgICAgeTogZS5wYWdlWVxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihlLnR5cGU9PT0nY2xpY2snKSB7XHJcbiAgICAgICAgaWYoTWF0aC5zcXJ0KE1hdGgucG93KHRoaXMuY29ybmVyQ2xpY2tEYXRhLngtZS5wYWdlWCwyKStNYXRoLnBvdyh0aGlzLmNvcm5lckNsaWNrRGF0YS55LWUucGFnZVksMikpPDUpIHtcclxuICAgICAgICAgIGNvbnN0IGhvdmVyID0gdGhpcy5nZXRCbG9ja0J5UGFnZShuKTtcclxuICAgICAgICAgIGlmKGhvdmVyLnBoeXNpY0lkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkID0gaG92ZXIucGh5c2ljSWQsXHJcbiAgICAgICAgICAgICAgICAgIHByb3BzID0gaG92ZXIuZ2V0UHJvcHMoKTtcclxuICAgICAgICAgICAgdGhpcy5zaGVldFBoeXNpY3Muc2V0UGFyYW1ldHIoaWQsICd2ZWxvY2l0eScsIChpPyAtMTogMSkqcHJvcHMuc3RhcnRWZWxvY2l0eSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmNvcm5lckNsaWNrRGF0YTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYWRkU2hlZXRCbG9jayhwLCBibG9jaykge1xyXG4gICAgdGhpcy5zaGVldEJsb2Nrcy5zcGxpY2UocCwgMCwgYmxvY2spO1xyXG4gICAgdGhpcy5zdWJzY3JpYmVTaGVldEJsb2NrKGJsb2NrLCAyKTtcclxuICAgIHRoaXMudGhyZWVTaGVldEJsb2Nrcy5hZGQoYmxvY2sudGhyZWUpO1xyXG4gIH1cclxuXHJcbiAgc3Vic2NyaWJlU2hlZXRCbG9jayhibG9jaywgb2Zmc2V0KSB7XHJcbiAgICBjb25zdCBldmVudENvbnZlcnRlciA9IG5ldyBDdXN0b21FdmVudENvbnZlcnRlcih0aGlzLnZpc3VhbC53bmQsIHRoaXMudmlzdWFsLmRvYywgQ2lyY2xlVGFyZ2V0LnRlc3QpLFxyXG4gICAgICAgICAgciA9IDAuMTUsXHJcbiAgICAgICAgICB0YXJnZXQgPSBuZXcgQ2lyY2xlVGFyZ2V0KDEtMC41KnIsIDAuNSpyLCByKTtcclxuICAgIHRhcmdldC5ibG9jayA9IGJsb2NrO1xyXG4gICAgdGFyZ2V0LmNhbGxiYWNrID0gdGhpcy5jb3JuZXJDYWxsYmFjay5iaW5kKHRoaXMpO1xyXG4gICAgZXZlbnRDb252ZXJ0ZXIuYWRkQ3VzdG9tKHRhcmdldCk7XHJcbiAgICBibG9jay5jb3JuZXJUYXJnZXQgPSB0YXJnZXQ7XHJcbiAgICBibG9jay50aHJlZS51c2VyRGF0YS5tb3VzZUNhbGxiYWNrID0gKGUsIGRhdGEpPT4ge1xyXG4gICAgICBjb25zdCBpID0gZGF0YS5mYWNlLm1hdGVyaWFsSW5kZXg7XHJcbiAgICAgIGlmKGk8Mikge1xyXG4gICAgICAgIGNvbnN0IG4gPSBpPT09MD8gb2Zmc2V0KzIqYmxvY2sucC5maXJzdDogb2Zmc2V0KzIqYmxvY2sucC5sYXN0LTE7XHJcbiAgICAgICAgZXZlbnRDb252ZXJ0ZXIuY29udmVydChlLCB7eDogaT09PTA/IGRhdGEudXYueDogMS1kYXRhLnV2LngsIHk6IGRhdGEudXYueSwgaSwgbn0pO1xyXG4gICAgICAgIHRoaXMucGFnZU1hbmFnZXIudHJhbnNmZXJFdmVudFRvVGV4dHVyZShuLCBlLCBkYXRhKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIGJsb2NrLnRocmVlLnVzZXJEYXRhLnRvdWNoQ2FsbGJhY2sgPSAoZSwgZGF0YSk9PiB7XHJcbiAgICAgIGNvbnN0IGkgPSBkYXRhLmZhY2UubWF0ZXJpYWxJbmRleDtcclxuICAgICAgaWYoaTwyKSB7XHJcbiAgICAgICAgY29uc3QgbiA9IGk9PT0wPyBvZmZzZXQrMipibG9jay5wLmZpcnN0OiBvZmZzZXQrMipibG9jay5wLmxhc3QtMTtcclxuICAgICAgICB0aGlzLnBhZ2VNYW5hZ2VyLnRyYW5zZmVyRXZlbnRUb1RleHR1cmUobiwgZSwgZGF0YSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aGlzLnZpc3VhbC5kcmFnLmFkZFRocmVlKGJsb2NrLnRocmVlKTtcclxuICAgIHRoaXMudmlzdWFsLm1vdXNlRXZlbnRzLmFkZFRocmVlKGJsb2NrLnRocmVlKTtcclxuICAgIHRoaXMudmlzdWFsLnRvdWNoRXZlbnRzLmFkZFRocmVlKGJsb2NrLnRocmVlKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZVNoZWV0QmxvY2soYmxvY2spIHtcclxuICAgIHRoaXMudmlzdWFsLm1vdXNlRXZlbnRzLnJlbW92ZVRocmVlKGJsb2NrLnRocmVlKTtcclxuICAgIHRoaXMudmlzdWFsLnRvdWNoRXZlbnRzLnJlbW92ZVRocmVlKGJsb2NrLnRocmVlKTtcclxuICAgIHRoaXMudmlzdWFsLmRyYWcucmVtb3ZlVGhyZWUoYmxvY2sudGhyZWUpO1xyXG4gICAgdGhpcy50aHJlZVNoZWV0QmxvY2tzLnJlbW92ZShibG9jay50aHJlZSk7XHJcbiAgICBibG9jay5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVTaGVldEJsb2NrcyhmaXJzdCwgc2l6ZSkge1xyXG4gICAgY29uc3QgYmxvY2tzID0gdGhpcy5zaGVldEJsb2Nrcy5zcGxpY2UoZmlyc3QsIHNpemUpO1xyXG4gICAgZm9yKGxldCBibG9jayBvZiBibG9ja3MpIHtcclxuICAgICAgdGhpcy5yZW1vdmVTaGVldEJsb2NrKGJsb2NrKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldFRleHR1cmUobWF0ZXJpYWwsIG4pIHtcclxuICAgIHRoaXMucGFnZU1hbmFnZXIuc2V0VGV4dHVyZShtYXRlcmlhbCwgbik7XHJcbiAgfVxyXG5cclxuICBzZXRQYWdlVGV4dHVyZShtYXRlcmlhbCwgbikge1xyXG4gICAgdGhpcy5zZXRUZXh0dXJlKG1hdGVyaWFsLCBuKzIpO1xyXG4gIH1cclxuXHJcbiAgc2V0TGVmdENvdmVyVGV4dHVyZShtYXRlcmlhbCwgbikge1xyXG4gICAgdGhpcy5zZXRUZXh0dXJlKG1hdGVyaWFsLCBuKTtcclxuICB9XHJcblxyXG4gIHNldFJpZ2h0Q292ZXJUZXh0dXJlKG1hdGVyaWFsLCBuKSB7XHJcbiAgICB0aGlzLnNldFRleHR1cmUobWF0ZXJpYWwsIG4rMioodGhpcy5wLnNoZWV0cysxKSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZmluaXNoQW5pbWF0aW9uQ2xiKGFuZ2xlKSB7XHJcbiAgICB0aGlzLmJsb2NrLnNldCh0aGlzLmJvb2suZ2V0Q2xvc2VkQmxvY2tBbmdsZShhbmdsZSkuY2xvc2VkQW5nbGUsJ2Nsb3NlZCcsMCk7XHJcbiAgICBjb25zdCBpID0gdGhpcy5ib29rLnNoZWV0QmxvY2tzLmluZGV4T2YodGhpcy5ibG9jayk7XHJcbiAgICBpZih+aSkge1xyXG4gICAgICBpZihhbmdsZT09PTApIHtcclxuICAgICAgICB0aGlzLmJvb2subWVyZ2VTaGVldEJsb2NrcyhpLCB0aGlzLmJvb2suc2hlZXRCbG9ja3MubGVuZ3RoLWkpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMuYm9vay5tZXJnZVNoZWV0QmxvY2tzKDAsIGkrMSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNhbGNCbG9ja0ZvcmNlKGJsb2NrLCBvYmplY3QsIGFuZ2xlLCB2ZWxvY2l0eSwgY29ybmVySGVpZ2h0KSB7XHJcbiAgICByZXR1cm4gYmxvY2suZm9yY2U/IGJsb2NrLmZvcmNlKG9iamVjdCwgYW5nbGUsIHZlbG9jaXR5LCBjb3JuZXJIZWlnaHQpOiAwO1xyXG4gIH1cclxuXHJcbiAgY2FsY0Jsb2NrQ29ybmVyRm9yY2UoYmxvY2ssIG9iamVjdCwgYW5nbGUsIHZlbG9jaXR5LCBjb3JuZXJIZWlnaHQpIHtcclxuICAgIHJldHVybiBibG9jay5jb3JuZXJGb3JjZT8gYmxvY2suY29ybmVyRm9yY2Uob2JqZWN0LCBhbmdsZSwgdmVsb2NpdHksIGNvcm5lckhlaWdodCk6IDA7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbGlnaHRNb2RlcyA9IHtcclxuICAgIGFtYmllbnQ6IHtcclxuICAgICAgc3RhdGljOiB7XHJcbiAgICAgICAgYW1iaWVudDogMHhmZmZmZmYsXHJcbiAgICAgICAgZGlyZWN0aW9uYWw6IDB4MDAwMDAwXHJcbiAgICAgIH0sXHJcbiAgICAgIGxpdmU6IHtcclxuICAgICAgICBhbWJpZW50OiAweGY4ZjhmOCxcclxuICAgICAgICBkaXJlY3Rpb25hbDogMHgwZjBmMGZcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIG1peGVkOiB7XHJcbiAgICAgIHN0YXRpYzoge1xyXG4gICAgICAgIGFtYmllbnQ6IDB4ZjBmMGYwLFxyXG4gICAgICAgIGRpcmVjdGlvbmFsOiAweDEwMTAxMFxyXG4gICAgICB9LFxyXG4gICAgICBsaXZlOiB7XHJcbiAgICAgICAgYW1iaWVudDogMHhmMGYwZjAsXHJcbiAgICAgICAgZGlyZWN0aW9uYWw6IDB4MTAxMDEwXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICBzZXRWaXN1YWxNb2RlKG1vZGUpIHtcclxuICAgIGNvbnN0IGwgPSBCb29rLmxpZ2h0TW9kZXNbdGhpcy5wLmxpZ2h0aW5nXVttb2RlXSxcclxuICAgICAgICAgIGJzID0gW3RoaXMubGVmdENvdmVyLCAuLi50aGlzLnNoZWV0QmxvY2tzLCB0aGlzLnJpZ2h0Q292ZXJdO1xyXG4gICAgZm9yKGxldCBiIG9mIGJzKSB7XHJcbiAgICAgIGIubWVzaC5yZWNlaXZlU2hhZG93ID0gbW9kZT09PSdsaXZlJztcclxuICAgICAgZm9yKGxldCBtIG9mIGIubWF0ZXJpYWxzKSB7XHJcbiAgICAgICAgbS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMudmlzdWFsLnNldExpZ2h0KGwuYW1iaWVudCwgbC5kaXJlY3Rpb25hbCk7XHJcbiAgfVxyXG5cclxuICBub3RpZnlCZWZvcmVBbmltYXRpb24oKSB7XHJcbiAgICBsZXQgcmVzO1xyXG4gICAgaWYodGhpcy5hbmltYXRpb25Ob3RpZmljYXRpb24pIHtcclxuICAgICAgcmVzID0gUHJvbWlzZS5yZWplY3QoKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLmFuaW1hdGlvbk5vdGlmaWNhdGlvbiA9IHRydWU7XHJcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh7XHJcbiAgICAgICAgdHlwZTogJ2JlZm9yZUFuaW1hdGlvbidcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMuc2V0VmlzdWFsTW9kZSgnbGl2ZScpO1xyXG4gICAgICB0aGlzLmZsaXBEaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgIHJlcyA9IHRoaXMubGF5ZXJNYW5hZ2VyLmhpZGUoKS50aGVuKCgpPT4gZGVsZXRlIHRoaXMuZmxpcERpc2FibGVkKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBub3RpZnlBZnRlckFuaW1hdGlvbigpIHtcclxuICAgIGlmKHRoaXMuYW5pbWF0aW9uTm90aWZpY2F0aW9uKSB7XHJcbiAgICAgIGNvbnN0IHAgPSB0aGlzLmdldFBhZ2UoKTtcclxuICAgICAgaWYodGhpcy51c2VyRGlyZWN0aW9uLmxhc3RUb3BQYWdlIT09cCkge1xyXG4gICAgICAgIHRoaXMudXNlckRpcmVjdGlvbi5kaXJlY3Rpb24gPSBNYXRoLnNpZ24ocC10aGlzLnVzZXJEaXJlY3Rpb24ubGFzdFRvcFBhZ2UpO1xyXG4gICAgICAgIHRoaXMudXNlckRpcmVjdGlvbi5sYXN0VG9wUGFnZSA9IHA7XHJcbiAgICAgIH1cclxuICAgICAgZGVsZXRlIHRoaXMuYW5pbWF0aW9uTm90aWZpY2F0aW9uO1xyXG4gICAgICB0aGlzLnNldFZpc3VhbE1vZGUoJ3N0YXRpYycpO1xyXG4gICAgICB0aGlzLmxheWVyTWFuYWdlci5zaG93KCk7XHJcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh7XHJcbiAgICAgICAgdHlwZTogJ2FmdGVyQW5pbWF0aW9uJ1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFVzZXJEaXJlY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy51c2VyRGlyZWN0aW9uO1xyXG4gIH1cclxuXHJcbiAgcmVkdWNlUGFnZXNXaWR0aChyZWR1Y2VXaWR0aCkge1xyXG4gICAgZm9yKGxldCBibG9jayBvZiB0aGlzLnNoZWV0QmxvY2tzKSB7XHJcbiAgICAgIGJsb2NrLnJlZHVjZVdpZHRoKHJlZHVjZVdpZHRoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbm5lY3RQaHlzaWNzKGJsb2NrLCBtYXNzLCBhbmdsZSwgdmVsb2NpdHksIGZsZXhpYmlsaXR5LCBjb3ZlckhlaWdodCwgc2ltdWxhdGVDbGIsIHJlbW92ZUNsYiwgcHJvZ3Jlc3NDbGIpIHtcclxuICAgIGNvbnN0IHR5cGUgPSAoKT0+IHRoaXMuaG92ZXJJbmZvPyAnaG92ZXInOiAodGhpcy5kcmFnSW5mbz8gJ2RyYWcnOiAnZnJlZScpLFxyXG4gICAgICByZXMgPSB0aGlzLnNoZWV0UGh5c2ljcy5nZXRTaXplKCk/IFByb21pc2UucmVzb2x2ZSgpOiB0aGlzLm5vdGlmeUJlZm9yZUFuaW1hdGlvbigpO1xyXG4gICAgICBpZihibG9jaz09PXRoaXMubGVmdENvdmVyfHxibG9jaz09PXRoaXMucmlnaHRDb3Zlcikge1xyXG4gICAgICAgIHRoaXMuYm9va1NoYWRvd01hdGVyaWFsLm9wYWNpdHkgPSAwO1xyXG4gICAgICB9XHJcbiAgICByZXR1cm4gcmVzLnRoZW4oKCk9PiB7XHJcbiAgICAgIGJsb2NrLnBoeXNpY0lkID0gdGhpcy5zaGVldFBoeXNpY3MuYWRkT2JqZWN0KFxyXG4gICAgICAgIG1hc3MsXHJcbiAgICAgICAgYW5nbGUsXHJcbiAgICAgICAgdmVsb2NpdHksXHJcbiAgICAgICAgZmxleGliaWxpdHksXHJcbiAgICAgICAgY292ZXJIZWlnaHQsXHJcbiAgICAgICAgKGFuZ2wsIGNoKT0+IHtcclxuICAgICAgICAgIHNpbXVsYXRlQ2xiKGFuZ2wsIGNoKTtcclxuICAgICAgICAgIHByb2dyZXNzQ2xiKGJsb2NrLCBNYXRoLmFicyhhbmdsZS1hbmdsKS9NYXRoLlBJLCAncHJvY2VzcycsIHR5cGUoKSk7XHJcbiAgICAgICAgICB0aGlzLmNhbGN1bGF0ZVNoYWRvdygpO1xyXG4gICAgICAgICAgdGhpcy51cGRhdGVUaHJlZSgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgKGFuZ2wsIGNoKT0+IHtcclxuICAgICAgICAgIHJlbW92ZUNsYihhbmdsLCBjaCk7XHJcbiAgICAgICAgICBkZWxldGUgYmxvY2sucGh5c2ljSWQ7XHJcbiAgICAgICAgICBwcm9ncmVzc0NsYihibG9jaywgTWF0aC5hYnMoYW5nbGUtYW5nbCkvTWF0aC5QSSwgJ2ZpbmlzaCcsIHR5cGUoKSk7XHJcbiAgICAgICAgICBpZighdGhpcy5zaGVldFBoeXNpY3MuZ2V0U2l6ZSgpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHAgPSB0aGlzLmdldFBhZ2UoKTtcclxuICAgICAgICAgICAgaWYocD09PTB8fHA9PT10aGlzLmdldFBhZ2VzKCktMSkge1xyXG4gICAgICAgICAgICAgIHRoaXMucmVkdWNlUGFnZXNXaWR0aCh0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+IHtcclxuICAgICAgICAgICAgaWYoIXRoaXMuc2hlZXRQaHlzaWNzLmdldFNpemUoKSkge1xyXG4gICAgICAgICAgICAgIHRoaXMubm90aWZ5QWZ0ZXJBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZVNoYWRvdygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHRoaXMudXBkYXRlVGhyZWUoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIChvYmplY3QsIGFuZ2xlLCB2ZWxvY2l0eSwgY29ybmVySGVpZ2h0KT0+IHRoaXMuY2FsY0Jsb2NrRm9yY2UoYmxvY2ssIG9iamVjdCwgYW5nbGUsIHZlbG9jaXR5LCBjb3JuZXJIZWlnaHQpLFxyXG4gICAgICAgIChvYmplY3QsIGFuZ2xlLCB2ZWxvY2l0eSwgY29ybmVySGVpZ2h0KT0+IHRoaXMuY2FsY0Jsb2NrQ29ybmVyRm9yY2UoYmxvY2ssIG9iamVjdCwgYW5nbGUsIHZlbG9jaXR5LCBjb3JuZXJIZWlnaHQpXHJcbiAgICAgICk7XHJcbiAgICAgIHByb2dyZXNzQ2xiKGJsb2NrLCAwLCAnaW5pdCcsIHR5cGUoKSk7XHJcbiAgICAgIGlmKHRoaXMuc2hlZXRQaHlzaWNzLmdldFNpemUoKT09PTEpIHtcclxuICAgICAgICB0aGlzLnJlZHVjZVBhZ2VzV2lkdGgoZmFsc2UpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBibG9jaztcclxuICAgIH0pLmNhdGNoKCgpPT4gdW5kZWZpbmVkKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZShkdCkge1xyXG4gICAgdGhpcy5sYXN0TW91c2VQb3MudCs9ZHQ7XHJcbiAgICBpZih0aGlzLmlzUHJvY2Vzc2luZygpICYmIHRoaXMubGFzdE1vdXNlUG9zLnBhZ2VYIT09dW5kZWZpbmVkICYmIHRoaXMubGFzdE1vdXNlUG9zLnQtKHRoaXMubGFzdE1vdXNlUG9zLmxhc3RUIHx8IDApPjAuMjUgJiYgIXRoaXMuaG92ZXJJbmZvICYmICF0aGlzLmRyYWdJbmZvKSB7XHJcbiAgICAgIHRoaXMubGFzdE1vdXNlUG9zLmxhc3RUID0gdGhpcy5sYXN0TW91c2VQb3MudDtcclxuICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+IHtcclxuICAgICAgICAkKHRoaXMudmlzdWFsLmVsZW1lbnQpLnRyaWdnZXIoJC5FdmVudCgnbW91c2Vtb3ZlJywgdGhpcy5sYXN0TW91c2VQb3MpKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNoZWV0UGh5c2ljcy5zaW11bGF0ZShkdCk7XHJcbiAgfVxyXG5cclxuICBzcGxpdFNoZWV0QmxvY2soaSwgbGVmdFNpemUpIHtcclxuICAgIGNvbnN0IGJsb2NrID0gdGhpcy5zaGVldEJsb2Nrc1tpXTtcclxuICAgIGlmKGJsb2NrICYmIGxlZnRTaXplPGJsb2NrLmdldFNpemUoKSkge1xyXG4gICAgICBjb25zdCBuZXdCbG9jayA9IG5ldyBTaGVldEJsb2NrKHRoaXMudmlzdWFsLCB7Li4udGhpcy5wLCBzZXRUZXh0dXJlOiB0aGlzLnNldFBhZ2VUZXh0dXJlLmJpbmQodGhpcyl9LCBibG9jay5wLmZpcnN0LCBibG9jay5wLmZpcnN0K2xlZnRTaXplLCBibG9jay5hbmdsZSwgYmxvY2suc3RhdGUpO1xyXG4gICAgICBibG9jay5zZXQoYmxvY2suYW5nbGUsIGJsb2NrLnN0YXRlLCBibG9jay5jb3JuZXIuaGVpZ2h0LCBibG9jay5wLmZpcnN0K2xlZnRTaXplLCBibG9jay5wLmxhc3QpO1xyXG4gICAgICB0aGlzLmFkZFNoZWV0QmxvY2soaSwgbmV3QmxvY2spO1xyXG4gICAgICByZXR1cm4gW25ld0Jsb2NrLCBibG9ja107XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBtZXJnZVNoZWV0QmxvY2tzKGZpcnN0LCBzaXplKSB7XHJcbiAgICBpZihmaXJzdDx0aGlzLnNoZWV0QmxvY2tzLmxlbmd0aCkge1xyXG4gICAgICBzaXplID0gTWF0aC5taW4odGhpcy5zaGVldEJsb2Nrcy5sZW5ndGgtZmlyc3QsIHNpemUpO1xyXG4gICAgICBjb25zdCBmaXJzdEJsb2NrID0gdGhpcy5zaGVldEJsb2Nrc1tmaXJzdF0sIGxhc3RCbG9jayA9IHRoaXMuc2hlZXRCbG9ja3NbZmlyc3Qrc2l6ZS0xXTtcclxuICAgICAgZmlyc3RCbG9jay5zZXQoZmlyc3RCbG9jay5hbmdsZSwgZmlyc3RCbG9jay5zdGF0ZSwgZmlyc3RCbG9jay5jb3JuZXIuaGVpZ2h0LCBmaXJzdEJsb2NrLnAuZmlyc3QsIGxhc3RCbG9jay5wLmxhc3QpO1xyXG4gICAgICB0aGlzLnJlbW92ZVNoZWV0QmxvY2tzKGZpcnN0KzEsIHNpemUtMSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRTaGVldEJsb2NrcyhhbmdsZSwgc3RhdGUpIHtcclxuICAgIGlmKHN0YXRlPT09J2Nsb3NlZCcpIHtcclxuICAgICAgdGhpcy5jbG9zZWRBbmdsZSA9IGFuZ2xlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zaGVldEJsb2Nrcy5mb3JFYWNoKChzKT0+IHtcclxuICAgICAgaWYoIXMucGh5c2ljSWQpIHtcclxuICAgICAgICBzLnNldChhbmdsZSwgc3RhdGUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHNldChhbmdsZSwgaGVpZ2h0PTApIHtcclxuICAgIHRoaXMuYW5nbGUgPSBhbmdsZTtcclxuICAgIGNvbnN0IFBJID0gTWF0aC5QSTtcclxuICAgIGlmKGFuZ2xlPFBJLzQpIHtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KDApO1xyXG5cclxuICAgICAgdGhpcy5iaW5kZXIuc2V0TGVmdCgtUEkvMisyKmFuZ2xlKTtcclxuICAgICAgdGhpcy5sZWZ0Q292ZXIuc2V0KFBJLzIsJ29wZW5lZCcsaGVpZ2h0KTtcclxuXHJcbiAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoMCwnY2xvc2VkJyk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgwKTtcclxuICAgICAgdGhpcy5yaWdodENvdmVyLnNldCgwLCdjbG9zZWQnLDApO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihhbmdsZTwyKlBJLzQpIHtcclxuICAgICAgY29uc3QgYT0yKihhbmdsZS1QSS80KTtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KGEpO1xyXG5cclxuICAgICAgdGhpcy5iaW5kZXIuc2V0TGVmdCgtYSk7XHJcbiAgICAgIHRoaXMubGVmdENvdmVyLnNldChQSS8yK2EsJ29wZW5lZCcsaGVpZ2h0KTtcclxuXHJcbiAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoYSwnY2xvc2VkJyk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtYSk7XHJcbiAgICAgIHRoaXMucmlnaHRDb3Zlci5zZXQoYSwnY2xvc2VkJywwKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoYW5nbGU8MypQSS80KSB7XHJcbiAgICAgIGNvbnN0IGE9MiooYW5nbGUtUEkvMik7XHJcbiAgICAgIHRoaXMuYmluZGVyLnNldChQSS8yKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldExlZnQoLVBJLzIpO1xyXG4gICAgICB0aGlzLmxlZnRDb3Zlci5zZXQoUEksJ29wZW5lZCcsMCk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtUEkvMik7XHJcbiAgICAgIHRoaXMucmlnaHRDb3Zlci5zZXQoYSwnb3BlbmVkJyxoZWlnaHQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihhbmdsZTw0KlBJLzQpIHtcclxuICAgICAgY29uc3QgYT0yKihhbmdsZS0zKlBJLzQpK1BJLzI7XHJcbiAgICAgIHRoaXMuYmluZGVyLnNldChhKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldExlZnQoLWEpO1xyXG4gICAgICB0aGlzLmxlZnRDb3Zlci5zZXQoYSwnY2xvc2VkJywwKTtcclxuXHJcbiAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoYSwnY2xvc2VkJyk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtUEkvMik7XHJcbiAgICAgIHRoaXMucmlnaHRDb3Zlci5zZXQoUEkvMiwnb3BlbmVkJyxoZWlnaHQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihhbmdsZTw1KlBJLzQpIHtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KFBJKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldExlZnQoLVBJKTtcclxuICAgICAgdGhpcy5sZWZ0Q292ZXIuc2V0KFBJLCdjbG9zZWQnLDApO1xyXG5cclxuICAgICAgdGhpcy5zZXRTaGVldEJsb2NrcyhQSSwnY2xvc2VkJyk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtUEkvMi0yKihhbmdsZS1QSSkpO1xyXG4gICAgICB0aGlzLnJpZ2h0Q292ZXIuc2V0KFBJLzIsJ29wZW5lZCcsaGVpZ2h0KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoYW5nbGU8NipQSS80KSB7XHJcbiAgICAgIGNvbnN0IGE9MiooYW5nbGUtNSpQSS80KTtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KFBJLWEpO1xyXG5cclxuICAgICAgdGhpcy5iaW5kZXIuc2V0TGVmdCgtUEkrYSk7XHJcbiAgICAgIHRoaXMubGVmdENvdmVyLnNldChQSS1hLCdjbG9zZWQnLDApO1xyXG5cclxuICAgICAgdGhpcy5zZXRTaGVldEJsb2NrcyhQSS1hLCdjbG9zZWQnKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldFJpZ2h0KC1QSSthKTtcclxuICAgICAgdGhpcy5yaWdodENvdmVyLnNldChQSS8yLWEsJ29wZW5lZCcsaGVpZ2h0KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoYW5nbGU8NypQSS80KSB7XHJcbiAgICAgIGNvbnN0IGE9MiooYW5nbGUtNipQSS80KTtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KFBJLzIpO1xyXG5cclxuICAgICAgdGhpcy5iaW5kZXIuc2V0TGVmdCgtUEkvMik7XHJcbiAgICAgIHRoaXMubGVmdENvdmVyLnNldChQSS1hLCdvcGVuZWQnLGhlaWdodCk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtUEkvMik7XHJcbiAgICAgIHRoaXMucmlnaHRDb3Zlci5zZXQoMCwnb3BlbmVkJywwKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoYW5nbGU8OCpQSS80KSB7XHJcbiAgICAgIGNvbnN0IGE9MiooYW5nbGUtNypQSS80KTtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KFBJLzItYSk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRMZWZ0KC1QSS8yKTtcclxuICAgICAgdGhpcy5sZWZ0Q292ZXIuc2V0KFBJLzIsJ29wZW5lZCcsaGVpZ2h0KTtcclxuXHJcbiAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoUEkvMi1hLCdjbG9zZWQnKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldFJpZ2h0KC1QSS8yK2EpO1xyXG4gICAgICB0aGlzLnJpZ2h0Q292ZXIuc2V0KFBJLzItYSwnY2xvc2VkJywwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBjcmVhdGVTaWRlVGV4dHVyZShjb2xvciwgdHlwZSkge1xyXG4gICAgY29uc3QgYyA9IEdyYXBoVXRpbHMuY3JlYXRlQ2FudmFzKDgsIDgpO1xyXG4gICAgaWYodHlwZT09PSdjb2xvcicpIHtcclxuICAgICAgY29uc3QgY3R4ID0gYy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBHcmFwaFV0aWxzLmNvbG9yMlJnYmEoY29sb3IsIDEpO1xyXG4gICAgICBjdHgucmVjdCgwLCAwLCA4LCA3KTtcclxuICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjdHguZmlsbFN0eWxlID0gR3JhcGhVdGlscy5jb2xvcjJSZ2JhKEdyYXBoVXRpbHMuaW52ZXJzZUNvbG9yKGNvbG9yLDAuNSksIDEpO1xyXG4gICAgICBjdHgucmVjdCgwLCA3LCA4LCAxKTtcclxuICAgICAgY3R4LmZpbGwoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBjO1xyXG4gIH1cclxuXHJcbiAgcHJlcGFyZVByb3BzKHByb3BzKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jYWxjUHJvcHMoQm9vay5tZXJnZVByb3BzKGJvb2tQcm9wcygpLCBwcm9wcykpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1lcmdlUHJvcHMoZmlyc3QsIHNlY29uZCkge1xyXG4gICAgc2Vjb25kID0gc2Vjb25kIHx8IHt9O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLi4uZmlyc3QsXHJcbiAgICAgIC4uLnNlY29uZCxcclxuICAgICAgc2hlZXQ6IHtcclxuICAgICAgICAuLi5maXJzdC5zaGVldCxcclxuICAgICAgICAuLi5zZWNvbmQuc2hlZXQsXHJcbiAgICAgIH0sXHJcbiAgICAgIGNvdmVyOiB7XHJcbiAgICAgICAgLi4uZmlyc3QuY292ZXIsXHJcbiAgICAgICAgLi4uc2Vjb25kLmNvdmVyLFxyXG4gICAgICB9LFxyXG4gICAgICBwYWdlOiB7XHJcbiAgICAgICAgLi4uZmlyc3QucGFnZSxcclxuICAgICAgICAuLi5zZWNvbmQucGFnZSxcclxuICAgICAgfSxcclxuICAgICAgY3NzTGF5ZXJQcm9wczoge1xyXG4gICAgICAgIC4uLmZpcnN0LmNzc0xheWVyUHJvcHMsXHJcbiAgICAgICAgLi4uc2Vjb25kLmNzc0xheWVyUHJvcHMsXHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjYWxjUHJvcHMocHJvcHMpIHtcclxuICAgIGNvbnN0IGRlcHRoID0gcHJvcHMubWF4RGVwdGgvKHByb3BzLnNoZWV0cysyKjMpLCBwID0ge1xyXG4gICAgICAuLi5wcm9wcyxcclxuICAgICAgc2hlZXQ6IHtcclxuICAgICAgICAuLi5wcm9wcy5zaGVldFxyXG4gICAgICB9LFxyXG4gICAgICBjb3Zlcjoge1xyXG4gICAgICAgIC4uLnByb3BzLnNoZWV0LFxyXG4gICAgICAgIC4uLnByb3BzLmNvdmVyXHJcbiAgICAgIH0sXHJcbiAgICAgIHBhZ2U6IHtcclxuICAgICAgICAuLi5wcm9wcy5zaGVldCxcclxuICAgICAgICAuLi5wcm9wcy5wYWdlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNzc0xheWVyUHJvcHM6IHtcclxuICAgICAgICAuLi5wcm9wcy5jc3NMYXllclByb3BzLFxyXG4gICAgICAgICRcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHAuY292ZXIuZGVwdGggPSBNYXRoLm1pbihwLmNvdmVyLmRlcHRoLCAzKmRlcHRoKTtcclxuICAgIHAucGFnZS5kZXB0aCA9IE1hdGgubWluKHAucGFnZS5kZXB0aCwgZGVwdGgpO1xyXG4gICAgY29uc3Qgc2NhbGUgPSAxMCxcclxuICAgIGhlaWdodCA9IHNjYWxlKnAuaGVpZ2h0LFxyXG4gICAgd2lkdGggPSBzY2FsZSpwLndpZHRoLFxyXG4gICAgZmxleGlibGVDb3JuZXJLID0gTWF0aC5taW4oaGVpZ2h0LCB3aWR0aCkvd2lkdGgsXHJcbiAgICBmbGlwUHJvZ3Jlc3NDbGIgPSAoKT0+IHVuZGVmaW5lZCxcclxuICAgIHNoZWV0ID0ge1xyXG4gICAgICBzaWRlVGV4dHVyZTogcC5zaGVldC5zaWRlVGV4dHVyZSB8fCBCb29rLmNyZWF0ZVNpZGVUZXh0dXJlKHAuc2hlZXQuY29sb3IsIHAuc2hlZXQuc2lkZSksXHJcbiAgICB9LFxyXG4gICAgY292ZXIgPSB7XHJcbiAgICAgIC4uLnNoZWV0LFxyXG4gICAgICAuLi5wLmNvdmVyLFxyXG4gICAgICBmbGV4aWJsZUNvcm5lcjogZmxleGlibGVDb3JuZXJLKnAuY292ZXIuZmxleGlibGVDb3JuZXIsXHJcbiAgICAgIGRlcHRoOiBzY2FsZSpwLmNvdmVyLmRlcHRoLFxyXG4gICAgICB3aWR0aDogd2lkdGgsXHJcbiAgICAgIGhlaWdodDogaGVpZ2h0LFxyXG4gICAgICBwYWRkaW5nOiBzY2FsZSpwLmNvdmVyLnBhZGRpbmdcclxuICAgIH0sXHJcbiAgICBwYWdlID0ge1xyXG4gICAgICAuLi5zaGVldCxcclxuICAgICAgLi4ucC5wYWdlLFxyXG4gICAgICBmbGV4aWJsZUNvcm5lcjogZmxleGlibGVDb3JuZXJLKnAucGFnZS5mbGV4aWJsZUNvcm5lcixcclxuICAgICAgZGVwdGg6IHNjYWxlKnAucGFnZS5kZXB0aCxcclxuICAgICAgd2lkdGg6IGNvdmVyLndpZHRoIC0gY292ZXIucGFkZGluZyxcclxuICAgICAgaGVpZ2h0OiBjb3Zlci5oZWlnaHQgLSAyKmNvdmVyLnBhZGRpbmdcclxuICAgIH0sXHJcbiAgICBtYXJrZXIgPSB7XHJcbiAgICAgIHVzZTogZmFsc2UsXHJcbiAgICAgIGNvbG9yOiAwWEZGMDAwMCxcclxuICAgICAgc2l6ZTogc2NhbGUqMC4wMDFcclxuICAgIH07XHJcbiAgICBpZihjb3Zlci5jb2xvciE9PXNoZWV0LmNvbG9yICYmICFwLmNvdmVyLnNpZGVUZXh0dXJlKSB7XHJcbiAgICAgIGNvdmVyLnNpZGVUZXh0dXJlID0gQm9vay5jcmVhdGVTaWRlVGV4dHVyZShjb3Zlci5jb2xvciwgY292ZXIuc2lkZSk7XHJcbiAgICB9XHJcbiAgICBpZihwYWdlLmNvbG9yIT09c2hlZXQuY29sb3IgJiYgIXAucGFnZS5zaWRlVGV4dHVyZSkge1xyXG4gICAgICBwYWdlLnNpZGVUZXh0dXJlID0gQm9vay5jcmVhdGVTaWRlVGV4dHVyZShwYWdlLmNvbG9yLCBwYWdlLnNpZGUpO1xyXG4gICAgfVxyXG4gICAgaWYocC5jc3NMYXllcnNMb2FkZXIpIHtcclxuICAgICAgcC5jc3NMYXllcnNMb2FkZXIgPSB0aGlzLmNzc0xheWVyc0xvYWRlcihwLmNzc0xheWVyc0xvYWRlcik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gey4uLnAsIHNjYWxlLCBoZWlnaHQsIHdpZHRoLCBmbGlwUHJvZ3Jlc3NDbGIsIGNvdmVyLCBwYWdlLCBtYXJrZXJ9O1xyXG4gIH1cclxuXHJcbiAgY3NzTGF5ZXJzTG9hZGVyKGxvYWRlcikge1xyXG4gICAgcmV0dXJuIChuLCBjbGIpPT4ge1xyXG4gICAgICByZXR1cm4gbG9hZGVyKG4sIChscyk9PiB7XHJcbiAgICAgICAgY29uc3QgbmxzID0gW107XHJcbiAgICAgICAgZm9yKGxldCBsIG9mIGxzKSB7XHJcbiAgICAgICAgICBubHMucHVzaCh7XHJcbiAgICAgICAgICAgIC4uLmwsXHJcbiAgICAgICAgICAgIGpzOiB0aGlzLmNzc0xheWVySnNPYmplY3QobClcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2xiKG5scyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNzc0xheWVySnNPYmplY3QobCkge1xyXG4gICAgY29uc3QgY2xJZkV4ID0gKGYpPT4ge1xyXG4gICAgICBsZXQgcjtcclxuICAgICAgaWYoZikge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICByID0gZigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaChlKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcjtcclxuICAgIH07XHJcbiAgICByZXR1cm4gKGMsIHApPT4ge1xyXG4gICAgICBsZXQgbyA9IHt9O1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGluaXQgPSBldmFsKGwuanMpO1xyXG4gICAgICAgIG8gPSBpbml0PyBpbml0KGMsIHApIHx8IHt9OiB7fTtcclxuICAgICAgfVxyXG4gICAgICBjYXRjaChlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBubyA9IHRoaXMuY3NzTGF5ZXJKc09iamVjdEluaXQoYywgIHApLCBybyA9IHt9O1xyXG4gICAgICBmb3IobGV0IG4gb2YgWydoaWRlJywgJ2hpZGRlbicsICdzaG93JywgJ3Nob3duJywgJ2Rpc3Bvc2UnXSkge1xyXG4gICAgICAgIHJvW25dID0gKCk9PiB7XHJcbiAgICAgICAgICBjbElmRXgobm9bbl0pO1xyXG4gICAgICAgICAgY2xJZkV4KG9bbl0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJvO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNzc0xheWVySnNPYmplY3RJbml0KGMsIHApIHtcclxuICAgIGMuZmluZCgnLmdvLXRvLXBhZ2UnKS5vbignY2xpY2snLCAoZSk9PiB7XHJcbiAgICAgIGxldCBuID0gJChlLnRhcmdldCk7XHJcbiAgICAgIHdoaWxlKG4ubGVuZ3RoICYmICFuLmhhc0NsYXNzKCdnby10by1wYWdlJykpIHtcclxuICAgICAgICBuID0gJChuWzBdLnBhcmVudE5vZGUpO1xyXG4gICAgICB9XHJcbiAgICAgIG4gPSBwYXJzZUludChuLmF0dHIoJ2RhdGEtbnVtYmVyJykpO1xyXG4gICAgICBpZighaXNOYU4obikpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgcC5zY2VuZS5jdHJsLmdvVG9QYWdlKG4tMSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgY29uc3QgeXMgPSBjLmZpbmQoJy55b3V0dWJlJyk7XHJcbiAgICBpZih5cy5sZW5ndGgpIHtcclxuICAgICAgeXMuaHRtbCgnPGRpdiBzdHlsZT1cIndpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7XCI+PC9kaXY+Jyk7XHJcbiAgICAgIGNvbnN0IHAwMSA9IChuLCBubSwgZCk9PiBuLmF0dHIobm0pPT09dW5kZWZpbmVkPyBkOiAobi5hdHRyKG5tKT09PSd0cnVlJz8gMTogMCk7XHJcbiAgICAgIFlvdVR1YmVBcGkuaW5pdCgpLnRoZW4oKCk9PiB7XHJcbiAgICAgICAgZm9yKGxldCBpPTA7IGk8eXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgIGNvbnN0IG4gPSAkKHlzW2ldKSxcclxuICAgICAgICAgIHBsYXllclZhcnMgPSB7bG9vcDogcDAxKG4sICdkYXRhLWxvb3AnLCAwKSwgY29udHJvbHM6IHAwMShuLCAnZGF0YS1jb250cm9scycsIDEpLCBtdXRlOiBwMDEobiwgJ2RhdGEtbXV0ZWQnLCAwKX07XHJcbiAgICAgICAgICBpZihwbGF5ZXJWYXJzLmxvb3ApIHtcclxuICAgICAgICAgICAgcGxheWVyVmFycy5wbGF5bGlzdCA9IG4uYXR0cignZGF0YS1pZCcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY29uc3QgcGxheWVyID0gbmV3IFlULlBsYXllcihuLmZpbmQoJ2RpdicpWzBdLCB7dmlkZW9JZDogbi5hdHRyKCdkYXRhLWlkJyksIHBsYXllclZhcnN9KTtcclxuICAgICAgICAgIG5bMF0ucGxheWVyID0gcGxheWVyO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBhZHMgPSBjLmZpbmQoJy5hZHNieWdvb2dsZScpO1xyXG4gICAgaWYoYWRzLmxlbmd0aCkge1xyXG4gICAgICBpZighdGhpcy52aXN1YWwud25kLmFkc2J5Z29vZ2xlKSB7XHJcbiAgICAgICAgdGhpcy52aXN1YWwud25kLmFkc2J5Z29vZ2xlID0gW107XHJcbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gdGhpcy52aXN1YWwuZG9jLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG4gICAgICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XHJcbiAgICAgICAgc2NyaXB0LnNyYyA9ICdodHRwczovL3BhZ2VhZDIuZ29vZ2xlc3luZGljYXRpb24uY29tL3BhZ2VhZC9qcy9hZHNieWdvb2dsZS5qcz9jbGllbnQ9JythZHMuYXR0cignZGF0YS1hZC1jbGllbnQnKTtcclxuICAgICAgICB0aGlzLnZpc3VhbC5kb2MuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBoaWRlOiAoKT0+IHtcclxuICAgICAgICBpZih0aGlzLnBlbmRpbmdQbGF5ZXJzLmxlbmd0aCkge1xyXG4gICAgICAgICAgdGhpcy5wZW5kaW5nUGxheWVycyA9IFtdO1xyXG4gICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHtcclxuICAgICAgICAgICAgdHlwZTogJ3BlbmRpbmdQbGF5ZXJzJ1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGMuZmluZCgnLnBhdXNlLW9uLWhpZGUnKS5lYWNoKChfLCBwKT0+IHRoaXMuY3NzRnMucGF1c2UocCkpO1xyXG4gICAgICB9LFxyXG4gICAgICBzaG93bjogKCk9PiB7XHJcbiAgICAgICAgYy5maW5kKCcucGxheS1vbi1zaG93bicpLmVhY2goKF8sIHApPT4gdGhpcy5jc3NGcy5wbGF5KHApKTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpPT4ge1xyXG4gICAgICAgICAgbGV0IHVwZGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgYy5maW5kKCcuYWRzYnlnb29nbGUnKS5lYWNoKChfLCBhZCk9PiAodXBkYXRlPXVwZGF0ZXx8JChhZCkuaHRtbCgpLnRyaW0oKT09PScnKSk7XHJcbiAgICAgICAgICBpZih1cGRhdGUpIHtcclxuICAgICAgICAgICAgdHJ5IHt0aGlzLnZpc3VhbC53bmQuYWRzYnlnb29nbGUucHVzaCh7fSk7fSBjYXRjaChlKSB7Y29uc29sZS5lcnJvcihlKTt9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMTAwKTtcclxuICAgICAgfSxcclxuICAgICAgZGlzcG9zZTogKCk9PiBjLmZpbmQoJy5wYXVzZS1vbi1oaWRlJykuZWFjaCgoXywgcCk9PiB0aGlzLmNzc0ZzLnBhdXNlKHApKVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNzc0ZzID0ge1xyXG4gICAgcGxheTogKHBsYXllcik9PiB7XHJcbiAgICAgIGlmKHBsYXllci5wbGF5KSB7XHJcbiAgICAgICAgcGxheWVyLmZiM2ROb1BsYXkgPSBmYWxzZTtcclxuICAgICAgICAocGxheWVyLnBsYXkoKXx8e2NhdGNoOiAoKT0+IHVuZGVmaW5lZH0pLmNhdGNoKChlKT0+IHtcclxuICAgICAgICAgIGlmKCFwbGF5ZXIuZmIzZE5vUGxheSAmJiBlLm5hbWU9PT0nTm90QWxsb3dlZEVycm9yJykge1xyXG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdQbGF5ZXJzLnB1c2gocGxheWVyKTtcclxuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHtcclxuICAgICAgICAgICAgICB0eXBlOiAncGVuZGluZ1BsYXllcnMnXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYoJChwbGF5ZXIpLmhhc0NsYXNzKCd5b3V0dWJlJykpIHtcclxuICAgICAgICBjb25zdCBwID0gcGxheWVyLnBsYXllcjtcclxuICAgICAgICBwbGF5ZXIuZmIzZE5vUGxheSA9IGZhbHNlO1xyXG4gICAgICAgIGlmKHAgJiYgcC5wbGF5VmlkZW8pIHtcclxuICAgICAgICAgIHAucGxheVZpZGVvKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgc2V0VGltZW91dCgoKT0+IHtcclxuICAgICAgICAgICAgaWYoIXBsYXllci5mYjNkTm9QbGF5KSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jc3NGcy5wbGF5KHBsYXllcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sIDIwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgcGF1c2U6IChwbGF5ZXIpPT4ge1xyXG4gICAgICBpZihwbGF5ZXIucGF1c2UpIHtcclxuICAgICAgICBwbGF5ZXIuZmIzZE5vUGxheSA9IHRydWU7XHJcbiAgICAgICAgcGxheWVyLnBhdXNlKCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZigkKHBsYXllcikuaGFzQ2xhc3MoJ3lvdXR1YmUnKSkge1xyXG4gICAgICAgIGNvbnN0IHAgPSBwbGF5ZXIucGxheWVyO1xyXG4gICAgICAgIHBsYXllci5mYjNkTm9QbGF5ID0gdHJ1ZTtcclxuICAgICAgICBpZihwICYmIHAucGF1c2VWaWRlbykge1xyXG4gICAgICAgICAgcC5wYXVzZVZpZGVvKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9Cb29rLmpzIiwiaW1wb3J0IHskLCBUSFJFRX0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBDb250cm9sbGVyIGZyb20gJ0NvbnRyb2xsZXInO1xyXG5pbXBvcnQge3Byb3BzIGFzICBib29rQ29udHJvbGxlclByb3BzfSBmcm9tICcuLi9wcm9wcy9ib29rQ29udHJvbGxlcic7XHJcbmltcG9ydCBFdmVudHNUb0FjdGlvbnMgZnJvbSAnRXZlbnRzVG9BY3Rpb25zJztcclxuaW1wb3J0IFN0YXRzIGZyb20gJ3N0YXRzLmpzJztcclxuaW1wb3J0IE9iamVjdDNEV2F0Y2hlciBmcm9tICdPYmplY3QzRFdhdGNoZXInO1xyXG5pbXBvcnQgRnVsbFNjcmVlblggZnJvbSAnRnVsbFNjcmVlblgnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9va0NvbnRyb2xsZXIgZXh0ZW5kcyBDb250cm9sbGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3IoYm9vaywgdmlldywgcHJvcHMpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLm5hdmlnYXRpb25Db250cm9scyA9IHRydWU7XHJcbiAgICB0aGlzLmJvb2sgPSBib29rO1xyXG4gICAgdGhpcy52aXN1YWwgPSBib29rLnZpc3VhbDtcclxuICAgIHRoaXMucCA9IEJvb2tDb250cm9sbGVyLnByZXBhcmVQcm9wcyhwcm9wcyk7XHJcbiAgICB0aGlzLnAucnRsID0gYm9vay5wLnJ0bDtcclxuXHJcbiAgICB0aGlzLm9yYml0ID0gYm9vay52aXN1YWwuZ2V0T3JiaXQoKTtcclxuICAgIGJvb2suc2V0RmxpcFByb2dyZXNzQ2xiKHRoaXMudXBkYXRlVmlld0lmU3RhdGUuYmluZCh0aGlzKSk7XHJcbiAgICB0aGlzLnZpZXcgPSB2aWV3O1xyXG4gICAgdGhpcy5iaW5kQWN0aW9ucygpO1xyXG5cclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIHNtYXJ0UGFuOiAhdGhpcy5hY3Rpb25zWydjbWRTbWFydFBhbiddLmFjdGl2ZSxcclxuICAgICAgc2luZ2xlUGFnZTogdGhpcy5pc1NpbmdsZVBhZ2VBdmFpbGFibGUoKT8gdGhpcy5hY3Rpb25zWydjbWRTaW5nbGVQYWdlJ10uYWN0aXZlIHx8IHRoaXMuYWN0aW9uc1snY21kU2luZ2xlUGFnZSddLmFjdGl2ZUZvck1vYmlsZSAmJiB0aGlzLnZpc3VhbC5pc01vYmlsZSgpOiBmYWxzZSxcclxuICAgICAgc3RhdHM6IHRoaXMuYWN0aW9uc1snY21kU3RhdHMnXS5hY3RpdmUsXHJcbiAgICAgIGFjdGl2ZVNpZGU6IDEsXHJcbiAgICAgIGF1dG9QbGF5OiB0aGlzLmFjdGlvbnNbJ2NtZEF1dG9QbGF5J10uYWN0aXZlXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGJveDAgPSBuZXcgVEhSRUUuQm94MygpLCBib3gxID0gbmV3IFRIUkVFLkJveDMoKSxcclxuICAgICAgICAgIGJvb2tXaWR0aCA9IGJvb2sub3BlbmVkQm94Lm1heC54LWJvb2sub3BlbmVkQm94Lm1pbi54O1xyXG4gICAgdGhpcy5ib29rV2F0Y2hlciA9IG5ldyBPYmplY3QzRFdhdGNoZXIodGhpcy52aXN1YWwsICgpPT4ge1xyXG4gICAgICBpZih0aGlzLnN0YXRlLnNpbmdsZVBhZ2UpIHtcclxuICAgICAgICBpZih0aGlzLnN0YXRlLmFjdGl2ZVNpZGUpIHtcclxuICAgICAgICAgIGJveDAuc2V0RnJvbU9iamVjdChib29rLnJpZ2h0Q292ZXIudGhyZWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGJveDAuc2V0RnJvbU9iamVjdChib29rLmxlZnRDb3Zlci50aHJlZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGJveDAuc2V0RnJvbU9iamVjdChib29rLmxlZnRDb3Zlci50aHJlZSk7XHJcbiAgICAgICAgYm94MS5zZXRGcm9tT2JqZWN0KGJvb2sucmlnaHRDb3Zlci50aHJlZSk7XHJcbiAgICAgICAgYm94MC51bmlvbihib3gxKTtcclxuICAgICAgICBjb25zdCB3aWR0aCA9IE1hdGgubWF4KGJveDAubWluLngtYm94MC5taW4ueCwgYm9va1dpZHRoKSwgeDAgPSAoYm94MC5taW4ueCtib3gwLm1heC54KS8yO1xyXG4gICAgICAgIGJveDAubWluLnggPSB4MC0wLjUqd2lkdGg7XHJcbiAgICAgICAgYm94MC5tYXgueCA9IHgwKzAuNSp3aWR0aDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYm94MDtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5ib29rV2F0Y2hlci5zY2FsZSA9IHRoaXMucC5zY2FsZS5kZWZhdWx0O1xyXG4gICAgdGhpcy5ib29rLnNldFpvb20odGhpcy5ib29rV2F0Y2hlci5zY2FsZSwgdGhpcy5zdGF0ZS5zaW5nbGVQYWdlKTtcclxuXHJcbiAgICB0aGlzLlN0YXRzID0gbmV3IFN0YXRzKCk7XHJcbiAgICB0aGlzLlN0YXRzLmRvbUVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgdGhpcy5TdGF0cy5kb21FbGVtZW50LnN0eWxlLnRvcCA9ICcwcHgnO1xyXG5cclxuICAgIHRoaXMuYmluZHMgPSB7XHJcbiAgICAgIG9uU2NyZWVuTW9kZUNoYW5nZWQ6IHRoaXMub25TY3JlZW5Nb2RlQ2hhbmdlZC5iaW5kKHRoaXMpLFxyXG4gICAgICBzdGF0czogdGhpcy5TdGF0cy51cGRhdGUuYmluZCh0aGlzLlN0YXRzKSxcclxuICAgICAgb25VcGRhdGVWaWV3OiB0aGlzLnVwZGF0ZVZpZXcuYmluZCh0aGlzKVxyXG4gICAgfVxyXG4gICAgRnVsbFNjcmVlblguYWRkRXZlbnRMaXN0ZW5lcih0aGlzLnZpZXcuZ2V0UGFyZW50Q29udGFpbmVyKCkub3duZXJEb2N1bWVudCwgdGhpcy5iaW5kcy5vblNjcmVlbk1vZGVDaGFuZ2VkKTtcclxuXHJcbiAgICB0aGlzLmNtZFNtYXJ0UGFuKCk7XHJcblxyXG4gICAgdGhpcy5ib29rLmVuYWJsZUxvYWRpbmdBbmltYXRpb24odGhpcy5wLmxvYWRpbmdBbmltYXRpb24uYm9vayk7XHJcbiAgICBpZih0aGlzLnAubG9hZGluZ0FuaW1hdGlvbi5za2luKSB7XHJcbiAgICAgIHRoaXMuaW5pdExvYWRpbmdBbmltYXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmJvb2suZW5hYmxlTG9hZGluZ0FuaW1hdGlvbih0aGlzLnAubG9hZGluZ0FuaW1hdGlvbi5ib29rKTtcclxuICAgIHRoaXMuYm9vay5zZXRBdXRvUmVzb2x1dGlvbih0aGlzLnAuYXV0b1Jlc29sdXRpb24pO1xyXG5cclxuICAgIHRoaXMudmlzdWFsLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMudXBkYXRlVmlldy5iaW5kKHRoaXMpKTtcclxuICAgIHRoaXMuYm9vay5hZGRFdmVudExpc3RlbmVyKCdwZW5kaW5nUGxheWVycycsIHRoaXMudXBkYXRlVmlldy5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICBpZih0aGlzLnN0YXRlLmF1dG9QbGF5KSB7XHJcbiAgICAgIHRoaXMuYXV0b1BsYXkoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBGdWxsU2NyZWVuWC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMudmlldy5nZXRQYXJlbnRDb250YWluZXIoKS5vd25lckRvY3VtZW50LCB0aGlzLmJpbmRzLm9uU2NyZWVuTW9kZUNoYW5nZWQpO1xyXG4gICAgZGVsZXRlIHRoaXMuYm9vaztcclxuICAgIGRlbGV0ZSB0aGlzLnZpZXc7XHJcbiAgICBkZWxldGUgdGhpcy52aXN1YWw7XHJcbiAgfVxyXG5cclxuICByZWFkeShzY2VuZSkge1xyXG4gICAgaWYodGhpcy52aWV3LnRlbXBsYXRlT2JqZWN0LmFwcExvYWRlZCkge1xyXG4gICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT4gdGhpcy52aWV3LnRlbXBsYXRlT2JqZWN0LmFwcExvYWRlZChzY2VuZSkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbG9hZGluZ0FuaW1hdGlvbkhhbmRsZXIoKSB7XHJcbiAgICBjb25zdCBwYWdlcyA9IHRoaXMuYm9vay5nZXRUb3BQYWdlcygpO1xyXG4gICAgbGV0IHZpc2libGUgPSBmYWxzZTtcclxuICAgIGZvcihsZXQgbiBvZiBwYWdlcykge1xyXG4gICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuYm9vay5nZXRQYWdlU3RhdGUobik7XHJcbiAgICAgIHZpc2libGUgPSBzdGF0ZSE9PSdhY3RpdmUnO1xyXG4gICAgICBpZih2aXNpYmxlKSB7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHZpc2libGUgPSB2aXNpYmxlIHx8IHRoaXMucHJpbnRlciAmJiB0aGlzLnByaW50ZXIubG9hZGluZztcclxuICAgIGlmKHZpc2libGUpIHtcclxuICAgICAgaWYoIXRoaXMucGVuZGluZ0xvYWRpbmdBbmltYXRpb24pIHtcclxuICAgICAgICB0aGlzLnBlbmRpbmdMb2FkaW5nQW5pbWF0aW9uID0gdHJ1ZTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpPT4ge1xyXG4gICAgICAgICAgaWYodGhpcy5wZW5kaW5nTG9hZGluZ0FuaW1hdGlvbiAmJiB0aGlzLnZpZXcpIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd3aWRMb2FkaW5nJywge1xyXG4gICAgICAgICAgICAgIHZpc2libGVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMjAwMCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBkZWxldGUgdGhpcy5wZW5kaW5nTG9hZGluZ0FuaW1hdGlvbjtcclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd3aWRMb2FkaW5nJywge1xyXG4gICAgICAgIHZpc2libGVcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgaW5pdExvYWRpbmdBbmltYXRpb24oKSB7XHJcbiAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5sb2FkaW5nQW5pbWF0aW9uSGFuZGxlci5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5ib29rLmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZUFuaW1hdGlvbicsIGhhbmRsZXIpO1xyXG4gICAgdGhpcy5ib29rLmFkZEV2ZW50TGlzdGVuZXIoJ2FmdGVyQW5pbWF0aW9uJywgaGFuZGxlcik7XHJcbiAgICB0aGlzLmJvb2suYWRkRXZlbnRMaXN0ZW5lcignc3RhcnRSZW5kZXJpbmcnLCBoYW5kbGVyKTtcclxuICAgIHRoaXMuYm9vay5hZGRFdmVudExpc3RlbmVyKCdlbmRSZW5kZXJpbmcnLCBoYW5kbGVyKTtcclxuICB9XHJcblxyXG4gIGVuYWJsZU5hdmlnYXRpb24oZW5hYmxlKSB7XHJcbiAgICB0aGlzLm5hdmlnYXRpb25Db250cm9scyA9IGVuYWJsZTtcclxuICB9XHJcblxyXG4gIHNldFRvY0N0cmwodG9jQ3RybCkge1xyXG4gICAgdGhpcy50b2NDdHJsID0gdG9jQ3RybDtcclxuICAgIHRoaXMudG9jQ3RybC5vbkNoYW5nZSA9IHRoaXMudXBkYXRlVmlldy5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy50b2NDdHJsLnNldEFjdGl2ZVRhYih0aGlzLmFjdGlvbnNbJ2NtZFRvYyddLmRlZmF1bHRUYWIpO1xyXG4gICAgaWYodGhpcy5hY3Rpb25zWydjbWRUb2MnXS5hY3RpdmUgJiYgIXRvY0N0cmwudmlzaWJsZSkge1xyXG4gICAgICB0b2NDdHJsLnRvZ2xlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRTaGFyZUN0cmwoc2hhcmVDdHJsKSB7XHJcbiAgICB0aGlzLnNoYXJlQ3RybCA9IHNoYXJlQ3RybDtcclxuICAgIHRoaXMuc2hhcmVDdHJsLm9uQ2hhbmdlID0gdGhpcy51cGRhdGVWaWV3LmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIHNldFByaW50ZXIocHJpbnRlcikge1xyXG4gICAgdGhpcy5wcmludGVyID0gcHJpbnRlcjtcclxuICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLmxvYWRpbmdBbmltYXRpb25IYW5kbGVyLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLnByaW50ZXIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZGluZycsIGhhbmRsZXIpO1xyXG4gICAgdGhpcy5wcmludGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlZCcsIGhhbmRsZXIpO1xyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBzZXRTb3VuZHMoc291bmRzKSB7XHJcbiAgICB0aGlzLnNvdW5kcyA9IHNvdW5kcztcclxuICAgIHNvdW5kcy5zZXRFbmFibGVkKHRoaXMuYWN0aW9uc1snY21kU291bmRzJ10uYWN0aXZlKTtcclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcblxyXG4gIG9uU2NyZWVuTW9kZUNoYW5nZWQoZSkge1xyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBjYW5ab29tSW4oKSB7XHJcbiAgICByZXR1cm4gIXRoaXMuc3RhdGUuc21hcnRQYW4gfHwgTWF0aC5hYnModGhpcy5ib29rV2F0Y2hlci5zY2FsZS10aGlzLnAuc2NhbGUubWF4KT50aGlzLnAuZXBzO1xyXG4gIH1cclxuXHJcbiAgY2FuWm9vbU91dCgpIHtcclxuICAgIHJldHVybiAhdGhpcy5zdGF0ZS5zbWFydFBhbiB8fCBNYXRoLmFicyh0aGlzLmJvb2tXYXRjaGVyLnNjYWxlLXRoaXMucC5zY2FsZS5taW4pPnRoaXMucC5lcHM7XHJcbiAgfVxyXG5cclxuICBjYW5EZWZhdWx0Wm9vbSgpIHtcclxuICAgIHJldHVybiB0aGlzLnN0YXRlLnNtYXJ0UGFuO1xyXG4gIH1cclxuXHJcbiAgc2V0Qm9va1pvb20oc2NhbGUpIHtcclxuICAgIC8vIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAvLyAgIGlmKE1hdGguYWJzKHRoaXMuYm9va1dhdGNoZXIuc2NhbGUtc2NhbGUpPDFlLTMpIHtcclxuICAgICAgICB0aGlzLmJvb2suc2V0Wm9vbShzY2FsZSwgdGhpcy5zdGF0ZS5zaW5nbGVQYWdlKTtcclxuICAgIC8vICAgfVxyXG4gICAgLy8gfSwgMTAwMCk7XHJcbiAgfVxyXG5cclxuICBjbWRBdXRvUGxheSgpIHtcclxuICAgIHRoaXMuc3RhdGUuYXV0b1BsYXkgPSAhdGhpcy5zdGF0ZS5hdXRvUGxheTtcclxuICAgIGlmKHRoaXMuc3RhdGUuYXV0b1BsYXkpIHtcclxuICAgICAgdGhpcy5hdXRvUGxheSgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBhdXRvUGxheSgpIHtcclxuICAgIGNvbnN0IHBlbmRpbmdBdXRvUGxheSA9IERhdGUubm93KCk7XHJcbiAgICB0aGlzLnBlbmRpbmdBdXRvUGxheSA9IHBlbmRpbmdBdXRvUGxheTtcclxuICAgIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgIGlmKHRoaXMucGVuZGluZ0F1dG9QbGF5PT09cGVuZGluZ0F1dG9QbGF5ICYmIHRoaXMuc3RhdGUuYXV0b1BsYXkpIHtcclxuICAgICAgICBpZighdGhpcy5ib29rLmlzUHJvY2Vzc2luZygpKSB7XHJcbiAgICAgICAgICBsZXQgZmxpcHBlZDtcclxuICAgICAgICAgIGlmKHRoaXMucC5ydGwpIHtcclxuICAgICAgICAgICAgaWYoZmxpcHBlZCA9IHRoaXMuY2FuRmxpcExlZnQoKSkge1xyXG4gICAgICAgICAgICAgIHRoaXMuY21kQmFja3dhcmQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmKGZsaXBwZWQgPSB0aGlzLmNhbkZsaXBSaWdodCgpKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jbWRGb3J3YXJkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmKCFmbGlwcGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ29Ub1BhZ2UoMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYXV0b1BsYXkoKTtcclxuICAgICAgfVxyXG4gICAgfSwgdGhpcy5ib29rLnAuYXV0b1BsYXlEdXJhdGlvbik7XHJcbiAgfVxyXG5cclxuICBjbWRab29tSW4oKSB7XHJcbiAgICBpZih0aGlzLnN0YXRlLnNtYXJ0UGFuKSB7XHJcbiAgICAgIHRoaXMuYm9va1dhdGNoZXIuc2NhbGUgPSBNYXRoLm1pbih0aGlzLnAuc2NhbGUubWF4LCB0aGlzLmJvb2tXYXRjaGVyLnNjYWxlK3RoaXMucC5zY2FsZS5kZWx0YSk7XHJcbiAgICAgIHRoaXMuc2V0Qm9va1pvb20odGhpcy5ib29rV2F0Y2hlci5zY2FsZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5vcmJpdC56b29tSW4oNi42KnRoaXMucC5zY2FsZS5kZWx0YS8wLjMyKTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgY21kWm9vbU91dCgpIHtcclxuICAgIGlmKHRoaXMuc3RhdGUuc21hcnRQYW4pIHtcclxuICAgICAgdGhpcy5ib29rV2F0Y2hlci5zY2FsZSA9IE1hdGgubWF4KHRoaXMucC5zY2FsZS5taW4sIHRoaXMuYm9va1dhdGNoZXIuc2NhbGUtdGhpcy5wLnNjYWxlLmRlbHRhKTtcclxuICAgICAgdGhpcy5zZXRCb29rWm9vbSh0aGlzLmJvb2tXYXRjaGVyLnNjYWxlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLm9yYml0Lnpvb21PdXQoNi42KnRoaXMucC5zY2FsZS5kZWx0YS8wLjMyKTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgc2V0U2NhbGUoc2NhbGUpIHtcclxuICAgIHRoaXMuYm9va1dhdGNoZXIuc2NhbGUgPSBNYXRoLm1pbih0aGlzLnAuc2NhbGUubWF4LCBNYXRoLm1heCh0aGlzLnAuc2NhbGUubWluLCBzY2FsZSkpO1xyXG4gICAgdGhpcy5zZXRCb29rWm9vbSh0aGlzLmJvb2tXYXRjaGVyLnNjYWxlKTtcclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgY21kRGVmYXVsdFpvb20oKSB7XHJcbiAgICBpZih0aGlzLnN0YXRlLnNtYXJ0UGFuKSB7XHJcbiAgICAgIHRoaXMuYm9va1dhdGNoZXIuc2NhbGUgPSB0aGlzLnAuc2NhbGUuZGVmYXVsdDtcclxuICAgICAgdGhpcy5zZXRCb29rWm9vbSh0aGlzLmJvb2tXYXRjaGVyLnNjYWxlKTtcclxuICAgICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbWRUb2MoKSB7XHJcbiAgICBpZih0aGlzLnRvY0N0cmwpIHtcclxuICAgICAgdGhpcy50b2NDdHJsLnRvZ2xlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbWRTaGFyZSgpIHtcclxuICAgIGlmKHRoaXMuc2hhcmVDdHJsKSB7XHJcbiAgICAgIHRoaXMuc2hhcmVDdHJsLnRvZ2xlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbWRCYWNrd2FyZCgpIHtcclxuICAgIGlmKCF0aGlzLmNhbkZsaXBMZWZ0KCkpIHJldHVybjtcclxuICAgIGlmKHRoaXMuc3RhdGUuc2luZ2xlUGFnZSkge1xyXG4gICAgICB0aGlzLnN0YXRlLmFjdGl2ZVNpZGUgPSAodGhpcy5nZXRQYWdlKCkrMSklMjtcclxuICAgICAgaWYodGhpcy5zdGF0ZS5hY3RpdmVTaWRlKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVTaWRlID0gMDtcclxuICAgICAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB0aGlzLnN0YXJ0RmxpcCh0aGlzLmJvb2suZmxpcExlZnQoMSkpLnRoZW4oKGJsb2NrKT0+IHtcclxuICAgICAgICAgIGlmKGJsb2NrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuYWN0aXZlU2lkZSA9IDE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLnN0YXJ0RmxpcCh0aGlzLmJvb2suZmxpcExlZnQoMSkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY21kQmlnQmFja3dhcmQoKSB7XHJcbiAgICB0aGlzLmNtZEJhY2t3YXJkKCk7XHJcbiAgfVxyXG5cclxuICBjbWRGb3J3YXJkKCkge1xyXG4gICAgaWYoIXRoaXMuY2FuRmxpcFJpZ2h0KCkpIHJldHVybjtcclxuICAgIGlmKHRoaXMuc3RhdGUuc2luZ2xlUGFnZSkge1xyXG4gICAgICB0aGlzLnN0YXRlLmFjdGl2ZVNpZGUgPSAodGhpcy5nZXRQYWdlKCkrMSklMjtcclxuICAgICAgaWYoIXRoaXMuc3RhdGUuYWN0aXZlU2lkZSkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUuYWN0aXZlU2lkZSA9IDE7XHJcbiAgICAgICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy5zdGFydEZsaXAodGhpcy5ib29rLmZsaXBSaWdodCgxKSkudGhlbigoYmxvY2spPT4ge1xyXG4gICAgICAgICAgaWYoYmxvY2spIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVTaWRlID0gMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuc3RhcnRGbGlwKHRoaXMuYm9vay5mbGlwUmlnaHQoMSkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY21kQmlnRm9yd2FyZCgpIHtcclxuICAgIHRoaXMuY21kRm9yd2FyZCgpO1xyXG4gIH1cclxuXHJcbiAgY21kU2F2ZSgpIHtcclxuICAgIGNvbnN0IGEgPSAkKCc8YSBocmVmPVwiJyt0aGlzLnAuZG93bmxvYWRVUkwrJ1wiIGRvd25sb2FkIHRhcmdldD1cIl9ibGFua1wiPjwvYT4nKS5hcHBlbmRUbyh0aGlzLnZpZXcuZ2V0Q29udGFpbmVyKCkpO1xyXG4gICAgYVswXS5jbGljaygpO1xyXG4gICAgYS5yZW1vdmUoKTtcclxuICB9XHJcblxyXG4gIGNtZFByaW50KCkge1xyXG4gICAgdGhpcy5wcmludGVyLnByaW50KCk7XHJcbiAgfVxyXG5cclxuICBjbWRGdWxsU2NyZWVuKCkge1xyXG4gICAgaWYoIUZ1bGxTY3JlZW5YLmFjdGl2YXRlZCgpKSB7XHJcbiAgICAgIEZ1bGxTY3JlZW5YLnJlcXVlc3QodGhpcy52aWV3LmdldFBhcmVudENvbnRhaW5lcigpKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBGdWxsU2NyZWVuWC5jYW5jZWwoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNtZFNtYXJ0UGFuKCkge1xyXG4gICAgdGhpcy5zdGF0ZS5zbWFydFBhbiA9ICF0aGlzLnN0YXRlLnNtYXJ0UGFuO1xyXG4gICAgaWYodGhpcy5zdGF0ZS5zbWFydFBhbikge1xyXG4gICAgICB0aGlzLm9yYml0Lm1pbkF6aW11dGhBbmdsZSA9IDA7XHJcbiAgICAgIHRoaXMub3JiaXQubWF4QXppbXV0aEFuZ2xlID0gMDtcclxuICAgICAgdGhpcy5vcmJpdC5taW5Qb2xhckFuZ2xlID0gMDtcclxuICAgIFx0dGhpcy5vcmJpdC5tYXhQb2xhckFuZ2xlID0gTWF0aC5QSS80O1xyXG4gICAgICB0aGlzLmJvb2tXYXRjaGVyLmVuYWJsZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMub3JiaXQubWluQXppbXV0aEFuZ2xlID0gLUluZmluaXR5O1xyXG4gICAgICB0aGlzLm9yYml0Lm1heEF6aW11dGhBbmdsZSA9IEluZmluaXR5O1xyXG4gICAgICB0aGlzLm9yYml0Lm1pblBvbGFyQW5nbGUgPSAwO1xyXG4gICAgXHR0aGlzLm9yYml0Lm1heFBvbGFyQW5nbGUgPSBNYXRoLlBJO1xyXG4gICAgICB0aGlzLmJvb2tXYXRjaGVyLmVuYWJsZWQgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgaXNTaW5nbGVQYWdlQXZhaWxhYmxlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuYm9vay5nZXRQYWdlcygpIT09MjtcclxuICB9XHJcblxyXG4gIGNtZFNpbmdsZVBhZ2UoKSB7XHJcbiAgICBpZih0aGlzLmlzU2luZ2xlUGFnZUF2YWlsYWJsZSgpKSB7XHJcbiAgICAgIHRoaXMuc3RhdGUuc2luZ2xlUGFnZSA9ICF0aGlzLnN0YXRlLnNpbmdsZVBhZ2U7XHJcbiAgICAgIHRoaXMuc2V0Qm9va1pvb20odGhpcy5ib29rV2F0Y2hlci5zY2FsZSk7XHJcbiAgICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gICAgICB0aGlzLmRpc3BhdGNoQXN5bmMoe1xyXG4gICAgICAgIHR5cGU6ICdwYWdlTW9kZScsXHJcbiAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUuc2luZ2xlUGFnZT8gJ3NpbmdsZSc6ICdkb3VibGUnXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY21kU291bmRzKCkge1xyXG4gICAgaWYodGhpcy5zb3VuZHMpIHtcclxuICAgICAgdGhpcy5zb3VuZHMudG9nbGUoKTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgY21kU3RhdHMoKSB7XHJcbiAgICB0aGlzLnN0YXRlLnN0YXRzID0gIXRoaXMuc3RhdGUuc3RhdHM7XHJcbiAgICBpZih0aGlzLnN0YXRlLnN0YXRzKSB7XHJcbiAgICAgICQodGhpcy52aWV3LmdldENvbnRhaW5lcigpKS5hcHBlbmQodGhpcy5TdGF0cy5kb21FbGVtZW50KTtcclxuICAgICAgdGhpcy52aXN1YWwuYWRkUmVuZGVyQ2FsbGJhY2sodGhpcy5iaW5kcy5zdGF0cyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgJCh0aGlzLnZpZXcuZ2V0Q29udGFpbmVyKCkpLmZpbmQodGhpcy5TdGF0cy5kb21FbGVtZW50KS5yZW1vdmUoKTtcclxuICAgICAgdGhpcy52aXN1YWwucmVtb3ZlUmVuZGVyQ2FsbGJhY2sodGhpcy5iaW5kcy5zdGF0cyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIGNtZFBlbmRpbmdQbGF5KCkge1xyXG4gICAgdGhpcy5ib29rLnJlc29sdmVQZW5kaW5nUGxheWVycygpO1xyXG4gIH1cclxuXHJcbiAgY21kR290b0ZpcnN0UGFnZSgpIHtcclxuICAgIHRoaXMuZ29Ub1BhZ2UoMCk7XHJcbiAgfVxyXG5cclxuICBjbWRHb3RvTGFzdFBhZ2UoKSB7XHJcbiAgICB0aGlzLmdvVG9QYWdlKHRoaXMuYm9vay5nZXRCb29rUGFnZXMoKS0xKTtcclxuICB9XHJcblxyXG4gIGdvVG9QYWdlKHBhZ2UpIHtcclxuICAgIHBhZ2UgPSBNYXRoLm1heChNYXRoLm1pbihwYWdlLCB0aGlzLmJvb2suZ2V0UGFnZXMoKS0xKSwwKTtcclxuICAgIGlmKHRoaXMucC5ydGwpIHtcclxuICAgICAgcGFnZSA9IHRoaXMuYm9vay5nZXRCb29rUGFnZXMoKS0xLXBhZ2U7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwYWdlTnVtID0gTWF0aC5tYXgoTWF0aC5taW4ocGFnZSwgdGhpcy5ib29rLmdldEJvb2tQYWdlcygpLTEpLDApO1xyXG4gICAgdGhpcy5zdGF0ZS5hY3RpdmVTaWRlID0gKHBhZ2VOdW0rMSklMjtcclxuICAgIGxldCB0YXJnZXQgPSBNYXRoLm1heChNYXRoLm1pbihwYWdlLTErcGFnZSUyLCB0aGlzLmJvb2suZ2V0Qm9va1BhZ2VzKCktMSksMCksIGN1cnJlbnQgPSB0aGlzLmJvb2suZ2V0UGFnZSgpLCBmbGlwcyA9IFtdLCBjb3ZzID0gMDs7XHJcbiAgICBpZih0YXJnZXQhPWN1cnJlbnQpIHtcclxuICAgICAgaWYoY3VycmVudD09PTApIHtcclxuICAgICAgICBmbGlwcy5wdXNoKDEpO1xyXG4gICAgICAgIGN1cnJlbnQrPTE7XHJcbiAgICAgICAgKytjb3ZzO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYoY3VycmVudD09PXRoaXMuYm9vay5nZXRCb29rUGFnZXMoKS0xKSB7XHJcbiAgICAgICAgZmxpcHMucHVzaCgtMSk7XHJcbiAgICAgICAgY3VycmVudC09MjtcclxuICAgICAgICArK2NvdnM7XHJcbiAgICAgIH1cclxuICAgICAgbGV0IGN2ID0gMDtcclxuICAgICAgaWYodGFyZ2V0PT09MCkge1xyXG4gICAgICAgIGN2ID0gLTE7XHJcbiAgICAgICAgdGFyZ2V0Kz0xO1xyXG4gICAgICAgICsrY292cztcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKHRhcmdldD09PXRoaXMuYm9vay5nZXRCb29rUGFnZXMoKS0xKSB7XHJcbiAgICAgICAgY3YgPSAxO1xyXG4gICAgICAgIHRhcmdldC09MjtcclxuICAgICAgICArK2NvdnM7XHJcbiAgICAgIH1cclxuICAgICAgaWYodGFyZ2V0LWN1cnJlbnQpIHtcclxuICAgICAgICBmbGlwcy5wdXNoKE1hdGguY2VpbCgodGFyZ2V0LWN1cnJlbnQpLzIpKTtcclxuICAgICAgfVxyXG4gICAgICBpZihjdikge1xyXG4gICAgICAgIGZsaXBzLnB1c2goY3YpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc2V0Q2xiID0gKGZsLCB0aW1lLCBjbGIpPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpPT4ge1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgICAgICBpZihmbDwwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRGbGlwKHRoaXMuYm9vay5mbGlwTGVmdCgtZmwsIGNsYikpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRGbGlwKHRoaXMuYm9vay5mbGlwUmlnaHQoZmwsIGNsYikpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIH0sIHRpbWUpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgaWYoY292cz09PTIpIHtcclxuICAgICAgc2V0Q2xiKGZsaXBzWzBdLCAwLCAoYmxvY2ssIHByb2dyZXNzLCBzdGF0ZSk9PiB7XHJcbiAgICAgICAgaWYoc3RhdGU9PSdmaW5pc2gnICYmIHByb2dyZXNzPT0xKSB7XHJcbiAgICAgICAgICBzZXRDbGIoZmxpcHNbZmxpcHMubGVuZ3RoLTFdLCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pLnRoZW4oKCk9PiBzZXRDbGIoZmxpcHNbMV0sIDQwMCkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGxldCBuZXh0ID0gUHJvbWlzZS5yZXNvbHZlKCksIHRpbWUgPSAwO1xyXG4gICAgICBmb3IobGV0IGZsIG9mIGZsaXBzKSB7XHJcbiAgICAgICAgY29uc3QgdCA9IHRpbWU7XHJcbiAgICAgICAgbmV4dCA9IG5leHQudGhlbigoKT0+IHNldENsYihmbCwgdCkpO1xyXG4gICAgICAgIHRpbWUgPSA0MDA7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXJ0RmxpcChmbGlwUmVzKSB7XHJcbiAgICByZXR1cm4gZmxpcFJlcz8gZmxpcFJlcy50aGVuKChibG9jayk9PiB7XHJcbiAgICAgIGlmKGJsb2NrKSB7XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaEFzeW5jKHtcclxuICAgICAgICAgIHR5cGU6ICdzdGFydEZsaXAnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGJsb2NrO1xyXG4gICAgfSk6IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xyXG4gIH1cclxuXHJcbiAgZW5kRmxpcChibG9jaykge1xyXG4gICAgdGhpcy5kaXNwYXRjaEFzeW5jKHtcclxuICAgICAgdHlwZTogJ2VuZEZsaXAnXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBibG9jaztcclxuICB9XHJcblxyXG4gIGdldFBhZ2UoKSB7XHJcbiAgICBjb25zdCBwYWdlID0gdGhpcy5ib29rLmdldFBhZ2UoKTtcclxuICAgIHJldHVybiBwYWdlPyBNYXRoLm1pbih0aGlzLmJvb2suZ2V0UGFnZSgpK3RoaXMuc3RhdGUuYWN0aXZlU2lkZSwgdGhpcy5ib29rLmdldEJvb2tQYWdlcygpLTEpOiAwO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGFnZUZvckdVSSgpIHtcclxuICAgIGxldCBuID0gKHRoaXMuc3RhdGUuc2luZ2xlUGFnZT8gdGhpcy5nZXRQYWdlKCk6IHRoaXMuYm9vay5nZXRQYWdlKCkpKzE7XHJcbiAgICBpZih0aGlzLnAucnRsKSB7XHJcbiAgICAgIG4gPSB0aGlzLmJvb2suZ2V0Qm9va1BhZ2VzKCktbisxO1xyXG4gICAgfVxyXG4gICAgaWYobj50aGlzLmJvb2suZ2V0UGFnZXMoKSkge1xyXG4gICAgICBuID0gdGhpcy5ib29rLmdldFBhZ2VzKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbjtcclxuICB9XHJcblxyXG4gIGlucFBhZ2UoZSwgZGF0YSkge1xyXG4gICAgdGhpcy5nb1RvUGFnZShkYXRhLTEpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVmlld0lmU3RhdGUoYmxvY2ssIHByb2dyZXNzLCBzdGF0ZSwgdHlwZSkge1xyXG4gICAgaWYoc3RhdGU9PT0naW5pdCcgfHwgc3RhdGU9PT0nZmluaXNoJykge1xyXG4gICAgICBzZXRUaW1lb3V0KHRoaXMudXBkYXRlVmlldy5iaW5kKHRoaXMpLCAxMDApO1xyXG4gICAgfVxyXG4gICAgaWYoc3RhdGU9PT0nZmluaXNoJykge1xyXG4gICAgICB0aGlzLmVuZEZsaXAoYmxvY2spO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaXNDbWRWaXNpYmxlKG5hbWUpIHtcclxuICAgIHJldHVybiAkKHRoaXMudmlzdWFsLmVsZW1lbnQpLndpZHRoKCk8dGhpcy5wLm5hcnJvd1ZpZXcud2lkdGg/ICh0aGlzLmFjdGlvbnNbbmFtZV0uZW5hYmxlZEluTmFycm93PT09dW5kZWZpbmVkPyB0aGlzLmFjdGlvbnNbbmFtZV0uZW5hYmxlZDogdGhpcy5hY3Rpb25zW25hbWVdLmVuYWJsZWRJbk5hcnJvdyk6IHRoaXMuYWN0aW9uc1tuYW1lXS5lbmFibGVkO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVmlld1N0YXRlKCkge1xyXG4gICAgdGhpcy52aWV3U3RhdGUgPSB7XHJcbiAgICAgICdjbWRab29tSW4nOiB7XHJcbiAgICAgICAgZW5hYmxlOiB0aGlzLmNhblpvb21JbigpLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKCdjbWRab29tSW4nKSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgICdjbWRab29tT3V0Jzoge1xyXG4gICAgICAgIGVuYWJsZTogdGhpcy5jYW5ab29tT3V0KCksXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5pc0NtZFZpc2libGUoJ2NtZFpvb21PdXQnKSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgICdjbWREZWZhdWx0Wm9vbSc6IHtcclxuICAgICAgICBlbmFibGU6IHRoaXMuY2FuRGVmYXVsdFpvb20oKSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmlzQ21kVmlzaWJsZSgnY21kRGVmYXVsdFpvb20nKSxcclxuICAgICAgICBhY3RpdmU6IHRoaXMuY2FuRGVmYXVsdFpvb20oKSAmJiBNYXRoLmFicyh0aGlzLmJvb2tXYXRjaGVyLnNjYWxlLXRoaXMucC5zY2FsZS5kZWZhdWx0KTx0aGlzLnAuZXBzXHJcbiAgICAgIH0sXHJcbiAgICAgICdjbWRUb2MnOiB7XHJcbiAgICAgICAgZW5hYmxlOiAhIXRoaXMudG9jQ3RybCxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmlzQ21kVmlzaWJsZSgnY21kVG9jJykgJiYgdGhpcy50b2NDdHJsLFxyXG4gICAgICAgIGFjdGl2ZTogdGhpcy50b2NDdHJsICYmIHRoaXMudG9jQ3RybC52aXNpYmxlXHJcbiAgICAgIH0sXHJcbiAgICAgICdjbWRTaGFyZSc6IHtcclxuICAgICAgICBlbmFibGU6ICEhdGhpcy5zaGFyZUN0cmwsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5pc0NtZFZpc2libGUoJ2NtZFNoYXJlJykgJiYgdGhpcy5zaGFyZUN0cmwsXHJcbiAgICAgICAgYWN0aXZlOiB0aGlzLnNoYXJlQ3RybCAmJiB0aGlzLnNoYXJlQ3RybC52aXNpYmxlXHJcbiAgICAgIH0sXHJcbiAgICAgICdpbnBQYWdlcyc6IHtcclxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIHZhbHVlOiB0aGlzLmJvb2suZ2V0UGFnZXMoKVxyXG4gICAgICB9LFxyXG4gICAgICAnaW5wUGFnZSc6IHtcclxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZTogIXRoaXMuYm9vay5pc1Byb2Nlc3NpbmcoKSAmJiB0aGlzLm5hdmlnYXRpb25Db250cm9scyxcclxuICAgICAgICB2YWx1ZTogdGhpcy5nZXRQYWdlRm9yR1VJKClcclxuICAgICAgfSxcclxuICAgICAgJ2NtZFNhdmUnOiB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKCdjbWRTYXZlJykgJiYgISF0aGlzLnAuZG93bmxvYWRVUkwsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgICAnY21kUHJpbnQnOiB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKCdjbWRQcmludCcpICYmICEhdGhpcy5wcmludGVyLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgJ2NtZEZ1bGxTY3JlZW4nOiB7XHJcbiAgICAgICAgZW5hYmxlOiBGdWxsU2NyZWVuWC5hdmFpbGFibGUoKSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmlzQ21kVmlzaWJsZSgnY21kRnVsbFNjcmVlbicpLFxyXG4gICAgICAgIGFjdGl2ZTogRnVsbFNjcmVlblguYXZhaWxhYmxlKCkgJiYgRnVsbFNjcmVlblguYWN0aXZhdGVkKClcclxuICAgICAgfSxcclxuICAgICAgJ3dpZENvbnRyb2xzJzoge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgJ3dpZFNldHRpbmdzJzoge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmlzQ21kVmlzaWJsZSgnd2lkU2V0dGluZ3MnKSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgICd3aWRUb29sYmFyJzoge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmlzQ21kVmlzaWJsZSgnd2lkVG9vbGJhcicpLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgJ2NtZFNtYXJ0UGFuJzoge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmlzQ21kVmlzaWJsZSgnY21kU21hcnRQYW4nKSxcclxuICAgICAgICBhY3RpdmU6IHRoaXMuc3RhdGUuc21hcnRQYW5cclxuICAgICAgfSxcclxuICAgICAgJ2NtZFNpbmdsZVBhZ2UnOiB7XHJcbiAgICAgICAgZW5hYmxlOiB0aGlzLmlzU2luZ2xlUGFnZUF2YWlsYWJsZSgpLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKCdjbWRTaW5nbGVQYWdlJyksXHJcbiAgICAgICAgYWN0aXZlOiB0aGlzLnN0YXRlLnNpbmdsZVBhZ2VcclxuICAgICAgfSxcclxuICAgICAgJ2NtZFNvdW5kcyc6IHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogIHRoaXMuaXNDbWRWaXNpYmxlKCdjbWRTb3VuZHMnKSAmJiAhIXRoaXMuc291bmRzLFxyXG4gICAgICAgIGFjdGl2ZTogISF0aGlzLnNvdW5kcyAmJiB0aGlzLnNvdW5kcy5lbmFibGVkXHJcbiAgICAgIH0sXHJcbiAgICAgICdjbWRTdGF0cyc6IHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5pc0NtZFZpc2libGUoJ2NtZFN0YXRzJyksXHJcbiAgICAgICAgYWN0aXZlOiB0aGlzLnN0YXRlLnN0YXRzXHJcbiAgICAgIH0sXHJcbiAgICAgICdjbWRBdXRvUGxheSc6IHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5pc0NtZFZpc2libGUoJ2NtZEF1dG9QbGF5JyksXHJcbiAgICAgICAgYWN0aXZlOiB0aGlzLnN0YXRlLmF1dG9QbGF5XHJcbiAgICAgIH0sXHJcbiAgICAgICdjbWRQZW5kaW5nUGxheSc6IHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgICd3aWRQZW5kaW5nUGxheSc6IHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5ib29rLmhhc1BlbmRpbmdQbGF5ZXJzKCksXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBsZWZ0ID0gdGhpcy5jYW5GbGlwTGVmdCgpLFxyXG4gICAgICAgICAgcmlnaHQgPSB0aGlzLmNhbkZsaXBSaWdodCgpO1xyXG4gICAgY29uc3QgZmxpcHBlcnNFbmFibGUgPSB7XHJcbiAgICAgIGNtZEJhY2t3YXJkOiBsZWZ0LFxyXG4gICAgICBjbWRCaWdCYWNrd2FyZDogbGVmdCxcclxuICAgICAgY21kRm9yd2FyZDogcmlnaHQsXHJcbiAgICAgIGNtZEJpZ0ZvcndhcmQ6IHJpZ2h0LFxyXG4gICAgICBjbWRHb3RvRmlyc3RQYWdlOiBsZWZ0LFxyXG4gICAgICBjbWRHb3RvTGFzdFBhZ2U6IHJpZ2h0XHJcbiAgICB9O1xyXG4gICAgZm9yKGxldCBuYW1lIG9mIE9iamVjdC5rZXlzKGZsaXBwZXJzRW5hYmxlKSkge1xyXG4gICAgICB0aGlzLnZpZXdTdGF0ZVtuYW1lXSA9IHtcclxuICAgICAgICBlbmFibGU6IGZsaXBwZXJzRW5hYmxlW25hbWVdLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKG5hbWUpLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjYW5GbGlwTGVmdCgpIHtcclxuICAgIHJldHVybiB0aGlzLm5hdmlnYXRpb25Db250cm9scyAmJiAoISF0aGlzLmJvb2suZ2V0TGVmdEZsaXBwaW5nKCkgfHwgdGhpcy5zdGF0ZS5zaW5nbGVQYWdlICYmIHRoaXMucC5ydGwgJiYgdGhpcy5nZXRQYWdlKCk9PT0yKTtcclxuICB9XHJcblxyXG4gIGNhbkZsaXBSaWdodCgpIHtcclxuICAgIHJldHVybiB0aGlzLm5hdmlnYXRpb25Db250cm9scyAmJiAoISF0aGlzLmJvb2suZ2V0UmlnaHRGbGlwcGluZygpIHx8IHRoaXMuc3RhdGUuc2luZ2xlUGFnZSAmJiAhdGhpcy5wLnJ0bCAmJiB0aGlzLmdldFBhZ2UoKT09PXRoaXMuYm9vay5nZXRQYWdlcygpLTIpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVmlldygpIHtcclxuICAgIGlmKHRoaXMudmlldykge1xyXG4gICAgICB0aGlzLnVwZGF0ZVZpZXdTdGF0ZSgpO1xyXG4gICAgICBmb3IobGV0IG5hbWUgb2YgT2JqZWN0LmtleXModGhpcy52aWV3U3RhdGUpKSB7XHJcbiAgICAgICAgdGhpcy52aWV3LnNldFN0YXRlKG5hbWUsIHRoaXMudmlld1N0YXRlW25hbWVdKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0QWN0aW9ucygpIHtcclxuICAgIGNvbnN0IGlzU3dpcHBpbmcgPSAobmFtZSk9PiB7XHJcbiAgICAgIHJldHVybiB0aGlzLmFjdGlvbnMudG91Y2hDbWRTd2lwZS5lbmFibGVkICYmIHRoaXMuYWN0aW9ucy50b3VjaENtZFN3aXBlLmNvZGU9PT10aGlzLmFjdGlvbnNbbmFtZV0uY29kZSAmJiB0aGlzLnN0YXRlLnNtYXJ0UGFuICYmIHRoaXMuYm9va1dhdGNoZXIuc2NhbGU8PTE7XHJcbiAgICB9LCBjbWRzID0ge307XHJcblxyXG4gICAgZm9yKGxldCBuYW1lIGluIHRoaXMpIHtcclxuICAgICAgaWYobmFtZS5pbmRleE9mKCdjbWQnKT09PTApIHtcclxuICAgICAgICBjbWRzW25hbWVdID0ge1xyXG4gICAgICAgICAgYWN0aXZhdGU6ICguLi5hcmdzKT0+IHtcclxuICAgICAgICAgICAgaWYodGhpcy52aWV3U3RhdGUgJiYgdGhpcy52aWV3U3RhdGVbbmFtZV0uZW5hYmxlKSB7XHJcbiAgICAgICAgICAgICAgdGhpc1tuYW1lXSguLi5hcmdzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAuLi5jbWRzLFxyXG4gICAgICBjbWRQYW5MZWZ0OiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IChlKT0+IHRoaXMub3JiaXQuYWN0aW9ucy5wYW4oZSwge1xyXG4gICAgICAgICAgc3RhdGU6ICdtb3ZlJyxcclxuICAgICAgICAgIGR4OiAtdGhpcy5wLnBhbi5zcGVlZCxcclxuICAgICAgICAgIGR5OiAwXHJcbiAgICAgICAgfSlcclxuICAgICAgfSxcclxuICAgICAgY21kUGFuUmlnaHQ6IHtcclxuICAgICAgICBhY3RpdmF0ZTogKGUpPT4gdGhpcy5vcmJpdC5hY3Rpb25zLnBhbihlLCB7XHJcbiAgICAgICAgICBzdGF0ZTogJ21vdmUnLFxyXG4gICAgICAgICAgZHg6IHRoaXMucC5wYW4uc3BlZWQsXHJcbiAgICAgICAgICBkeTogMFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFBhblVwOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IChlKT0+IHRoaXMub3JiaXQuYWN0aW9ucy5wYW4oZSwge1xyXG4gICAgICAgICAgc3RhdGU6ICdtb3ZlJyxcclxuICAgICAgICAgIGR4OiAwLFxyXG4gICAgICAgICAgZHk6IC10aGlzLnAucGFuLnNwZWVkXHJcbiAgICAgICAgfSlcclxuICAgICAgfSxcclxuICAgICAgY21kUGFuRG93bjoge1xyXG4gICAgICAgIGFjdGl2YXRlOiAoZSk9PiB0aGlzLm9yYml0LmFjdGlvbnMucGFuKGUsIHtcclxuICAgICAgICAgIHN0YXRlOiAnbW92ZScsXHJcbiAgICAgICAgICBkeDogMCxcclxuICAgICAgICAgIGR5OiB0aGlzLnAucGFuLnNwZWVkXHJcbiAgICAgICAgfSlcclxuICAgICAgfSxcclxuICAgICAgbW91c2VDbWRSb3RhdGU6IHtcclxuICAgICAgICBhY3RpdmF0ZTogdGhpcy5vcmJpdC5hY3Rpb25zLnJvdGF0ZVxyXG4gICAgICB9LFxyXG4gICAgICBtb3VzZUNtZERyYWdab29tOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IChlLCBkYXRhKT0+IHtcclxuICAgICAgICAgIGlmKGRhdGEuZHk+MCkge1xyXG4gICAgICAgICAgICB0aGlzLmNtZFpvb21PdXQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYoZGF0YS5keTwwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY21kWm9vbUluKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBtb3VzZUNtZFBhbjoge1xyXG4gICAgICAgIGFjdGl2YXRlOiB0aGlzLm9yYml0LmFjdGlvbnMucGFuXHJcbiAgICAgIH0sXHJcbiAgICAgIG1vdXNlQ21kV2hlZWxab29tOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IChlKT0+IHtcclxuICAgICAgICAgIGNvbnN0IHNjYWxlID0gdGhpcy5ib29rV2F0Y2hlci5zY2FsZTtcclxuICAgICAgICAgIGlmKGUuZGVsdGFZPDApIHtcclxuICAgICAgICAgICAgdGhpcy5jbWRab29tT3V0KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmKGUuZGVsdGFZPjApIHtcclxuICAgICAgICAgICAgdGhpcy5jbWRab29tSW4oKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmKCF0aGlzLnN0YXRlLnNtYXJ0UGFuIHx8IE1hdGguYWJzKHRoaXMuYm9va1dhdGNoZXIuc2NhbGUtc2NhbGUpPjFlLTQpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgdG91Y2hDbWRSb3RhdGU6IHtcclxuICAgICAgICBhY3RpdmF0ZTogKGUsIGRhdGEpPT4ge1xyXG4gICAgICAgICAgaWYoIWlzU3dpcHBpbmcoJ3RvdWNoQ21kUm90YXRlJykpIHtcclxuICAgICAgICAgICAgaWYoZGF0YS5zdGF0ZT09PSdtb3ZlJykge1xyXG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm9yYml0LmFjdGlvbnMucm90YXRlKGUsIGRhdGEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgdG91Y2hDbWRab29tOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IChlLCBkYXRhKT0+IHtcclxuICAgICAgICAgIGlmKCFpc1N3aXBwaW5nKCd0b3VjaENtZFpvb20nKSkge1xyXG4gICAgICAgICAgICBjb25zdCBsID0gZnVuY3Rpb24odikge1xyXG4gICAgICAgICAgICAgIHJldHVybiBNYXRoLnNxcnQodi54KnYueCt2Lnkqdi55KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYoZGF0YS5zdGF0ZT09PSdzdGFydCcpIHtcclxuICAgICAgICAgICAgICB0aGlzLnRvdWNoWm9vbURhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBsOiBsKGRhdGEpLFxyXG4gICAgICAgICAgICAgICAgc2NhbGU6IHRoaXMuYm9va1dhdGNoZXIuc2NhbGVcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYoZGF0YS5zdGF0ZT09PSdtb3ZlJykge1xyXG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICB0aGlzLnNldFNjYWxlKGwoZGF0YSkvdGhpcy50b3VjaFpvb21EYXRhLmwqdGhpcy50b3VjaFpvb21EYXRhLnNjYWxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgdG91Y2hDbWRQYW46IHtcclxuICAgICAgICBhY3RpdmF0ZTogKGUsIGRhdGEpPT4ge1xyXG4gICAgICAgICAgaWYoIWlzU3dpcHBpbmcoJ3RvdWNoQ21kUGFuJykpIHtcclxuICAgICAgICAgICAgaWYoZGF0YS5zdGF0ZT09PSdtb3ZlJyAmJiAoIXRoaXMuc3RhdGUuc21hcnRQYW4gfHwgdGhpcy5ib29rV2F0Y2hlci5zY2FsZT4xKSkge1xyXG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICB0aGlzLm9yYml0LmFjdGlvbnMucGFuKGUsIGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICB0b3VjaENtZFN3aXBlOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IChlLCBkYXRhKT0+IHtcclxuICAgICAgICAgIGlmKGlzU3dpcHBpbmcoJ3RvdWNoQ21kU3dpcGUnKSkge1xyXG4gICAgICAgICAgICBpZihkYXRhLnN0YXRlPT09J3N0YXJ0Jykge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHRvdWNoID0gKGUudG91Y2hlcyB8fCBlLm9yaWdpbmFsRXZlbnQudG91Y2hlcylbdGhpcy5hY3Rpb25zLnRvdWNoQ21kU3dpcGUuY29kZS0xXTtcclxuICAgICAgICAgICAgICB0aGlzLnN3aXBlRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgeDA6IHRvdWNoLnBhZ2VYLFxyXG4gICAgICAgICAgICAgICAgeTA6IHRvdWNoLnBhZ2VZLFxyXG4gICAgICAgICAgICAgICAgeDogdG91Y2gucGFnZVgsXHJcbiAgICAgICAgICAgICAgICB5OiB0b3VjaC5wYWdlWVxyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZihkYXRhLnN0YXRlPT09J21vdmUnKSB7XHJcbiAgICAgICAgICAgICAgLy8gZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgIGlmKCF0aGlzLnN3aXBlRGF0YS5oYW5kbGVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN3aXBlRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgLi4udGhpcy5zd2lwZURhdGEsXHJcbiAgICAgICAgICAgICAgICAgIHg6IHRoaXMuc3dpcGVEYXRhLngrZGF0YS5keCxcclxuICAgICAgICAgICAgICAgICAgeTogdGhpcy5zd2lwZURhdGEueStkYXRhLmR5XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZihNYXRoLmFicyh0aGlzLnN3aXBlRGF0YS54MC10aGlzLnN3aXBlRGF0YS54KT4xMDApIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5zd2lwZURhdGEueDA+dGhpcy5zd2lwZURhdGEueD8gdGhpcy5jbWRGb3J3YXJkKCk6IHRoaXMuY21kQmFja3dhcmQoKTtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5zd2lwZURhdGEuaGFuZGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnN3aXBlRGF0YTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgd2lkU2V0dGluZ3M6IHtcclxuICAgICAgICBhY3RpdmF0ZTogKCk9PiB1bmRlZmluZWRcclxuICAgICAgfSxcclxuICAgICAgd2lkVG9vbGJhcjoge1xyXG4gICAgICAgIGFjdGl2YXRlOiAoKT0+IHVuZGVmaW5lZFxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgYmluZEFjdGlvbnMoKSB7XHJcbiAgICB0aGlzLmVUb0EgPSBuZXcgRXZlbnRzVG9BY3Rpb25zKCQodGhpcy52aXN1YWwuZWxlbWVudCkpO1xyXG4gICAgdGhpcy5lVG9BLmFkZEFjdGlvbigoZSk9PiBlLnByZXZlbnREZWZhdWx0KCksICdjb250ZXh0bWVudScsIEV2ZW50c1RvQWN0aW9ucy5tb3VzZUJ1dHRvbnMuUmlnaHQsIDApO1xyXG4gICAgdGhpcy5lVG9BLmFkZEFjdGlvbigoZSk9PiAkKHRoaXMudmlldy5nZXRQYXJlbnRDb250YWluZXIoKSkudHJpZ2dlcihlKSwgJ2tleWRvd24nLCAyNywgMCk7XHJcblxyXG4gICAgdGhpcy5hY3Rpb25zID0gdGhpcy5nZXRBY3Rpb25zKCk7XHJcbiAgICBmb3IobGV0IG5hbWUgb2YgT2JqZWN0LmtleXModGhpcy5hY3Rpb25zKSkge1xyXG4gICAgICBjb25zdCBhY3Rpb24gPSB7XHJcbiAgICAgICAgLi4udGhpcy5hY3Rpb25zW25hbWVdLFxyXG4gICAgICAgIC4uLnRoaXMucC5hY3Rpb25zW25hbWVdXHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMuYWN0aW9uc1tuYW1lXSA9IGFjdGlvbjtcclxuICAgICAgaWYobmFtZS5pbmRleE9mKCdtb3VzZUNtZCcpIT09MCAmJiBuYW1lLmluZGV4T2YoJ3RvdWNoQ21kJykhPT0wIHx8IGFjdGlvbi5lbmFibGVkKSB7XHJcbiAgICAgICAgY29uc3QgZmxhZ3MgPSBhY3Rpb24uZmxhZ3MgfHwgMDtcclxuICAgICAgICBpZihhY3Rpb24udHlwZSkge1xyXG4gICAgICAgICAgdGhpcy5lVG9BLmFkZEFjdGlvbihhY3Rpb24uYWN0aXZhdGUsIGFjdGlvbi50eXBlLCBhY3Rpb24uY29kZSwgZmxhZ3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKGFjdGlvbi5jb2RlIT09dW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICB0aGlzLmVUb0EuYWRkQWN0aW9uKGFjdGlvbi5hY3RpdmF0ZSwgJ2tleWRvd24nLCBhY3Rpb24uY29kZSwgZmxhZ3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIHByZXBhcmVQcm9wcyhwcm9wcykge1xyXG4gICAgcmV0dXJuIEJvb2tDb250cm9sbGVyLmNhbGNQcm9wcyhCb29rQ29udHJvbGxlci5tZXJnZVByb3BzKGJvb2tDb250cm9sbGVyUHJvcHMoKSwgcHJvcHMpKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzZXRBY3Rpb25zKHByb3BzLCBhY3Rpb25zKSB7XHJcbiAgICBmb3IobGV0IG5hbWUgb2YgT2JqZWN0LmtleXMoYWN0aW9ucyB8fCB7fSkpIHtcclxuICAgICAgcHJvcHMuYWN0aW9uc1tuYW1lXSA9IHtcclxuICAgICAgICAuLi5wcm9wcy5hY3Rpb25zW25hbWVdLFxyXG4gICAgICAgIC4uLmFjdGlvbnNbbmFtZV1cclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBtZXJnZVByb3BzKGZpcnN0LCBzZWNvbmQpIHtcclxuICAgIHNlY29uZCA9IHNlY29uZCB8fCB7fTtcclxuICAgIGZ1bmN0aW9uIG1lcmdlKGZpcnN0LCBzZWNvbmQpIHtcclxuICAgICAgc2Vjb25kID0gc2Vjb25kIHx8IHt9O1xyXG4gICAgICBjb25zdCBwcm9wcyA9IHtcclxuICAgICAgICAuLi5maXJzdCxcclxuICAgICAgICAuLi5zZWNvbmRcclxuICAgICAgfTtcclxuICAgICAgZm9yKGxldCBuYW1lIG9mIE9iamVjdC5rZXlzKGZpcnN0KSkge1xyXG4gICAgICAgIGlmKHR5cGVvZiBmaXJzdFtuYW1lXT09PSdvYmplY3QnKSB7XHJcbiAgICAgICAgICBwcm9wc1tuYW1lXSA9IG1lcmdlKGZpcnN0W25hbWVdLCBzZWNvbmRbbmFtZV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcHJvcHM7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwcm9wcyA9IG1lcmdlKGZpcnN0LCBzZWNvbmQpO1xyXG4gICAgQm9va0NvbnRyb2xsZXIuc2V0QWN0aW9ucyhwcm9wcywgZmlyc3QuYWN0aW9ucyk7XHJcbiAgICBCb29rQ29udHJvbGxlci5zZXRBY3Rpb25zKHByb3BzLCBzZWNvbmQuYWN0aW9ucyk7XHJcbiAgICByZXR1cm4gcHJvcHM7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2FsY1Byb3BzKHByb3BzKSB7XHJcbiAgICBwcm9wcy5zY2FsZS5kZWx0YSA9IChwcm9wcy5zY2FsZS5tYXgtcHJvcHMuc2NhbGUubWluKS9wcm9wcy5zY2FsZS5sZXZlbHM7XHJcbiAgICByZXR1cm4gcHJvcHM7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL0Jvb2tDb250cm9sbGVyLmpzIiwiaW1wb3J0IHskLFRIUkVFfSBmcm9tICcuLi9saWJzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb2tQcmludGVyIGV4dGVuZHMgVEhSRUUuRXZlbnREaXNwYXRjaGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGV4dCwgYm9vaywgc3R5bGVTaGVldCkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMuYm9vayA9IGJvb2s7XHJcbiAgICB0aGlzLnN0eWxlU2hlZXQgPSBzdHlsZVNoZWV0O1xyXG4gICAgdGhpcy53bmQgPSBjb250ZXh0LnduZDtcclxuICAgIHRoaXMuZG9jID0gY29udGV4dC5kb2M7XHJcbiAgICB0aGlzLnBhZ2VDYWxsYmFjayA9IGJvb2suZ2V0UGFnZUNhbGxiYWNrKCk7XHJcbiAgICBjb25zdCB0ZXN0ID0gdGhpcy5wYWdlQ2FsbGJhY2soMCk7XHJcbiAgICB0aGlzLnR5cGUgPSB0ZXN0LnR5cGU7XHJcbiAgICBpZih0aGlzLnR5cGU9PT0ncGRmJykge1xyXG4gICAgICB0aGlzLnBkZlNyYyA9IHRlc3Quc3JjLnNyYztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNhbmNlbCgpIHtcclxuICAgIHRoaXMuY2FuY2VsZWQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGlmKHRoaXMuZnJhbWUpIHtcclxuICAgICAgdGhpcy5mcmFtZS5yZW1vdmUoKTtcclxuICAgICAgZGVsZXRlIHRoaXMuZnJhbWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcmludCgpIHtcclxuICAgIGlmKHRoaXMubG9hZGluZykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBkZWxldGUgdGhpcy5jYW5jZWxlZDtcclxuICAgIGlmKHRoaXMudHlwZT09PSdwZGYnKSB7XHJcbiAgICAgIGxldCBwcmludFduZCwgY2FsbE1hbnVhbGx5ID0gZmFsc2U7XHJcbiAgICAgIGlmKHRoaXMudXNlSUZyYW1lKCkpIHtcclxuICAgICAgICBjYWxsTWFudWFsbHkgPSAhIXRoaXMuZnJhbWU7XHJcbiAgICAgICAgaWYoIXRoaXMuZnJhbWUpIHtcclxuICAgICAgICAgIHRoaXMuZnJhbWUgPSAkKCc8aWZyYW1lIHNyYz1cIicrdGhpcy5wZGZTcmMrJ1wiIHN0eWxlPVwiZGlzcGxheTogbm9uZTtcIj48L2lmcmFtZT4nKS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJpbnRXbmQgPSB0aGlzLmZyYW1lWzBdLmNvbnRlbnRXaW5kb3c7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcHJpbnRXbmQgPSB0aGlzLnduZC5vcGVuKHRoaXMucGRmU3JjKTtcclxuICAgICAgfVxyXG4gICAgICBpZihjYWxsTWFudWFsbHkpIHtcclxuICAgICAgICBwcmludFduZC5wcmludCgpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHt0eXBlOiAnbG9hZGluZyd9KTtcclxuICAgICAgICAkKHRoaXMuZnJhbWUpLm9uKCdsb2FkJywgKCk9PiB7XHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpPT4ge1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5sb2FkaW5nO1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoe3R5cGU6ICdsb2FkZWQnfSk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgcHJpbnRXbmQucHJpbnQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaChlKSB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLnJlbmRlckNvbnRlbnQoKS5cclxuICAgICAgICB0aGVuKChjb250ZW50KT0+IHtcclxuICAgICAgICAgIGNvbnN0IHByaW50V25kID0gdGhpcy53bmQub3BlbigpLFxyXG4gICAgICAgICAgcHJpbnREb2MgPSBwcmludFduZC5kb2N1bWVudCxcclxuICAgICAgICAgIGh0bWwgPSBgXHJcbiAgICAgICAgICAgIDwhRE9DVFlQRSBodG1sPlxyXG4gICAgICAgICAgICA8aHRtbD5cclxuICAgICAgICAgICAgICA8aGVhZD5cclxuICAgICAgICAgICAgICAgIDxtZXRhIGNoYXJzZXQ9XCJ1dGYtOFwiPlxyXG4gICAgICAgICAgICAgICAgPHRpdGxlPjNEIEZsaXBCb29rIC0gUHJpbnRpbmc8L3RpdGxlPlxyXG4gICAgICAgICAgICAgICAgJHtjb250ZW50LmhlYWR9XHJcbiAgICAgICAgICAgICAgICA8c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj5cclxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcHJpbnREb2N1bWVudCgpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cucHJpbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbiBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQocHJpbnREb2N1bWVudCwgMTAwKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgPC9zY3JpcHQ+XHJcbiAgICAgICAgICAgICAgPC9oZWFkPlxyXG4gICAgICAgICAgICAgIDxib2R5IG9ubG9hZD1cImluaXQoKVwiPlxyXG4gICAgICAgICAgICAgICAgJHtjb250ZW50LmJvZHl9XHJcbiAgICAgICAgICAgICAgPC9ib2R5PlxyXG4gICAgICAgICAgICA8L2h0bWw+XHJcbiAgICAgICAgICBgLmZiM2RRRmlsdGVyKCk7XHJcbiAgICAgICAgICBwcmludERvYy5vcGVuKCk7XHJcbiAgICAgICAgICBwcmludERvYy53cml0ZShodG1sKTtcclxuICAgICAgICAgIHByaW50RG9jLmNsb3NlKCk7XHJcbiAgICAgICAgfSkuXHJcbiAgICAgICAgY2F0Y2goKGUpPT4gY29uc29sZS53YXJuKCczRCBGbGlwQm9vayAtIFByaW50aW5nIHdhcyBjYW5jZWxlZCcpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByb2dyZXNzKHYpIHtcclxuICAgIGlmKHRoaXMuY2FuY2VsZWQpIHtcclxuICAgICAgdGhyb3cgJ0NhbmNlbCBQcmludGluZyc7XHJcbiAgICB9XHJcbiAgICBpZih0aGlzLm9uUHJvZ3Jlc3MpIHtcclxuICAgICAgdGhpcy5vblByb2dyZXNzKE1hdGguZmxvb3IodioxMDApKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlckNvbnRlbnQoKSB7XHJcbiAgICBjb25zdCBwYWdlcyA9IHRoaXMuYm9vay5nZXRQYWdlcygpLCBoZWFkID0gbmV3IFNldCgpLCBib2R5ID0gW107XHJcbiAgICBsZXQgZG9uZSA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgZm9yKGxldCBwYWdlPTA7IHBhZ2U8cGFnZXM7ICsrcGFnZSkge1xyXG4gICAgICBjb25zdCBpbmZvID0gdGhpcy5wYWdlQ2FsbGJhY2socGFnZSk7XHJcbiAgICAgIGlmKGluZm8udHlwZT09PSdpbWFnZScpIHtcclxuICAgICAgICBkb25lID0gZG9uZS50aGVuKCgpPT4ge1xyXG4gICAgICAgICAgdGhpcy5wcm9ncmVzcyhwYWdlL3BhZ2VzKTtcclxuICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlckltYWdlKGhlYWQsIGJvZHksIGluZm8uc3JjKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKGluZm8udHlwZT09PSdodG1sJykge1xyXG4gICAgICAgIGRvbmUgPSBkb25lLnRoZW4oKCk9PiB7XHJcbiAgICAgICAgICB0aGlzLnByb2dyZXNzKHBhZ2UvcGFnZXMpO1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVySHRtbChoZWFkLCBib2R5LCBpbmZvLnNyYyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBkb25lLnRoZW4oKCk9PiB7XHJcbiAgICAgIHRoaXMucHJvZ3Jlc3MoMSk7XHJcbiAgICAgIHJldHVybiB7aGVhZDogdGhpcy5yZW5kZXJIZWFkKGhlYWQpLCBib2R5OiBib2R5LmpvaW4oJ1xcbicpfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgd3JhcChjb250ZW50KSB7XHJcbiAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJmYjNkLXByaW50ZXItcGFnZVwiPiR7Y29udGVudH08L2Rpdj5gO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySW1hZ2UoaGVhZCwgYm9keSwgc3JjKSB7XHJcbiAgICBib2R5LnB1c2goQm9va1ByaW50ZXIud3JhcChgPGltZyBzcmM9XCIke3NyY31cIiAvPmApKTtcclxuICB9XHJcblxyXG4gIHJlbmRlckh0bWwoaGVhZCwgYm9keSwgc3JjKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9PiB7XHJcbiAgICAgICQuZ2V0KHNyYywgKGh0bWwpPT4ge1xyXG4gICAgICAgIGNvbnN0IGxpbmtzID0gaHRtbC5tYXRjaCgvPGxpbmsuKj8+L2lnKSB8fCBbXTtcclxuICAgICAgICBmb3IobGV0IGxpbmsgb2YgbGlua3MpIHtcclxuICAgICAgICAgIGlmKGxpbmsubWF0Y2goL3N0eWxlc2hlZXQvaSkpIHtcclxuICAgICAgICAgICAgY29uc3QgaHJlZiA9IGxpbmsubWF0Y2goL2hyZWZcXHMqPVxccypbJ1wiXSguKilbJ1wiXS9pKTtcclxuICAgICAgICAgICAgaWYoaHJlZikge1xyXG4gICAgICAgICAgICAgIGhlYWQuYWRkKGhyZWZbMV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBodG1sLm1hdGNoKC88Ym9keS4qPz4oW1xcU1xcc10qKTxcXC9ib2R5Pi9pKTtcclxuICAgICAgICBpZihjb250ZW50KSB7XHJcbiAgICAgICAgICBib2R5LnB1c2goQm9va1ByaW50ZXIud3JhcChjb250ZW50WzFdKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgfSkuZmFpbCgoZSk9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgcmVqZWN0KCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHJlbmRlckhlYWQoaGVhZCkge1xyXG4gICAgY29uc3QgY29udGVudCA9IFtdO1xyXG4gICAgaGVhZC5mb3JFYWNoKChrKT0+IGNvbnRlbnQucHVzaChgPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGhyZWY9XCIke2t9XCI+YCkpO1xyXG4gICAgY29udGVudC5wdXNoKHRoaXMuc3R5bGVTaGVldD8gYDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiJHt0aGlzLnN0eWxlU2hlZXR9XCI+YDogQm9va1ByaW50ZXIuZGVmYXVsdFN0eWxlU2hlZXQoKSk7XHJcbiAgICByZXR1cm4gY29udGVudC5qb2luKCdcXG4nKTtcclxuICB9XHJcblxyXG4gIHVzZUlGcmFtZSgpIHtcclxuICAgIGNvbnN0IGlzQ2hyb21pdW0gPSB0aGlzLnduZC5jaHJvbWUsXHJcbiAgICAgIHdpbk5hdiA9IHRoaXMud25kLm5hdmlnYXRvcixcclxuICAgICAgdmVuZG9yTmFtZSA9IHdpbk5hdi52ZW5kb3IsXHJcbiAgICAgIGlzSUVlZGdlID0gd2luTmF2LnVzZXJBZ2VudC5pbmRleE9mKFwiRWRnZVwiKT4tMSxcclxuICAgICAgaXNJT1NDaHJvbWUgPSB3aW5OYXYudXNlckFnZW50Lm1hdGNoKFwiQ3JpT1NcIik7XHJcbiAgICBsZXQgdXNlO1xyXG4gICAgaWYoaXNJT1NDaHJvbWUpe1xyXG4gICAgICB1c2UgPSB0cnVlO1xyXG4gICAgfSBlbHNlIGlmKGlzQ2hyb21pdW0gJiYgdmVuZG9yTmFtZT09PSdHb29nbGUgSW5jLicgJiYgIWlzSUVlZGdlKSB7XHJcbiAgICAgIHVzZSA9IHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB1c2UgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRlZmF1bHRTdHlsZVNoZWV0KCkge1xyXG4gICAgcmV0dXJuIGBcclxuICAgICAgPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPlxyXG4gICAgICAgIGJvZHkge1xyXG4gICAgICAgICAgbWFyZ2luOiAwO1xyXG4gICAgICAgICAgcGFkZGluZzogMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLmZiM2QtcHJpbnRlci1wYWdlIHtcclxuICAgICAgICAgIHBhZ2UtYnJlYWstYWZ0ZXI6IGFsd2F5cztcclxuICAgICAgICB9XHJcbiAgICAgIDwvc3R5bGU+XHJcbiAgICBgLmZiM2RRRmlsdGVyKCk7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL0Jvb2tQcmludGVyLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IFZpZXcgZnJvbSAnVmlldyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb29rVmlldyBleHRlbmRzIFZpZXcge1xyXG5cclxuICBzdGF0aWMgUEFHRV9IQU5ETEVSX0RFTEFZID0gMTAwMDtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGFpbmVyLCBvbkxvYWQsIHRlbXBsYXRlLCBoYW5kbGVyKSB7XHJcbiAgICBzdXBlcihjb250YWluZXIsIG9uTG9hZCwgdGVtcGxhdGUsIGhhbmRsZXIpO1xyXG4gIH1cclxuXHJcbiAgaW5pdFZpZXcoKSB7XHJcbiAgICB0aGlzLnZpZXcgPSB0aGlzLmNvbnRhaW5lci5maW5kKCcudmlldycpO1xyXG4gICAgdGhpcy5ib29rbWFya3NWaWV3ID0gdGhpcy5jb250YWluZXIuZmluZCgnLndpZEJvb2ttYXJrcycpO1xyXG4gICAgdGhpcy50aHVtYm5haWxzVmlldyA9IHRoaXMuY29udGFpbmVyLmZpbmQoJy53aWRUaHVtYm5haWxzJyk7XHJcbiAgICB0aGlzLnNlYXJjaFZpZXcgPSB0aGlzLmNvbnRhaW5lci5maW5kKCcud2lkU2VhcmNoJyk7XHJcbiAgfVxyXG5cclxuICBnZXRIYW5kbGVycyhpZCkge1xyXG4gICAgbGV0IGhhbmRsZXJzO1xyXG4gICAgaWYoaWQ9PT0naW5wUGFnZScpIHtcclxuICAgICAgaGFuZGxlcnMgPSBbe1xyXG4gICAgICAgIGlucFBhZ2U6IChlLCBkYXRhKT0+IHRoaXMuY2FsbExhdGVyKHN1cGVyLmdldEhhbmRsZXJzKGlkKSwgaWQsIGUsIGRhdGEsIEJvb2tWaWV3LlBBR0VfSEFORExFUl9ERUxBWSlcclxuICAgICAgfV07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgaGFuZGxlcnMgPSBzdXBlci5nZXRIYW5kbGVycyhpZCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaGFuZGxlcnM7XHJcbiAgfVxyXG5cclxuICBvbkl0ZW1TdGF0ZUNoYW5nZWQoaWQsIHN0YXRlKSB7XHJcbiAgICBpZihpZD09PSdjbWRGdWxsU2NyZWVuJykge1xyXG4gICAgICBpZihzdGF0ZS5hY3RpdmUpIHtcclxuICAgICAgICB0aGlzLnBhcmVudENvbnRhaW5lci5hZGRDbGFzcygnZnVsbHNjcmVlbicpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMucGFyZW50Q29udGFpbmVyLnJlbW92ZUNsYXNzKCdmdWxsc2NyZWVuJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFZpZXcoKSB7XHJcbiAgICByZXR1cm4gdGhpcy52aWV3O1xyXG4gIH1cclxuXHJcbiAgZ2V0Qm9va21hcmtzVmlldygpIHtcclxuICAgIHJldHVybiB0aGlzLmJvb2ttYXJrc1ZpZXc7XHJcbiAgfVxyXG5cclxuICBnZXRUaHVtYm5haWxzVmlldygpIHtcclxuICAgIHJldHVybiB0aGlzLnRodW1ibmFpbHNWaWV3O1xyXG4gIH1cclxuXHJcbiAgZ2V0U2VhcmNoVmlldygpIHtcclxuICAgIHJldHVybiB0aGlzLnNlYXJjaFZpZXc7XHJcbiAgfVxyXG5cclxuICBnZXRGb3JtcygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgZ2V0TGlua3MoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAnY21kWm9vbUluJyxcclxuICAgICAgJ2NtZFpvb21PdXQnLFxyXG4gICAgICAnY21kRGVmYXVsdFpvb20nLFxyXG4gICAgICAnY21kVG9jJyxcclxuICAgICAgJ2NtZEJhY2t3YXJkJyxcclxuICAgICAgJ2NtZEJpZ0JhY2t3YXJkJyxcclxuICAgICAgJ2NtZEZvcndhcmQnLFxyXG4gICAgICAnY21kQmlnRm9yd2FyZCcsXHJcbiAgICAgICdjbWRTYXZlJyxcclxuICAgICAgJ2NtZFByaW50JyxcclxuICAgICAgJ2NtZEZ1bGxTY3JlZW4nLFxyXG4gICAgICAnY21kU21hcnRQYW4nLFxyXG4gICAgICAnY21kU2luZ2xlUGFnZScsXHJcbiAgICAgICdjbWRTb3VuZHMnLFxyXG4gICAgICAnY21kU3RhdHMnLFxyXG4gICAgICAnY21kU2hhcmUnLFxyXG4gICAgICAnY21kQ2xvc2VUb2MnLFxyXG4gICAgICAnY21kQ2xvc2VTaGFyZScsXHJcbiAgICAgICdjbWRCb29rbWFya3MnLFxyXG4gICAgICAnY21kU2VhcmNoJyxcclxuICAgICAgJ2NtZFRodW1ibmFpbHMnLFxyXG4gICAgICAnY21kUGVuZGluZ1BsYXknLFxyXG4gICAgICAnY21kRmFjZWJvb2snLFxyXG4gICAgICAnY21kVHdpdHRlcicsXHJcbiAgICAgICdjbWRFbWFpbCcsXHJcbiAgICAgICdjbWRBdXRvUGxheScsXHJcbiAgICAgICdjbWRHb3RvRmlyc3RQYWdlJyxcclxuICAgICAgJ2NtZEdvdG9MYXN0UGFnZSdcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBnZXRXaWRnZXRzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgJ3dpZExvYWRpbmdQcm9ncmVzcycsXHJcbiAgICAgICd3aWRVc2VyTWVzc2FnZScsXHJcbiAgICAgICd3aWRGbG9hdFduZCcsXHJcbiAgICAgICd3aWRTaGFyZScsXHJcbiAgICAgICd3aWRUb2NNZW51JyxcclxuICAgICAgJ3dpZEJvb2ttYXJrcycsXHJcbiAgICAgICd3aWRUaHVtYm5haWxzJyxcclxuICAgICAgJ3dpZFNlYXJjaCcsXHJcbiAgICAgICd3aWRDb250cm9scycsXHJcbiAgICAgICd3aWRTZXR0aW5ncycsXHJcbiAgICAgICd3aWRMb2FkaW5nJyxcclxuICAgICAgJ3dpZFBlbmRpbmdQbGF5JyxcclxuICAgICAgJ3dpZFRvb2xiYXInXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgZ2V0SW5wdXRzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgJ2lucFBhZ2UnLFxyXG4gICAgICAnaW5wUGFnZXMnXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgZ2V0VGV4dHMoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAndHh0TG9hZGluZ1Byb2dyZXNzJyxcclxuICAgICAgJ3R4dFVzZXJNZXNzYWdlJyxcclxuICAgICAgJ3R4dFNoYXJlTGluaydcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBnZXRUZW1wbGF0ZSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGh0bWw6ICd0ZW1wbGF0ZXMvZGVmYXVsdC1ib29rLXZpZXcuaHRtbCcsXHJcbiAgICAgIHN0eWxlczogW1xyXG4gICAgICAgICdjc3MvYmxhY2stYm9vay12aWV3LmNzcydcclxuICAgICAgXSxcclxuICAgICAgbGlua3M6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICByZWw6ICdzdHlsZXNoZWV0JyxcclxuICAgICAgICAgIGhyZWY6ICdjc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MnXHJcbiAgICAgICAgfVxyXG4gICAgICBdLFxyXG4gICAgICBzY3JpcHQ6ICdqcy9kZWZhdWx0LWJvb2stdmlldy5qcydcclxuICAgIH07XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL0Jvb2tWaWV3LmpzIiwiaW1wb3J0IEJvb2tQcm9wc0J1aWxkZXIgZnJvbSAnLi9Cb29rUHJvcHNCdWlsZGVyJztcclxuaW1wb3J0IEltYWdlRmFjdG9yeSBmcm9tICdJbWFnZUZhY3RvcnknO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2xiQm9va1Byb3BzQnVpbGRlciBleHRlbmRzIEJvb2tQcm9wc0J1aWxkZXIge1xyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIHBhZ2VDYWxsYmFjaywgcGFnZXMsIG9uUmVhZHksIHN0eWxlKSB7XHJcbiAgICBzdXBlcihvblJlYWR5LCBzdHlsZSk7XHJcbiAgICB0aGlzLmNhbGNTaGVldHMocGFnZXMpO1xyXG4gICAgdGhpcy5wYWdlcyA9IHBhZ2VzO1xyXG4gICAgdGhpcy5wYWdlQ2FsbGJhY2sgPSBwYWdlQ2FsbGJhY2s7XHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICBwYWdlQ2FsbGJhY2s6IHBhZ2VDYWxsYmFjay5iaW5kKHRoaXMpXHJcbiAgICB9O1xyXG4gICAgdGhpcy5pbWFnZUZhY3RvcnkgPSBuZXcgSW1hZ2VGYWN0b3J5KGNvbnRleHQpO1xyXG5cclxuICAgIGlmKHBhZ2VzPjApIHtcclxuICAgICAgY29uc3QgdGVzdCA9IHRoaXMuaW1hZ2VGYWN0b3J5LmJ1aWxkKHBhZ2VDYWxsYmFjaygwKSwgMCwgdGhpcy5kZWZhdWx0cy5zaGVldC53aWR0aFRleGVscywgdGhpcy5kZWZhdWx0cy5zaGVldC5oZWlnaHRUZXhlbHMsIHRoaXMuZGVmYXVsdHMuc2hlZXQuY29sb3IpO1xyXG4gICAgICB0ZXN0Lm9uTG9hZCA9ICgpPT4ge1xyXG4gICAgICAgIHRoaXMuY2FsY1Byb3BzKHRlc3Qud2lkdGgsIHRlc3QuaGVpZ2h0KTtcclxuICAgICAgICB0ZXN0LmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLnJlYWR5KCk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5wcm9wcyA9IHRoaXMuZGVmYXVsdHM7XHJcbiAgICAgIHRoaXMucmVhZHkoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvQ2xiQm9va1Byb3BzQnVpbGRlci5qcyIsImltcG9ydCBTaGVldEJsb2NrIGZyb20gJy4vU2hlZXRCbG9jayc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb3ZlciBleHRlbmRzIFNoZWV0QmxvY2sge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2aXN1YWwsIHAsIGFuZ2xlLCBzdGF0ZSkge1xyXG4gICAgc3VwZXIodmlzdWFsLCBwLCAwLCAxLCBhbmdsZSwgc3RhdGUpO1xyXG4gIH1cclxuXHJcbiAgZ2V0UHJvcHMoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAuLi50aGlzLnAuY292ZXIsXHJcbiAgICAgIHNoZWV0czogMVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGxvYWRQb2ludHMoKSB7XHJcbiAgICBjb25zdCBvcGVuZWRJbnRlcnBvbGF0aW9uSW5kZWNlcyA9IFtcclxuICAgICAge1xyXG4gICAgICAgIGxlZnQ6IFsyLDMsNF0sXHJcbiAgICAgICAgcmlnaHQ6IFsyLDMsNF1cclxuICAgICAgfVxyXG4gICAgXSxcclxuICAgIGNsb3NlZEludGVycG9sYXRpb25JbmRlY2VzID0gW1xyXG4gICAgICBbMCwxLDJdXHJcbiAgICBdLFxyXG4gICAgaW50ZXJwb2xhdGlvblBvaW50cyA9IFtcclxuICAgICAge1xyXG4gICAgICAgIHg6IFtcclxuICAgICAgICAgICAgIFswLDAuMjg3NywwLjYzNDcsMC44MTc0LDEuMDAwMF0sXHJcbiAgICAgICAgICAgICBbMCwwLjI4MzEsMC42MjU2LDAuODA4MiwwLjk5MDldLFxyXG4gICAgICAgICAgICAgWzAsMC4yNjAzLDAuNTkzNiwwLjc3NjMsMC45NTg5XSxcclxuICAgICAgICAgICAgIFswLDAuMTM3MCwwLjM4ODEsMC41MzQyLDAuNjc1OF0sXHJcbiAgICAgICAgICAgICBbMCwwLDAsMCwwXVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgeTogW1xyXG4gICAgICAgICAgICAgWzAsMCwwLDAsMF0sXHJcbiAgICAgICAgICAgICBbMCwwLjAyLDAuMDA1LC0wLjAwMSwtMC4wMDI1XSxcclxuICAgICAgICAgICAgIFswLDAuMDQsMC4wMSwtMC4wMDIsLTAuMDA1XSxcclxuICAgICAgICAgICAgIFswLCAwLjI0NjYsIDAuNDc5NSwgMC41NzA4LCAwLjY3NThdLFxyXG4gICAgICAgICAgICAgWzAsIDAuMjg3NywgMC42MzQ3LCAwLjgxNzQsIDEuMDAwMF1cclxuICAgICAgICBdXHJcbiAgICAgIH1cclxuICAgIF07XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpbnRlcnBvbGF0aW9uUG9pbnRzLFxyXG4gICAgICBvcGVuZWRJbnRlcnBvbGF0aW9uSW5kZWNlcyxcclxuICAgICAgY2xvc2VkSW50ZXJwb2xhdGlvbkluZGVjZXNcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvQ292ZXIuanMiLCJpbXBvcnQgU2hlZXRDc3NMYXllciBmcm9tICcuL1NoZWV0Q3NzTGF5ZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3NzTGF5ZXJzTWFuYWdlciB7XHJcbiAgY29uc3RydWN0b3IoYm9vaykge1xyXG4gICAgdGhpcy5ib29rID0gYm9vaztcclxuICAgIHRoaXMucHJvcHMgPSBib29rLnAuY3NzTGF5ZXJQcm9wcztcclxuICAgIHRoaXMudmlzdWFsID0gYm9vay52aXN1YWw7XHJcbiAgICB0aGlzLnBhZ2VNYW5hZ2VyID0gYm9vay5wYWdlTWFuYWdlcjtcclxuICAgIHRoaXMud3JhcHBlcnMgPSB7fTtcclxuICAgIHRoaXMucGVuZGluZ3MgPSBbXTtcclxuICB9XHJcblxyXG4gIGdldEFjdGl2ZXMoKSB7XHJcbiAgICBsZXQgcGFnZSA9IHRoaXMuYm9vay5nZXRQYWdlKCksIHBhZ2VzID0gdGhpcy5ib29rLmdldEJvb2tQYWdlcygpLCBhY3MgPSBwYWdlPT09MCB8fCBwYWdlPT09cGFnZXMtMT8gW3BhZ2VdOiBbcGFnZSwgcGFnZSsxXTtcclxuICAgIGlmKCF0aGlzLndyYXBwZXJzWzBdICYmIHBhZ2UhPT0wKSB7XHJcbiAgICAgIGFjcyA9IFswLCAuLi5hY3NdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFjcztcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBmb3IobGV0IHcgb2YgT2JqZWN0LnZhbHVlcyh0aGlzLndyYXBwZXJzKSkge1xyXG4gICAgICB3LmxheWVycy5mb3JFYWNoKChsKT0+IGwuZGlzcG9zZSgpKTtcclxuICAgIH1cclxuICAgIGRlbGV0ZSB0aGlzLndyYXBwZXJzO1xyXG4gIH1cclxuXHJcbiAgc2hvdygpIHtcclxuICAgIHRoaXMuaGlkZGVuID0gZmFsc2U7XHJcbiAgICBmb3IobGV0IG4gb2YgdGhpcy5nZXRBY3RpdmVzKCkpIHtcclxuICAgICAgY29uc3QgdyA9IHRoaXMud3JhcHBlcnNbbl07XHJcbiAgICAgIGlmKHcpIHtcclxuICAgICAgICBpZih3LnN0YXRlPT09J3JlYWR5JyAmJiB3LmxheWVycy5sZW5ndGgpIHtcclxuICAgICAgICAgIGNvbnN0IGJsb2NrID0gdGhpcy5ib29rLmdldEJsb2NrQnlQYWdlKG4pO1xyXG4gICAgICAgICAgdy5sYXllcnMuZm9yRWFjaCgobCk9PiB7XHJcbiAgICAgICAgICAgIGlmKGwuaXNIaWRkZW4oKSkge1xyXG4gICAgICAgICAgICAgIGwudXBkYXRlKGJsb2NrKTtcclxuICAgICAgICAgICAgICBsLnNob3coKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IHcgPSB0aGlzLndyYXBwZXJzW25dID0ge1xyXG4gICAgICAgICAgc3RhdGU6ICdsb2FkaW5nJyxcclxuICAgICAgICAgIGxheWVyczogW11cclxuICAgICAgICB9O1xyXG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9PiB7XHJcbiAgICAgICAgICB0aGlzLnBhZ2VNYW5hZ2VyLmdldExheWVycyhuLCAobGF5ZXJzKT0+IHtcclxuICAgICAgICAgICAgY29uc3QgZmluaXNoID0gKCk9PiB7XHJcbiAgICAgICAgICAgICAgaWYobGF5ZXJzLmxlbmd0aCAmJiB0aGlzLndyYXBwZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBibG9jayA9IHRoaXMuYm9vay5nZXRCbG9ja0J5UGFnZShuKTtcclxuICAgICAgICAgICAgICAgIGZvcihsZXQgbCBvZiBsYXllcnMpIHtcclxuICAgICAgICAgICAgICAgICAgY29uc3Qgc2wgPSBuZXcgU2hlZXRDc3NMYXllcih0aGlzLnZpc3VhbCwgYmxvY2ssIHsuLi50aGlzLnByb3BzLCBwYWdlTnVtYmVyOiBufSk7XHJcbiAgICAgICAgICAgICAgICAgIHcubGF5ZXJzLnB1c2goc2wpO1xyXG4gICAgICAgICAgICAgICAgICBzbC5zZXQobC5jc3MsIGwuaHRtbCwgbC5qcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT4ge1xyXG4gICAgICAgICAgICAgICAgICBpZighdGhpcy5oaWRkZW4gJiYgfnRoaXMuZ2V0QWN0aXZlcygpLmluZGV4T2YobikpIHtcclxuICAgICAgICAgICAgICAgICAgICB3LmxheWVycy5mb3JFYWNoKChsKT0+IGwuc2hvdygpKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgMTApO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB3LnN0YXRlID0gJ3JlYWR5JztcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYodGhpcy53cmFwcGVycyAmJiAobj09PTAgfHwgdGhpcy53cmFwcGVyc1swXS5zdGF0ZSE9PSdsb2FkaW5nJykpIHtcclxuICAgICAgICAgICAgICBmaW5pc2goKTtcclxuICAgICAgICAgICAgICBpZihuPT09MCkge1xyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBmIG9mIHRoaXMucGVuZGluZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgZigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5ncyA9IFtdO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdzLnB1c2goZmluaXNoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgaGlkZSgpIHtcclxuICAgIHRoaXMuaGlkZGVuID0gdHJ1ZTtcclxuICAgIGNvbnN0IHdhaXQgPSBbXTtcclxuICAgIGZvcihsZXQgdyBvZiBPYmplY3QudmFsdWVzKHRoaXMud3JhcHBlcnMpKSB7XHJcbiAgICAgIHcubGF5ZXJzLmZvckVhY2goKGwpPT4gd2FpdC5wdXNoKGwuaGlkZSgpKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwod2FpdCk7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvQ3NzTGF5ZXJzTWFuYWdlci5qcyIsImltcG9ydCB7JCwgVEhSRUV9IGZyb20gJy4uL2xpYnMnXHJcbmltcG9ydCBDYWNoZSBmcm9tICdDYWNoZSc7XHJcbmltcG9ydCBMb2FkaW5nQW5pbWF0aW9uIGZyb20gJ0xvYWRpbmdBbmltYXRpb24nO1xyXG5pbXBvcnQgSW1hZ2VGYWN0b3J5IGZyb20gJ0ltYWdlRmFjdG9yeSc7XHJcbmltcG9ydCBUZXh0dXJlQW5pbWF0b3IgZnJvbSAnVGV4dHVyZUFuaW1hdG9yJztcclxuaW1wb3J0IEdyYXBoVXRpbHMgZnJvbSAnR3JhcGhVdGlscyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYWdlTWFuYWdlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbCwgYm9vaywgcCkge1xyXG4gICAgdGhpcy52aXN1YWwgPSB2aXN1YWw7XHJcbiAgICB0aGlzLmJvb2sgPSBib29rO1xyXG4gICAgdGhpcy5wYWdlUXVlcnkgPSAnJztcclxuICAgIHRoaXMucCA9IHA7XHJcbiAgICB0aGlzLnBhZ2VDYWNoZSA9IG5ldyBDYWNoZShwLmNhY2hlZFBhZ2VzKTtcclxuICAgIHRoaXMucmVzb3VyY2VzQ2FjaGUgPSBuZXcgQ2FjaGUoKTtcclxuXHJcbiAgICB0aGlzLmNhbnZhc2VzID0gW107XHJcbiAgICBmb3IobGV0IGk9MDsgaTw1OyArK2kpIHtcclxuICAgICAgY29uc3QgYyA9IEdyYXBoVXRpbHMuY3JlYXRlQ2FudmFzKCk7XHJcbiAgICAgIHRoaXMuY2FudmFzZXMucHVzaCh7YywgY3R4OiBjLmdldENvbnRleHQoJzJkJywge3dpbGxSZWFkRnJlcXVlbnRseTogdHJ1ZSwgZGVzeW5jaHJvbml6ZWQ6IGZhbHNlfSl9KTtcclxuICAgIH1cclxuICAgIHRoaXMubmV4dENhbnZhcyA9IDA7XHJcblxyXG4gICAgdGhpcy5pbWFnZUZhY3RvcnkgPSBuZXcgSW1hZ2VGYWN0b3J5KHsuLi52aXN1YWwsIGRpc3BhdGNoRXZlbnQ6IGJvb2suZGlzcGF0Y2hFdmVudC5iaW5kKGJvb2spLCByZW5kZXJDYW52YXM6IHRoaXMuY2FudmFzZXNbMF0uYywgcmVuZGVyQ2FudmFzQ3R4OiB0aGlzLmNhbnZhc2VzWzBdLmN0eH0sIHRoaXMucmVzb3VyY2VzQ2FjaGUpO1xyXG5cclxuICAgIHRoaXMubG9hZGluZ3MgPSBbXTtcclxuICAgIHRoaXMucmVuZGVyUXVldWUgPSBbXTtcclxuICAgIHRoaXMucHJlZGljdGVkUmVxdWVzdHMgPSBbXTtcclxuXHJcbiAgICB0aGlzLnRtcE1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCk7XHJcbiAgICB2aXN1YWwuYWRkT2JqZWN0KG5ldyBUSFJFRS5NZXNoKG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KDFlLTMsIDFlLTMpLCB0aGlzLnRtcE1hdGVyaWFsKSk7XHJcblxyXG4gICAgdGhpcy5sb2FkaW5nQW5pbWF0aW9uID0gdHJ1ZTtcclxuICAgIHRoaXMubG9hZGluZyA9IHt9O1xyXG4gICAgdGhpcy5sb2FkaW5nW3AuY292ZXIuY29sb3JdID0gdGhpcy5jcmVhdGVMb2FkaW5nVGV4dHVyZShwLmNvdmVyKTtcclxuICAgIGlmKHAucGFnZS5jb2xvciE9PXAuY292ZXIuY29sb3IpIHtcclxuICAgICAgdGhpcy5sb2FkaW5nW3AucGFnZS5jb2xvcl0gPSB0aGlzLmNyZWF0ZUxvYWRpbmdUZXh0dXJlKHAucGFnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5ib29rLmFkZEV2ZW50TGlzdGVuZXIoJ2FmdGVyQW5pbWF0aW9uJywgdGhpcy5sb2FkUHJlZGljdGVkUGFnZXMuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgdGhpcy50dXJuT25FdmVudHMoKTtcclxuXHJcbiAgICB2aXN1YWwuYWRkUmVuZGVyQ2FsbGJhY2sodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbih0aGlzLnVwZGF0ZVJlbmRlclF1ZXVlLmJpbmQodGhpcykpO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlTG9hZGluZ1RleHR1cmUocCkge1xyXG4gICAgY29uc3Qgc3ByaXRlVGlsZXMgPSA2LCBoZWlnaHRUZXhlbHMgPSBwLmhlaWdodC9wLndpZHRoKnAud2lkdGhUZXhlbHMsXHJcbiAgICAgIHNjYWxlID0gTWF0aC5zcXJ0KDQuNSoyMTAqNC41KjI5Ny8ocC53aWR0aFRleGVscypoZWlnaHRUZXhlbHMpKSxcclxuICAgICAgYW5pbWF0aW9uID0gbmV3IExvYWRpbmdBbmltYXRpb24oc2NhbGUqcC53aWR0aFRleGVscywgc2NhbGUqaGVpZ2h0VGV4ZWxzLCBwLmNvbG9yKSxcclxuICAgICAgYW5pbWF0b3IgPSBuZXcgVGV4dHVyZUFuaW1hdG9yKGFuaW1hdGlvbi5jcmVhdGVTcHJpdGUoc3ByaXRlVGlsZXMpLCBzcHJpdGVUaWxlcywgMSwgc3ByaXRlVGlsZXMsIDAuMik7XHJcbiAgICBhbmltYXRpb24uZGlzcG9zZSgpO1xyXG4gICAgcmV0dXJuIGFuaW1hdG9yO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMudHVybk9mZkV2ZW50cygpO1xyXG4gICAgZm9yKGxldCBjb2xvciBvZiBPYmplY3Qua2V5cyh0aGlzLmxvYWRpbmcpKSB7XHJcbiAgICAgIHRoaXMubG9hZGluZ1tjb2xvcl0uZGlzcG9zZSgpO1xyXG4gICAgfVxyXG4gICAgZGVsZXRlIHRoaXMubG9hZGluZztcclxuICAgIHRoaXMucmVzb3VyY2VzQ2FjaGUuZGlzcG9zZSgpO1xyXG4gICAgdGhpcy5wYWdlQ2FjaGUuZGlzcG9zZSgpO1xyXG4gICAgZm9yKGxldCBvIG9mIHRoaXMuY2FudmFzZXMpIHtcclxuICAgICAgby5jLmhlaWdodCA9IG8uYy53aWR0aCA9IDA7XHJcbiAgICB9XHJcbiAgICBkZWxldGUgdGhpcy5jYW52YXNlcztcclxuICB9XHJcblxyXG4gIGlzQ292ZXIobikge1xyXG4gICAgcmV0dXJuIG48MiB8fCBuPj0yKih0aGlzLnAuc2hlZXRzKzEpO1xyXG4gIH1cclxuXHJcbiAgaXNNb2JpbGUoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnZpc3VhbC5pc01vYmlsZSgpO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGFnZVN0YXRlKG4pIHtcclxuICAgIGNvbnN0IG9iamVjdCA9IHRoaXMucGFnZUNhY2hlLmdldChuKTtcclxuICAgIHJldHVybiBvYmplY3Q/IG9iamVjdC5zdGF0ZTogdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbiAgZW5hYmxlTG9hZGluZ0FuaW1hdGlvbihlbmFibGUpIHtcclxuICAgIHRoaXMubG9hZGluZ0FuaW1hdGlvbiA9IGVuYWJsZTtcclxuICAgIGZvcihsZXQgbyBvZiB0aGlzLmxvYWRpbmdzKSB7XHJcbiAgICAgIHRoaXMuc2V0dXBNYXRlcmlhbChvKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZShkdCkge1xyXG4gICAgaWYodGhpcy5sb2FkaW5nQW5pbWF0aW9uKSB7XHJcbiAgICAgIGNvbnN0IGxvYWRpbmcgPSB7fTtcclxuICAgICAgZm9yKGxldCBvIG9mIHRoaXMubG9hZGluZ3MpIHtcclxuICAgICAgICBpZihvLmlzQWN0aXZlKCkpIHtcclxuICAgICAgICAgIGxvYWRpbmdbby5jb2xvcl0gPSB0cnVlOztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZm9yKGxldCBjb2xvciBvZiBPYmplY3Qua2V5cyhsb2FkaW5nKSkge1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1tjb2xvcl0udXBkYXRlKGR0KTtcclxuICAgICAgICB0aGlzLmJvb2sudXBkYXRlVGhyZWUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVtb3ZlRnJvbUxvYWRpbmdzKG8pIHtcclxuICAgIGNvbnN0IGkgPSB0aGlzLmxvYWRpbmdzLmluZGV4T2Yobyk7XHJcbiAgICBpZih+aSkge1xyXG4gICAgICB0aGlzLmxvYWRpbmdzLnNwbGljZShpLCAxKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbW92ZUZyb21SZW5kZXJRdWV1ZShvKSB7XHJcbiAgICBjb25zdCBpID0gdGhpcy5yZW5kZXJRdWV1ZS5pbmRleE9mKG8pO1xyXG4gICAgaWYofmkpIHtcclxuICAgICAgdGhpcy5yZW5kZXJRdWV1ZS5zcGxpY2UoaSwgMSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZWZyZXNoUGFnZVF1ZXJ5KG4sIHF1ZXJ5PScnKSB7XHJcbiAgICB0aGlzLnBhZ2VRdWVyeSA9IHF1ZXJ5O1xyXG4gICAgY29uc3Qgb2JqZWN0ID0gdGhpcy5wYWdlQ2FjaGUuZ2V0KG4pO1xyXG4gICAgaWYob2JqZWN0ICYmIG9iamVjdC53cmFwcGVyICYmIG9iamVjdC53cmFwcGVyLnNldFF1ZXJ5KSB7XHJcbiAgICAgIGlmKCF0aGlzLnBhZ2VDYWNoZS5yZW1vdmUobikpIHtcclxuICAgICAgICBvYmplY3Qud3JhcHBlci5zZXRRdWVyeShxdWVyeSk7XHJcbiAgICAgICAgdGhpcy5wdXNoSW5SZW5kZXJRdWV1ZShvYmplY3QpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZWZyZXNoWm9vbSgpIHtcclxuICAgIGlmKHRoaXMucC5hdXRvUmVzb2x1dGlvbi5lbmFibGVkKSB7XHJcbiAgICAgIGlmKHRoaXMucmVuZGVyaW5nICYmIHRoaXMucmVuZGVyaW5nLndyYXBwZXIpIHtcclxuICAgICAgICB0aGlzLnJlbmRlcmluZy53cmFwcGVyLmNhbmNlbFJlbmRlcigpO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGVzID0gW107XHJcbiAgICAgIHRoaXMucGFnZUNhY2hlLmZvckVhY2goKGUpPT4ge1xyXG4gICAgICAgIGVzLnB1c2goZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBlcy5mb3JFYWNoKChlKT0+IHtcclxuICAgICAgICBjb25zdCBvYmplY3QgPSBlWzFdO1xyXG4gICAgICAgIGlmKG9iamVjdCAmJiBvYmplY3Qud3JhcHBlcikge1xyXG4gICAgICAgICAgaWYoIXRoaXMucGFnZUNhY2hlLnJlbW92ZShlWzBdKSkge1xyXG4gICAgICAgICAgICB0aGlzLnB1c2hJblJlbmRlclF1ZXVlKG9iamVjdCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldExheWVycyhuLCBjbGIpIHtcclxuICAgIGNvbnN0IGNzc0xheWVyc0xvYWRlciA9IHRoaXMucC5jc3NMYXllcnNMb2FkZXI/IHRoaXMucC5jc3NMYXllcnNMb2FkZXI6IChuLCBmKT0+IGYoW10pO1xyXG4gICAgY3NzTGF5ZXJzTG9hZGVyKG4sIChsYXllcnMpPT4ge1xyXG4gICAgICBjb25zdCBvYmplY3QgPSB0aGlzLnBhZ2VDYWNoZS5nZXQobik7XHJcbiAgICAgIGlmKG9iamVjdCkge1xyXG4gICAgICAgIChvYmplY3Qud3JhcHBlci5nZXRDU1NMYXllciAmJiB0aGlzLnAuaGlnaGxpZ2h0TGlua3M/IG9iamVjdC53cmFwcGVyLmdldENTU0xheWVyKCk6IFByb21pc2UucmVzb2x2ZSgpKS5cclxuICAgICAgICB0aGVuKChsKT0+IHtcclxuICAgICAgICAgIGlmKGwgfHwgbGF5ZXJzWzBdKSB7XHJcbiAgICAgICAgICAgIGwgPSBsIHx8IHt9O1xyXG4gICAgICAgICAgICBsYXllcnNbMF0gPSBsYXllcnNbMF0gfHwge307XHJcbiAgICAgICAgICAgIGxheWVyc1swXSA9IHtcclxuICAgICAgICAgICAgICBodG1sOiAobC5odG1sfHwnJykrKGxheWVyc1swXS5odG1sfHwnJyksXHJcbiAgICAgICAgICAgICAgY3NzOiAobC5jc3N8fCcnKSsobGF5ZXJzWzBdLmNzc3x8JycpLFxyXG4gICAgICAgICAgICAgIGpzOiBsYXllcnNbMF0uanNcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmKG9iamVjdC5zdGF0ZSE9PSdhY3RpdmUnKSB7XHJcbiAgICAgICAgICAgIG9iamVjdC5wZW5kaW5ncy5wdXNoKHtjbGIsIGFyZ3M6IFtsYXllcnNdfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY2xiKGxheWVycyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVzb2x2ZVBlbmRpbmdzKHBlbmRpbmdzKSB7XHJcbiAgICBmb3IobGV0IHAgb2YgcGVuZGluZ3MpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBwLmNsYiguLi5wLmFyZ3MpO1xyXG4gICAgICB9XHJcbiAgICAgIGNhdGNoKGUpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBwZW5kaW5ncy5zcGxpY2UoMCwgcGVuZGluZ3MubGVuZ3RoKTtcclxuICB9XHJcblxyXG4gIHJ0bFBhZ2VOKG4pIHtcclxuICAgIHJldHVybiB0aGlzLnAucnRsPyB0aGlzLmJvb2suZ2V0Qm9va1BhZ2VzKCktMS1uOiBuO1xyXG4gIH1cclxuXHJcbiAgbG9hZChtYXRlcmlhbCwgbikge1xyXG4gICAgY29uc3QgcGkgPSB0aGlzLnJ0bFBhZ2VOKG4pPHRoaXMuYm9vay5nZXRQYWdlcygpPyB0aGlzLnAucGFnZUNhbGxiYWNrKHRoaXMucnRsUGFnZU4obikpOiB7dHlwZTogJ2JsYW5rJ30sIHAgPSB0aGlzLmlzQ292ZXIobik/IHRoaXMucC5jb3ZlcjogdGhpcy5wLnBhZ2U7XHJcbiAgICBjb25zdCBvID0ge1xyXG4gICAgICBuLFxyXG4gICAgICB0ZXh0dXJlOiBuZXcgVEhSRUUuVGV4dHVyZSgpLFxyXG4gICAgICB3cmFwcGVyOiBudWxsLFxyXG4gICAgICBzdGF0ZTogJ2xvYWRpbmcnLFxyXG4gICAgICBsb2NrZWQ6IChuKT0+IG8uc3RhdGUgPT09ICdsb2FkaW5nJyB8fCBvLnN0YXRlID09PSAncmVuZGVyaW5nJyB8fCB0aGlzLmJvb2suaXNBY3RpdmVQYWdlKG4pLFxyXG4gICAgICBjb2xvcjogcC5jb2xvcixcclxuICAgICAgaXNBY3RpdmU6ICgpPT4gdGhpcy5ib29rLmlzQWN0aXZlUGFnZShuKSxcclxuICAgICAgaXNUb3A6ICgpPT4gfnRoaXMuYm9vay5nZXRUb3BQYWdlcygpLmluZGV4T2YobiksXHJcbiAgICAgIGRpc3Bvc2U6ICgpPT4ge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlRnJvbUxvYWRpbmdzKG8pO1xyXG4gICAgICAgIHRoaXMucmVtb3ZlRnJvbVJlbmRlclF1ZXVlKG8pO1xyXG4gICAgICAgIGlmKG8ud3JhcHBlciAmJiBvLndyYXBwZXIuZGlzcG9zZSkge1xyXG4gICAgICAgICAgby53cmFwcGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgby50ZXh0dXJlLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgby50ZXh0dXJlO1xyXG4gICAgICAgIGRlbGV0ZSBvLndyYXBwZXI7XHJcbiAgICAgIH0sXHJcbiAgICAgIHBlbmRpbmdzOiBbXVxyXG4gICAgfTtcclxuICAgIG8udGV4dHVyZS5taW5GaWx0ZXIgPSBUSFJFRS5MaW5lYXJGaWx0ZXI7XHJcbiAgICB0aGlzLmxvYWRpbmdzLnB1c2gobyk7XHJcbiAgICB0aGlzLnNldE1hdGVyaWFsKG8sIG1hdGVyaWFsKTtcclxuXHJcbiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT4ge1xyXG4gICAgICBpZihvLnRleHR1cmUpIHtcclxuICAgICAgICBvLndpZHRoVGV4ZWxzID0gcGkud2lkdGhUZXhlbHMgfHwgcC53aWR0aFRleGVscztcclxuICAgICAgICBvLmhlaWdodFRleGVscyA9IHAuaGVpZ2h0L3Aud2lkdGgqcC53aWR0aFRleGVscztcclxuICAgICAgICBjb25zdCByZXMgPSB0aGlzLmNhbGNSZXNvbHV0aW9uKG8pO1xyXG4gICAgICAgIG8ud3JhcHBlciA9IHRoaXMuaW1hZ2VGYWN0b3J5LmJ1aWxkKHBpLCBwaS5udW1iZXI9PT11bmRlZmluZWQ/IHRoaXMucnRsUGFnZU4obik6IHBpLm51bWJlciwgcmVzLndpZHRoLCByZXMuaGVpZ2h0LCBwLmNvbG9yLCB0aGlzLnAuaW5qZWN0b3IpO1xyXG4gICAgICAgIGlmKG8ud3JhcHBlci5zZXRRdWVyeSkge1xyXG4gICAgICAgICAgby53cmFwcGVyLnNldFF1ZXJ5KHRoaXMucGFnZVF1ZXJ5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgby5zaW11bGF0ZSA9IHBpLmludGVyYWN0aXZlPyAoby53cmFwcGVyLnNpbXVsYXRlIHx8ICgoKT0+IHVuZGVmaW5lZCkpLmJpbmQoby53cmFwcGVyKTogdW5kZWZpbmVkO1xyXG4gICAgICAgIG8ud3JhcHBlci5vbkxvYWQgPSAoKT0+IHtcclxuICAgICAgICAgIG8uc3RhdGUgPSAnbG9hZGVkJztcclxuICAgICAgICAgIHRoaXMucHVzaEluUmVuZGVyUXVldWUobyk7XHJcbiAgICAgICAgICAvLyB0aGlzLmJvb2suZGlzcGF0Y2hFdmVudCh7XHJcbiAgICAgICAgICAvLyAgIHR5cGU6ICdsb2FkZWRQYWdlJyxcclxuICAgICAgICAgIC8vICAgcGFnZTogblxyXG4gICAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBvLndyYXBwZXIub25DaGFuZ2UgPSAoaW1hZ2UsIGNhbmNlbGVkKT0+IHtcclxuICAgICAgICAgIGlmKGNhbmNlbGVkKSB7XHJcbiAgICAgICAgICAgIGlmKG8uc3RhdGUgIT09ICdxdWV1ZWRGb3JSZW5kZXInKSB7XHJcbiAgICAgICAgICAgICAgby5zdGF0ZSA9ICdsb2FkZWQnO1xyXG4gICAgICAgICAgICAgIGlmKG8ud3JhcHBlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wdXNoSW5SZW5kZXJRdWV1ZSh0aGlzLnJlbmRlcmluZyk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnJlbmRlcmluZztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZihvLnRleHR1cmUpIHtcclxuICAgICAgICAgICAgICB0aGlzLnJlbW92ZUZyb21Mb2FkaW5ncyhvKTtcclxuICAgICAgICAgICAgICBpZihvLm1hdGVyaWFsKSB7XHJcbiAgICAgICAgICAgICAgICBvLm1hdGVyaWFsLm1hcCA9IG8udGV4dHVyZTtcclxuICAgICAgICAgICAgICAgIG8ubWF0ZXJpYWwuY29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoMHhGRkZGRkYpO1xyXG4gICAgICAgICAgICAgICAgby5tYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIG8udGV4dHVyZS5pbWFnZSA9IGltYWdlO1xyXG4gICAgICAgICAgICAgIG8udGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgby50ZXh0dXJlLm9uVXBkYXRlID0gKCk9PiB7XHJcbiAgICAgICAgICAgICAgICBpZihvLnRleHR1cmUpIHtcclxuICAgICAgICAgICAgICAgICAgby50ZXh0dXJlLm9uVXBkYXRlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMudG1wTWF0ZXJpYWwubWFwID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMudG1wTWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgLy8gc2V0VGltZW91dCgoKT0+e1xyXG4gICAgICAgICAgICAgICAgICBpZihvLnN0YXRlICE9PSAncXVldWVkRm9yUmVuZGVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIG8uc3RhdGUgPSAnYWN0aXZlJztcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc29sdmVQZW5kaW5ncyhvLnBlbmRpbmdzKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5yZW5kZXJpbmc7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuYm9vay5kaXNwYXRjaEV2ZW50KHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZW5kUmVuZGVyaW5nJyxcclxuICAgICAgICAgICAgICAgICAgICBwYWdlOiBvLm5cclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgIC8vdGhpcy51cGRhdGVSZW5kZXJRdWV1ZSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gfSwgMTAwKTtcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgIHRoaXMudG1wTWF0ZXJpYWwubWFwID0gby50ZXh0dXJlO1xyXG4gICAgICAgICAgICAgIHRoaXMudG1wTWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAvLyB0aGlzLmJvb2suZGlzcGF0Y2hFdmVudCh7XHJcbiAgICAvLyAgIHR5cGU6ICdsb2FkUGFnZScsXHJcbiAgICAvLyAgIHBhZ2U6IG5cclxuICAgIC8vIH0pO1xyXG4gICAgcmV0dXJuIHRoaXMucGFnZUNhY2hlLnB1dChuLCBvKTtcclxuICB9XHJcblxyXG4gIGlzU2luZ2xlUGFnZShvKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wLnNpbmdsZVBhZ2UvKiB8fCAhby5uIHx8IG8ubj09PXRoaXMuYm9vay5nZXRCb29rUGFnZXMoKS0xKi87XHJcbiAgfVxyXG5cclxuICBjYWxjUmVzb2x1dGlvbihvKSB7XHJcbiAgICBsZXQgcmVzO1xyXG4gICAgaWYodGhpcy5wLmF1dG9SZXNvbHV0aW9uLmVuYWJsZWQpIHtcclxuICAgICAgY29uc3QgayA9IHRoaXMucC5hdXRvUmVzb2x1dGlvbi5jb2VmZmljaWVudCp0aGlzLnAuem9vbSpNYXRoLnNxcnQodGhpcy52aXN1YWwud25kLmRldmljZVBpeGVsUmF0aW8gfHwgMSkqTWF0aC5taW4oKHRoaXMuaXNTaW5nbGVQYWdlKG8pPyAxOiAwLjUpKnRoaXMudmlzdWFsLndpZHRoKCkvby53aWR0aFRleGVscywgdGhpcy52aXN1YWwuaGVpZ2h0KCkvby5oZWlnaHRUZXhlbHMpO1xyXG4gICAgICByZXMgPSB7XHJcbiAgICAgICAgd2lkdGg6IGsqby53aWR0aFRleGVscyxcclxuICAgICAgICBoZWlnaHQ6IGsqby5oZWlnaHRUZXhlbHNcclxuICAgICAgfTtcclxuICAgICAgY29uc3QgbWluUmVzID0gdGhpcy5wLmF1dG9SZXNvbHV0aW9uLm1pbiwgbWF4UmVzID0gdGhpcy5wLmF1dG9SZXNvbHV0aW9uLm1heDtcclxuICAgICAgaWYocmVzLndpZHRoPG1pblJlcykge1xyXG4gICAgICAgIHJlcyA9IHtcclxuICAgICAgICAgIHdpZHRoOiBtaW5SZXMsXHJcbiAgICAgICAgICBoZWlnaHQ6IG1pblJlcypvLmhlaWdodFRleGVscy9vLndpZHRoVGV4ZWxzXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgICBpZihyZXMuaGVpZ2h0PG1pblJlcykge1xyXG4gICAgICAgIHJlcyA9IHtcclxuICAgICAgICAgIHdpZHRoOiBtaW5SZXMqby53aWR0aFRleGVscy9vLmhlaWdodFRleGVscyxcclxuICAgICAgICAgIGhlaWdodDogbWluUmVzXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgICBpZihyZXMud2lkdGg+bWF4UmVzKSB7XHJcbiAgICAgICAgcmVzID0ge1xyXG4gICAgICAgICAgd2lkdGg6IG1heFJlcyxcclxuICAgICAgICAgIGhlaWdodDogbWF4UmVzKm8uaGVpZ2h0VGV4ZWxzL28ud2lkdGhUZXhlbHNcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICAgIGlmKHJlcy5oZWlnaHQ+bWF4UmVzKSB7XHJcbiAgICAgICAgcmVzID0ge1xyXG4gICAgICAgICAgd2lkdGg6IG1heFJlcypvLndpZHRoVGV4ZWxzL28uaGVpZ2h0VGV4ZWxzLFxyXG4gICAgICAgICAgaGVpZ2h0OiBtYXhSZXNcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcmVzID0ge1xyXG4gICAgICAgIHdpZHRoOiBvLndpZHRoVGV4ZWxzLFxyXG4gICAgICAgIGhlaWdodDogby5oZWlnaHRUZXhlbHNcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBwdXNoSW5SZW5kZXJRdWV1ZShvKSB7XHJcbiAgICBpZihvLnN0YXRlIT09J3F1ZXVlZEZvclJlbmRlcicgJiYgby5zdGF0ZSE9PSdsb2FkaW5nJykge1xyXG4gICAgICBvLnN0YXRlID0gJ3F1ZXVlZEZvclJlbmRlcic7XHJcbiAgICAgIHRoaXMucmVuZGVyUXVldWUucHVzaChvKTtcclxuICAgICAgLy8gdGhpcy51cGRhdGVSZW5kZXJRdWV1ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlUmVuZGVyUXVldWUoKSB7XHJcbiAgICBpZih0aGlzLmNhbnZhc2VzKSB7XHJcbiAgICAgIGNvbnN0IHAgPSB0aGlzLnA7XHJcbiAgICAgIGlmKCF0aGlzLnJlbmRlcmluZykge1xyXG4gICAgICAgIGlmKHAucmVuZGVyV2hpbGVGbGlwcGluZyB8fCAhdGhpcy5ib29rLmlzUHJvY2Vzc2luZygpICYmICF0aGlzLnZpc3VhbC5nZXRPcmJpdCgpLmlzTW92aW5nKCkpIHtcclxuICAgICAgICAgIGxldCBhY3RpdmUsIHRvcDtcclxuICAgICAgICAgIGZvcihsZXQgbyBvZiB0aGlzLnJlbmRlclF1ZXVlKSB7XHJcbiAgICAgICAgICAgIGlmKCFhY3RpdmUgJiYgby5pc0FjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgICAgYWN0aXZlID0gbztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihvLmlzVG9wKCkpIHtcclxuICAgICAgICAgICAgICB0b3AgPSBvO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLnJlbmRlcmluZyA9IHRvcCB8fCBhY3RpdmU7XHJcblxyXG4gICAgICAgICAgaWYodGhpcy5pc01vYmlsZSgpICYmIHAucmVuZGVySW5hY3RpdmVQYWdlc09uTW9iaWxlIHx8ICF0aGlzLmlzTW9iaWxlKCkgJiYgcC5yZW5kZXJJbmFjdGl2ZVBhZ2VzKSB7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLnJlbmRlcmluZykge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHVkID0gdGhpcy5ib29rLmdldFVzZXJEaXJlY3Rpb24oKSwgbmVhciA9IHt9O1xyXG4gICAgICAgICAgICAgIGZvcihsZXQgbyBvZiB0aGlzLnJlbmRlclF1ZXVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IHVkLmxhc3RUb3BQYWdlPG8ubjtcclxuICAgICAgICAgICAgICAgIGlmKCFuZWFyW2lkXSB8fCBNYXRoLmFicyhuZWFyW2lkXS5uLXVkLmxhc3RUb3BQYWdlKT5NYXRoLmFicyhvLm4tdWQubGFzdFRvcFBhZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgIG5lYXJbaWRdID0gbztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyaW5nID0gbmVhclt1ZC5kaXJlY3Rpb249PT0xXSB8fCBuZWFyW3VkLmRpcmVjdGlvbiE9PTFdO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYodGhpcy5yZW5kZXJpbmcpIHtcclxuICAgICAgICAgICAgaWYodGhpcy5yZW5kZXJpbmcud3JhcHBlciAmJiB0aGlzLnJlbmRlcmluZy53cmFwcGVyLnN0YXJ0UmVuZGVyKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5yZW1vdmVGcm9tUmVuZGVyUXVldWUodGhpcy5yZW5kZXJpbmcpO1xyXG4gICAgICAgICAgICAgIHRoaXMucmVuZGVyaW5nLnN0YXRlID0gJ3JlbmRlcmluZyc7XHJcbiAgICAgICAgICAgICAgY29uc3QgbyA9IHRoaXMuY2FudmFzZXNbdGhpcy5uZXh0Q2FudmFzXTtcclxuICAgICAgICAgICAgICB0aGlzLm5leHRDYW52YXMgPSAodGhpcy5uZXh0Q2FudmFzKzEpJXRoaXMuY2FudmFzZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgIHRoaXMucmVuZGVyaW5nLndyYXBwZXIuc2V0UmVuZGVyQ2FudmFzKG8uYywgby5jdHgpO1xyXG4gICAgICAgICAgICAgIHRoaXMucmVuZGVyaW5nLndyYXBwZXIuc2V0UmVzb2x1dGlvbih0aGlzLmNhbGNSZXNvbHV0aW9uKHRoaXMucmVuZGVyaW5nKSk7XHJcbiAgICAgICAgICAgICAgdGhpcy5yZW5kZXJpbmcud3JhcHBlci5zdGFydFJlbmRlcigpO1xyXG4gICAgICAgICAgICAgIHRoaXMuYm9vay5kaXNwYXRjaEV2ZW50KHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdzdGFydFJlbmRlcmluZycsXHJcbiAgICAgICAgICAgICAgICBwYWdlOiBvLm5cclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICBkZWxldGUgdGhpcy5yZW5kZXJpbmc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgaWYodGhpcy5yZW5kZXJpbmcud3JhcHBlcikge1xyXG4gICAgICAgICAgdGhpcy5yZW5kZXJpbmcud3JhcHBlci5zZXRSZW5kZXJQYXVzZSghcC5yZW5kZXJXaGlsZUZsaXBwaW5nICYmICh0aGlzLmJvb2suaXNQcm9jZXNzaW5nKCkgfHwgdGhpcy52aXN1YWwuZ2V0T3JiaXQoKS5pc01vdmluZygpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYm9vay51cGRhdGVUaHJlZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIHNldFRpbWVvdXQodGhpcy51cGRhdGVSZW5kZXJRdWV1ZS5iaW5kKHRoaXMpLCAxMDApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdHVybk9uRXZlbnRzKCkge1xyXG4gICAgdGhpcy50cmFuc2ZlckV2ZW50cyA9IHRydWU7XHJcbiAgfVxyXG5cclxuICB0dXJuT2ZmRXZlbnRzKCkge1xyXG4gICAgY29uc3QgbW91c2V1cCA9ICQuRXZlbnQoJ21vdXNldXAnKSwgbW91c2VvdXQgPSAkLkV2ZW50KCdtb3VzZW91dCcpO1xyXG4gICAgdGhpcy5wYWdlQ2FjaGUuZm9yRWFjaCgoZW50KT0+IHtcclxuICAgICAgY29uc3Qgb2JqZWN0ID0gZW50WzFdO1xyXG4gICAgICBpZihvYmplY3Quc2ltdWxhdGUpIHtcclxuICAgICAgICBvYmplY3Quc2ltdWxhdGUobW91c2V1cCwgdW5kZWZpbmVkLCAwLCAwKTtcclxuICAgICAgICBvYmplY3Quc2ltdWxhdGUobW91c2VvdXQsIHVuZGVmaW5lZCwgMCwgMCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdGhpcy50cmFuc2ZlckV2ZW50cyA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgdHJhbnNmZXJFdmVudFRvVGV4dHVyZShuLCBlLCBkYXRhKSB7XHJcbiAgICBpZih0aGlzLnRyYW5zZmVyRXZlbnRzKSB7XHJcbiAgICAgIGNvbnN0IHRvT2JqZWN0ID0gdGhpcy5nZXRPckxvYWRUZXh0dXJlT2JqZWN0KHVuZGVmaW5lZCwgbik7XHJcbiAgICAgIGlmKHRvT2JqZWN0LndyYXBwZXIpIHtcclxuICAgICAgICBjb25zdCB7dXZ9ID0gZGF0YSwgdG9Eb2MgPSB0b09iamVjdC53cmFwcGVyLmdldFNpbXVsYXRlZERvYygpO1xyXG4gICAgICAgIHRoaXMucGFnZUNhY2hlLmZvckVhY2goKGVudCk9PiB7XHJcbiAgICAgICAgICBjb25zdCBvYmplY3QgPSBlbnRbMV07XHJcbiAgICAgICAgICBpZihvYmplY3Quc2ltdWxhdGUpIHtcclxuICAgICAgICAgICAgb2JqZWN0LnNpbXVsYXRlKGUsIHRvRG9jLCB1di54LCB1di55KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbG9hZFByZWRpY3RlZFBhZ2VzKCkge1xyXG4gICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+IHtcclxuICAgICAgY29uc3QgdWQgPSB0aGlzLmJvb2suZ2V0VXNlckRpcmVjdGlvbigpO1xyXG4gICAgICB0aGlzLnByZWRpY3RlZFJlcXVlc3RzID0gW107XHJcbiAgICAgIGZvcihsZXQgaSA9IDAsIHAgPSB1ZC5sYXN0VG9wUGFnZSArIHVkLmRpcmVjdGlvbjsgaTx0aGlzLnAucHJlbG9hZFBhZ2VzOyArK2ksIHArPXVkLmRpcmVjdGlvbikge1xyXG4gICAgICAgIHRoaXMucHJlZGljdGVkUmVxdWVzdHMucHVzaChwKTtcclxuICAgICAgfVxyXG4gICAgICBmb3IobGV0IHAgb2YgdGhpcy5wcmVkaWN0ZWRSZXF1ZXN0cykge1xyXG4gICAgICAgIGlmKHA+PTAgJiYgcDx0aGlzLmJvb2suZ2V0Qm9va1BhZ2VzKCkgJiYgIXRoaXMucGFnZUNhY2hlLmdldChwKSkge1xyXG4gICAgICAgICAgdGhpcy5sb2FkKHVuZGVmaW5lZCwgcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHNldE1hdGVyaWFsKG8sIG1hdGVyaWFsKSB7XHJcbiAgICB0aGlzLnBhZ2VDYWNoZS5mb3JFYWNoKChlKT0+IHtcclxuICAgICAgY29uc3Qgb2IgPSBlWzFdO1xyXG4gICAgICBpZihvIT09b2IgJiYgb2IubWF0ZXJpYWw9PT1tYXRlcmlhbCkge1xyXG4gICAgICAgIGRlbGV0ZSBvYi5tYXRlcmlhbDtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBpZihtYXRlcmlhbCAmJiBtYXRlcmlhbCE9PW8ubWF0ZXJpYWwpIHtcclxuICAgICAgby5tYXRlcmlhbCA9IG1hdGVyaWFsO1xyXG4gICAgICB0aGlzLnNldHVwTWF0ZXJpYWwobyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXR1cE1hdGVyaWFsKG8pIHtcclxuICAgIG8ubWF0ZXJpYWwubWFwID0gby50ZXh0dXJlLmltYWdlPyBvLnRleHR1cmU6ICh0aGlzLmxvYWRpbmdBbmltYXRpb24/IHRoaXMubG9hZGluZ1tvLmNvbG9yXS50ZXh0dXJlOiBudWxsKTtcclxuICAgIGlmKCFvLm1hdGVyaWFsLm1hcCkge1xyXG4gICAgICBvLm1hdGVyaWFsLmNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKG8uY29sb3IpO1xyXG4gICAgfVxyXG4gICAgby5tYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBnZXRPckxvYWRUZXh0dXJlT2JqZWN0KG1hdGVyaWFsLCBuKSB7XHJcbiAgICBsZXQgb2JqZWN0ID0gdGhpcy5wYWdlQ2FjaGUuZ2V0KG4pO1xyXG4gICAgaWYoIW9iamVjdCkge1xyXG4gICAgICBvYmplY3QgPSB0aGlzLmxvYWQobWF0ZXJpYWwsIG4pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuc2V0TWF0ZXJpYWwob2JqZWN0LCBtYXRlcmlhbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG9iamVjdDtcclxuICB9XHJcblxyXG4gIHNldFRleHR1cmUobWF0ZXJpYWwsIG4pIHtcclxuICAgIHRoaXMuZ2V0T3JMb2FkVGV4dHVyZU9iamVjdChtYXRlcmlhbCwgbik7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvUGFnZU1hbmFnZXIuanMiLCJpbXBvcnQgQm9va1Byb3BzQnVpbGRlciBmcm9tICcuL0Jvb2tQcm9wc0J1aWxkZXInO1xyXG5pbXBvcnQgUGRmIGZyb20gJ1BkZic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZGZCb29rUHJvcHNCdWlsZGVyIGV4dGVuZHMgQm9va1Byb3BzQnVpbGRlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHNyYywgb25SZWFkeSwgc3R5bGUsIHBkZk9wZW5PcHRpb25zKSB7XHJcbiAgICBzdXBlcihvblJlYWR5LCBzdHlsZSk7XHJcbiAgICB0aGlzLnBkZiA9IG5ldyBQZGYoc3JjLCB1bmRlZmluZWQsIHBkZk9wZW5PcHRpb25zKTtcclxuICAgIHRoaXMucGFnZURlc2NyaXB0aW9uID0ge1xyXG4gICAgICB0eXBlOiAncGRmJyxcclxuICAgICAgc3JjOiB0aGlzLnBkZixcclxuICAgICAgaW50ZXJhY3RpdmU6IHRydWVcclxuICAgIH07XHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICBwYWdlQ2FsbGJhY2s6IHRoaXMucGFnZUNhbGxiYWNrLmJpbmQodGhpcylcclxuICAgIH07XHJcbiAgICB0aGlzLnBkZi5nZXRIYW5kbGVyKHRoaXMuaW5pdC5iaW5kKHRoaXMpKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLnBkZi5kaXNwb3NlKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICBpbml0KGhhbmRsZXIpIHtcclxuICAgIGNvbnN0IHBhZ2VzID0gdGhpcy5wZGYuZ2V0UGFnZXNOdW0oKTtcclxuICAgIHRoaXMucGFnZXMgPSBwYWdlcztcclxuICAgIHRoaXMuY2FsY1NoZWV0cyhwYWdlcyk7XHJcbiAgICBpZihwYWdlcz4wKSB7XHJcbiAgICAgIGhhbmRsZXIuZ2V0UGFnZSgxKS5cclxuICAgICAgdGhlbigocGFnZSk9PiB7XHJcbiAgICAgICAgY29uc3Qgdmlld3BvcnQgPSBwYWdlLmdldFZpZXdwb3J0KHtzY2FsZTogMX0pLCBzaXplID0ge3dpZHRoOiB2aWV3cG9ydC53aWR0aCwgaGVpZ2h0OiB2aWV3cG9ydC5oZWlnaHR9O1xyXG4gICAgICAgIHRoaXMuY2FsY1Byb3BzKHNpemUud2lkdGgsIHNpemUuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLnJlYWR5KCk7XHJcbiAgICAgIH0pLlxyXG4gICAgICBjYXRjaCgoZSk9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5wcm9wcyA9IHRoaXMuZGVmYXVsdHM7XHJcbiAgICAgIHRoaXMucmVhZHkoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHBhZ2VDYWxsYmFjayhuKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wYWdlRGVzY3JpcHRpb247XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL1BkZkJvb2tQcm9wc0J1aWxkZXIuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZGZMaW5rc0hhbmRsZXIge1xyXG5cclxuICBjb25zdHJ1Y3RvcihwZGYsIGN0cmwsIGVsZW1lbnQpIHtcclxuICAgIHRoaXMucGRmID0gcGRmO1xyXG4gICAgdGhpcy5jdHJsID0gY3RybDtcclxuICAgIHRoaXMuZWxlbWVudCA9ICQoZWxlbWVudCk7XHJcbiAgICB0aGlzLmN1cnNvcnMgPSBbXTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgc2V0SGFuZGxlcihoYW5kbGVyKSB7XHJcbiAgICB0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xyXG4gIH1cclxuXHJcbiAgZGVmYXVsdEhhbmRsZXIodHlwZSwgZGVzdGluYXRpb24pIHtcclxuICAgIGlmKHR5cGU9PT0naW50ZXJuYWwnKSB7XHJcbiAgICAgIHRoaXMuY3RybC5nb1RvUGFnZShkZXN0aW5hdGlvbik7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHR5cGU9PT0nZXh0ZXJuYWwnKSB7XHJcbiAgICAgIHdpbmRvdy5vcGVuKGRlc3RpbmF0aW9uLCAnX2JsYW5rJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjYWxsSGFuZGxlcnModHlwZSwgZGVzdGluYXRpb24pIHtcclxuICAgIGlmKCF0aGlzLmhhbmRsZXIgfHwgIXRoaXMuaGFuZGxlcih0eXBlLCBkZXN0aW5hdGlvbikpIHtcclxuICAgICAgdGhpcy5kZWZhdWx0SGFuZGxlcih0eXBlLCBkZXN0aW5hdGlvbik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBoYW5kbGVFdmVudChkYXRhKSB7XHJcbiAgICBjb25zdCBlID0gZGF0YS5ldmVudCwgYW5ubyA9IGRhdGEuYW5ub3RhdGlvbjtcclxuICAgIHN3aXRjaChlLnR5cGUpIHtcclxuICAgICAgY2FzZSAnbW91c2VvdmVyJzoge1xyXG4gICAgICAgIHRoaXMuY3Vyc29ycy5wdXNoKHRoaXMuZWxlbWVudC5jc3MoJ2N1cnNvcicpKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQuY3NzKCdjdXJzb3InLCAncG9pbnRlcicpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ21vdXNlb3V0Jzoge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5jc3MoJ2N1cnNvcicsIHRoaXMuY3Vyc29ycy5wb3AoKSB8fCAnJyk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAndG91Y2h0YXAnOlxyXG4gICAgICBjYXNlICdjbGljayc6IHtcclxuICAgICAgICBpZihhbm5vLnVybCkge1xyXG4gICAgICAgICAgdGhpcy5jYWxsSGFuZGxlcnMoJ2V4dGVybmFsJywgYW5uby51cmwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKGFubm8uZGVzdCkge1xyXG4gICAgICAgICAgdGhpcy5wZGYuZ2V0RGVzdGluYXRpb24oYW5uby5kZXN0KS5cclxuICAgICAgICAgICAgdGhlbigobnVtYmVyKT0+IHRoaXMuY2FsbEhhbmRsZXJzKCdpbnRlcm5hbCcsIG51bWJlcikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9QZGZMaW5rc0hhbmRsZXIuanMiLCJpbXBvcnQgRmluZGVyIGZyb20gJ0ZpbmRlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2hFbmdpbmUge1xyXG4gIGNvbnN0cnVjdG9yKHBhZ2VDYWxsYmFjaywgcGFnZXMpIHtcclxuICAgIHRoaXMucGFnZUNhbGxiYWNrID0gcGFnZUNhbGxiYWNrO1xyXG4gICAgdGhpcy5wYWdlcyA9IHBhZ2VzO1xyXG4gICAgdGhpcy5yZXN1bHRzID0gW107XHJcbiAgfVxyXG5cclxuICBzZXRRdWVyeShxdWVyeSkge1xyXG4gICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xyXG4gICAgdGhpcy51cGRhdGUgPSB0cnVlO1xyXG4gICAgdGhpcy5wcm9jZXNzKCk7XHJcbiAgfVxyXG5cclxuICBwcm9jZXNzKCkge1xyXG4gICAgaWYodGhpcy51cGRhdGUpIHtcclxuICAgICAgY29uc3QgcmVzdWx0cyA9IHRoaXMucmVzdWx0cztcclxuICAgICAgdGhpcy5yZXN1bHRzID0gW107XHJcbiAgICAgIGlmKHRoaXMub25QYWdlSGl0c0NoYW5nZWQpIHtcclxuICAgICAgICBmb3IobGV0IHJlcyBvZiByZXN1bHRzKSB7XHJcbiAgICAgICAgICB0aGlzLm9uUGFnZUhpdHNDaGFuZ2VkKHVuZGVmaW5lZCwgJycpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB0aGlzLnVwZGF0ZSA9IGZhbHNlO1xyXG4gICAgICB0aGlzLnBhZ2UgPSAwO1xyXG4gICAgICB0aGlzLnN0YW1wID0gRGF0ZS5ub3coKTtcclxuICAgICAgaWYodGhpcy5xdWVyeS5sZW5ndGg+MSkge1xyXG4gICAgICAgIHRoaXMucHJvY2VzcygpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgaWYodGhpcy5wYWdlPHRoaXMucGFnZXMpIHtcclxuICAgICAgICBjb25zdCBzdGFtcCA9IHRoaXMuc3RhbXA7XHJcbiAgICAgICAgdGhpcy5maW5kKHRoaXMucGFnZUNhbGxiYWNrKHRoaXMucGFnZSkpLlxyXG4gICAgICAgICAgdGhlbigoY29udGV4dHMpPT4ge1xyXG4gICAgICAgICAgICBpZihzdGFtcCA9PT0gdGhpcy5zdGFtcCkge1xyXG4gICAgICAgICAgICAgIGlmKGNvbnRleHRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bHRzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICBwYWdlOiB0aGlzLnBhZ2UsXHJcbiAgICAgICAgICAgICAgICAgIGNvbnRleHRzXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgaWYodGhpcy5vblBhZ2VIaXRzQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vblBhZ2VIaXRzQ2hhbmdlZCh0aGlzLnBhZ2UsIHRoaXMucXVlcnkpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICArK3RoaXMucGFnZTtcclxuICAgICAgICAgICAgICB0aGlzLnByb2Nlc3MoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZpbmQocGkpIHtcclxuICAgIGxldCBuZXh0O1xyXG4gICAgaWYocGkudHlwZT09PSdwZGYnKSB7XHJcbiAgICAgIG5leHQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSk9PiB7XHJcbiAgICAgICAgcGkuc3JjLmdldEhhbmRsZXIoKCk9PiB7XHJcbiAgICAgICAgICBjb25zdCBuID0gcGkubnVtYmVyPT09dW5kZWZpbmVkPyB0aGlzLnBhZ2U6IHBpLm51bWJlcjtcclxuICAgICAgICAgIGlmKHBpLnNyYy5nZXRQYWdlVHlwZShuKT09PSdyaWdodCcpIHtcclxuICAgICAgICAgICAgcmVzb2x2ZShbXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcGkuc3JjLmdldFBhZ2UobikuXHJcbiAgICAgICAgICAgIHRoZW4oKHBhZ2UpPT4ge1xyXG4gICAgICAgICAgICAgIHBhZ2UuZ2V0VGV4dENvbnRlbnQoKS5cclxuICAgICAgICAgICAgICB0aGVuKCh0ZXh0Q29udGVudCk9PiB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKG5ldyBGaW5kZXIodGV4dENvbnRlbnQuaXRlbXMubWFwKChpdGVtKT0+IGl0ZW0uc3RyKSwgdGhpcy5xdWVyeSwge2hpdHM6IGZhbHNlfSkuZ2V0Q29udGV4dHMoKSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pLlxyXG4gICAgICAgICAgICBjYXRjaCgoKT0+IHJlc29sdmUoW10pKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgbmV4dCA9IFByb21pc2UucmVzb2x2ZShbXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV4dDtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvU2VhcmNoRW5naW5lLmpzIiwiaW1wb3J0IHskLCB0cn0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBXaWRnZXRDb250cm9sbGVyIGZyb20gJ1dpZGdldENvbnRyb2xsZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hhcmVDb250cm9sbGVyIGV4dGVuZHMgV2lkZ2V0Q29udHJvbGxlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpZXcsIGJvb2tDdHJsLCBsaW5rQnVpbGRlcj0ocGFnZSk9PiBwYWdlKSB7XHJcbiAgICBzdXBlcih2aWV3LCAnd2lkU2hhcmUnKTtcclxuICAgIHRoaXMuYm9va0N0cmwgPSBib29rQ3RybDtcclxuICAgIHRoaXMubGlua0J1aWxkZXIgPSBsaW5rQnVpbGRlcjtcclxuICAgIGJvb2tDdHJsLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZEZsaXAnLCB0aGlzLnVwZGF0ZVZpZXcuYmluZCh0aGlzKSk7XHJcbiAgfVxyXG5cclxuICBjbWRDbG9zZVNoYXJlKCkge1xyXG4gICAgdGhpcy5oaWRlKCk7XHJcbiAgfVxyXG5cclxuICBjbGlja0xpbmsodSwgYmxhbms9dHJ1ZSkge1xyXG4gICAgY29uc3QgYSA9ICQoJzxhIGhyZWY9XCInK3UrJ1wiJysoYmxhbms/ICcgdGFyZ2V0PVwiX2JsYW5rXCInOiAnJykrJz48L2E+JykuYXBwZW5kVG8odGhpcy52aWV3LmdldENvbnRhaW5lcigpKTtcclxuICAgIGFbMF0uY2xpY2soKTtcclxuICAgIGEucmVtb3ZlKCk7XHJcbiAgfVxyXG5cclxuICBjbWRGYWNlYm9vaygpIHtcclxuICAgIHRoaXMuY2xpY2tMaW5rKCdodHRwczovL3d3dy5mYWNlYm9vay5jb20vc2hhcmVyL3NoYXJlci5waHA/dT0nK2VuY29kZVVSSUNvbXBvbmVudCh0aGlzLmdldExpbmsoKSkpO1xyXG4gIH1cclxuXHJcbiAgY21kVHdpdHRlcigpIHtcclxuICAgIHRoaXMuY2xpY2tMaW5rKCdodHRwOi8vdHdpdHRlci5jb20vc2hhcmU/dXJsPScrZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuZ2V0TGluaygpKSk7XHJcbiAgfVxyXG5cclxuICBjbWRFbWFpbCgpIHtcclxuICAgIHRoaXMuY2xpY2tMaW5rKCdtYWlsdG86P3N1YmplY3Q9Jyt0cignV2Ugd2FudGVkIHlvdSB0byBzZWUgdGhpcyBib29rJykrJyZib2R5PScrdHIoJ0NoZWNrIG91dCB0aGlzIHNpdGUnKSsnICcrZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuZ2V0TGluaygpKSwgZmFsc2UpO1xyXG4gIH1cclxuXHJcbiAgZ2V0TGluaygpIHtcclxuICAgIHJldHVybiB0aGlzLmxpbmtCdWlsZGVyKHRoaXMuYm9va0N0cmwuZ2V0UGFnZUZvckdVSSgpKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVZpZXcoKSB7XHJcbiAgICBpZih0aGlzLnZpZXcpIHtcclxuICAgICAgZm9yKGxldCBjbWQgb2YgWydjbWRDbG9zZVNoYXJlJywgJ2NtZEZhY2Vib29rJywgJ2NtZFR3aXR0ZXInLCAnY21kRW1haWwnXSkge1xyXG4gICAgICAgIHRoaXMudmlldy5zZXRTdGF0ZShjbWQsIHtcclxuICAgICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd0eHRTaGFyZUxpbmsnLCB7XHJcbiAgICAgICAgdmFsdWU6IHRoaXMuZ2V0TGluaygpLFxyXG4gICAgICAgIHZpc2libGU6IHRydWVcclxuICAgICAgfSk7XHJcbiAgICAgIHN1cGVyLnVwZGF0ZVZpZXcoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvU2hhcmVDb250cm9sbGVyLmpzIiwiaW1wb3J0IENTU0xheWVyIGZyb20gJ0NTU0xheWVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoZWV0Q3NzTGF5ZXIge1xyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbCwgYmxvY2ssIHByb3BzKSB7XHJcbiAgICB0aGlzLnZpc3VhbCA9IHZpc3VhbDtcclxuICAgIGNvbnN0IHNpemUgPSBibG9jay5nZXRUb3BTaXplKCk7XHJcbiAgICB0aGlzLmxheWVyID0gbmV3IENTU0xheWVyKHNpemUud2lkdGgsIHNpemUuaGVpZ2h0LCBwcm9wcyk7XHJcblxyXG4gICAgdGhpcy51cGRhdGUoYmxvY2spO1xyXG4gICAgdGhpcy52aXN1YWwuYWRkQ3NzT2JqZWN0KHRoaXMubGF5ZXIpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMubGF5ZXIuZGlzcG9zZSgpO1xyXG4gICAgdGhpcy52aXN1YWwucmVtb3ZlQ3NzT2JqZWN0KHRoaXMubGF5ZXIpO1xyXG4gIH1cclxuXHJcbiAgaXNIaWRkZW4oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5sYXllci5pc0hpZGRlbigpO1xyXG4gIH1cclxuXHJcbiAgaGlkZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmxheWVyLmhpZGUoKTtcclxuICB9XHJcblxyXG4gIHNob3coKSB7XHJcbiAgICByZXR1cm4gdGhpcy5sYXllci5zaG93KCk7XHJcbiAgfVxyXG5cclxuICBzZXQoY3NzLCBodG1sLCBqcykge1xyXG4gICAgdGhpcy5sYXllci5zZXREYXRhKGNzcywgaHRtbCwganMpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGJsb2NrKSB7XHJcbiAgICB0aGlzLmJsb2NrID0gYmxvY2s7XHJcbiAgICBjb25zdCBzaXplID0gYmxvY2suZ2V0VG9wU2l6ZSgpO1xyXG4gICAgdGhpcy5sYXllci5zZXRTaXplKHNpemUud2lkdGgsIHNpemUuaGVpZ2h0KTtcclxuICAgIHRoaXMuYmxvY2suZ2V0VG9wV29ybGRSb3RhdGlvbih0aGlzLmxheWVyLnJvdGF0aW9uKTtcclxuICAgIHRoaXMuYmxvY2suZ2V0VG9wV29ybGRQb3NpdGlvbih0aGlzLmxheWVyLnBvc2l0aW9uKTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9TaGVldENzc0xheWVyLmpzIiwiaW1wb3J0IE1hdGhVdGlscyBmcm9tICdNYXRoVXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hlZXRQaHlzaWNzIHtcclxuXHJcbiAgc3RhdGljIHRhcmdldEZvcmNlQ2xiKG8sYSx2LGNoKSB7XHJcbiAgICBjb25zdCBsID0gYSp0aGlzLnI7XHJcbiAgICByZXR1cm4gMTAwKnRoaXMubSp0aGlzLmcqKDIvKDErTWF0aC5leHAoMTAqKGwtdGhpcy50bCkpKS0xKS10aGlzLm0qNDAqdjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBob3ZlckNvcm5lckZvcmNlQ2xiKG8sdixsLGNoKSB7XHJcbiAgICByZXR1cm4gNTtcclxuICB9XHJcblxyXG4gIGdldFRhcmdldEZvcmNlQ2xiKG1hc3MsIHRhcmdldEFuZ2xlKSB7XHJcbiAgICByZXR1cm4gU2hlZXRQaHlzaWNzLnRhcmdldEZvcmNlQ2xiLmJpbmQoe1xyXG4gICAgICBnOiB0aGlzLnAuZ3Jhdml0eSxcclxuICAgICAgbTogbWFzcyxcclxuICAgICAgdGw6IHRhcmdldEFuZ2xlKnRoaXMucC5yLFxyXG4gICAgICByOiB0aGlzLnAuclxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZHJhZ0ZvcmNlQ2xiKG8sYSx2LGNoKSB7XHJcbiAgICByZXR1cm4gby5mbGJ0Km8ubSooMTAqby5nKmNoLTUwKnYvKDErTWF0aC5leHAoMy41Kk1hdGguYWJzKGNoKSkpKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkcmFnQ29ybmVyRm9yY2VDbGIobyxhLHYsY2gpIHtcclxuICAgIHJldHVybiAxNSooMi8oMStNYXRoLmV4cCgxMCooYS10aGlzLnRhKSpvLnIpKS0xKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXREcmFnQ29ybmVyRm9yY2VDbGIodGFyZ2V0QW5nbGUpIHtcclxuICAgIHJldHVybiBTaGVldFBoeXNpY3MuZHJhZ0Nvcm5lckZvcmNlQ2xiLmJpbmQoe1xyXG4gICAgICB0YTogdGFyZ2V0QW5nbGVcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3Iocj0xLCBncmF2aXR5PTEsIGNvcm5lckRldmlhdGlvbj0wLjE1LCBmcHM9MjQwKSB7XHJcbiAgICB0aGlzLnAgPSB7XHJcbiAgICAgIHIsXHJcbiAgICAgIGNvcm5lckRldmlhdGlvbixcclxuICAgICAgbDogTWF0aC5QSSpyLFxyXG4gICAgICBzdGFydER0OiAxL2ZwcyxcclxuICAgICAgZ3Jhdml0eSxcclxuICAgICAgbWFyZ2luOiAwLjAwMipyLFxyXG4gICAgICBpbmZNOiAxZTQsXHJcbiAgICAgIGF0dGVtcHRzOiAxNixcclxuICAgICAgbWF4SXRlcmF0aW9uczogMTAwXHJcbiAgICB9O1xyXG4gICAgdGhpcy5vcyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMub3MgPSBbXTtcclxuICB9XHJcblxyXG4gIGdldFNpemUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5vcy5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICBhZGRPYmplY3QobWFzcywgYW5nbGUsIHZlbG9jaXR5LCBmbGV4aWJpbGl0eSwgY29ybmVySGVpZ2h0LCBzaW11bGF0ZUNsYiwgcmVtb3ZlQ2xiLCBmb3JjZUNsYj0oKT0+IDAsIGNvcm5lckZvcmNlQ2xiPSgpPT4gMCkge1xyXG4gICAgY29uc3Qgbm8gPSB7XHJcbiAgICAgIGlkOiBNYXRoVXRpbHMuZ2V0VW5pcXVlKCksXHJcbiAgICAgIG06IG1hc3MsXHJcbiAgICAgIHY6IHZlbG9jaXR5LFxyXG4gICAgICBsOiBhbmdsZSp0aGlzLnAucixcclxuICAgICAgZjogZm9yY2VDbGIsXHJcbiAgICAgIGNmOiBjb3JuZXJGb3JjZUNsYixcclxuICAgICAgY2g6IGNvcm5lckhlaWdodCxcclxuICAgICAgZmxidDogZmxleGliaWxpdHksXHJcbiAgICAgIHNpbXVsYXRlQ2xiLFxyXG4gICAgICByZW1vdmVDbGJcclxuICAgIH07XHJcbiAgICBsZXQgaSA9IHRoaXMub3MuZmluZEluZGV4KChvKT0+IG5vLmw8PW8ubCk7XHJcbiAgICBpID0gfmk/IGk6IHRoaXMub3MubGVuZ3RoO1xyXG4gICAgdGhpcy5vcy5zcGxpY2UoaSwgMCwgbm8pO1xyXG4gICAgcmV0dXJuIG5vLmlkO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGFyYW1ldHJNYXAobmFtZSkge1xyXG4gICAgY29uc3QgbWFwID0ge1xyXG4gICAgICBtYXNzOiAnbScsXHJcbiAgICAgIHZlbG9jaXR5OiAndicsXHJcbiAgICAgIGZsZXhpYmlsaXR5OiAnZmxidCcsXHJcbiAgICAgIGNvcm5lckhlaWdodDogJ2NoJyxcclxuICAgICAgc2ltdWxhdGVDbGI6ICdzaW11bGF0ZUNsYicsXHJcbiAgICAgIHJlbW92ZUNsYjogJ3JlbW92ZUNsYicsXHJcbiAgICAgIGZvcmNlQ2xiOiAnZicsXHJcbiAgICAgIGNvcm5lckZvcmNlQ2xiOiAnY2YnXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIG1hcFtuYW1lXTtcclxuICB9XHJcblxyXG4gIHNldFBhcmFtZXRyKGlkLCBuYW1lLCB2YWx1ZSkge1xyXG4gICAgY29uc3QgbyA9IHRoaXMub3MuZmluZCgobyk9PiBvLmlkPT09aWQpO1xyXG4gICAgaWYobmFtZSA9PT0gJ2FuZ2xlJykge1xyXG4gICAgICBvLmwgPSB2YWx1ZSp0aGlzLnAucjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBvW3RoaXMuZ2V0UGFyYW1ldHJNYXAobmFtZSldID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRQYXJhbWV0cihpZCwgbmFtZSkge1xyXG4gICAgY29uc3QgbyA9IHRoaXMub3MuZmluZCgobyk9PiBvLmlkPT09aWQpO1xyXG4gICAgbGV0IHZhbHVlO1xyXG4gICAgaWYobmFtZSA9PT0gJ2FuZ2xlJykge1xyXG4gICAgICB2YWx1ZSA9IG8ubC90aGlzLnAucjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB2YWx1ZSA9IG9bdGhpcy5nZXRQYXJhbWV0ck1hcChuYW1lKV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBzaW11bGF0ZShUKSB7XHJcbiAgICBsZXQgdD0wLFxyXG4gICAgICAgIGR0PXRoaXMucC5zdGFydER0LFxyXG4gICAgICAgIGF0dGVtcHQ9MCxcclxuICAgICAgICBpdD0wO1xyXG5cclxuICAgIHdoaWxlKHQ8VCAmJiBpdDx0aGlzLnAubWF4SXRlcmF0aW9ucykge1xyXG4gICAgICBpZihkdD5ULXQpIHtcclxuICAgICAgICBkdCA9IFQtdDtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBub3MgPSB0aGlzLmludGVncmF0ZSh0aGlzLm9zLCBkdCksXHJcbiAgICAgICAgICAgIGNpID0gdGhpcy5maW5kQ29sbGlzaW9ucyhub3MpO1xyXG4gICAgICBpZihjaS5udW0+MSAmJiBhdHRlbXB0PHRoaXMucC5hdHRlbXB0cykge1xyXG4gICAgICAgIGR0Lz0yO1xyXG4gICAgICAgICsrYXR0ZW1wdDtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBpZihjaS5udW09PT0xKSB7XHJcbiAgICAgICAgICBjb25zdCBzY29zID0gdGhpcy5zb2x2ZUNvbGxpc2lvbihub3NbY2kubGFzdC0xXSwgbm9zW2NpLmxhc3RdKTtcclxuICAgICAgICAgIG5vc1tjaS5sYXN0LTFdID0gc2Nvc1swXTtcclxuICAgICAgICAgIG5vc1tjaS5sYXN0XSA9IHNjb3NbMV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoY2kubnVtPjEpIHtcclxuICAgICAgICAgIGNvbnN0IGdzID0gW107XHJcbiAgICAgICAgICBsZXQgbGFzdCA9IC0yO1xyXG4gICAgICAgICAgZm9yKGxldCBpIG9mIGNpLmFsbCkge1xyXG4gICAgICAgICAgICBpZihpLWxhc3Q+MSkge1xyXG4gICAgICAgICAgICAgIGdzLnB1c2goW10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdzW2dzLmxlbmd0aC0xXS5wdXNoKGkpO1xyXG4gICAgICAgICAgICBsYXN0ID0gaTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGZvcihsZXQgZyBvZiBncykge1xyXG4gICAgICAgICAgICBsZXQgc2csIGkwO1xyXG4gICAgICAgICAgICBpZihub3NbZ1swXV0ubD5NYXRoLlBJLzIqdGhpcy5wLnIpIHtcclxuICAgICAgICAgICAgICBzZyA9IC0xO1xyXG4gICAgICAgICAgICAgIGkwID0gZ1tnLmxlbmd0aC0xXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICBzZyA9IDE7XHJcbiAgICAgICAgICAgICAgaTAgPSBnWzBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvcihsZXQgaT1pMDsgaTxub3MubGVuZ3RoICYmIGk+LTE7IGkrPXNnKSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgbyA9IG5vc1tpK3NnXTtcclxuICAgICAgICAgICAgICBpZihvICYmIHNnKihvLmwtbm9zW2ldLmwpPD10aGlzLnAubWFyZ2luKSB7XHJcbiAgICAgICAgICAgICAgICBvLmw9bm9zW2ldLmwrc2cqMip0aGlzLnAubWFyZ2luO1xyXG4gICAgICAgICAgICAgICAgaWYoby5sPnRoaXMucC5sIHx8IG8ubDwwKSB7XHJcbiAgICAgICAgICAgICAgICAgIG8ubCA9IG8ubD50aGlzLnAubD8gdGhpcy5wLmw6IDA7XHJcbiAgICAgICAgICAgICAgICAgIG8uY2ggPSAwO1xyXG4gICAgICAgICAgICAgICAgICBvLnY9MDtcclxuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignQmFkIGNvbGxpc2lvbicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm9zID0gbm9zO1xyXG4gICAgICAgIHRoaXMuZmluZEFuZFNvbHZlQ29ybmVyQ29sbGlzaW9ucygpO1xyXG4gICAgICAgIHQrPWR0O1xyXG4gICAgICAgIGR0PXRoaXMucC5zdGFydER0O1xyXG4gICAgICAgIGF0dGVtcHQ9MDtcclxuICAgICAgfVxyXG4gICAgICArK2l0O1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucmVtb3ZlU3RhdGljcygpO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlU3RhdGljcygpIHtcclxuICAgIGNvbnN0IG5vcyA9IFtdLCBub3RpZnkgPSBbW10sW11dO1xyXG4gICAgZm9yKGxldCBvIG9mIHRoaXMub3MpIHtcclxuICAgICAgaWYoby5zaW11bGF0ZUNsYikge1xyXG4gICAgICAgIG8uc2ltdWxhdGVDbGIoby5sL3RoaXMucC5yLCBvLmNoKTtcclxuICAgICAgfVxyXG4gICAgICBpZigoby5sPT09dGhpcy5wLmwgfHwgby5sPT09MCkgJiYgby52PT09MCkge1xyXG4gICAgICAgIGlmKG8ucmVtb3ZlQ2xiICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIG5vdGlmeVsoby5sIT09dGhpcy5wLmwpKzBdLnB1c2gobyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIG5vcy5wdXNoKG8pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLm9zID0gbm9zO1xyXG4gICAgZm9yKGxldCBvIG9mIG5vdGlmeVswXS5yZXZlcnNlKCkpIHtcclxuICAgICAgby5yZW1vdmVDbGIoTWF0aC5QSSwgby5jaCk7XHJcbiAgICB9XHJcbiAgICBmb3IobGV0IG8gb2Ygbm90aWZ5WzFdKSB7XHJcbiAgICAgIG8ucmVtb3ZlQ2xiKDAsIG8uY2gpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZmluZEFuZFNvbHZlQ29ybmVyQ29sbGlzaW9ucygpIHtcclxuICAgIGlmKHRoaXMub3MubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnN0IG9zID0gW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIC4uLnRoaXMub3NbMF0sXHJcbiAgICAgICAgICBsOiAwLFxyXG4gICAgICAgICAgbTogdGhpcy5wLmluZk0sXHJcbiAgICAgICAgICBjaDogMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLi4udGhpcy5vcyxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAuLi50aGlzLm9zWzBdLFxyXG4gICAgICAgICAgbDogMS4wNSp0aGlzLnAubCxcclxuICAgICAgICAgIG06IHRoaXMucC5pbmZNLFxyXG4gICAgICAgICAgY2g6IDBcclxuICAgICAgICB9XHJcbiAgICAgIF07XHJcblxyXG4gICAgICBmb3IobGV0IGk9MTsgaTxvcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGNvbnN0IGE9b3NbaS0xXSwgYj1vc1tpXSxcclxuICAgICAgICAgICAgICBhbD1hLmwrdGhpcy5wLmNvcm5lckRldmlhdGlvbiphLmNoKnRoaXMucC5yLFxyXG4gICAgICAgICAgICAgIGJsPWIubCt0aGlzLnAuY29ybmVyRGV2aWF0aW9uKmIuY2gqdGhpcy5wLnI7XHJcbiAgICAgICAgaWYoMS4wNSphbD5ibCAmJiBhLmNoPmIuY2gpIHtcclxuICAgICAgICAgIGNvbnN0IGRDaCA9IGEuY2gtYi5jaCwgZHY9YS5tL2EuZmxidCtiLm0vYi5mbGJ0LCBrYT1hLm0vYS5mbGJ0L2R2LCBrYj1iLm0vYi5mbGJ0L2R2O1xyXG4gICAgICAgICAgYS5jaD1hLmNoLWtiKmRDaDtcclxuICAgICAgICAgIGIuY2g9Yi5jaCtrYSpkQ2g7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzb2x2ZUNvbGxpc2lvbihhLCBiKSB7XHJcbiAgICBjb25zdCBtbT0oYi5tK2EubSksXHJcbiAgICAgIGF2ID0gKC1hLnYqYi5tK2EubSphLnYrMipiLm0qYi52KS9tbSxcclxuICAgICAgYnYgPSAoYi5tKmIudi1iLnYqYS5tKzIqYS5tKmEudikvbW07XHJcbiAgICByZXR1cm4gW3suLi5hLCB2OiBhdn0sIHsuLi5iLCB2OiBidn1dO1xyXG4gIH1cclxuXHJcbiAgZmluZENvbGxpc2lvbnMob3MpIHtcclxuICAgIGNvbnN0IGNpID0ge1xyXG4gICAgICBudW06IDAsXHJcbiAgICAgIGxhc3Q6IDAsXHJcbiAgICAgIGFsbDogW11cclxuICAgIH07XHJcbiAgICBmb3IobGV0IGkgPSAxOyBpPG9zLmxlbmd0aCAmJiBjaS5udW08MjsgKytpKSB7XHJcbiAgICAgIGlmKG9zW2ktMV0ubD5vc1tpXS5sIHx8IHRoaXMuaXNDb2xsaXNpb24ob3NbaS0xXSwgb3NbaV0pKSB7XHJcbiAgICAgICAgaWYob3NbaS0xXS5sPm9zW2ldLmwpIHtcclxuICAgICAgICAgICsrY2kubnVtO1xyXG4gICAgICAgIH1cclxuICAgICAgICArK2NpLm51bTtcclxuICAgICAgICBjaS5sYXN0ID0gaTtcclxuICAgICAgICBpZihjaS5hbGwuaW5kZXhPZihpLTEpPT09LTEpIHtcclxuICAgICAgICAgIGNpLmFsbC5wdXNoKGktMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGNpLmFsbC5pbmRleE9mKGkpPT09LTEpIHtcclxuICAgICAgICAgIGNpLmFsbC5wdXNoKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNpO1xyXG4gIH1cclxuXHJcbiAgaXNDb2xsaXNpb24oYSwgYikge1xyXG4gICAgcmV0dXJuIE1hdGguYWJzKGEubC1iLmwpPHRoaXMucC5tYXJnaW4gJiYgYS52PmIudjtcclxuICB9XHJcblxyXG4gIGludGVncmF0ZShvcywgZHQpIHtcclxuICAgIGNvbnN0IG5vcyA9IFtdO1xyXG4gICAgZm9yKGxldCBvIG9mIG9zKSB7XHJcbiAgICAgIGNvbnN0IHZsID0gTWF0aFV0aWxzLnJrNChcclxuICAgICAgICB0aGlzLmR5LmJpbmQoe1xyXG4gICAgICAgICAgZzogdGhpcy5wLmdyYXZpdHksXHJcbiAgICAgICAgICByOiB0aGlzLnAucixcclxuICAgICAgICAgIG06IG8ubSxcclxuICAgICAgICAgIGY6IG8uZixcclxuICAgICAgICAgIGNmOiBvLmNmLFxyXG4gICAgICAgICAgY2g6IG8uY2gsXHJcbiAgICAgICAgICBmbGJ0OiBvLmZsYnRcclxuICAgICAgICB9KSxcclxuICAgICAgICAwLFxyXG4gICAgICAgIGR0LFxyXG4gICAgICAgIFtvLnYsIG8ubCwgby5jaF1cclxuICAgICAgKTtcclxuICAgICAgY29uc3Qgbm8gPSB7XHJcbiAgICAgICAgLi4ubyxcclxuICAgICAgICB2OiB2bFswXSxcclxuICAgICAgICBsOiB2bFsxXSxcclxuICAgICAgICBjaDogdmxbMl1cclxuICAgICAgfTtcclxuICAgICAgaWYobm8ubDw9MCB8fCBuby5sPj10aGlzLnAubCkge1xyXG4gICAgICAgIG5vLmw9bm8ubDw9MD8gMDogdGhpcy5wLmw7XHJcbiAgICAgICAgbm8udj0wO1xyXG4gICAgICAgIG5vLmNoPTA7XHJcbiAgICAgIH1cclxuICAgICAgbm9zLnB1c2gobm8pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vcztcclxuICB9XHJcblxyXG4gIGR5KHQseSkge1xyXG4gICAgY29uc3Qgdj15WzBdLCBsPXlbMV0sIGNoPXlbMl0sIGFsZiA9IGwvdGhpcy5yLCBmPXRoaXMuZih0aGlzLGFsZix2LGNoKSwgY2Y9dGhpcy5jZih0aGlzLGFsZix2LGNoKSwgY29zQWxmPU1hdGguY29zKGFsZiksXHJcbiAgICBicmY9Ni42NSpNYXRoLmFicygoTWF0aC5zaWduKGNvc0FsZiktTWF0aC5zaWduKHYpKSp2KSpNYXRoLnBvdyhjb3NBbGYsNSk7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAtdGhpcy5nKmNvc0FsZiticmYrZi90aGlzLm0sXHJcbiAgICAgIHYrMC4wMSooTWF0aC5yYW5kb20oKS0wLjUpLFxyXG4gICAgICB0aGlzLmZsYnQqKCgyLygxK01hdGguZXhwKC0wLjIqY2YpKS0xKSooMS0yLygxK01hdGguZXhwKC01KihNYXRoLmFicyhjaCktMikpKSktY2gpXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9TaGVldFBoeXNpY3MuanMiLCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNvdW5kc0Vudmlyb21lbnQge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZT17fSkge1xyXG4gICAgdGVtcGxhdGUgPSB0eXBlb2YgdGVtcGxhdGU9PT0nZnVuY3Rpb24nPyB0ZW1wbGF0ZSgpOiB0ZW1wbGF0ZTtcclxuICAgIHRoaXMuc291bmRzID0gdGVtcGxhdGUuc291bmRzIHx8IHt9O1xyXG4gICAgdGhpcy5hdWRpbyA9IHt9O1xyXG4gICAgaWYodGhpcy5zb3VuZHMuc3RhcnRGbGlwKSB7XHJcbiAgICAgIHRoaXMuYXVkaW8uc3RhcnRGbGlwID0gbmV3IEF1ZGlvKHRoaXMuc291bmRzLnN0YXJ0RmxpcCk7XHJcbiAgICAgIHRoaXMuYXVkaW8uc3RhcnRGbGlwLnZvbHVtZSA9IDAuNTtcclxuICAgIH1cclxuICAgIGlmKHRoaXMuc291bmRzLmVuZEZsaXApIHtcclxuICAgICAgdGhpcy5hdWRpby5lbmRGbGlwID0gbmV3IEF1ZGlvKHRoaXMuc291bmRzLmVuZEZsaXApO1xyXG4gICAgICB0aGlzLmF1ZGlvLmVuZEZsaXAudm9sdW1lID0gMC41O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0RW5hYmxlZChlbmFibGVkKSB7XHJcbiAgICB0aGlzLmVuYWJsZWQgPSBlbmFibGVkO1xyXG4gIH1cclxuXHJcbiAgdG9nbGUoKSB7XHJcbiAgICB0aGlzLmVuYWJsZWQgPSAhdGhpcy5lbmFibGVkO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGRlbGV0ZSB0aGlzLmF1ZGlvLnN0YXJ0RmxpcDtcclxuICAgIGRlbGV0ZSB0aGlzLmF1ZGlvLmVuZEZsaXA7XHJcbiAgfVxyXG5cclxuICBwbGF5KHBsYXllcikge1xyXG4gICAgcGxheWVyLnBsYXkoKS5jYXRjaCgoKT0+IHVuZGVmaW5lZCk7XHJcbiAgfVxyXG5cclxuICBzdGFydEZsaXAoKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQgJiYgdGhpcy5hdWRpby5zdGFydEZsaXApIHtcclxuICAgICAgdGhpcy5wbGF5KHRoaXMuYXVkaW8uc3RhcnRGbGlwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGVuZEZsaXAoKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQgJiYgdGhpcy5hdWRpby5zdGFydEZsaXApIHtcclxuICAgICAgdGhpcy5hdWRpby5zdGFydEZsaXAucGF1c2UoKTtcclxuICAgICAgdGhpcy5hdWRpby5zdGFydEZsaXAuY3VycmVudFRpbWUgPSAwO1xyXG4gICAgfVxyXG4gICAgaWYodGhpcy5lbmFibGVkICYmIHRoaXMuYXVkaW8uZW5kRmxpcCkge1xyXG4gICAgICB0aGlzLnBsYXkodGhpcy5hdWRpby5lbmRGbGlwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN1YnNjcmliZUZsaXBzKGVtaXR0ZXIpIHtcclxuICAgIGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcignc3RhcnRGbGlwJywgdGhpcy5zdGFydEZsaXAuYmluZCh0aGlzKSk7XHJcbiAgICBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZEZsaXAnLCB0aGlzLmVuZEZsaXAuYmluZCh0aGlzKSk7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL1NvdW5kc0Vudmlyb21lbnQuanMiLCJpbXBvcnQgV2lkZ2V0Q29udHJvbGxlciBmcm9tICdXaWRnZXRDb250cm9sbGVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvY0NvbnRyb2xsZXIgZXh0ZW5kcyBXaWRnZXRDb250cm9sbGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3IodmlldywgYm9va0N0cmwpIHtcclxuICAgIHN1cGVyKHZpZXcsICd3aWRGbG9hdFduZCcpO1xyXG4gICAgdGhpcy5ib29rQ3RybCA9IGJvb2tDdHJsO1xyXG4gICAgdGhpcy50YWIgPSAnbm9uZSc7XHJcbiAgfVxyXG5cclxuICBzZXRUaHVtYm5haWxzKHRodW1ibmFpbHMpIHtcclxuICAgIHRoaXMudGh1bWJuYWlscyA9IHRodW1ibmFpbHM7XHJcbiAgICB0aHVtYm5haWxzLm9uTmF2aWdhdGUgPSB0aGlzLm5hdmlnYXRlVGh1bWJuYWlscy5iaW5kKHRoaXMpO1xyXG4gICAgaWYodGhpcy50YWIgPT09ICdub25lJykge1xyXG4gICAgICB0aGlzLnRhYiA9ICd0aHVtYm5haWxzJztcclxuICAgIH1cclxuICAgIHRoaXMuZmlyZUNoYW5nZSgpO1xyXG4gIH1cclxuXHJcbiAgc2V0U2VhcmNoKHNlYXJjaCkge1xyXG4gICAgdGhpcy5zZWFyY2ggPSBzZWFyY2g7XHJcbiAgICBzZWFyY2gub25OYXZpZ2F0ZSA9IHRoaXMubmF2aWdhdGVTZWFyY2guYmluZCh0aGlzKTtcclxuICAgIHRoaXMuZmlyZUNoYW5nZSgpO1xyXG4gIH1cclxuXHJcbiAgc2V0Qm9va21hcmtzKGJvb2ttYXJrcywgcGRmKSB7XHJcbiAgICBpZihib29rbWFya3MuZ2V0U2l6ZSgpKSB7XHJcbiAgICAgIHRoaXMuYm9va21hcmtzID0gYm9va21hcmtzO1xyXG4gICAgICB0aGlzLnBkZiA9IHBkZjtcclxuICAgICAgYm9va21hcmtzLm9uTmF2aWdhdGUgPSB0aGlzLm5hdmlnYXRlQm9va21hcmtzLmJpbmQodGhpcyk7XHJcbiAgICAgIHRoaXMuaXNCb29rbWFya3MgPSB0cnVlO1xyXG4gICAgICB0aGlzLmZpcmVDaGFuZ2UoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNtZEJvb2ttYXJrcygpIHtcclxuICAgIHRoaXMuc2V0QWN0aXZlVGFiKCdib29rbWFya3MnKTtcclxuICB9XHJcblxyXG4gIGNtZFRodW1ibmFpbHMoKSB7XHJcbiAgICB0aGlzLnNldEFjdGl2ZVRhYigndGh1bWJuYWlscycpO1xyXG4gIH1cclxuXHJcbiAgY21kU2VhcmNoKCkge1xyXG4gICAgdGhpcy5zZXRBY3RpdmVUYWIoJ3NlYXJjaCcpO1xyXG4gIH1cclxuXHJcbiAgc2V0QWN0aXZlVGFiKHRhYikge1xyXG4gICAgaWYodGhpc1t0YWJdKSB7XHJcbiAgICAgIHRoaXMudGFiID0gdGFiO1xyXG4gICAgICB0aGlzLmZpcmVDaGFuZ2UoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNtZENsb3NlVG9jKCkge1xyXG4gICAgdGhpcy5oaWRlKCk7XHJcbiAgfVxyXG5cclxuICBuYXZpZ2F0ZVRodW1ibmFpbHMobnVtYmVyKSB7XHJcbiAgICB0aGlzLmdvVG9QYWdlKG51bWJlcik7XHJcbiAgfVxyXG5cclxuICBuYXZpZ2F0ZVNlYXJjaChudW1iZXIpIHtcclxuICAgIHRoaXMuZ29Ub1BhZ2UobnVtYmVyKTtcclxuICB9XHJcblxyXG4gIG9wZW5VcmwodXJsKSB7XHJcbiAgICB3aW5kb3cub3Blbih1cmwsICdfYmxhbmsnKTtcclxuICB9XHJcblxyXG4gIGdvVG9QYWdlKG51bWJlcikge1xyXG4gICAgdGhpcy5ib29rQ3RybC5nb1RvUGFnZShudW1iZXIpO1xyXG4gIH1cclxuXHJcbiAgZHN0RGF0YUhhbmRsZXIoZGF0YSkge1xyXG4gICAgZGF0YSA9IChkYXRhKycnKS50cmltKCk7XHJcbiAgICBsZXQgbnVtYmVyO1xyXG4gICAgaWYoKG51bWJlcj1wYXJzZUludChkYXRhKSk9PWRhdGEpIHtcclxuICAgICAgdGhpcy5nb1RvUGFnZShudW1iZXIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMub3BlblVybChkYXRhKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5hdmlnYXRlQm9va21hcmtzKGl0ZW0pIHtcclxuICAgIGlmKGl0ZW0udXJsKSB7XHJcbiAgICAgIHRoaXMub3BlblVybChpdGVtLnVybCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKGl0ZW0uZGVzdCkge1xyXG4gICAgICB0aGlzLnBkZi5nZXREZXN0aW5hdGlvbihpdGVtLmRlc3QpLlxyXG4gICAgICAgIHRoZW4oKG51bWJlcik9PiB0aGlzLmdvVG9QYWdlKG51bWJlcikpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihpdGVtLmRzdERhdGEhPT11bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy5kc3REYXRhSGFuZGxlcihpdGVtLmRzdERhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlVmlldygpIHtcclxuICAgIGlmKHRoaXMudmlldykge1xyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ3dpZFRvY01lbnUnLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd3aWRUaHVtYm5haWxzJywge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLnRhYj09PSd0aHVtYm5haWxzJyxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ3dpZFNlYXJjaCcsIHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy50YWI9PT0nc2VhcmNoJyxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ3dpZEJvb2ttYXJrcycsIHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy50YWI9PT0nYm9va21hcmtzJyxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ2NtZEJvb2ttYXJrcycsIHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogISF0aGlzLmJvb2ttYXJrcyxcclxuICAgICAgICBhY3RpdmU6IHRoaXMudGFiPT09J2Jvb2ttYXJrcydcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnY21kQ2xvc2VUb2MnLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCdjbWRUaHVtYm5haWxzJywge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiAhIXRoaXMudGh1bWJuYWlscyAmJiAhISh0aGlzLnNlYXJjaCB8fCB0aGlzLmJvb2ttYXJrcyksXHJcbiAgICAgICAgYWN0aXZlOiB0aGlzLnRhYj09PSd0aHVtYm5haWxzJ1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCdjbWRTZWFyY2gnLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6ICEhdGhpcy5zZWFyY2gsXHJcbiAgICAgICAgYWN0aXZlOiB0aGlzLnRhYj09PSdzZWFyY2gnXHJcbiAgICAgIH0pO1xyXG4gICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT4gdGhpcy50aHVtYm5haWxzLnNldEVuYWJsZSh0aGlzLnZpc2libGUgJiYgdGhpcy50YWI9PT0ndGh1bWJuYWlscycpKTtcclxuICAgICAgc3VwZXIudXBkYXRlVmlldygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9Ub2NDb250cm9sbGVyLmpzIiwiaW1wb3J0IHtUSFJFRX0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBUaHJlZVV0aWxzIGZyb20gJ1RocmVlVXRpbHMnO1xyXG5cclxuY29uc3QgcmVzWCA9IDExLFxyXG4gICAgICByZXNZID0gMixcclxuICAgICAgcmVzWiA9IDE1LFxyXG4gICAgICBzY2FsZSA9IDEsXHJcbiAgICAgIGZhY2VzID0gW107XHJcblxyXG5jb25zdCBmcm9udEdlb21ldHJ5ID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoc2NhbGUsIHNjYWxlLCByZXNYLTEsIHJlc1ktMSk7XHJcbmZyb250R2VvbWV0cnkudHJhbnNsYXRlKDAuNSpzY2FsZSwwLjUqc2NhbGUsc2NhbGUpO1xyXG5jb25zdCBiYWNrR2VvbWV0cnkgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeShzY2FsZSwgc2NhbGUsIHJlc1gtMSwgcmVzWS0xKTtcclxuYmFja0dlb21ldHJ5LnJvdGF0ZVkoTWF0aC5QSSk7XHJcbmJhY2tHZW9tZXRyeS50cmFuc2xhdGUoMC41KnNjYWxlLDAuNSpzY2FsZSwwKTtcclxuY29uc3QgbGVmdEdlb21ldHJ5ID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoc2NhbGUsIHNjYWxlLCByZXNaLTEsIHJlc1ktMSk7XHJcbmxlZnRHZW9tZXRyeS5yb3RhdGVZKC1NYXRoLlBJLzIpO1xyXG5sZWZ0R2VvbWV0cnkudHJhbnNsYXRlKDAsMC41KnNjYWxlLDAuNSpzY2FsZSk7XHJcbmNvbnN0IHJpZ2h0R2VvbWV0cnkgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeShzY2FsZSwgc2NhbGUsIHJlc1otMSwgcmVzWS0xKTtcclxucmlnaHRHZW9tZXRyeS5yb3RhdGVZKE1hdGguUEkvMik7XHJcbnJpZ2h0R2VvbWV0cnkudHJhbnNsYXRlKHNjYWxlLDAuNSpzY2FsZSwwLjUqc2NhbGUpO1xyXG5jb25zdCB0b3BHZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KHNjYWxlLCBzY2FsZSwgcmVzWC0xLCByZXNaLTEpO1xyXG50b3BHZW9tZXRyeS5yb3RhdGVYKC1NYXRoLlBJLzIpO1xyXG50b3BHZW9tZXRyeS50cmFuc2xhdGUoMC41KnNjYWxlLHNjYWxlLDAuNSpzY2FsZSk7XHJcbmNvbnN0IGJvdHRvbUdlb21ldHJ5ID0gdG9wR2VvbWV0cnkuY2xvbmUoKTtcclxuYm90dG9tR2VvbWV0cnkudHJhbnNsYXRlKDAsLXNjYWxlLDApO1xyXG5mb3IobGV0IGYgb2YgYm90dG9tR2VvbWV0cnkuZmFjZXMpIHtcclxuICBbZi5hLCBmLmJdID0gW2YuYiwgZi5hXTtcclxufVxyXG5cclxuY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuR2VvbWV0cnkoKTtcclxuZ2VvbWV0cnkudmVydGljZXMgPSBbLi4uYm90dG9tR2VvbWV0cnkudmVydGljZXMsIC4uLnRvcEdlb21ldHJ5LnZlcnRpY2VzXTtcclxuXHJcbmNvbnN0IGFkZEZhY2VzID0gKGZzLCBtYXApPT4ge1xyXG4gIGZvcihsZXQgZiBvZiBmcykge1xyXG4gICAgZ2VvbWV0cnkuZmFjZXMucHVzaChuZXcgVEhSRUUuRmFjZTMobWFwKGYuYSksIG1hcChmLmIpLCBtYXAoZi5jKSkpO1xyXG4gIH1cclxuICBmYWNlcy5wdXNoKGdlb21ldHJ5LmZhY2VzLmxlbmd0aCk7XHJcbn07XHJcblxyXG5jb25zdCBtYXBWZXJ0aWNlcyA9IChzcmMsIGRzdCk9PiB7XHJcbiAgY29uc3QgbWFwID0gW107XHJcbiAgY29uc3QgZXEgPSAoYSwgYik9PiBNYXRoLmFicyhhLngtYi54KStNYXRoLmFicyhhLnktYi55KStNYXRoLmFicyhhLnotYi56KTwxZS00O1xyXG4gIGZvcihsZXQgaT0wOyBpPHNyYy5sZW5ndGg7ICsraSkge1xyXG4gICAgZm9yKGxldCBqPTA7IGo8ZHN0Lmxlbmd0aDsgKytqKSB7XHJcbiAgICAgIGlmKGVxKHNyY1tpXSwgZHN0W2pdKSkge1xyXG4gICAgICAgIG1hcFtpXT1qO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtYXA7XHJcbn07XHJcblxyXG5jb25zdCBmcm9udE1hcCA9IG1hcFZlcnRpY2VzKGZyb250R2VvbWV0cnkudmVydGljZXMsIGdlb21ldHJ5LnZlcnRpY2VzKTtcclxuY29uc3QgYmFja01hcCA9IG1hcFZlcnRpY2VzKGJhY2tHZW9tZXRyeS52ZXJ0aWNlcywgZ2VvbWV0cnkudmVydGljZXMpO1xyXG5jb25zdCBsZWZ0TWFwID0gbWFwVmVydGljZXMobGVmdEdlb21ldHJ5LnZlcnRpY2VzLCBnZW9tZXRyeS52ZXJ0aWNlcyk7XHJcbmNvbnN0IHJpZ2h0TWFwID0gbWFwVmVydGljZXMocmlnaHRHZW9tZXRyeS52ZXJ0aWNlcywgZ2VvbWV0cnkudmVydGljZXMpO1xyXG5cclxuYWRkRmFjZXModG9wR2VvbWV0cnkuZmFjZXMsIChpKT0+IGkrYm90dG9tR2VvbWV0cnkudmVydGljZXMubGVuZ3RoKTtcclxuYWRkRmFjZXMoYm90dG9tR2VvbWV0cnkuZmFjZXMsIChpKT0+IGkpO1xyXG5hZGRGYWNlcyhmcm9udEdlb21ldHJ5LmZhY2VzLCAoaSk9PiBmcm9udE1hcFtpXSk7XHJcbmFkZEZhY2VzKGJhY2tHZW9tZXRyeS5mYWNlcywgKGkpPT4gYmFja01hcFtpXSk7XHJcbmFkZEZhY2VzKGxlZnRHZW9tZXRyeS5mYWNlcywgKGkpPT4gbGVmdE1hcFtpXSk7XHJcbmFkZEZhY2VzKHJpZ2h0R2VvbWV0cnkuZmFjZXMsIChpKT0+IHJpZ2h0TWFwW2ldKTtcclxuZmFjZXMucG9wKCk7XHJcblxyXG5UaHJlZVV0aWxzLmNvbXB1dGVGYWNlVmVydGV4VXZzKGdlb21ldHJ5LCBmYWNlcyk7XHJcblxyXG5nZW9tZXRyeS5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xyXG4vL2dlb21ldHJ5LmNvbXB1dGVGYWNlTm9ybWFscygpO1xyXG5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcclxuLy9nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3goKTtcclxuZ2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlID0gdHJ1ZTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHRyZXNYLFxyXG5cdHJlc1ksXHJcblx0cmVzWixcclxuXHRmYWNlcyxcclxuXHRnZW9tZXRyeVxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9tb2RlbHMvc2hlZXRCbG9jay5qcyIsImNvbnN0IG1vdXNlQnV0dG9ucyA9IHtcclxuICBMZWZ0OiAwLFxyXG4gIE1pZGRsZTogMSxcclxuICBSaWdodDogMlxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHByb3BzKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBlcHM6IDFlLTQsXHJcbiAgICBzY2FsZToge1xyXG4gICAgICBkZWZhdWx0OiAwLjksXHJcbiAgICAgIG1pbjogMC45LFxyXG4gICAgICBtYXg6IDIsXHJcbiAgICAgIGxldmVsczogNVxyXG4gICAgfSxcclxuICAgIHBhbjoge1xyXG4gICAgICBzcGVlZDogNTBcclxuICAgIH0sXHJcbiAgICBsb2FkaW5nQW5pbWF0aW9uOiB7XHJcbiAgICAgIHNraW46IHRydWUsXHJcbiAgICAgIGJvb2s6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgYXV0b1Jlc29sdXRpb246IHtcclxuICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgY29lZmZpY2llbnQ6IDEuNSxcclxuICAgICAgbWluOiA4MDAsXHJcbiAgICAgIG1heDogMTkyMFxyXG4gICAgfSxcclxuICAgIG5hcnJvd1ZpZXc6IHtcclxuICAgICAgd2lkdGg6IDUwMFxyXG4gICAgfSxcclxuICAgIGFjdGlvbnM6IHtcclxuICAgICAgY21kWm9vbUluOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBlbmFibGVkSW5OYXJyb3c6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgY21kWm9vbU91dDoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZERlZmF1bHRab29tOiB7XHJcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiBmYWxzZSxcclxuICAgICAgICB0eXBlOiAnZGJsY2xpY2snLFxyXG4gICAgICAgIGNvZGU6IDBcclxuICAgICAgfSxcclxuICAgICAgY21kVG9jOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBlbmFibGVkSW5OYXJyb3c6IHRydWUsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcclxuICAgICAgICBkZWZhdWx0VGFiOiAnYm9va21hcmtzJ1xyXG4gICAgICB9LFxyXG4gICAgICBjbWRBdXRvUGxheToge1xyXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogZmFsc2UsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRCYWNrd2FyZDoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiBmYWxzZSxcclxuICAgICAgICBjb2RlOiAzN1xyXG4gICAgICB9LFxyXG4gICAgICBjbWRCaWdCYWNrd2FyZDoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZEZvcndhcmQ6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogZmFsc2UsXHJcbiAgICAgICAgY29kZTogMzlcclxuICAgICAgfSxcclxuICAgICAgY21kQmlnRm9yd2FyZDoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFNhdmU6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRQcmludDoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZEZ1bGxTY3JlZW46IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICB3aWRTZXR0aW5nczoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIHdpZFRvb2xiYXI6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRTbWFydFBhbjoge1xyXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogZmFsc2UsXHJcbiAgICAgICAgYWN0aXZlOiB0cnVlLFxyXG4gICAgICB9LFxyXG4gICAgICBjbWRTaW5nbGVQYWdlOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBlbmFibGVkSW5OYXJyb3c6IHRydWUsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcclxuICAgICAgICBhY3RpdmVGb3JNb2JpbGU6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgY21kU291bmRzOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBlbmFibGVkSW5OYXJyb3c6IHRydWUsXHJcbiAgICAgICAgYWN0aXZlOiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFN0YXRzOiB7XHJcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiBmYWxzZSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZEdvdG9GaXJzdFBhZ2U6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRHb3RvTGFzdFBhZ2U6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRTaGFyZToge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFBhbkxlZnQ6IHtcclxuICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRQYW5SaWdodDoge1xyXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFBhblVwOiB7XHJcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgY21kUGFuRG93bjoge1xyXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgIG1vdXNlQ21kUm90YXRlOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICB0eXBlOiAnbW91c2VkcmFnJyxcclxuICAgICAgICBjb2RlOiBtb3VzZUJ1dHRvbnMuUmlnaHRcclxuICAgICAgfSxcclxuICAgICAgbW91c2VDbWREcmFnWm9vbToge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgdHlwZTogJ21vdXNlZHJhZycsXHJcbiAgICAgICAgY29kZTogbW91c2VCdXR0b25zLk1pZGRsZVxyXG4gICAgICB9LFxyXG4gICAgICBtb3VzZUNtZFBhbjoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgdHlwZTogJ21vdXNlZHJhZycsXHJcbiAgICAgICAgY29kZTogbW91c2VCdXR0b25zLkxlZnRcclxuICAgICAgfSxcclxuICAgICAgbW91c2VDbWRXaGVlbFpvb206IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIHR5cGU6ICdtb3VzZXdoZWVsJyxcclxuICAgICAgICBjb2RlOiAwXHJcbiAgICAgIH0sXHJcbiAgICAgIHRvdWNoQ21kUm90YXRlOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICB0eXBlOiAndG91Y2hkcmFnJyxcclxuICAgICAgICBjb2RlOiAzXHJcbiAgICAgIH0sXHJcbiAgICAgIHRvdWNoQ21kWm9vbToge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgdHlwZTogJ3RvdWNoZHJhZycsXHJcbiAgICAgICAgY29kZTogMlxyXG4gICAgICB9LFxyXG4gICAgICB0b3VjaENtZFBhbjoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgdHlwZTogJ3RvdWNoZHJhZycsXHJcbiAgICAgICAgY29kZTogMVxyXG4gICAgICB9LFxyXG4gICAgICB0b3VjaENtZFN3aXBlOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICB0eXBlOiAndG91Y2hkcmFnJyxcclxuICAgICAgICBjb2RlOiAxXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9wcm9wcy9ib29rQ29udHJvbGxlci5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBJbWFnZUJhc2UgZnJvbSAnLi9JbWFnZUJhc2UnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmxhbmtJbWFnZSBleHRlbmRzIEltYWdlQmFzZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGNvbG9yKSB7XHJcbiAgICBzdXBlcihjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBjb2xvcik7XHJcblxyXG4gICAgUHJvbWlzZS5yZXNvbHZlKCkuXHJcbiAgICAgIHRoZW4oKCk9PiB7XHJcbiAgICAgICAgdGhpcy5zdGFydFJlbmRlciA9ICgpPT4ge1xyXG4gICAgICAgICAgdGhpcy5yZW5kZXJCbGFua1BhZ2UoKTtcclxuICAgICAgICAgIHRoaXMuZmluaXNoUmVuZGVyKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmZpbmlzaExvYWQoKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0JsYW5rSW1hZ2UuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9va21hcmtzIHtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGFpbmVyLCBpdGVtcywgZ2V0VGl0bGU9KGkpPT4gaS50aXRsZSwgZ2V0SXRlbXM9KGkpPT5pLml0ZW1zKSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgIHRoaXMubWFwID0gW107XHJcbiAgICB0aGlzLmdldFRpdGxlID0gZ2V0VGl0bGU7XHJcbiAgICB0aGlzLmdldEl0ZW1zID0gZ2V0SXRlbXM7XHJcbiAgICB0aGlzLm5vZGVzID0gdGhpcy5tYXBOb2RlcyhpdGVtcywgdGhpcy5tYXApO1xyXG5cclxuICAgIHRoaXMuYmluZHMgPSB7XHJcbiAgICAgIHRvZ2xlOiAoZSk9PiB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGxldCBsaSA9ICQoZS50YXJnZXQpO1xyXG4gICAgICAgIHdoaWxlKGxpWzBdICYmIGxpWzBdIT09Y29udGFpbmVyWzBdICYmICFsaS5oYXNDbGFzcygnaXRlbScpKSB7XHJcbiAgICAgICAgICBsaSA9ICQobGlbMF0ucGFyZW50Tm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGxpLmhhc0NsYXNzKCdpdGVtJykpIHtcclxuICAgICAgICAgIGxldCBjbWQgPSAkKGUudGFyZ2V0KTtcclxuICAgICAgICAgIHdoaWxlKGNtZFswXSAmJiBjbWRbMF0hPT1saVswXSAmJiAhY21kLmhhc0NsYXNzKCdjbWQnKSkge1xyXG4gICAgICAgICAgICBjbWQgPSAkKGNtZFswXS5wYXJlbnROb2RlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmKGNtZC5oYXNDbGFzcygnY21kJykpIHtcclxuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMubWFwW2xpLmF0dHIoJ2RhdGEtaWQnKV07XHJcbiAgICAgICAgICAgIGlmKGNtZC5oYXNDbGFzcygndG9nbGUnKSkge1xyXG4gICAgICAgICAgICAgIG5vZGUubWluaW1pemVkID0gIW5vZGUubWluaW1pemVkO1xyXG4gICAgICAgICAgICAgIGlmKG5vZGUubWluaW1pemVkKSB7XHJcbiAgICAgICAgICAgICAgICBsaS5maW5kKCd1bCcpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgbGkuZmluZCgnLnRvZ2xlJykuYWRkQ2xhc3MoJ21pbmltaXplZCcpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxpLmZpbmQoJy50b2dsZScpLnJlbW92ZUNsYXNzKCdtaW5pbWl6ZWQnKTtcclxuICAgICAgICAgICAgICAgIGxpLmFwcGVuZCgodGhpcy5yZW5kZXJOb2RlKG5vZGUpLm1hdGNoKC88dWwoLnxcXG4pKjxcXC91bD4vZykgfHwgWycnXSlbMF0pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICBpZih0aGlzLm9uTmF2aWdhdGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25OYXZpZ2F0ZShub2RlLml0ZW0pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnRhaW5lci5vbignY2xpY2snLCB0aGlzLmJpbmRzLnRvZ2xlKTtcclxuICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgfVxyXG5cclxuICBnZXRTaXplKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubWFwLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5vZmYoJ2NsaWNrJywgdGhpcy5iaW5kcy50b2dsZSk7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5odG1sKCcnKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZSgpIHtcclxuICAgIHRoaXMuY29udGFpbmVyLmh0bWwodGhpcy5yZW5kZXJOb2Rlcyh0aGlzLm5vZGVzKSk7XHJcbiAgfVxyXG5cclxuICBmb3JFYWNoKGYsIG5vZGVzPXRoaXMubm9kZXMpIHtcclxuICAgIGZvcihsZXQgbm9kZSBvZiAobm9kZXMgfHwgW10pKSB7XHJcbiAgICAgIGYobm9kZSk7XHJcbiAgICAgIHRoaXMuZm9yRWFjaChmLCBub2RlLmNoaWxkcmVuKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGV4cGFuZCgpIHtcclxuICAgIHRoaXMuZm9yRWFjaCgobik9PiBuLm1pbmltaXplZCA9IGZhbHNlKTtcclxuICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgfVxyXG5cclxuICBtaW5pbWl6ZSgpIHtcclxuICAgIHRoaXMuZm9yRWFjaCgobik9PiBuLm1pbmltaXplZCA9IHRydWUpO1xyXG4gICAgdGhpcy51cGRhdGUoKTtcclxuICB9XHJcblxyXG4gIHJlbmRlck5vZGUobm9kZSkge1xyXG4gICAgcmV0dXJuIFsnPGRpdiBjbGFzcz1cImFyZWFcIj4nLFxyXG4gICAgICBub2RlLmNoaWxkcmVuPyAnPGEgY2xhc3M9XCJjbWQgdG9nbGUnICsgKG5vZGUubWluaW1pemVkPyAnIG1pbmltaXplZCc6ICcnKSArICdcIj48aSBjbGFzcz1cImZhIGZhLWFuZ2xlLXJpZ2h0XCI+PC9pPjwvYT4gJzogJzxpIGNsYXNzPVwid2hpdGUtc3BhY2VcIj48L2k+ICcsXHJcbiAgICAgICc8YSBjbGFzcz1cImNtZFwiIHRpdGxlPVwiJywgbm9kZS50aXRsZSwnXCI+Jywgbm9kZS50aXRsZSwgJzwvYT48L2Rpdj4nLFxyXG4gICAgICBub2RlLm1pbmltaXplZD8gJyc6IHRoaXMucmVuZGVyTm9kZXMobm9kZS5jaGlsZHJlbilcclxuICAgIF0uam9pbignJyk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJOb2Rlcyhub2Rlcykge1xyXG4gICAgbGV0IHJlcyA9IFsnPGRpdiBjbGFzcz1cImJvb2ttYXJrc1wiPiddO1xyXG4gICAgaWYobm9kZXMgJiYgbm9kZXMubGVuZ3RoKSB7XHJcbiAgICAgIHJlcy5wdXNoKCc8dWwgY2xhc3M9XCJsZXZlbC0nLCBub2Rlc1swXS5sZXZlbCwgJ1wiPicpO1xyXG4gICAgICBmb3IobGV0IG5vZGUgb2Ygbm9kZXMpIHtcclxuICAgICAgICByZXMucHVzaChbXHJcbiAgICAgICAgICAnPGxpIGNsYXNzPVwiaXRlbVwiIGRhdGEtaWQ9XCInLCBub2RlLmlkLCdcIj4nLFxyXG4gICAgICAgICAgICB0aGlzLnJlbmRlck5vZGUobm9kZSksXHJcbiAgICAgICAgICAnPC9saT4nXS5qb2luKCcnKSk7XHJcbiAgICAgIH1cclxuICAgICAgcmVzLnB1c2goJzwvdWw+Jyk7XHJcbiAgICB9XHJcbiAgICByZXMucHVzaCgnPC9kaXY+Jyk7XHJcbiAgICByZXR1cm4gcmVzLmpvaW4oJycpO1xyXG4gIH1cclxuXHJcbiAgbWFwTm9kZXMoaXRlbXMsIG1hcD1bXSwgbGV2ZWw9MCkge1xyXG4gICAgbGV0IG5vZGVzID0gbnVsbDtcclxuICAgIGlmKGl0ZW1zICYmIGl0ZW1zLmxlbmd0aCkge1xyXG4gICAgICBub2Rlcz1bXTtcclxuICAgICAgZm9yKGxldCBpdGVtIG9mIGl0ZW1zKSB7XHJcbiAgICAgICAgY29uc3QgaWQgPSBtYXAubGVuZ3RoO1xyXG4gICAgICAgIG1hcC5wdXNoKHVuZGVmaW5lZCk7XHJcbiAgICAgICAgY29uc3Qgbm9kZSA9IHtcclxuICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgdGl0bGU6IHRoaXMuZ2V0VGl0bGUoaXRlbSksXHJcbiAgICAgICAgICBsZXZlbCxcclxuICAgICAgICAgIGl0ZW0sXHJcbiAgICAgICAgICBtaW5pbWl6ZWQ6IHRydWUsXHJcbiAgICAgICAgICBjaGlsZHJlbjogdGhpcy5tYXBOb2Rlcyh0aGlzLmdldEl0ZW1zKGl0ZW0pLCBtYXAsIGxldmVsKzEpXHJcbiAgICAgICAgfTtcclxuICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xyXG4gICAgICAgIG1hcFtpZF0gPSBub2RlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbm9kZXM7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9Cb29rbWFya3MuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGV0ZWN0b3Ige1xyXG5cclxuXHRzdGF0aWMgY2FudmFzID0gISEgd2luZG93LkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuXHJcblx0c3RhdGljIHdlYmdsID0gKGZ1bmN0aW9uKCkge1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0Y29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcblx0XHRcdHJldHVybiAhISAod2luZG93LldlYkdMUmVuZGVyaW5nQ29udGV4dCAmJiAoY2FudmFzLmdldENvbnRleHQoJ3dlYmdsJykgfHwgY2FudmFzLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcpKSk7XHJcblx0XHR9XHJcblx0XHRjYXRjaCAoZSkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblx0fSkoKTtcclxuXHJcblx0c3RhdGljIHdvcmtlcnMgPSAhISB3aW5kb3cuV29ya2VyO1xyXG5cclxuXHRzdGF0aWMgZmlsZWFwaSA9IHdpbmRvdy5GaWxlICYmIHdpbmRvdy5GaWxlUmVhZGVyICYmIHdpbmRvdy5GaWxlTGlzdCAmJiB3aW5kb3cuQmxvYjtcclxuXHJcblx0c3RhdGljIGdldFdlYkdMRXJyb3JNZXNzYWdlKCkge1xyXG5cdFx0Y29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cdFx0ZWxlbWVudC5pZCA9ICd3ZWJnbC1lcnJvci1tZXNzYWdlJztcclxuXHRcdGVsZW1lbnQuc3R5bGUuZm9udEZhbWlseSA9ICdtb25vc3BhY2UnO1xyXG5cdFx0ZWxlbWVudC5zdHlsZS5mb250U2l6ZSA9ICcxM3B4JztcclxuXHRcdGVsZW1lbnQuc3R5bGUuZm9udFdlaWdodCA9ICdub3JtYWwnO1xyXG5cdFx0ZWxlbWVudC5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcclxuXHRcdGVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZCA9ICcjZmZmJztcclxuXHRcdGVsZW1lbnQuc3R5bGUuY29sb3IgPSAnIzAwMCc7XHJcblx0XHRlbGVtZW50LnN0eWxlLnBhZGRpbmcgPSAnMS41ZW0nO1xyXG5cdFx0ZWxlbWVudC5zdHlsZS53aWR0aCA9ICc0MDBweCc7XHJcblx0XHRlbGVtZW50LnN0eWxlLm1hcmdpbiA9ICc1ZW0gYXV0byAwJztcclxuXHJcblx0XHRpZiAoIURldGVjdG9yLndlYmdsKSB7XHJcblx0XHRcdGVsZW1lbnQuaW5uZXJIVE1MID0gd2luZG93LldlYkdMUmVuZGVyaW5nQ29udGV4dCA/IFtcclxuXHRcdFx0XHQnWW91ciBncmFwaGljcyBjYXJkIGRvZXMgbm90IHNlZW0gdG8gc3VwcG9ydCA8YSBocmVmPVwiaHR0cDovL2tocm9ub3Mub3JnL3dlYmdsL3dpa2kvR2V0dGluZ19hX1dlYkdMX0ltcGxlbWVudGF0aW9uXCIgc3R5bGU9XCJjb2xvcjojMDAwXCI+V2ViR0w8L2E+LjxiciAvPicsXHJcblx0XHRcdFx0J0ZpbmQgb3V0IGhvdyB0byBnZXQgaXQgPGEgaHJlZj1cImh0dHA6Ly9nZXQud2ViZ2wub3JnL1wiIHN0eWxlPVwiY29sb3I6IzAwMFwiPmhlcmU8L2E+LidcclxuXHRcdFx0XS5qb2luKCdcXG4nKSA6IFtcclxuXHRcdFx0XHQnWW91ciBicm93c2VyIGRvZXMgbm90IHNlZW0gdG8gc3VwcG9ydCA8YSBocmVmPVwiaHR0cDovL2tocm9ub3Mub3JnL3dlYmdsL3dpa2kvR2V0dGluZ19hX1dlYkdMX0ltcGxlbWVudGF0aW9uXCIgc3R5bGU9XCJjb2xvcjojMDAwXCI+V2ViR0w8L2E+Ljxici8+JyxcclxuXHRcdFx0XHQnRmluZCBvdXQgaG93IHRvIGdldCBpdCA8YSBocmVmPVwiaHR0cDovL2dldC53ZWJnbC5vcmcvXCIgc3R5bGU9XCJjb2xvcjojMDAwXCI+aGVyZTwvYT4uJ1xyXG5cdFx0XHRdLmpvaW4oJ1xcbicpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGVsZW1lbnQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgYWRkR2V0V2ViR0xNZXNzYWdlKHBhcmFtZXRlcnMpIHtcclxuXHRcdGxldCBwYXJlbnQsIGlkLCBlbGVtZW50O1xyXG5cdFx0cGFyYW1ldGVycyA9IHBhcmFtZXRlcnMgfHwge307XHJcblxyXG5cdFx0cGFyZW50ID0gcGFyYW1ldGVycy5wYXJlbnQgfHwgJChkb2N1bWVudC5ib2R5KTtcclxuXHRcdGlkID0gcGFyYW1ldGVycy5pZCB8fCAnb2xkaWUnO1xyXG5cclxuXHRcdGVsZW1lbnQgPSBEZXRlY3Rvci5nZXRXZWJHTEVycm9yTWVzc2FnZSgpO1xyXG5cdFx0Ly9lbGVtZW50LmlkID0gaWQ7XHJcblxyXG5cdFx0cGFyZW50LmFwcGVuZChlbGVtZW50KTtcclxuXHR9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0RldGVjdG9yLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRG9jTW91c2VTaW11bGF0b3Ige1xyXG5cclxuICBzdGF0aWMgSE9WRVIgPSAnU0lNVUxBVEVELUhPVkVSJztcclxuICBzdGF0aWMgQUNUSVZFID0gJ1NJTVVMQVRFRC1BQ1RJVkUnO1xyXG5cclxuICBjb25zdHJ1Y3RvcihqRnJhbWUsIGVsZW1lbnQsIGJFbGVtZW50PWRvY3VtZW50LmJvZHkpIHtcclxuICAgIHRoaXMuakZyYW1lID0gakZyYW1lO1xyXG4gICAgdGhpcy53bmQgPSBqRnJhbWVbMF0uY29udGVudFdpbmRvdztcclxuICAgIHRoaXMuZG9jID0gakZyYW1lWzBdLmNvbnRlbnREb2N1bWVudDtcclxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQgfHwgZG9jLmJvZHk7XHJcbiAgICB0aGlzLmJFbGVtZW50ID0gYkVsZW1lbnQ7XHJcbiAgICB0aGlzLnJlc2VuZFByb3BlcnRpZXMgPSB0aGlzLmdldERlZmF1bHRSZXNlbmRQcm9wZXJ0aWVzKCk7XHJcbiAgICB0aGlzLnVuZGVmaW5lZFByb3BlcnRpZXMgPSB0aGlzLmdldERlZmF1bHRVbmRlZmluZWRQcm9wZXJ0aWVzKCk7XHJcbiAgICB0aGlzLmN1cnNvcnMgPSBbXTtcclxuICAgIHRoaXMub25Eb2NDaGFuZ2VDbGJzID0gW107XHJcbiAgICBjb25zdCB0ZXJtcyA9IFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBmaW5kOiAnOmhvdmVyJyxcclxuICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2U6ICcuJytEb2NNb3VzZVNpbXVsYXRvci5IT1ZFUlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgZmluZDogJzphY3RpdmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZTogJy4nK0RvY01vdXNlU2ltdWxhdG9yLkFDVElWRVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgXTtcclxuICAgIGxldCBzdHlsZSA9IFsnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPiddO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRvYy5zdHlsZVNoZWV0cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICBsZXQgc3MgPSB0aGlzLmRvYy5zdHlsZVNoZWV0c1tpXTtcclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzcy5jc3NSdWxlcy5sZW5ndGg7ICsraikge1xyXG4gICAgICAgIGxldCByID0gc3MuY3NzUnVsZXNbal0sIGNzc1RleHQ7XHJcbiAgICAgICAgZm9yKGxldCB0ZXJtIG9mIHRlcm1zKSB7XHJcbiAgICAgICAgICBpZiAofnIuc2VsZWN0b3JUZXh0LmluZGV4T2YodGVybS5maW5kKSkge1xyXG4gICAgICAgICAgICBjc3NUZXh0ID0gKGNzc1RleHQgfHwgci5jc3NUZXh0KS5yZXBsYWNlKG5ldyBSZWdFeHAodGVybS5maW5kLCAnZycpLCB0ZXJtLnJlcGxhY2UpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZihjc3NUZXh0KSB7XHJcbiAgICAgICAgICBzdHlsZS5wdXNoKGNzc1RleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3R5bGUucHVzaCgnPC9zdHlsZT4nKTtcclxuICAgICQodGhpcy5kb2MuaGVhZCkuYXBwZW5kKCQoc3R5bGUuam9pbignJykpKTtcclxuICB9XHJcblxyXG4gIGNvbnZlcnRDb29yZHMoeCwgeSkge1xyXG4gICAgY29uc3QgakVsZW1lbnQgPSAkKHRoaXMuZWxlbWVudCk7XHJcbiAgICBjb25zdCBvZmZzZXQgPSBqRWxlbWVudC5vZmZzZXQoKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHg6IG9mZnNldC5sZWZ0K2pFbGVtZW50LndpZHRoKCkqeCxcclxuICAgICAgeTogb2Zmc2V0LnRvcCtqRWxlbWVudC5oZWlnaHQoKSooMS15KVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHRyaWdnZXJFdmVudChlbGVtZW50LCBlLCBwLCB0eXBlLCBhZHZhbmNlZFByb3BzKSB7XHJcbiAgICBjb25zdCBwcm9wcyA9IHt9O1xyXG4gICAgZm9yKGxldCBuIG9mIHRoaXMucmVzZW5kUHJvcGVydGllcykge1xyXG4gICAgICBwcm9wc1tuXSA9IGVbbl07XHJcbiAgICB9XHJcbiAgICBmb3IobGV0IG4gb2YgdGhpcy51bmRlZmluZWRQcm9wZXJ0aWVzKSB7XHJcbiAgICAgIHByb3BzW25dID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgZm9yKGxldCBuIGluIGFkdmFuY2VkUHJvcHMpIHtcclxuICAgICAgaWYoYWR2YW5jZWRQcm9wcy5oYXNPd25Qcm9wZXJ0eShuKSkge1xyXG4gICAgICAgIHByb3BzW25dID0gYWR2YW5jZWRQcm9wc1tuXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJvcHMudmlldyA9IHRoaXMud25kO1xyXG4gICAgcHJvcHMucGFnZVggPSBwLng7XHJcbiAgICBwcm9wcy5wYWdlWSA9IHAueTtcclxuICAgIGNvbnN0IGpFID0gJC5FdmVudCh0eXBlLCBwcm9wcyk7XHJcbiAgICBqRS50aW1lU3RhbXAgPSBlLnRpbWVTdGFtcDtcclxuICAgICQoZWxlbWVudCkudHJpZ2dlcihqRSk7XHJcbiAgfVxyXG5cclxuICBhZGRDbGFzcyhlbGVtZW50LCBuYW1lKSB7XHJcbiAgICAkKGVsZW1lbnQpLmFkZENsYXNzKG5hbWUpO1xyXG4gICAgY29uc3Qgc3R5bGUgPSB0aGlzLnduZC5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xyXG4gICAgdGhpcy5jdXJzb3JzLnB1c2goJCh0aGlzLmJFbGVtZW50KS5jc3MoJ2N1cnNvcicpKTtcclxuICAgICQodGhpcy5iRWxlbWVudCkuY3NzKCdjdXJzb3InLCBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdjdXJzb3InKSk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVDbGFzcyhlbGVtZW50LCBuYW1lKSB7XHJcbiAgICAkKGVsZW1lbnQpLnJlbW92ZUNsYXNzKG5hbWUpO1xyXG4gICAgJCh0aGlzLmJFbGVtZW50KS5jc3MoJ2N1cnNvcicsIHRoaXMuY3Vyc29ycy5wb3AoKSk7XHJcbiAgfVxyXG5cclxuICBlbnRlckVsZW1lbnQoZWxlbWVudCkge1xyXG4gICAgdGhpcy5hZGRDbGFzcyhlbGVtZW50LCBEb2NNb3VzZVNpbXVsYXRvci5IT1ZFUik7XHJcbiAgfVxyXG5cclxuICBsZWF2ZUVsZW1lbnQoZWxlbWVudCkge1xyXG4gICAgdGhpcy5yZW1vdmVDbGFzcyhlbGVtZW50LCBEb2NNb3VzZVNpbXVsYXRvci5IT1ZFUik7XHJcbiAgfVxyXG5cclxuICBhY3RpdmF0ZUVsZW1lbnQoZWxlbWVudCkge1xyXG4gICAgdGhpcy5hZGRDbGFzcyhlbGVtZW50LCBEb2NNb3VzZVNpbXVsYXRvci5BQ1RJVkUpO1xyXG4gIH1cclxuXHJcbiAgZGVhY3RpdmF0ZUVsZW1lbnQoZWxlbWVudCkge1xyXG4gICAgdGhpcy5yZW1vdmVDbGFzcyhlbGVtZW50LCBEb2NNb3VzZVNpbXVsYXRvci5BQ1RJVkUpO1xyXG4gIH1cclxuXHJcbiAgYWRkRG9jQ2hhbmdlQ2xiKGNsYikge1xyXG4gICAgdGhpcy5vbkRvY0NoYW5nZUNsYnMucHVzaChjbGIpO1xyXG4gIH1cclxuXHJcbiAgbm90aWZ5KCkge1xyXG4gICAgZm9yKGxldCBjbGIgb2YgdGhpcy5vbkRvY0NoYW5nZUNsYnMpIHtcclxuICAgICAgY2xiKHRoaXMud25kLCB0aGlzLmRvYyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBlbGVtZW50RnJvbVBvaW50KHApIHtcclxuICAgIGxldCBub2RlID0gdGhpcy5kb2MuYm9keSwgbmV4dCA9IHRydWU7XHJcbiAgICB3aGlsZShuZXh0KSB7XHJcbiAgICAgIG5leHQgPSBmYWxzZTtcclxuICAgICAgZm9yKGxldCBpPTA7IGk8bm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgY29uc3QgY2hpbGQgPSBub2RlLmNoaWxkTm9kZXNbaV07XHJcbiAgICAgICAgaWYoY2hpbGQgaW5zdGFuY2VvZiB0aGlzLnduZC5FbGVtZW50KSB7XHJcbiAgICAgICAgICBjb25zdCBqQyA9ICQoY2hpbGQpLCBvZmZzZXQgPSBqQy5vZmZzZXQoKSwgaGVpZ2h0ID0gakMuaGVpZ2h0KCksIHdpZHRoID0gakMud2lkdGgoKTtcclxuICAgICAgICAgIGlmKHAueD5vZmZzZXQubGVmdCAmJiBwLng8b2Zmc2V0LmxlZnQrd2lkdGggJiYgcC55Pm9mZnNldC50b3AgJiYgcC55PG9mZnNldC50b3AraGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIG5vZGUgPSBjaGlsZDtcclxuICAgICAgICAgICAgbmV4dCA9IHRydWU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vZGU7XHJcbiAgfVxyXG5cclxuICBnZXRFbGVtZW50KHApIHtcclxuICAgIGNvbnN0IG9mZjAgPSB0aGlzLmpGcmFtZS5vZmZzZXQoKTtcclxuICAgIHRoaXMuakZyYW1lLm9mZnNldCh7bGVmdDogMC41KndpbmRvdy5pbm5lcldpZHRoLXAueCwgdG9wOiAwLjUqd2luZG93LmlubmVySGVpZ2h0LXAueX0pO1xyXG4gICAgbGV0IGVsZW1lbnQgPSB0aGlzLmRvYy5lbGVtZW50RnJvbVBvaW50KHAueCwgcC55KTtcclxuICAgIGlmKCFlbGVtZW50KSB7IC8vIGl0IGlzbid0IGEgam9rZSBpdCdzIElFXHJcbiAgICAgIGVsZW1lbnQgPSB0aGlzLmRvYy5lbGVtZW50RnJvbVBvaW50KHAueCwgcC55KTtcclxuICAgIH1cclxuICAgIHRoaXMuakZyYW1lLm9mZnNldChvZmYwKTtcclxuICAgIHJldHVybiBlbGVtZW50PyBlbGVtZW50OiB0aGlzLmVsZW1lbnRGcm9tUG9pbnQocCk7XHJcbiAgfVxyXG5cclxuICBzaW11bGF0ZShlLCBkb2MsIHgsIHkpIHtcclxuICAgIGNvbnN0IHAgPSB0aGlzLmNvbnZlcnRDb29yZHMoeCwgeSksXHJcbiAgICAgICAgICBlbGVtZW50ID0gZG9jPT09dGhpcy5kb2M/IHRoaXMuZ2V0RWxlbWVudChwKTogdW5kZWZpbmVkO1xyXG4gICAgbGV0IHRyaWdnZXIgPSBlbGVtZW50ICE9PSB1bmRlZmluZWQsIG5vdGlmeSA9IGZhbHNlO1xyXG5cclxuICAgIHN3aXRjaChlLnR5cGUpIHtcclxuICAgICAgY2FzZSAnbW91c2Vkb3duJzoge1xyXG4gICAgICAgIGlmKHRoaXMuY2FwRWxlbWVudCkge1xyXG4gICAgICAgICAgdGhpcy5kZWFjdGl2YXRlRWxlbWVudCh0aGlzLmNhcEVsZW1lbnQpO1xyXG4gICAgICAgICAgbm90aWZ5ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jYXBFbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICBpZih0aGlzLmNhcEVsZW1lbnQpIHtcclxuICAgICAgICAgIHRoaXMuYWN0aXZhdGVFbGVtZW50KHRoaXMuY2FwRWxlbWVudCk7XHJcbiAgICAgICAgICBub3RpZnkgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdtb3VzZXVwJzoge1xyXG4gICAgICAgIGlmKHRoaXMuY2FwRWxlbWVudCkge1xyXG4gICAgICAgICAgdGhpcy5kZWFjdGl2YXRlRWxlbWVudCh0aGlzLmNhcEVsZW1lbnQpO1xyXG4gICAgICAgICAgbm90aWZ5ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50aW1lU3RhbXAgPSBlLnRpbWVTdGFtcDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdjbGljayc6IHtcclxuICAgICAgICB0cmlnZ2VyID0gZWxlbWVudCAmJiB0aGlzLmNhcEVsZW1lbnQgPT09IGVsZW1lbnQ7Ly8gJiYgZS50aW1lU3RhbXAgPT09IHRoaXMudGltZVN0YW1wO1xyXG4gICAgICAgIHRoaXMuY2FwRWxlbWVudCA9IHVuZGVmaW5lZDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdtb3VzZWVudGVyJzpcclxuICAgICAgY2FzZSAnbW91c2VvdmVyJzpcclxuICAgICAgY2FzZSAnbW91c2Vtb3ZlJzoge1xyXG4gICAgICAgIGxldCBsZWF2ZWQgPSBudWxsO1xyXG4gICAgICAgIGlmKHRoaXMuaG92RWxlbWVudCAhPT0gZWxlbWVudCAmJiB0aGlzLmhvdkVsZW1lbnQpIHtcclxuICAgICAgICAgIHRoaXMudHJpZ2dlckV2ZW50KHRoaXMuaG92RWxlbWVudCwgZSwgcCwgJ21vdXNlb3V0Jywge3JlbGF0ZWRUYXJnZXQ6IGVsZW1lbnQ/IGVsZW1lbnQ6IG51bGx9KTtcclxuICAgICAgICAgIHRoaXMubGVhdmVFbGVtZW50KHRoaXMuaG92RWxlbWVudCk7XHJcbiAgICAgICAgICBsZWF2ZWQgPSB0aGlzLmhvdkVsZW1lbnQ7XHJcbiAgICAgICAgICB0aGlzLmhvdkVsZW1lbnQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICBub3RpZnkgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZighdGhpcy5ob3ZFbGVtZW50ICYmIGVsZW1lbnQpIHtcclxuICAgICAgICAgIHRoaXMudHJpZ2dlckV2ZW50KGVsZW1lbnQsIGUsIHAsICdtb3VzZW92ZXInLCB7cmVsYXRlZFRhcmdldDogbGVhdmVkfSk7XHJcbiAgICAgICAgICB0aGlzLmVudGVyRWxlbWVudChlbGVtZW50KTtcclxuICAgICAgICAgIHRoaXMuaG92RWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICBub3RpZnkgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0cmlnZ2VyID0gZWxlbWVudCAmJiBlLnR5cGUgPT09ICdtb3VzZW1vdmUnO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ21vdXNlbGVhdmUnOlxyXG4gICAgICBjYXNlICdtb3VzZW91dCc6IHtcclxuICAgICAgICBpZih0aGlzLmhvdkVsZW1lbnQpIHtcclxuICAgICAgICAgIHRoaXMudHJpZ2dlckV2ZW50KHRoaXMuaG92RWxlbWVudCwgZSwgcCwgJ21vdXNlb3V0Jywge3JlbGF0ZWRUYXJnZXQ6IGUucmVsYXRlZFRhcmdldH0pO1xyXG4gICAgICAgICAgdGhpcy5sZWF2ZUVsZW1lbnQodGhpcy5ob3ZFbGVtZW50KTtcclxuICAgICAgICAgIHRoaXMuaG92RWxlbWVudCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgIG5vdGlmeSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyaWdnZXIgPSBmYWxzZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYodHJpZ2dlcikge1xyXG4gICAgICB0aGlzLnRyaWdnZXJFdmVudChlbGVtZW50LCBlLCBwLCBlLnR5cGUpO1xyXG4gICAgfVxyXG4gICAgaWYobm90aWZ5KSB7XHJcbiAgICAgIHRoaXMubm90aWZ5KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXREZWZhdWx0VW5kZWZpbmVkUHJvcGVydGllcygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgICdjbGllbnRYJyxcclxuICAgICAgJ2NsaWVudFknLFxyXG4gICAgICAnb2Zmc2V0WCcsXHJcbiAgICAgICdvZmZzZXRZJyxcclxuICAgICAgJ3NjcmVlblgnLFxyXG4gICAgICAnc2NyZWVuWSdcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBnZXREZWZhdWx0UmVzZW5kUHJvcGVydGllcygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgICdhbHRLZXknLFxyXG4gICAgICAnYnViYmxlcycsXHJcbiAgICAgICdidXR0b24nLFxyXG4gICAgICAnYnV0dG9ucycsXHJcbiAgICAgICdjYW5jZWxhYmxlJyxcclxuICAgICAgJ2NoYW5nZWRUb3VjaGVzJyxcclxuICAgICAgJ2NoYXInLFxyXG4gICAgICAnY2hhckNvZGUnLFxyXG4gICAgICAnY3RybEtleScsXHJcbiAgICAgICdkYXRhJyxcclxuICAgICAgJ2RldGFpbCcsXHJcbiAgICAgICdldmVudFBoYXNlJyxcclxuICAgICAgJ2lzRGVmYXVsdFByZXZlbnRlZCcsXHJcbiAgICAgICdrZXknLFxyXG4gICAgICAna2V5Q29kZScsXHJcbiAgICAgICdtZXRhS2V5JyxcclxuICAgICAgJ3BvaW50ZXJJZCcsXHJcbiAgICAgICdwb2ludGVyVHlwZScsXHJcbiAgICAgICdzaGlmdEtleScsXHJcbiAgICAgICd0YXJnZXRUb3VjaGVzJyxcclxuICAgICAgJ3RvdWNoZXMnLFxyXG4gICAgICAnd2hpY2gnXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbi8qXHJcbmFsdEtleSxcclxuYnViYmxlcyxcclxuYnV0dG9uLFxyXG5idXR0b25zLFxyXG5jYW5jZWxhYmxlLFxyXG5jaGFuZ2VkVG91Y2hlcyxcclxuY2hhcixcclxuY2hhckNvZGUsXHJcbmNsaWVudFgsXHJcbmNsaWVudFksXHJcbmN0cmxLZXksXHJcbmN1cnJlbnRUYXJnZXQsXHJcbmRhdGEsXHJcbmRlbGVnYXRlVGFyZ2V0LFxyXG5kZXRhaWwsXHJcbmV2ZW50UGhhc2UsXHJcbmhhbmRsZU9iaixcclxuaXNEZWZhdWx0UHJldmVudGVkLFxyXG5rZXksXHJcbmtleUNvZGUsXHJcbm1ldGFLZXksXHJcbm9mZnNldFgsXHJcbm9mZnNldFksXHJcbm9yaWdpbmFsRXZlbnQsXHJcbnBhZ2VYLFxyXG5wYWdlWSxcclxucG9pbnRlcklkLFxyXG5wb2ludGVyVHlwZSxcclxucmVsYXRlZFRhcmdldCxcclxuc2NyZWVuWCxcclxuc2NyZWVuWSxcclxuc2hpZnRLZXksXHJcbnRhcmdldCxcclxudGFyZ2V0VG91Y2hlcyxcclxudGltZVN0YW1wLFxyXG50b0VsZW1lbnQsXHJcbnRvdWNoZXMsXHJcbnR5cGUsXHJcbnZpZXcsXHJcbndoaWNoXHJcbiovXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0RvY01vdXNlU2ltdWxhdG9yLmpzIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRG9tMkltYWdlIHtcblxuICBjb25zdHJ1Y3Rvcih3bmQsIGRvYywgY2FjaGUpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICB0aGlzLndpbmRvdyA9IHduZDtcbiAgICB0aGlzLmRvY3VtZW50ID0gZG9jO1xuICAgIHRoaXMuY2FjaGUgPSBjYWNoZTtcblxuICAgIGNvbnN0IHV0aWwgPSBuZXdVdGlsKCk7XG4gICAgY29uc3QgaW5saW5lciA9IG5ld0lubGluZXIoKTtcbiAgICBjb25zdCBmb250RmFjZXMgPSBuZXdGb250RmFjZXMoKTtcbiAgICBjb25zdCBpbWFnZXMgPSBuZXdJbWFnZXMoKTtcblxuICAgIHRoaXMudG9TdmcgPSB0b1N2ZztcbiAgICB0aGlzLnRvUG5nID0gdG9Qbmc7XG4gICAgdGhpcy50b0pwZWcgPSB0b0pwZWc7XG4gICAgdGhpcy50b0Jsb2IgPSB0b0Jsb2I7XG4gICAgdGhpcy50b1BpeGVsRGF0YSA9IHRvUGl4ZWxEYXRhO1xuICAgIHRoaXMuaW1wbCA9IHtcbiAgICAgICAgICAgICAgICAgIGZvbnRGYWNlczogZm9udEZhY2VzLFxuICAgICAgICAgICAgICAgICAgaW1hZ2VzOiBpbWFnZXMsXG4gICAgICAgICAgICAgICAgICB1dGlsOiB1dGlsLFxuICAgICAgICAgICAgICAgICAgaW5saW5lcjogaW5saW5lclxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgRE9NIE5vZGUgb2JqZWN0IHRvIHJlbmRlclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUmVuZGVyaW5nIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLmZpbHRlciAtIFNob3VsZCByZXR1cm4gdHJ1ZSBpZiBwYXNzZWQgbm9kZSBzaG91bGQgYmUgaW5jbHVkZWQgaW4gdGhlIG91dHB1dFxuICAgICAqICAgICAgICAgIChleGNsdWRpbmcgbm9kZSBtZWFucyBleGNsdWRpbmcgaXQncyBjaGlsZHJlbiBhcyB3ZWxsKS4gTm90IGNhbGxlZCBvbiB0aGUgcm9vdCBub2RlLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLmJnY29sb3IgLSBjb2xvciBmb3IgdGhlIGJhY2tncm91bmQsIGFueSB2YWxpZCBDU1MgY29sb3IgdmFsdWUuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMud2lkdGggLSB3aWR0aCB0byBiZSBhcHBsaWVkIHRvIG5vZGUgYmVmb3JlIHJlbmRlcmluZy5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5oZWlnaHQgLSBoZWlnaHQgdG8gYmUgYXBwbGllZCB0byBub2RlIGJlZm9yZSByZW5kZXJpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuc3R5bGUgLSBhbiBvYmplY3Qgd2hvc2UgcHJvcGVydGllcyB0byBiZSBjb3BpZWQgdG8gbm9kZSdzIHN0eWxlIGJlZm9yZSByZW5kZXJpbmcuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMucXVhbGl0eSAtIGEgTnVtYmVyIGJldHdlZW4gMCBhbmQgMSBpbmRpY2F0aW5nIGltYWdlIHF1YWxpdHkgKGFwcGxpY2FibGUgdG8gSlBFRyBvbmx5KSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0cyB0byAxLjAuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSBBIHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2l0aCBhIFNWRyBpbWFnZSBkYXRhIFVSTFxuICAgICAqICovXG5cbiAgICBmdW5jdGlvbiB0b1N2Zyhub2RlLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5vZGUpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZU5vZGUobm9kZSwgb3B0aW9ucy5maWx0ZXIsIHRydWUpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKGVtYmVkRm9udHMpXG4gICAgICAgICAgICAudGhlbihpbmxpbmVJbWFnZXMpXG4gICAgICAgICAgICAudGhlbihhcHBseU9wdGlvbnMpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFrZVN2Z0RhdGFVcmkoY2xvbmUsXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMud2lkdGggfHwgdXRpbC53aWR0aChub2RlKSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5oZWlnaHQgfHwgdXRpbC5oZWlnaHQobm9kZSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gYXBwbHlPcHRpb25zKGNsb25lKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5iZ2NvbG9yKSBjbG9uZS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBvcHRpb25zLmJnY29sb3I7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLndpZHRoKSBjbG9uZS5zdHlsZS53aWR0aCA9IG9wdGlvbnMud2lkdGggKyAncHgnO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGVpZ2h0KSBjbG9uZS5zdHlsZS5oZWlnaHQgPSBvcHRpb25zLmhlaWdodCArICdweCc7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnN0eWxlKVxuICAgICAgICAgICAgICAgIHNlbGYud2luZG93Lk9iamVjdC5rZXlzKG9wdGlvbnMuc3R5bGUpLmZvckVhY2goZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lLnN0eWxlW3Byb3BlcnR5XSA9IG9wdGlvbnMuc3R5bGVbcHJvcGVydHldO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgRE9NIE5vZGUgb2JqZWN0IHRvIHJlbmRlclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUmVuZGVyaW5nIG9wdGlvbnMsIEBzZWUge0BsaW5rIHRvU3ZnfVxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gQSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdpdGggYSBVaW50OEFycmF5IGNvbnRhaW5pbmcgUkdCQSBwaXhlbCBkYXRhLlxuICAgICAqICovXG4gICAgZnVuY3Rpb24gdG9QaXhlbERhdGEobm9kZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZHJhdyhub2RlLCBvcHRpb25zIHx8IHt9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGNhbnZhcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKS5nZXRJbWFnZURhdGEoXG4gICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIHV0aWwud2lkdGgobm9kZSksXG4gICAgICAgICAgICAgICAgICAgIHV0aWwuaGVpZ2h0KG5vZGUpXG4gICAgICAgICAgICAgICAgKS5kYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIERPTSBOb2RlIG9iamVjdCB0byByZW5kZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFJlbmRlcmluZyBvcHRpb25zLCBAc2VlIHtAbGluayB0b1N2Z31cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIEEgcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aXRoIGEgUE5HIGltYWdlIGRhdGEgVVJMXG4gICAgICogKi9cbiAgICBmdW5jdGlvbiB0b1BuZyhub2RlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBkcmF3KG5vZGUsIG9wdGlvbnMgfHwge30pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY2FudmFzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbnZhcy50b0RhdGFVUkwoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBET00gTm9kZSBvYmplY3QgdG8gcmVuZGVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBSZW5kZXJpbmcgb3B0aW9ucywgQHNlZSB7QGxpbmsgdG9Tdmd9XG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSBBIHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2l0aCBhIEpQRUcgaW1hZ2UgZGF0YSBVUkxcbiAgICAgKiAqL1xuICAgIGZ1bmN0aW9uIHRvSnBlZyhub2RlLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICByZXR1cm4gZHJhdyhub2RlLCBvcHRpb25zKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGNhbnZhcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYW52YXMudG9EYXRhVVJMKCdpbWFnZS9qcGVnJywgb3B0aW9ucy5xdWFsaXR5IHx8IDEuMCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgRE9NIE5vZGUgb2JqZWN0IHRvIHJlbmRlclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUmVuZGVyaW5nIG9wdGlvbnMsIEBzZWUge0BsaW5rIHRvU3ZnfVxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gQSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdpdGggYSBQTkcgaW1hZ2UgYmxvYlxuICAgICAqICovXG4gICAgZnVuY3Rpb24gdG9CbG9iKG5vZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGRyYXcobm9kZSwgb3B0aW9ucyB8fCB7fSlcbiAgICAgICAgICAgIC50aGVuKHV0aWwuY2FudmFzVG9CbG9iKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkcmF3KGRvbU5vZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRvU3ZnKGRvbU5vZGUsIG9wdGlvbnMpXG4gICAgICAgICAgICAudGhlbih1dGlsLm1ha2VJbWFnZSlcbiAgICAgICAgICAgIC50aGVuKHV0aWwuZGVsYXkoMTAwKSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChpbWFnZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhbnZhcyA9IG5ld0NhbnZhcyhkb21Ob2RlKTtcbiAgICAgICAgICAgICAgICBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKS5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDApO1xuICAgICAgICAgICAgICAgIHJldHVybiBjYW52YXM7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiBuZXdDYW52YXMoZG9tTm9kZSkge1xuICAgICAgICAgICAgY29uc3QgY2FudmFzID0gc2VsZi5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IG9wdGlvbnMud2lkdGggfHwgdXRpbC53aWR0aChkb21Ob2RlKTtcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBvcHRpb25zLmhlaWdodCB8fCB1dGlsLmhlaWdodChkb21Ob2RlKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYmdjb2xvcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJnY29sb3I7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBjYW52YXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9uZU5vZGUobm9kZSwgZmlsdGVyLCByb290KSB7XG4gICAgICAgIGlmICghcm9vdCAmJiBmaWx0ZXIgJiYgIWZpbHRlcihub2RlKSkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobm9kZSlcbiAgICAgICAgICAgIC50aGVuKG1ha2VOb2RlQ29weSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZUNoaWxkcmVuKG5vZGUsIGNsb25lLCBmaWx0ZXIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZXNzQ2xvbmUobm9kZSwgY2xvbmUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gbWFrZU5vZGVDb3B5KG5vZGUpIHtcbiAgICAgICAgICAgIGlmICh1dGlsLmlzQ2FudmFzKG5vZGUpKSByZXR1cm4gdXRpbC5tYWtlSW1hZ2Uobm9kZS50b0RhdGFVUkwoKSk7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2xvbmVDaGlsZHJlbihvcmlnaW5hbCwgY2xvbmUsIGZpbHRlcikge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBvcmlnaW5hbC5jaGlsZE5vZGVzO1xuICAgICAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjbG9uZSk7XG5cbiAgICAgICAgICAgIHJldHVybiBjbG9uZUNoaWxkcmVuSW5PcmRlcihjbG9uZSwgdXRpbC5hc0FycmF5KGNoaWxkcmVuKSwgZmlsdGVyKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBjbG9uZUNoaWxkcmVuSW5PcmRlcihwYXJlbnQsIGNoaWxkcmVuLCBmaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICBsZXQgZG9uZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUgPSBkb25lXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lTm9kZShjaGlsZCwgZmlsdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY2hpbGRDbG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZENsb25lKSBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGRDbG9uZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHByb2Nlc3NDbG9uZShvcmlnaW5hbCwgY2xvbmUpIHtcbiAgICAgICAgICAgIGlmICghdXRpbC5pc0VsZW1lbnQoY2xvbmUpKSByZXR1cm4gY2xvbmU7XG5cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICAgICAgICAgIC50aGVuKGNsb25lU3R5bGUpXG4gICAgICAgICAgICAgICAgLnRoZW4oY2xvbmVQc2V1ZG9FbGVtZW50cylcbiAgICAgICAgICAgICAgICAudGhlbihjb3B5VXNlcklucHV0KVxuICAgICAgICAgICAgICAgIC50aGVuKGZpeFN2ZylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gY2xvbmVTdHlsZSgpIHtcbiAgICAgICAgICAgICAgICBjb3B5U3R5bGUoc2VsZi53aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShvcmlnaW5hbCksIGNsb25lLnN0eWxlKTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNvcHlTdHlsZShzb3VyY2UsIHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlLmNzc1RleHQpIHRhcmdldC5jc3NUZXh0ID0gc291cmNlLmNzc1RleHQ7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgY29weVByb3BlcnRpZXMoc291cmNlLCB0YXJnZXQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNvcHlQcm9wZXJ0aWVzKHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmFzQXJyYXkoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnNldFByb3BlcnR5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLmdldFByb3BlcnR5UHJpb3JpdHkobmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNsb25lUHNldWRvRWxlbWVudHMoKSB7XG4gICAgICAgICAgICAgICAgWyc6YmVmb3JlJywgJzphZnRlciddLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmVQc2V1ZG9FbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY2xvbmVQc2V1ZG9FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBzZWxmLndpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG9yaWdpbmFsLCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2NvbnRlbnQnKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudCA9PT0gJycgfHwgY29udGVudCA9PT0gJ25vbmUnKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gdXRpbC51aWQoKTtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuY2xhc3NOYW1lID0gY2xvbmUuY2xhc3NOYW1lICsgJyAnICsgY2xhc3NOYW1lO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHlsZUVsZW1lbnQgPSBzZWxmLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChmb3JtYXRQc2V1ZG9FbGVtZW50U3R5bGUoY2xhc3NOYW1lLCBlbGVtZW50LCBzdHlsZSkpO1xuICAgICAgICAgICAgICAgICAgICBjbG9uZS5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZvcm1hdFBzZXVkb0VsZW1lbnRTdHlsZShjbGFzc05hbWUsIGVsZW1lbnQsIHN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RvciA9ICcuJyArIGNsYXNzTmFtZSArICc6JyArIGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjc3NUZXh0ID0gc3R5bGUuY3NzVGV4dCA/IGZvcm1hdENzc1RleHQoc3R5bGUpIDogZm9ybWF0Q3NzUHJvcGVydGllcyhzdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzZWxlY3RvciArICd7JyArIGNzc1RleHQgKyAnfScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmb3JtYXRDc3NUZXh0KHN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2NvbnRlbnQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3R5bGUuY3NzVGV4dCArICcgY29udGVudDogJyArIGNvbnRlbnQgKyAnOyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZvcm1hdENzc1Byb3BlcnRpZXMoc3R5bGUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1dGlsLmFzQXJyYXkoc3R5bGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZm9ybWF0UHJvcGVydHkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKCc7ICcpICsgJzsnO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkobmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmFtZSArICc6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc3R5bGUuZ2V0UHJvcGVydHlQcmlvcml0eShuYW1lKSA/ICcgIWltcG9ydGFudCcgOiAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjb3B5VXNlcklucHV0KCkge1xuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzVGV4dEFyZWEob3JpZ2luYWwpKSBjbG9uZS5pbm5lckhUTUwgPSBvcmlnaW5hbC52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0lucHV0KG9yaWdpbmFsKSkgY2xvbmUuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgb3JpZ2luYWwudmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBmaXhTdmcoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzU1ZHKGNsb25lKSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNsb25lLnNldEF0dHJpYnV0ZSgneG1sbnMnLCAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnKTtcblxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc1NWR1JlY3QoY2xvbmUpKSByZXR1cm47XG4gICAgICAgICAgICAgICAgWyd3aWR0aCcsICdoZWlnaHQnXS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjbG9uZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIGNsb25lLnN0eWxlLnNldFByb3BlcnR5KGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW1iZWRGb250cyhub2RlKSB7XG4gICAgICAgIHJldHVybiBmb250RmFjZXMucmVzb2x2ZUFsbCgpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY3NzVGV4dCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlTm9kZSA9IHNlbGYuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKHN0eWxlTm9kZSk7XG4gICAgICAgICAgICAgICAgc3R5bGVOb2RlLmFwcGVuZENoaWxkKHNlbGYuZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzVGV4dCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5saW5lSW1hZ2VzKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGltYWdlcy5pbmxpbmVBbGwobm9kZSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VTdmdEYXRhVXJpKG5vZGUsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShub2RlKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgneG1sbnMnLCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgc2VsZi53aW5kb3cuWE1MU2VyaWFsaXplcigpLnNlcmlhbGl6ZVRvU3RyaW5nKG5vZGUpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKHV0aWwuZXNjYXBlWGh0bWwpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoeGh0bWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWydkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGYtOCwnLFxuICAgICAgICAgICAgICAgICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIicsIHdpZHRoLCAnXCIgaGVpZ2h0PVwiJywgaGVpZ2h0LCAnXCI+JyxcbiAgICAgICAgICAgICAgICAgICc8Zm9yZWlnbk9iamVjdCB4PVwiMFwiIHk9XCIwXCIgd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiPicsIHhodG1sLCAnPC9mb3JlaWduT2JqZWN0PicsXG4gICAgICAgICAgICAgICAgJzwvc3ZnPiddLmpvaW4oJycpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmV3VXRpbCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVzY2FwZTogZXNjYXBlLFxuICAgICAgICAgICAgcGFyc2VFeHRlbnNpb246IHBhcnNlRXh0ZW5zaW9uLFxuICAgICAgICAgICAgbWltZVR5cGU6IG1pbWVUeXBlLFxuICAgICAgICAgICAgZGF0YUFzVXJsOiBkYXRhQXNVcmwsXG4gICAgICAgICAgICBpc0RhdGFVcmw6IGlzRGF0YVVybCxcbiAgICAgICAgICAgIGNhbnZhc1RvQmxvYjogY2FudmFzVG9CbG9iLFxuICAgICAgICAgICAgcmVzb2x2ZVVybDogcmVzb2x2ZVVybCxcbiAgICAgICAgICAgIGdldEFuZEVuY29kZTogZ2V0QW5kRW5jb2RlLFxuICAgICAgICAgICAgdWlkOiB1aWQoKSxcbiAgICAgICAgICAgIGRlbGF5OiBkZWxheSxcbiAgICAgICAgICAgIGFzQXJyYXk6IGFzQXJyYXksXG4gICAgICAgICAgICBlc2NhcGVYaHRtbDogZXNjYXBlWGh0bWwsXG4gICAgICAgICAgICBtYWtlSW1hZ2U6IG1ha2VJbWFnZSxcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuXG4gICAgICAgICAgICBpc0VsZW1lbnQsXG4gICAgICAgICAgICBpc0NhbnZhcyxcbiAgICAgICAgICAgIGlzVGV4dEFyZWEsXG4gICAgICAgICAgICBpc0lucHV0LFxuICAgICAgICAgICAgaXNTVkcsXG4gICAgICAgICAgICBpc1NWR1JlY3QsXG4gICAgICAgICAgICBpc0ltYWdlXG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gbWltZXMoKSB7XG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogT25seSBXT0ZGIGFuZCBFT1QgbWltZSB0eXBlcyBmb3IgZm9udHMgYXJlICdyZWFsJ1xuICAgICAgICAgICAgICogc2VlIGh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvbWVkaWEtdHlwZXMvbWVkaWEtdHlwZXMueGh0bWxcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgV09GRiA9ICdhcHBsaWNhdGlvbi9mb250LXdvZmYnO1xuICAgICAgICAgICAgY29uc3QgSlBFRyA9ICdpbWFnZS9qcGVnJztcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAnd29mZic6IFdPRkYsXG4gICAgICAgICAgICAgICAgJ3dvZmYyJzogV09GRixcbiAgICAgICAgICAgICAgICAndHRmJzogJ2FwcGxpY2F0aW9uL2ZvbnQtdHJ1ZXR5cGUnLFxuICAgICAgICAgICAgICAgICdlb3QnOiAnYXBwbGljYXRpb24vdm5kLm1zLWZvbnRvYmplY3QnLFxuICAgICAgICAgICAgICAgICdwbmcnOiAnaW1hZ2UvcG5nJyxcbiAgICAgICAgICAgICAgICAnanBnJzogSlBFRyxcbiAgICAgICAgICAgICAgICAnanBlZyc6IEpQRUcsXG4gICAgICAgICAgICAgICAgJ2dpZic6ICdpbWFnZS9naWYnLFxuICAgICAgICAgICAgICAgICd0aWZmJzogJ2ltYWdlL3RpZmYnLFxuICAgICAgICAgICAgICAgICdzdmcnOiAnaW1hZ2Uvc3ZnK3htbCdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwYXJzZUV4dGVuc2lvbih1cmwpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL1xcLihbXlxcLlxcL10qPykkL2cuZXhlYyh1cmwpO1xuICAgICAgICAgICAgaWYgKG1hdGNoKSByZXR1cm4gbWF0Y2hbMV07XG4gICAgICAgICAgICBlbHNlIHJldHVybiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG1pbWVUeXBlKHVybCkge1xuICAgICAgICAgICAgY29uc3QgZXh0ZW5zaW9uID0gcGFyc2VFeHRlbnNpb24odXJsKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIG1pbWVzKClbZXh0ZW5zaW9uXSB8fCAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzRGF0YVVybCh1cmwpIHtcbiAgICAgICAgICAgIHJldHVybiB1cmwuc2VhcmNoKC9eKGRhdGE6KS8pICE9PSAtMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHRvQmxvYihjYW52YXMpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJpbmFyeVN0cmluZyA9IHNlbGYud2luZG93LmF0b2IoY2FudmFzLnRvRGF0YVVSTCgpLnNwbGl0KCcsJylbMV0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGJpbmFyeVN0cmluZy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgY29uc3QgYmluYXJ5QXJyYXkgPSBuZXcgc2VsZi53aW5kb3cuVWludDhBcnJheShsZW5ndGgpO1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICAgICAgYmluYXJ5QXJyYXlbaV0gPSBiaW5hcnlTdHJpbmcuY2hhckNvZGVBdChpKTtcblxuICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IHNlbGYud2luZG93LkJsb2IoW2JpbmFyeUFycmF5XSwge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW1hZ2UvcG5nJ1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2FudmFzVG9CbG9iKGNhbnZhcykge1xuICAgICAgICAgICAgaWYgKGNhbnZhcy50b0Jsb2IpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbnZhcy50b0Jsb2IocmVzb2x2ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0b0Jsb2IoY2FudmFzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlc29sdmVVcmwodXJsLCBiYXNlVXJsKSB7XG4gICAgICAgICAgICBjb25zdCBkb2MgPSBzZWxmLmRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgpO1xuICAgICAgICAgICAgY29uc3QgYmFzZSA9IGRvYy5jcmVhdGVFbGVtZW50KCdiYXNlJyk7XG4gICAgICAgICAgICBkb2MuaGVhZC5hcHBlbmRDaGlsZChiYXNlKTtcbiAgICAgICAgICAgIGNvbnN0IGEgPSBkb2MuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgICAgZG9jLmJvZHkuYXBwZW5kQ2hpbGQoYSk7XG4gICAgICAgICAgICBiYXNlLmhyZWYgPSBiYXNlVXJsO1xuICAgICAgICAgICAgYS5ocmVmID0gdXJsO1xuICAgICAgICAgICAgcmV0dXJuIGEuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVpZCgpIHtcbiAgICAgICAgICAgIGxldCBpbmRleCA9IDA7XG5cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd1JyArIGZvdXJSYW5kb21DaGFycygpICsgaW5kZXgrKztcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZvdXJSYW5kb21DaGFycygpIHtcbiAgICAgICAgICAgICAgICAgICAgLyogc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzYyNDg3MjIvMjUxOTM3MyAqL1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCcwMDAwJyArIChzZWxmLndpbmRvdy5NYXRoLnJhbmRvbSgpICogc2VsZi53aW5kb3cuTWF0aC5wb3coMzYsIDQpIDw8IDApLnRvU3RyaW5nKDM2KSkuc2xpY2UoLTQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBtYWtlSW1hZ2UodXJpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGltYWdlID0gbmV3IHNlbGYud2luZG93LkltYWdlKCk7XG4gICAgICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGltYWdlKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGltYWdlLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICAgICAgICAgICAgaW1hZ2Uuc3JjID0gdXJpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRBbmRFbmNvZGUodXJsKSB7XG4gICAgICAgICAgbGV0IGRhdGEgPSBzZWxmLmNhY2hlLmdldCh1cmwpO1xuICAgICAgICAgIGlmKGRhdGEpIHtcbiAgICAgICAgICAgIGlmKGRhdGEuY29udGVudCkge1xuICAgICAgICAgICAgICByZXR1cm4gZGF0YS5jb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSk9PiB7XG4gICAgICAgICAgICAgICAgaWYoZGF0YS5jb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEuY29udGVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZGF0YS5wZW5kaW5ncy5wdXNoKHJlc29sdmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGF0YSA9IHNlbGYuY2FjaGUucHV0KHVybCwge3BlbmRpbmdzOiBbXX0pO1xuXG4gICAgICAgICAgICBjb25zdCBUSU1FT1VUID0gMzAwMDA7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgc2VsZi53aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZG9uZTtcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm9udGltZW91dCA9IHRpbWVvdXQ7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSAnYmxvYic7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC50aW1lb3V0ID0gVElNRU9VVDtcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5zZW5kKCk7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhaWwoJ2Nhbm5vdCBmZXRjaCByZXNvdXJjZTogJyArIHVybCArICcsIHN0YXR1czogJyArIHJlcXVlc3Quc3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgc2VsZi53aW5kb3cuRmlsZVJlYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICBlbmNvZGVyLm9ubG9hZGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuY29udGVudCA9IGVuY29kZXIucmVzdWx0LnNwbGl0KC8sLylbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IHJlc29sdmUgb2YgZGF0YS5wZW5kaW5ncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEuY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnBlbmRpbmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEuY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGVuY29kZXIucmVhZEFzRGF0YVVSTChyZXF1ZXN0LnJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB0aW1lb3V0KCkge1xuICAgICAgICAgICAgICAgICAgICBmYWlsKCd0aW1lb3V0IG9mICcgKyBUSU1FT1VUICsgJ21zIG9jY3VyZWQgd2hpbGUgZmV0Y2hpbmcgcmVzb3VyY2U6ICcgKyB1cmwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZhaWwobWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkYXRhQXNVcmwoY29udGVudCwgdHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIFsnZGF0YTonLHR5cGUsJztiYXNlNjQsJyxjb250ZW50XS5qb2luKCcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvKFsuKis/XiR7fSgpfFxcW1xcXVxcL1xcXFxdKS9nLCAnXFxcXCQxJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkZWxheShtcykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGFyZyk7XG4gICAgICAgICAgICAgICAgICAgIH0sIG1zKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhc0FycmF5KGFycmF5TGlrZSkge1xuICAgICAgICAgICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5TGlrZS5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSBhcnJheS5wdXNoKGFycmF5TGlrZVtpXSk7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBlc2NhcGVYaHRtbChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvKCN8XFxuKS9nLCAoYyk9PiBjPT09JyMnPyAnJTIzJzogJyUwQScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gd2lkdGgobm9kZSkge1xuICAgICAgICAgICAgY29uc3QgbGVmdEJvcmRlciA9IHB4KG5vZGUsICdib3JkZXItbGVmdC13aWR0aCcpO1xuICAgICAgICAgICAgY29uc3QgcmlnaHRCb3JkZXIgPSBweChub2RlLCAnYm9yZGVyLXJpZ2h0LXdpZHRoJyk7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5zY3JvbGxXaWR0aCArIGxlZnRCb3JkZXIgKyByaWdodEJvcmRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhlaWdodChub2RlKSB7XG4gICAgICAgICAgICBjb25zdCB0b3BCb3JkZXIgPSBweChub2RlLCAnYm9yZGVyLXRvcC13aWR0aCcpO1xuICAgICAgICAgICAgY29uc3QgYm90dG9tQm9yZGVyID0gcHgobm9kZSwgJ2JvcmRlci1ib3R0b20td2lkdGgnKTtcbiAgICAgICAgICAgIHJldHVybiBub2RlLnNjcm9sbEhlaWdodCArIHRvcEJvcmRlciArIGJvdHRvbUJvcmRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHB4KG5vZGUsIHN0eWxlUHJvcGVydHkpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gc2VsZi53aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKS5nZXRQcm9wZXJ0eVZhbHVlKHN0eWxlUHJvcGVydHkpO1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUucmVwbGFjZSgncHgnLCAnJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaXNFbGVtZW50KG5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIHNlbGYud2luZG93LkVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc0NhbnZhcyhub2RlKSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBzZWxmLndpbmRvdy5IVE1MQ2FudmFzRWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzVGV4dEFyZWEobm9kZSkge1xuICAgICAgICAgIHJldHVybiBub2RlIGluc3RhbmNlb2Ygc2VsZi53aW5kb3cuSFRNTFRleHRBcmVhRWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzSW5wdXQobm9kZSkge1xuICAgICAgICAgIHJldHVybiBub2RlIGluc3RhbmNlb2Ygc2VsZi53aW5kb3cuSFRNTElucHV0RWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzU1ZHKG5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIHNlbGYud2luZG93LlNWR0VsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc1NWR1JlY3Qobm9kZSkge1xuICAgICAgICAgIHJldHVybiBub2RlIGluc3RhbmNlb2Ygc2VsZi53aW5kb3cuU1ZHUmVjdEVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc0ltYWdlKG5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIHNlbGYud2luZG93LkhUTUxJbWFnZUVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBuZXdJbmxpbmVyKCkge1xuICAgICAgICBjb25zdCBVUkxfUkVHRVggPSAvdXJsXFwoWydcIl0/KFteJ1wiXSs/KVsnXCJdP1xcKS9nO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbmxpbmVBbGw6IGlubGluZUFsbCxcbiAgICAgICAgICAgIHNob3VsZFByb2Nlc3M6IHNob3VsZFByb2Nlc3MsXG4gICAgICAgICAgICBpbXBsOiB7XG4gICAgICAgICAgICAgICAgcmVhZFVybHM6IHJlYWRVcmxzLFxuICAgICAgICAgICAgICAgIGlubGluZTogaW5saW5lXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gc2hvdWxkUHJvY2VzcyhzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcuc2VhcmNoKFVSTF9SRUdFWCkgIT09IC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVhZFVybHMoc3RyaW5nKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIGxldCBtYXRjaDtcbiAgICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBVUkxfUkVHRVguZXhlYyhzdHJpbmcpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG1hdGNoWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuZmlsdGVyKGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIXV0aWwuaXNEYXRhVXJsKHVybCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlubGluZShzdHJpbmcsIHVybCwgYmFzZVVybCwgZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHVybClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiYXNlVXJsID8gdXRpbC5yZXNvbHZlVXJsKHVybCwgYmFzZVVybCkgOiB1cmw7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbihnZXQgfHwgdXRpbC5nZXRBbmRFbmNvZGUpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHV0aWwuZGF0YUFzVXJsKGRhdGEsIHV0aWwubWltZVR5cGUodXJsKSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YVVybCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UodXJsQXNSZWdleCh1cmwpLCBbJyQxJywgZGF0YVVybCwgJyQzJ10uam9pbignJykpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiB1cmxBc1JlZ2V4KHVybCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgc2VsZi53aW5kb3cuUmVnRXhwKFsnKHVybFxcXFwoW1xcJ1wiXT8pKCcsIHV0aWwuZXNjYXBlKHVybCksICcpKFtcXCdcIl0/XFxcXCkpJ10uam9pbignJyksICdnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpbmxpbmVBbGwoc3RyaW5nLCBiYXNlVXJsLCBnZXQpIHtcbiAgICAgICAgICAgIGlmIChub3RoaW5nVG9JbmxpbmUoKSkgcmV0dXJuIFByb21pc2UucmVzb2x2ZShzdHJpbmcpO1xuXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHN0cmluZylcbiAgICAgICAgICAgICAgICAudGhlbihyZWFkVXJscylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodXJscykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZG9uZSA9IFByb21pc2UucmVzb2x2ZShzdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICB1cmxzLmZvckVhY2goZnVuY3Rpb24gKHVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSA9IGRvbmUudGhlbihmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlubGluZShzdHJpbmcsIHVybCwgYmFzZVVybCwgZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmU7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG5vdGhpbmdUb0lubGluZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIXNob3VsZFByb2Nlc3Moc3RyaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5ld0ZvbnRGYWNlcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc29sdmVBbGw6IHJlc29sdmVBbGwsXG4gICAgICAgICAgICBpbXBsOiB7XG4gICAgICAgICAgICAgICAgcmVhZEFsbDogcmVhZEFsbFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlc29sdmVBbGwoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVhZEFsbChzZWxmLmRvY3VtZW50KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh3ZWJGb250cykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICB3ZWJGb250cy5tYXAoZnVuY3Rpb24gKHdlYkZvbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2ViRm9udC5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGNzc1N0cmluZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNzc1N0cmluZ3Muam9pbignXFxuJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZWFkQWxsKCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh1dGlsLmFzQXJyYXkoc2VsZi5kb2N1bWVudC5zdHlsZVNoZWV0cykpXG4gICAgICAgICAgICAgICAgLnRoZW4oZ2V0Q3NzUnVsZXMpXG4gICAgICAgICAgICAgICAgLnRoZW4oc2VsZWN0V2ViRm9udFJ1bGVzKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChydWxlcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnVsZXMubWFwKG5ld1dlYkZvbnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBzZWxlY3RXZWJGb250UnVsZXMoY3NzUnVsZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3NzUnVsZXNcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAocnVsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ1bGUudHlwZSA9PT0gQ1NTUnVsZS5GT05UX0ZBQ0VfUlVMRTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAocnVsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlubGluZXIuc2hvdWxkUHJvY2VzcyhydWxlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3NyYycpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldENzc1J1bGVzKHN0eWxlU2hlZXRzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3NzUnVsZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBzdHlsZVNoZWV0cy5mb3JFYWNoKGZ1bmN0aW9uIChzaGVldCkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5hc0FycmF5KHNoZWV0LmNzc1J1bGVzIHx8IFtdKS5mb3JFYWNoKGNzc1J1bGVzLnB1c2guYmluZChjc3NSdWxlcykpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3Igd2hpbGUgcmVhZGluZyBDU1MgcnVsZXMgZnJvbSAnICsgc2hlZXQuaHJlZiwgZS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBjc3NSdWxlcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gbmV3V2ViRm9udCh3ZWJGb250UnVsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiYXNlVXJsID0gKHdlYkZvbnRSdWxlLnBhcmVudFN0eWxlU2hlZXQgfHwge30pLmhyZWY7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5saW5lci5pbmxpbmVBbGwod2ViRm9udFJ1bGUuY3NzVGV4dCwgYmFzZVVybCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHNyYzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdlYkZvbnRSdWxlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3NyYycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5ld0ltYWdlcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlubGluZUFsbDogaW5saW5lQWxsLFxuICAgICAgICAgICAgaW1wbDoge1xuICAgICAgICAgICAgICAgIG5ld0ltYWdlOiBuZXdJbWFnZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIG5ld0ltYWdlKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaW5saW5lOiBpbmxpbmVcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlubGluZShnZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0RhdGFVcmwoZWxlbWVudC5zcmMpKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGVsZW1lbnQuc3JjKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihnZXQgfHwgdXRpbC5nZXRBbmRFbmNvZGUpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXRpbC5kYXRhQXNVcmwoZGF0YSwgdXRpbC5taW1lVHlwZShlbGVtZW50LnNyYykpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YVVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50Lm9ubG9hZCA9IHJlc29sdmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5vbmVycm9yID0gcmVqZWN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3JjID0gZGF0YVVybDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlubGluZUFsbChub2RlKSB7XG4gICAgICAgICAgICBpZiAoIXV0aWwuaXNFbGVtZW50KG5vZGUpKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5vZGUpO1xuXG4gICAgICAgICAgICByZXR1cm4gaW5saW5lQmFja2dyb3VuZChub2RlKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNJbWFnZShub2RlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdJbWFnZShub2RlKS5pbmxpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwuYXNBcnJheShub2RlLmNoaWxkTm9kZXMpLm1hcChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlubGluZUFsbChjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlubGluZUJhY2tncm91bmQobm9kZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJhY2tncm91bmQgPSBub2RlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2JhY2tncm91bmQnKTtcblxuICAgICAgICAgICAgICAgIGlmICghYmFja2dyb3VuZCkgcmV0dXJuIFByb21pc2UucmVzb2x2ZShub2RlKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBpbmxpbmVyLmlubGluZUFsbChiYWNrZ3JvdW5kKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoaW5saW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zdHlsZS5zZXRQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYmFja2dyb3VuZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5saW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlLmdldFByb3BlcnR5UHJpb3JpdHkoJ2JhY2tncm91bmQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9Eb20ySW1hZ2UuanMiLCJpbXBvcnQgeyQsIFRIUkVFfSBmcm9tICcuLi9saWJzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERyYWcge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih3bmQsIGRvYywgdmlzdWFsV29ybGQpIHtcclxuICAgIHRoaXMud25kID0gd25kO1xyXG4gICAgdGhpcy5kb2MgPSBkb2M7XHJcbiAgICB0aGlzLnZpc3VhbCA9IHZpc3VhbFdvcmxkO1xyXG4gICAgdGhpcy5jb29yZHMgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xyXG4gICAgdGhpcy5pbnRlcnNlY3Rpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gICAgdGhpcy5yYXljYXN0ZXIgPSB0aGlzLnZpc3VhbC5yYXljYXN0ZXI7XHJcbiAgICB0aGlzLmNhbWVyYSA9IHRoaXMudmlzdWFsLmNhbWVyYTtcclxuICAgIHRoaXMucGxhbmUgPSBuZXcgVEhSRUUuUGxhbmUoKTtcclxuICAgIHRoaXMudGhyZWVzID0gW107XHJcbiAgICB0aGlzLnNlbGVjdGVkID0gbnVsbDtcclxuICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XHJcbiAgICB0aGlzLmNvbnRyb2xzU3RhdGUgPSB0aGlzLnZpc3VhbC5nZXRDb250cm9sc1N0YXRlKCk7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50ID0gdGhpcy52aXN1YWwuZWxlbWVudDtcclxuICAgIHRoaXMuYmluZHMgPSB7XHJcbiAgICAgIG9uTW91c2VNb3ZlOiB0aGlzLm9uTW91c2VNb3ZlLmJpbmQodGhpcyksXHJcbiAgICAgIG9uTW91c2VEb3duOiB0aGlzLm9uTW91c2VEb3duLmJpbmQodGhpcyksXHJcbiAgICAgIG9uTW91c2VVcDogdGhpcy5vbk1vdXNlVXAuYmluZCh0aGlzKVxyXG4gICAgfTtcclxuICAgICQodGhpcy5lbGVtZW50KS5vbignbW91c2Vtb3ZlJywgdGhpcy5iaW5kcy5vbk1vdXNlTW92ZSk7XHJcbiAgICAkKHRoaXMuZWxlbWVudCkub24oJ21vdXNlZG93bicsIHRoaXMuYmluZHMub25Nb3VzZURvd24pO1xyXG4gICAgJCh0aGlzLmRvYykub24oJ21vdXNldXAnLCB0aGlzLmJpbmRzLm9uTW91c2VVcCk7XHJcbiAgfVxyXG5cclxuICBhZGRUaHJlZSh0aHJlZSkge1xyXG4gICAgdGhpcy50aHJlZXMucHVzaCh0aHJlZSk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVUaHJlZSh0aHJlZSkge1xyXG4gICAgY29uc3QgaSA9IHRoaXMudGhyZWVzLmluZGV4T2YodGhyZWUpO1xyXG4gICAgaWYofmkpIHtcclxuICAgICAgdGhpcy50aHJlZXMuc3BsaWNlKGksIDEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25QaWNrQ2FsbGJhY2soKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIG9uRHJhZ0NhbGxiYWNrKCkge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBvblJlbGVhc2VDYWxsYmFjaygpIHtcclxuXHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgJCh0aGlzLmVsZW1lbnQpLm9mZignbW91c2Vtb3ZlJywgdGhpcy5iaW5kcy5vbk1vdXNlTW92ZSk7XHJcbiAgICAkKHRoaXMuZWxlbWVudCkub2ZmKCdtb3VzZWRvd24nLCB0aGlzLmJpbmRzLm9uTW91c2VEb3duKTtcclxuICAgICQodGhpcy5kb2MpLm9mZignbW91c2V1cCcsIHRoaXMuYmluZHMub25Nb3VzZVVwKTtcclxuICB9XHJcblxyXG4gIHNldENvb3Jkc0Zyb21FdmVudChlKSB7XHJcbiAgICBjb25zdCBqRWxlbWVudCA9ICQodGhpcy5lbGVtZW50KTtcclxuICAgIGNvbnN0IG9mZnNldCA9IGpFbGVtZW50Lm9mZnNldCgpO1xyXG4gICAgdGhpcy5jb29yZHMueCA9ICgoZS5wYWdlWC1vZmZzZXQubGVmdCkvakVsZW1lbnQud2lkdGgoKSkqMi0xO1xyXG4gICAgdGhpcy5jb29yZHMueSA9IC0oKGUucGFnZVktb2Zmc2V0LnRvcCkvakVsZW1lbnQuaGVpZ2h0KCkpKjIrMTtcclxuICAgIHJldHVybiB0aGlzLmNvb3JkcztcclxuICB9XHJcblxyXG4gIG9uTW91c2VEb3duKGUpIHtcclxuICAgIGlmKCF0aGlzLmVuYWJsZWQpIHJldHVybjtcclxuXHJcbiAgICBpZih0aGlzLnNlbGVjdGVkKSB0aGlzLm9uTW91c2VVcChlKTtcclxuXHJcbiAgICB0aGlzLnNldENvb3Jkc0Zyb21FdmVudChlKTtcclxuICBcdHRoaXMucmF5Y2FzdGVyLnNldEZyb21DYW1lcmEodGhpcy5jb29yZHMsIHRoaXMuY2FtZXJhKTtcclxuXHJcbiAgXHRjb25zdCBpbnRlcnNlY3RzID0gdGhpcy5yYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0cyh0aGlzLnRocmVlcyk7XHJcbiAgXHRpZihpbnRlcnNlY3RzLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBpbnRlcnNlY3RzWzBdLm9iamVjdDtcclxuICAgICAgaWYoIXRoaXMub25QaWNrQ2FsbGJhY2soaW50ZXJzZWN0c1swXSkpIHJldHVybjtcclxuICAgICAgY29uc3QgdiA9IGludGVyc2VjdHNbMF0ucG9pbnQuY2xvbmUoKTtcclxuICAgICAgdGhpcy5kaXN0YW5jZSA9IHYuc3ViKHRoaXMucmF5Y2FzdGVyLnJheS5vcmlnaW4pLmxlbmd0aCgpOztcclxuICAgICAgdGhpcy5jb250cm9sc1N0YXRlID0gdGhpcy52aXN1YWwuZ2V0Q29udHJvbHNTdGF0ZSgpO1xyXG4gICAgICB0aGlzLnZpc3VhbC5zZXRDb250cm9sc1N0YXRlKGZhbHNlKTtcclxuICAgICAgdGhpcy5wbGFuZS5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludCh0aGlzLnZpc3VhbC5jYW1lcmEuZ2V0V29ybGREaXJlY3Rpb24odGhpcy5wbGFuZS5ub3JtYWwpLCBpbnRlcnNlY3RzWzBdLnBvaW50KTtcclxuICAgICAgLy90aGlzLnBsYW5lLnNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50KHRoaXMucGxhbmUubm9ybWFsLnNldCgwLDAsMSksIG5ldyBUSFJFRS5WZWN0b3IzKDAsMCwwKSk7XHJcbiAgICAgIHRoaXMuc2VsZWN0ZWQgPSBzZWxlY3RlZDtcclxuICBcdH1cclxuXHJcbiAgfVxyXG5cclxuICBvbk1vdXNlTW92ZShlKSB7XHJcbiAgICBpZighdGhpcy5lbmFibGVkKSByZXR1cm47XHJcbiAgXHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gIFx0aWYodGhpcy5zZWxlY3RlZCkge1xyXG4gICAgICB0aGlzLnNldENvb3Jkc0Zyb21FdmVudChlKTtcclxuICAgIFx0dGhpcy5yYXljYXN0ZXIuc2V0RnJvbUNhbWVyYSh0aGlzLmNvb3JkcywgdGhpcy5jYW1lcmEpO1xyXG5cdCAgICBpZih0aGlzLnJheWNhc3Rlci5yYXkuaW50ZXJzZWN0UGxhbmUodGhpcy5wbGFuZSwgdGhpcy5pbnRlcnNlY3Rpb24pKSB7XHJcbiAgICAgICAgaWYoIXRoaXMub25EcmFnQ2FsbGJhY2sodGhpcy5pbnRlcnNlY3Rpb24pKSB0aGlzLm9uTW91c2VVcChlKTtcclxuICAgICAgfS8qKi9cclxuICAgICAgLy90aGlzLmludGVyc2VjdGlvbi5jb3B5KHRoaXMucmF5Y2FzdGVyLnJheS5kaXJlY3Rpb24pLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKHRoaXMuZGlzdGFuY2UpLmFkZCh0aGlzLnJheWNhc3Rlci5yYXkub3JpZ2luKTsvKiovXHJcbiAgICAgIC8vaWYoIXRoaXMub25EcmFnQ2FsbGJhY2sodGhpcy5zZWxlY3RlZCwgdGhpcy5pbnRlcnNlY3Rpb24pKSB0aGlzLm9uTW91c2VVcChlKTtcclxuICBcdH1cclxuICB9XHJcblxyXG4gIG9uTW91c2VVcChlKSB7XHJcbiAgICBpZih0aGlzLnNlbGVjdGVkKSB7XHJcbiAgICAgIHRoaXMub25SZWxlYXNlQ2FsbGJhY2soKTtcclxuICBcdFx0dGhpcy5zZWxlY3RlZCA9IG51bGw7XHJcbiAgICAgIHRoaXMudmlzdWFsLnNldENvbnRyb2xzU3RhdGUodGhpcy5jb250cm9sc1N0YXRlKTtcclxuICBcdH1cclxuICAgIGlmKCF0aGlzLmVuYWJsZWQpIHJldHVybjtcclxuICBcdGUucHJldmVudERlZmF1bHQoKTtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0RyYWcuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5yZXF1aXJlKCdpbXBvcnRzLWxvYWRlcj9kZWZpbmU9PmZhbHNlIWpxdWVyeS1tb3VzZXdoZWVsJykoJCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudHNUb0FjdGlvbnMge1xyXG5cclxuICBzdGF0aWMgbW9kS2V5cyA9IHtcclxuICAgIEN0cmw6IDEsXHJcbiAgICBTaGlmdDogMixcclxuICAgIEFsdDogNFxyXG4gIH07XHJcblxyXG4gIHN0YXRpYyBtb3VzZUJ1dHRvbnMgPSB7XHJcbiAgICBMZWZ0OiAwLFxyXG4gICAgTWlkZGxlOiAxLFxyXG4gICAgUmlnaHQ6IDJcclxuICB9O1xyXG5cclxuICBzdGF0aWMgZ2V0RXZlbnRGbGFncyhlKSB7XHJcbiAgICByZXR1cm4gZS5jdHJsS2V5PDwwIHwgZS5zaGlmdEtleTw8MSB8IGUuYWx0S2V5PDwyO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldFBvc2l0aW9uKHRvdWNoZXMpIHtcclxuICAgIGxldCB4LCB5O1xyXG4gICAgaWYodG91Y2hlcy5sZW5ndGg9PT0yKSB7XHJcbiAgICAgIHggPSB0b3VjaGVzWzFdLnBhZ2VYLXRvdWNoZXNbMF0ucGFnZVg7XHJcbiAgICAgIHkgPSB0b3VjaGVzWzFdLnBhZ2VZLXRvdWNoZXNbMF0ucGFnZVk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgeCA9IHRvdWNoZXNbMF0ucGFnZVg7XHJcbiAgICAgIHkgPSB0b3VjaGVzWzBdLnBhZ2VZO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgeCxcclxuICAgICAgeVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGFjdGlvbnMpIHtcclxuICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnMgfHwge307XHJcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgdGhpcy5kb2MgPSBlbGVtZW50WzBdLm93bmVyRG9jdW1lbnQ7XHJcbiAgICB0aGlzLnduZCA9IHRoaXMuZG9jLmRlZmF1bHRWaWV3O1xyXG4gICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcclxuXHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICBjb250ZXh0TWVudTogdGhpcy5jb250ZXh0TWVudS5iaW5kKHRoaXMpLFxyXG5cclxuICAgICAgbW91c2VEb3duOiB0aGlzLm1vdXNlRG93bi5iaW5kKHRoaXMpLFxyXG4gICAgICBtb3VzZU1vdmU6IHRoaXMubW91c2VNb3ZlLmJpbmQodGhpcyksXHJcbiAgICAgIG1vdXNlVXA6IHRoaXMubW91c2VVcC5iaW5kKHRoaXMpLFxyXG4gICAgICBtb3VzZVdoZWVsOiB0aGlzLm1vdXNlV2hlZWwuYmluZCh0aGlzKSxcclxuXHJcbiAgICAgIG1vdXNlTW92ZURvYzogdGhpcy5tb3VzZU1vdmVEb2MuYmluZCh0aGlzKSxcclxuICAgICAgbW91c2VVcERvYzogdGhpcy5tb3VzZVVwRG9jLmJpbmQodGhpcyksXHJcblxyXG4gICAgICBjbGljazogdGhpcy5jbGljay5iaW5kKHRoaXMpLFxyXG4gICAgICBkYmxjbGljazogdGhpcy5kYmxjbGljay5iaW5kKHRoaXMpLFxyXG5cclxuICAgICAgdG91Y2hTdGFydDogdGhpcy50b3VjaFN0YXJ0LmJpbmQodGhpcyksXHJcbiAgICAgIHRvdWNoTW92ZTogdGhpcy50b3VjaE1vdmUuYmluZCh0aGlzKSxcclxuICAgICAgdG91Y2hFbmQ6IHRoaXMudG91Y2hFbmQuYmluZCh0aGlzKSxcclxuXHJcbiAgICAgIGtleURvd246IHRoaXMua2V5RG93bi5iaW5kKHRoaXMpLFxyXG4gICAgICBrZXlQcmVzczogdGhpcy5rZXlQcmVzcy5iaW5kKHRoaXMpLFxyXG4gICAgICBrZXlVcDogdGhpcy5rZXlVcC5iaW5kKHRoaXMpXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZWxlbWVudC5vbignY29udGV4dG1lbnUnLCB0aGlzLmJpbmRzLmNvbnRleHRNZW51KTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnQub24oJ21vdXNlZG93bicsIHRoaXMuYmluZHMubW91c2VEb3duKTtcclxuICAgIHRoaXMuZWxlbWVudC5vbignbW91c2Vtb3ZlJywgdGhpcy5iaW5kcy5tb3VzZU1vdmUpO1xyXG4gICAgdGhpcy5lbGVtZW50Lm9uKCdtb3VzZXVwJywgdGhpcy5iaW5kcy5tb3VzZVVwKTtcclxuICAgIHRoaXMuZWxlbWVudC5vbignbW91c2V3aGVlbCcsIHRoaXMuYmluZHMubW91c2VXaGVlbCk7XHJcblxyXG4gICAgJCh0aGlzLmRvYykub24oJ21vdXNlbW92ZScsIHRoaXMuYmluZHMubW91c2VNb3ZlRG9jKTtcclxuICAgICQodGhpcy5kb2MpLm9uKCdtb3VzZXVwJywgdGhpcy5iaW5kcy5tb3VzZVVwRG9jKTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnQub24oJ2NsaWNrJywgdGhpcy5iaW5kcy5jbGljayk7XHJcbiAgICB0aGlzLmVsZW1lbnQub24oJ2RibGNsaWNrJywgdGhpcy5iaW5kcy5kYmxjbGljayk7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50Lm9uKCd0b3VjaHN0YXJ0JywgdGhpcy5iaW5kcy50b3VjaFN0YXJ0KTtcclxuICAgIHRoaXMuZWxlbWVudC5vbigndG91Y2htb3ZlJywgdGhpcy5iaW5kcy50b3VjaE1vdmUpO1xyXG4gICAgdGhpcy5lbGVtZW50Lm9uKCd0b3VjaGVuZCcsIHRoaXMuYmluZHMudG91Y2hFbmQpO1xyXG5cclxuICAgICQodGhpcy53bmQpLm9uKCdrZXlkb3duJywgdGhpcy5iaW5kcy5rZXlEb3duKTtcclxuICAgICQodGhpcy53bmQpLm9uKCdrZXlwcmVzcycsIHRoaXMuYmluZHMua2V5UHJlc3MpO1xyXG4gICAgJCh0aGlzLnduZCkub24oJ2tleXVwJywgdGhpcy5iaW5kcy5rZXlVcCk7XHJcbiAgfVxyXG5cclxuICBhZGRBY3Rpb24oYWN0aW9uLCB0eXBlLCBjb2RlLCBmbGFncykge1xyXG4gICAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcclxuICAgIGlmKCF0aGlzLmFjdGlvbnNbdHlwZV0pIHtcclxuICAgICAgdGhpcy5hY3Rpb25zW3R5cGVdID0ge307XHJcbiAgICB9XHJcbiAgICBpZighdGhpcy5hY3Rpb25zW3R5cGVdW2NvZGVdKSB7XHJcbiAgICAgIHRoaXMuYWN0aW9uc1t0eXBlXVtjb2RlXSA9IHt9XHJcbiAgICB9XHJcbiAgICBpZighdGhpcy5hY3Rpb25zW3R5cGVdW2NvZGVdW2ZsYWdzXSkge1xyXG4gICAgICB0aGlzLmFjdGlvbnNbdHlwZV1bY29kZV1bZmxhZ3NdID0gW107XHJcbiAgICB9XHJcbiAgICB0aGlzLmFjdGlvbnNbdHlwZV1bY29kZV1bZmxhZ3NdLnB1c2goYWN0aW9uKTtcclxuICB9XHJcblxyXG4gIGdldEFjdGlvbnModHlwZSwgY29kZSwgZmxhZ3MpIHtcclxuICAgIHJldHVybiAoKHRoaXMuYWN0aW9uc1t0eXBlXSB8fCB7fSlbY29kZV0gfHwge30pW2ZsYWdzXSB8fCBbXTtcclxuICB9XHJcblxyXG4gIGZpcmVBY3Rpb25zKGFjdGlvbnMsIGUsIGRhdGEpIHtcclxuICAgIGZvcihsZXQgYWN0aW9uIG9mIGFjdGlvbnMpIHtcclxuICAgICAgYWN0aW9uKGUsIGRhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29udGV4dE1lbnUoZSkge1xyXG4gICAgaWYodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgIGNvbnN0IGZsYWdzID0gRXZlbnRzVG9BY3Rpb25zLmdldEV2ZW50RmxhZ3MoZSk7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5nZXRBY3Rpb25zKCdjb250ZXh0bWVudScsIGUuYnV0dG9uLCBmbGFncyksIGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbW91c2VEb3duKGUpIHtcclxuICAgIGlmKHRoaXMucGlja2VkKSB7XHJcbiAgICAgIHRoaXMubW91c2VVcERvYygpO1xyXG4gICAgfVxyXG4gICAgaWYodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgIGNvbnN0IGZsYWdzID0gRXZlbnRzVG9BY3Rpb25zLmdldEV2ZW50RmxhZ3MoZSk7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5nZXRBY3Rpb25zKCdtb3VzZWRvd24nLCBlLmJ1dHRvbiwgZmxhZ3MpLCBlKTtcclxuICAgICAgdGhpcy5waWNrZWQgPSB7XHJcbiAgICAgICAgeDogZS5wYWdlWCxcclxuICAgICAgICB5OiBlLnBhZ2VZLFxyXG4gICAgICAgIGFjdGlvbnM6IHRoaXMuZ2V0QWN0aW9ucygnbW91c2VkcmFnJywgZS5idXR0b24sIGZsYWdzKVxyXG4gICAgICB9O1xyXG4gICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMucGlja2VkLmFjdGlvbnMsIGUsIHtcclxuICAgICAgICBzdGF0ZTogJ3N0YXJ0J1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1vdXNlTW92ZShlKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgY29uc3QgZmxhZ3MgPSBFdmVudHNUb0FjdGlvbnMuZ2V0RXZlbnRGbGFncyhlKTtcclxuICAgICAgdGhpcy5maXJlQWN0aW9ucyh0aGlzLmdldEFjdGlvbnMoJ21vdXNlbW92ZScsIGUuYnV0dG9uLCBmbGFncyksIGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbW91c2VNb3ZlRG9jKGUpIHtcclxuICAgIGlmKHRoaXMuZW5hYmxlZCAmJiB0aGlzLnBpY2tlZCkge1xyXG4gICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMucGlja2VkLmFjdGlvbnMsIGUsIHtcclxuICAgICAgICBzdGF0ZTogJ21vdmUnLFxyXG4gICAgICAgIGR4OiBlLnBhZ2VYLXRoaXMucGlja2VkLngsXHJcbiAgICAgICAgZHk6IGUucGFnZVktdGhpcy5waWNrZWQueVxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5waWNrZWQgPSB7XHJcbiAgICAgICAgeDogZS5wYWdlWCxcclxuICAgICAgICB5OiBlLnBhZ2VZLFxyXG4gICAgICAgIGFjdGlvbnM6IHRoaXMucGlja2VkLmFjdGlvbnNcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1vdXNlVXAoZSkge1xyXG4gICAgaWYodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgIGNvbnN0IGZsYWdzID0gRXZlbnRzVG9BY3Rpb25zLmdldEV2ZW50RmxhZ3MoZSk7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5nZXRBY3Rpb25zKCdtb3VzZXVwJywgZS5idXR0b24sIGZsYWdzKSwgZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBtb3VzZVVwRG9jKGUpIHtcclxuICAgIGlmKHRoaXMucGlja2VkKSB7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5waWNrZWQuYWN0aW9ucywgZSwge1xyXG4gICAgICAgIHN0YXRlOiAnZW5kJ1xyXG4gICAgICB9KTtcclxuICAgICAgZGVsZXRlIHRoaXMucGlja2VkO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbW91c2VXaGVlbChlKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgY29uc3QgZmxhZ3MgPSBFdmVudHNUb0FjdGlvbnMuZ2V0RXZlbnRGbGFncyhlKTtcclxuICAgICAgdGhpcy5maXJlQWN0aW9ucyh0aGlzLmdldEFjdGlvbnMoJ21vdXNld2hlZWwnLCAwLCBmbGFncyksIGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2xpY2tzKGUsIHR5cGUpIHtcclxuICAgIGlmKHRoaXMuZW5hYmxlZCkge1xyXG4gICAgICBjb25zdCBmbGFncyA9IEV2ZW50c1RvQWN0aW9ucy5nZXRFdmVudEZsYWdzKGUpO1xyXG4gICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMuZ2V0QWN0aW9ucyh0eXBlLCBlLmJ1dHRvbiwgZmxhZ3MpLCBlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNsaWNrKGUpIHtcclxuICAgIHRoaXMuY2xpY2tzKGUsICdjbGljaycpO1xyXG4gIH1cclxuXHJcbiAgZGJsY2xpY2soZSkge1xyXG4gICAgdGhpcy5jbGlja3MoZSwgJ2RibGNsaWNrJyk7XHJcbiAgfVxyXG5cclxuICB0b3VjaFBpY2soZSwgZmxhZ3MsIHRvdWNoZXMpIHtcclxuICAgIGNvbnN0IHBvcyA9IEV2ZW50c1RvQWN0aW9ucy5nZXRQb3NpdGlvbih0b3VjaGVzKTtcclxuICAgIHRoaXMudG91Y2hQaWNrZWQgPSB7XHJcbiAgICAgIC4uLnBvcyxcclxuICAgICAgYWN0aW9uczogdGhpcy5nZXRBY3Rpb25zKCd0b3VjaGRyYWcnLCB0b3VjaGVzLmxlbmd0aCwgZmxhZ3MpLFxyXG4gICAgICBjb2RlOiB0b3VjaGVzLmxlbmd0aCxcclxuICAgICAgZmxhZ3NcclxuICAgIH07XHJcbiAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMudG91Y2hQaWNrZWQuYWN0aW9ucywgZSwge1xyXG4gICAgICBzdGF0ZTogJ3N0YXJ0JyxcclxuICAgICAgLi4ucG9zXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHRvdWNoU3RhcnQoZSkge1xyXG4gICAgaWYodGhpcy50b3VjaFBpY2tlZCkge1xyXG4gICAgICB0aGlzLnRvdWNoRW5kKGUpO1xyXG4gICAgfVxyXG4gICAgaWYodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgIGNvbnN0IGZsYWdzID0gRXZlbnRzVG9BY3Rpb25zLmdldEV2ZW50RmxhZ3MoZSksIHRvdWNoZXMgPSBlLnRvdWNoZXMgfHwgZS5vcmlnaW5hbEV2ZW50LnRvdWNoZXM7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5nZXRBY3Rpb25zKCd0b3VjaHN0YXJ0JywgdG91Y2hlcy5sZW5ndGgsIGZsYWdzKSwgZSk7XHJcbiAgICAgIHRoaXMudG91Y2hQaWNrKGUsIGZsYWdzLCB0b3VjaGVzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRvdWNoTW92ZShlKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgY29uc3QgZmxhZ3MgPSBFdmVudHNUb0FjdGlvbnMuZ2V0RXZlbnRGbGFncyhlKSwgdG91Y2hlcyA9IGUudG91Y2hlcyB8fCBlLm9yaWdpbmFsRXZlbnQudG91Y2hlcztcclxuICAgICAgdGhpcy5maXJlQWN0aW9ucyh0aGlzLmdldEFjdGlvbnMoJ3RvdWNobW92ZScsIHRvdWNoZXMubGVuZ3RoLCBmbGFncyksIGUpO1xyXG4gICAgICBpZih0aGlzLnRvdWNoUGlja2VkKSB7XHJcbiAgICAgICAgaWYodGhpcy50b3VjaFBpY2tlZC5jb2RlPT09dG91Y2hlcy5sZW5ndGggJiYgdGhpcy50b3VjaFBpY2tlZC5mbGFncz09PWZsYWdzKSB7XHJcbiAgICAgICAgICBjb25zdCBwb3MgPSBFdmVudHNUb0FjdGlvbnMuZ2V0UG9zaXRpb24odG91Y2hlcyk7XHJcbiAgICAgICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMudG91Y2hQaWNrZWQuYWN0aW9ucywgZSwge1xyXG4gICAgICAgICAgICBzdGF0ZTogJ21vdmUnLFxyXG4gICAgICAgICAgICBkeDogcG9zLngtdGhpcy50b3VjaFBpY2tlZC54LFxyXG4gICAgICAgICAgICBkeTogcG9zLnktdGhpcy50b3VjaFBpY2tlZC55LFxyXG4gICAgICAgICAgICAuLi5wb3NcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgdGhpcy50b3VjaFBpY2tlZCA9IHtcclxuICAgICAgICAgICAgLi4udGhpcy50b3VjaFBpY2tlZCxcclxuICAgICAgICAgICAgLi4ucG9zXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHRoaXMudG91Y2hFbmQoZSk7XHJcbiAgICAgICAgICB0aGlzLnRvdWNoUGljayhlLCBmbGFncywgdG91Y2hlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB0b3VjaEVuZChlKSB7XHJcbiAgICBpZih0aGlzLnRvdWNoUGlja2VkKSB7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy50b3VjaFBpY2tlZC5hY3Rpb25zLCBlLCB7XHJcbiAgICAgICAgc3RhdGU6ICdlbmQnXHJcbiAgICAgIH0pO1xyXG4gICAgICBkZWxldGUgdGhpcy50b3VjaFBpY2tlZDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGtleShlLCB0eXBlKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgY29uc3QgZmxhZ3MgPSBFdmVudHNUb0FjdGlvbnMuZ2V0RXZlbnRGbGFncyhlKTtcclxuICAgICAgdGhpcy5maXJlQWN0aW9ucyh0aGlzLmdldEFjdGlvbnModHlwZSwgZS5rZXlDb2RlLCBmbGFncyksIGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAga2V5RG93bihlKSB7XHJcbiAgICB0aGlzLmtleShlLCAna2V5ZG93bicpO1xyXG4gIH1cclxuXHJcbiAga2V5UHJlc3MoZSkge1xyXG4gICAgdGhpcy5rZXkoZSwgJ2tleXByZXNzJyk7XHJcbiAgfVxyXG5cclxuICBrZXlVcChlKSB7XHJcbiAgICB0aGlzLmtleShlLCAna2V5dXAnKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmVsZW1lbnQub2ZmKCdjb250ZXh0bWVudScsIHRoaXMuYmluZHMuY29udGV4dE1lbnUpO1xyXG5cclxuICAgIHRoaXMuZWxlbWVudC5vZmYoJ21vdXNlZG93bicsIHRoaXMuYmluZHMubW91c2VEb3duKTtcclxuICAgIHRoaXMuZWxlbWVudC5vZmYoJ21vdXNlbW92ZScsIHRoaXMuYmluZHMubW91c2VNb3ZlKTtcclxuICAgIHRoaXMuZWxlbWVudC5vZmYoJ21vdXNldXAnLCB0aGlzLmJpbmRzLm1vdXNlVXApO1xyXG4gICAgdGhpcy5lbGVtZW50Lm9mZignbW91c2V3aGVlbCcsIHRoaXMuYmluZHMubW91c2VXaGVlbCk7XHJcblxyXG4gICAgJCh0aGlzLmRvYykub2ZmKCdtb3VzZW1vdmUnLCB0aGlzLmJpbmRzLm1vdXNlTW92ZURvYyk7XHJcbiAgICAkKHRoaXMuZG9jKS5vZmYoJ21vdXNldXAnLCB0aGlzLmJpbmRzLm1vdXNlVXBEb2MpO1xyXG5cclxuICAgIHRoaXMuZWxlbWVudC5vZmYoJ2NsaWNrJywgdGhpcy5iaW5kcy5jbGljayk7XHJcbiAgICB0aGlzLmVsZW1lbnQub2ZmKCdkYmxjbGljaycsIHRoaXMuYmluZHMuZGJsY2xpY2spO1xyXG5cclxuICAgIHRoaXMuZWxlbWVudC5vZmYoJ3RvdWNoc3RhcnQnLCB0aGlzLmJpbmRzLnRvdWNoU3RhcnQpO1xyXG4gICAgdGhpcy5lbGVtZW50Lm9mZigndG91Y2htb3ZlJywgdGhpcy5iaW5kcy50b3VjaE1vdmUpO1xyXG4gICAgdGhpcy5lbGVtZW50Lm9mZigndG91Y2hlbmQnLCB0aGlzLmJpbmRzLnRvdWNoRW5kKTtcclxuXHJcbiAgICAkKHRoaXMud25kKS5vZmYoJ2tleWRvd24nLCB0aGlzLmJpbmRzLmtleURvd24pO1xyXG4gICAgJCh0aGlzLnduZCkub2ZmKCdrZXlwcmVzcycsIHRoaXMuYmluZHMua2V5UHJlc3MpO1xyXG4gICAgJCh0aGlzLnduZCkub2ZmKCdrZXl1cCcsIHRoaXMuYmluZHMua2V5VXApO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvRXZlbnRzVG9BY3Rpb25zLmpzIiwiXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZ1bGxTY3JlZW4ge1xyXG5cclxuXHRzdGF0aWMgX2hhc1dlYmtpdEZ1bGxTY3JlZW5cdD0gISFkb2N1bWVudC53ZWJraXRDYW5jZWxGdWxsU2NyZWVuO1xyXG5cdHN0YXRpYyBfaGFzTW96RnVsbFNjcmVlblx0PSAhIWRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW47XHJcblx0c3RhdGljIF9oYXNNc0Z1bGxzY3JlZW4gPSAhIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5tc1JlcXVlc3RGdWxsc2NyZWVuO1xyXG5cclxuXHRzdGF0aWMgYXZhaWxhYmxlKCkge1xyXG5cdFx0cmV0dXJuIEZ1bGxTY3JlZW4uX2hhc1dlYmtpdEZ1bGxTY3JlZW4gfHwgRnVsbFNjcmVlbi5faGFzTW96RnVsbFNjcmVlbiB8fCBGdWxsU2NyZWVuLl9oYXNNc0Z1bGxzY3JlZW47XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgYWN0aXZhdGVkKCkge1xyXG5cdFx0aWYoRnVsbFNjcmVlbi5faGFzV2Via2l0RnVsbFNjcmVlbikge1xyXG5cdFx0XHRyZXR1cm4gZG9jdW1lbnQud2Via2l0SXNGdWxsU2NyZWVuO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZihGdWxsU2NyZWVuLl9oYXNNb3pGdWxsU2NyZWVuKSB7XHJcblx0XHRcdHJldHVybiBkb2N1bWVudC5tb3pGdWxsU2NyZWVuO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZihGdWxsU2NyZWVuLl9oYXNNc0Z1bGxzY3JlZW4pIHtcclxuXHRcdFx0cmV0dXJuICEhZG9jdW1lbnQubXNGdWxsc2NyZWVuRWxlbWVudDtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRjb25zb2xlLmFzc2VydChmYWxzZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgYWRkRXZlbnRMaXN0ZW5lcihlbGVtZW50LCBoYW5kbGVyKSB7XHJcblx0XHRpZiAoZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKSB7XHJcblx0XHQgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRmdWxsc2NyZWVuY2hhbmdlJywgaGFuZGxlciwgZmFsc2UpO1xyXG5cdFx0ICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW96ZnVsbHNjcmVlbmNoYW5nZScsIGhhbmRsZXIsIGZhbHNlKTtcclxuXHRcdCAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBoYW5kbGVyLCBmYWxzZSk7XHJcblx0XHQgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdNU0Z1bGxzY3JlZW5DaGFuZ2UnLCBoYW5kbGVyLCBmYWxzZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgcmVtb3ZlRXZlbnRMaXN0ZW5lcihlbGVtZW50LCBoYW5kbGVyKSB7XHJcblx0XHRpZiAoZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XHJcblx0XHQgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRmdWxsc2NyZWVuY2hhbmdlJywgaGFuZGxlciwgZmFsc2UpO1xyXG5cdFx0ICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW96ZnVsbHNjcmVlbmNoYW5nZScsIGhhbmRsZXIsIGZhbHNlKTtcclxuXHRcdCAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBoYW5kbGVyLCBmYWxzZSk7XHJcblx0XHQgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdNU0Z1bGxzY3JlZW5DaGFuZ2UnLCBoYW5kbGVyLCBmYWxzZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgcmVxdWVzdChlbGVtZW50KSB7XHJcblx0XHRlbGVtZW50XHQ9IGVsZW1lbnRcdHx8IGRvY3VtZW50LmJvZHk7XHJcblx0XHRpZihGdWxsU2NyZWVuLl9oYXNXZWJraXRGdWxsU2NyZWVuKSB7XHJcblx0XHRcdGVsZW1lbnQud2Via2l0UmVxdWVzdEZ1bGxTY3JlZW4oKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYoRnVsbFNjcmVlbi5faGFzTW96RnVsbFNjcmVlbikge1xyXG5cdFx0XHRlbGVtZW50Lm1velJlcXVlc3RGdWxsU2NyZWVuKCk7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmKEZ1bGxTY3JlZW4uX2hhc01zRnVsbHNjcmVlbikge1xyXG5cdFx0XHRlbGVtZW50Lm1zUmVxdWVzdEZ1bGxzY3JlZW4oKTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRjb25zb2xlLmFzc2VydChmYWxzZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgY2FuY2VsKCkge1xyXG5cdFx0aWYoRnVsbFNjcmVlbi5faGFzV2Via2l0RnVsbFNjcmVlbikge1xyXG5cdFx0XHRkb2N1bWVudC53ZWJraXRDYW5jZWxGdWxsU2NyZWVuKCk7XHJcblx0XHR9ZWxzZSBpZihGdWxsU2NyZWVuLl9oYXNNb3pGdWxsU2NyZWVuKSB7XHJcblx0XHRcdGRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4oKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYoRnVsbFNjcmVlbi5faGFzTXNGdWxsc2NyZWVuKSB7XHJcblx0XHRcdGRvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW4oKTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRjb25zb2xlLmFzc2VydChmYWxzZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9GdWxsU2NyZWVuLmpzIiwiaW1wb3J0IHskLCBodG1sMmNhbnZhc30gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBJbWFnZUJhc2UgZnJvbSAnLi9JbWFnZUJhc2UnO1xyXG5pbXBvcnQgQmFzZU1hdGhVdGlscyBmcm9tICcuL0Jhc2VNYXRoVXRpbHMnO1xyXG5pbXBvcnQgRG9tMkltYWdlIGZyb20gJy4vRG9tMkltYWdlJztcclxuaW1wb3J0IERvY01vdXNlU2ltdWxhdG9yIGZyb20gJy4vRG9jTW91c2VTaW11bGF0b3InO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW50ZXJhY3RpdmVJbWFnZSBleHRlbmRzIEltYWdlQmFzZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGNvbG9yLCBzcmMsIGNhY2hlLCBpbmplY3Rvcikge1xyXG4gICAgc3VwZXIoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgY29sb3IpO1xyXG5cclxuICAgIHRoaXMuaUlkID0gJ2knK0Jhc2VNYXRoVXRpbHMuZ2V0VW5pcXVlKCk7XHJcbiAgICBjb25zdCBqRnJhbWUgPSAkKCc8aWZyYW1lIGlkPVwiJyt0aGlzLmlJZCsnXCIgc3JjPVwiJyArIHNyYyArICdcIiBzdHlsZT1cInBvc2l0aW9uOiBmaXhlZDsgbGVmdDogLTEwMDBweDtcIj48L2lmcmFtZT4nKTtcclxuICAgICQodGhpcy5kb2MuYm9keSkuYXBwZW5kKGpGcmFtZSk7XHJcbiAgICB0aGlzLmZyYW1lID0gakZyYW1lWzBdO1xyXG5cclxuICAgIHRoaXMuYmluZHMgPSB7fTtcclxuXHJcbiAgICBpZihpbmplY3Rvcikge1xyXG4gICAgICBpbmplY3Rvcih0aGlzLmZyYW1lLmNvbnRlbnRXaW5kb3cpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKHRoaXMuZG9jLmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJ3d3dy5odHRwOi8vdzMub3JnL1RSL1NWRzExL2ZlYXR1cmUjRXh0ZW5zaWJpbGl0eScsICcxLjEnKSkgeyAvLyBzdmcgZm9yZWlnbk9iamVjdCByZW5kZXJlclxyXG4gICAgICB0aGlzLmltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgIHRoaXMuYmluZHMuaW1hZ2VMb2FkID0gKCk9PiB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJJbWFnZSh0aGlzLmltYWdlKTtcclxuICAgICAgICB0aGlzLmZpbmlzaFJlbmRlcigpO1xyXG4gICAgICB9O1xyXG4gICAgICAkKHRoaXMuaW1hZ2UpLm9uKCdsb2FkJywgdGhpcy5iaW5kcy5pbWFnZUxvYWQpO1xyXG4gICAgICB0aGlzLnN2Z1JlbmRlciA9IG5ldyBEb20ySW1hZ2UodGhpcy5mcmFtZS5jb250ZW50V2luZG93LCB0aGlzLmZyYW1lLmNvbnRlbnREb2N1bWVudCwgY2FjaGUpO1xyXG4gICAgfSAvLyBvdGhlcndpc2UgLSBodG1sMmNhbnZhc1xyXG5cclxuICAgIHRoaXMuYmluZHMuZnJhbWVMb2FkID0gKCk9PiB7XHJcbiAgICAgIGlmKH50aGlzLmZyYW1lLmNvbnRlbnREb2N1bWVudC50aXRsZS5pbmRleE9mKCc0MDQnKSkge1xyXG4gICAgICAgIHRoaXMuc3RhcnRSZW5kZXIgPSAoKT0+IHtcclxuICAgICAgICAgIHRoaXMucmVuZGVyTm90Rm91bmRQYWdlKCk7XHJcbiAgICAgICAgICB0aGlzLmZpbmlzaFJlbmRlcigpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5maW5pc2hMb2FkKCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKT0+IHtcclxuICAgICAgICAgIGlmKHRoaXMuZnJhbWUpIHtcclxuICAgICAgICAgICAgdGhpcy53aWR0aCA9ICQodGhpcy5mcmFtZS5jb250ZW50RG9jdW1lbnQuYm9keSkud2lkdGgoKTtcclxuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSAkKHRoaXMuZnJhbWUuY29udGVudERvY3VtZW50LmJvZHkpLmhlaWdodCgpO1xyXG4gICAgICAgICAgICB0aGlzLnJlc0ggPSB0aGlzLmhlaWdodC90aGlzLndpZHRoKnRoaXMucmVzVztcclxuICAgICAgICAgICAgakZyYW1lLmNzcygnd2lkdGgnLCB0aGlzLndpZHRoKydweCcpLmNzcygnaGVpZ2h0JywgdGhpcy5oZWlnaHQrJ3B4Jyk7XHJcbiAgICAgICAgICAgIGpGcmFtZS5vZmZzZXQoe2xlZnQ6IC10aGlzLndpZHRoLTEwMCwgdG9wOiAwfSk7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuc3ZnUmVuZGVyKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zaW11bGF0b3IgPSBuZXcgRG9jTW91c2VTaW11bGF0b3IoakZyYW1lLCB0aGlzLmZyYW1lLmNvbnRlbnREb2N1bWVudC5ib2R5LCB0aGlzLmVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgIHRoaXMuc2ltdWxhdG9yLmFkZERvY0NoYW5nZUNsYih0aGlzLmZpbmlzaExvYWQuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zdGFydFJlbmRlciA9ICgpPT4ge1xyXG4gICAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuZmluaXNoTG9hZCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sIDUwMCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICAkKHRoaXMuZnJhbWUuY29udGVudFdpbmRvdykub24oJ2xvYWQnLCB0aGlzLmJpbmRzLmZyYW1lTG9hZCk7XHJcbiAgfVxyXG5cclxuICBnZXRTaW11bGF0ZWREb2MoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5mcmFtZS5jb250ZW50RG9jdW1lbnQ7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBpZih0aGlzLnN2Z1JlbmRlcikge1xyXG4gICAgICB0aGlzLnN2Z1JlbmRlci50b1N2Zyh0aGlzLnNpbXVsYXRvci5lbGVtZW50LCB7aGVpZ2h0OiB0aGlzLmhlaWdodCsncHgnLCB3aWR0aDogdGhpcy53aWR0aCsncHgnfSlcclxuICAgICAgICAudGhlbigoZGF0YVVybCk9PiB7XHJcbiAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IGRhdGFVcmw7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goKGVycm9yKT0+IHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0RvbTJJbWFnZTogJywgZXJyb3IpO1xyXG4gICAgICAgICAgdGhpcy5yZW5kZXJCbGFua1BhZ2UoKTtcclxuICAgICAgICAgIHRoaXMuZmluaXNoUmVuZGVyKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgaHRtbDJjYW52YXModGhpcy5mcmFtZS5jb250ZW50RG9jdW1lbnQuYm9keSwge3RpbWVvdXQ6IDMwMDAwfSkuXHJcbiAgICAgICAgdGhlbigoY2FudmFzKT0+IHtcclxuICAgICAgICAgIHRoaXMucmVuZGVySW1hZ2UoY2FudmFzKTtcclxuICAgICAgICAgIHRoaXMuZmluaXNoUmVuZGVyKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgJCh0aGlzLmltYWdlKS5vZmYoJ2xvYWQnLCB0aGlzLmJpbmRzLmltYWdlTG9hZCk7XHJcbiAgICAkKHRoaXMuZnJhbWUuY29udGVudFdpbmRvdykub2ZmKCdsb2FkJywgdGhpcy5iaW5kcy5mcmFtZUxvYWQpO1xyXG4gICAgJCh0aGlzLmRvYy5ib2R5KS5maW5kKCcjJyt0aGlzLmlJZCkucmVtb3ZlKCk7XHJcbiAgICBpZih0aGlzLmltYWdlKSB7XHJcbiAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gJyc7XHJcbiAgICAgIGRlbGV0ZSB0aGlzLmltYWdlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5mcmFtZS5zcmMgPSAnJztcclxuICAgIGRlbGV0ZSB0aGlzLmZyYW1lO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgc2ltdWxhdGUoZSwgZG9jLCB4LCB5KSB7XHJcbiAgICBpZih0aGlzLnNpbXVsYXRvcikge1xyXG4gICAgICB0aGlzLnNpbXVsYXRvci5zaW11bGF0ZShlLCBkb2MsIHgsIHkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvSW50ZXJhY3RpdmVJbWFnZS5qcyIsImltcG9ydCB7JCwgdHJ9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgR3JhcGhVdGlscyBmcm9tICcuL0dyYXBoVXRpbHMnO1xyXG5pbXBvcnQgTWF0aFV0aWxzIGZyb20gJy4vTWF0aFV0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvYWRpbmdBbmltYXRpb24ge1xyXG5cclxuICBkeSh0LHkpIHtcclxuICAgIGNvbnN0IHc9eVswXSwgYT15WzFdO1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgLXRoaXMuZypNYXRoLmNvcyhhKSxcclxuICAgICAgd1xyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIGludGVncmF0ZShUKSB7XHJcbiAgICBsZXQgdD0wLCBkdD10aGlzLnAuZHQsIG9zID0gdGhpcy5vcztcclxuICAgIHdoaWxlKHQ8VCkge1xyXG4gICAgICBpZih0K2R0PlQpIHtcclxuICAgICAgICBkdD1ULXQ7XHJcbiAgICAgIH1cclxuICAgICAgb3M9TWF0aFV0aWxzLnJrNCh0aGlzLmR5LmJpbmQoe2c6IHRoaXMucC5nfSksIDAsIGR0LCBvcyk7XHJcbiAgICAgIHQrPWR0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9zO1xyXG4gIH1cclxuXHJcbiAgY2FsY1RpbWVUbyh0YXJnZXQpIHtcclxuICAgIGxldCB0PTAsIGR0PXRoaXMucC5kdCwgb3MgPSB0aGlzLm9zO1xyXG4gICAgd2hpbGUoTWF0aC5hYnMob3NbMV0tdGFyZ2V0KT4xZS00KSB7XHJcbiAgICAgIGNvbnN0IG5vcz1NYXRoVXRpbHMucms0KHRoaXMuZHkuYmluZCh7ZzogdGhpcy5wLmd9KSwgMCwgZHQsIG9zKTtcclxuICAgICAgaWYobm9zWzBdPDAgJiYgbm9zWzFdPHRhcmdldCB8fCBub3NbMF0+MCAmJiBub3NbMV0+dGFyZ2V0KSB7XHJcbiAgICAgICAgZHQvPTI7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgb3MgPSBub3M7XHJcbiAgICAgICAgdCs9ZHQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0O1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKFQpIHtcclxuICAgIHRoaXMub3MgPSB0aGlzLmludGVncmF0ZShUKTtcclxuXHJcbiAgICB0aGlzLnQrPVRcclxuICAgIGlmKHRoaXMudD49dGhpcy5wLnVwZGF0ZUludGVydmFsKSB7XHJcbiAgICAgIHRoaXMudCA9IDA7XHJcbiAgICAgIGNvbnN0IHIgPSAwLjA0Kk1hdGgubWluKHRoaXMuYy53aWR0aCwgdGhpcy5jLmhlaWdodCksXHJcbiAgICAgICAgICAgIGEgPSB0aGlzLm9zWzFdLFxyXG4gICAgICAgICAgICB4MCA9IDAuNSp0aGlzLmMud2lkdGgsXHJcbiAgICAgICAgICAgIHkwID0gMC41KnRoaXMuYy5oZWlnaHQsXHJcbiAgICAgICAgICAgIGN0eCA9IHRoaXMuY3R4O1xyXG5cclxuICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmMud2lkdGgsIHRoaXMuYy5oZWlnaHQpO1xyXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBHcmFwaFV0aWxzLmNvbG9yMlJnYmEodGhpcy5wLmNvbG9yLDEpO1xyXG4gICAgICBjdHgucmVjdCgwLCAwLCB0aGlzLmMud2lkdGgsIHRoaXMuYy5oZWlnaHQpO1xyXG4gICAgICBjdHguZmlsbCgpO1xyXG5cclxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjdHguc2hhZG93Qmx1ciA9IDUwO1xyXG4gICAgICBjdHguZmlsbFN0eWxlID0gR3JhcGhVdGlscy5jb2xvcjJSZ2JhKEdyYXBoVXRpbHMuaW52ZXJzZUNvbG9yKHRoaXMucC5jb2xvciwwLjkpLE1hdGguYWJzKHRoaXMub3NbMF0vNi4zNikpO1xyXG4gICAgICBjdHguc2hhZG93Q29sb3IgPSBHcmFwaFV0aWxzLmNvbG9yMlJnYmEoR3JhcGhVdGlscy5pbnZlcnNlQ29sb3IodGhpcy5wLmNvbG9yLDEpLDAuOSk7XHJcbiAgICAgIGN0eC5zaGFkb3dPZmZzZXRYID0gMDtcclxuICAgICAgY3R4LnNoYWRvd09mZnNldFkgPSAwO1xyXG4gICAgICBjdHguZm9udD0nYm9sZCAnK01hdGgucm91bmQoMC4yNSpyKSsncHggQXJpYWwnO1xyXG4gICAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XHJcbiAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcclxuICAgICAgY3R4LmZpbGxUZXh0KHRyKCdMb2FkaW5nLi4uJykseDAseTApO1xyXG5cclxuICAgICAgY29uc3QgcHMgPSAxMCwgZGE9MipNYXRoLlBJL3BzOy8vMi41Kl9yL3JcclxuICAgICAgY3R4LnNoYWRvd0NvbG9yID0gR3JhcGhVdGlscy5jb2xvcjJSZ2JhKEdyYXBoVXRpbHMuaW52ZXJzZUNvbG9yKHRoaXMucC5jb2xvciwxKSwwLjcpO1xyXG4gICAgICBmb3IobGV0IGk9MCwgX2E9YSwgX3I9MC4yKnI7IGk8cHM7ICsraSwgX3IqPTAuOSwgX2ErPWRhKSB7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBHcmFwaFV0aWxzLmNvbG9yMlJnYmEoR3JhcGhVdGlscy5pbnZlcnNlQ29sb3IodGhpcy5wLmNvbG9yLChwcy1pKS9wcyksMC43Kihwcy1pKS9wcyk7XHJcbiAgICAgICAgY29uc3QgY3g9eDArcipNYXRoLmNvcyhfYSksIGN5PXkwLXIqTWF0aC5zaW4oX2EpLCBueD14MCtyKk1hdGguY29zKF9hK2RhKSwgbnk9eTAtcipNYXRoLnNpbihfYStkYSk7XHJcbiAgICAgICAgY3R4LnNoYWRvd09mZnNldFggPSAwLjIqKG54LWN4KTtcclxuICAgICAgICBjdHguc2hhZG93T2Zmc2V0WSA9IDAuMioobnktY3kpO1xyXG4gICAgICAgIGN0eC5hcmMoY3gsIGN5LCBfciwgMCwgTWF0aC5QSSoyLCAxKTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmKHRoaXMub25DaGFuZ2UpIHtcclxuICAgICAgICB0aGlzLm9uQ2hhbmdlKHRoaXMuYywgdGhpcy5wLmNvbG9yKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0SW1hZ2UoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuYy53aWR0aCA9IDA7XHJcbiAgICB0aGlzLmMuaGVpZ2h0ID0gMDtcclxuICAgIGRlbGV0ZSB0aGlzLmN0eDtcclxuICAgIGRlbGV0ZSB0aGlzLmM7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVTcHJpdGUobikge1xyXG4gICAgY29uc3QgYyA9IEdyYXBoVXRpbHMuY3JlYXRlQ2FudmFzKHRoaXMuYy53aWR0aCpuLCB0aGlzLmMuaGVpZ2h0KSwgY3R4ID0gYy5nZXRDb250ZXh0KCcyZCcpLFxyXG4gICAgdCA9IHRoaXMuY2FsY1RpbWVUbyh0aGlzLm9zWzFdK01hdGguc2lnbih0aGlzLm9zWzBdKSoyKk1hdGguUEkpLCBkdD10LyhuKzEpO1xyXG4gICAgY29uc3Qge3VwZGF0ZUludGVydmFsfSA9IHRoaXMucDtcclxuICAgIHRoaXMucC51cGRhdGVJbnRlcnZhbCA9IDA7XHJcbiAgICBmb3IobGV0IGk9MDsgaTxuOyArK2kpIHtcclxuICAgICAgdGhpcy51cGRhdGUoZHQpO1xyXG4gICAgICBjdHguZHJhd0ltYWdlKHRoaXMuYywgaSp0aGlzLmMud2lkdGgsIDApO1xyXG4gICAgfVxyXG4gICAgdGhpcy5wLnVwZGF0ZUludGVydmFsID0gdXBkYXRlSW50ZXJ2YWw7XHJcbiAgICByZXR1cm4gYztcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQsIGNvbG9yKSB7XHJcbiAgICB0aGlzLmMgPSBHcmFwaFV0aWxzLmNyZWF0ZUNhbnZhcyh3aWR0aCwgaGVpZ2h0KTtcclxuICAgIHRoaXMucCA9IHtcclxuICAgICAgZzogOS44LFxyXG4gICAgICBkdDogMS82MCxcclxuICAgICAgY29sb3IsXHJcbiAgICAgIHVwZGF0ZUludGVydmFsOiAwLjI1XHJcbiAgICB9O1xyXG4gICAgdGhpcy5jdHggPSB0aGlzLmMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgIHRoaXMub3MgPSBbLTIsIE1hdGguUEkvMl07XHJcbiAgICB0aGlzLnQgPSB0aGlzLnAudXBkYXRlSW50ZXJ2YWw7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9Mb2FkaW5nQW5pbWF0aW9uLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvYWRpbmdDb250cm9sbGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3Iodmlldywgc2hvd1Byb2dyZXNzPXRydWUsIGxvYWRpbmdNc2c9dW5kZWZpbmVkKSB7XHJcbiAgICB0aGlzLnZpZXcgPSB2aWV3O1xyXG4gICAgdGhpcy5wcm9ncmVzcyA9IDA7XHJcbiAgICB0aGlzLnNob3dQcm9ncmVzcyA9IHNob3dQcm9ncmVzcztcclxuICAgIHRoaXMuZ2V0TG9hZGluZ01zZyA9IGxvYWRpbmdNc2cgfHwgTG9hZGluZ0NvbnRyb2xsZXIuZGVmYXVsdExvYWRpbmdNc2c7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkZWZhdWx0TG9hZGluZ01zZyhwcm9ncmVzcykge1xyXG4gICAgcmV0dXJuIFsnUGxlYXNlIHdhaXQuLi4gdGhlIEFwcGxpY2F0aW9uIGlzIExvYWRpbmc6ICcsIHByb2dyZXNzLCAnJSddLmpvaW4oJycpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuc2hvd1Byb2dyZXNzID0gZmFsc2U7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICAgIGRlbGV0ZSB0aGlzLnZpZXc7XHJcbiAgfVxyXG5cclxuICBzZXRQcm9ncmVzcyh2KSB7XHJcbiAgICB0aGlzLnByb2dyZXNzID0gdjtcclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVmlldygpIHtcclxuICAgIGlmKHRoaXMudmlldykge1xyXG5cclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd3aWRMb2FkaW5nUHJvZ3Jlc3MnLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuc2hvd1Byb2dyZXNzLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ3R4dExvYWRpbmdQcm9ncmVzcycsIHtcclxuICAgICAgICB2YWx1ZTogdGhpcy5nZXRMb2FkaW5nTXNnKHRoaXMucHJvZ3Jlc3MpLFxyXG4gICAgICAgIHZpc2libGU6IHRydWVcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBmb3IobGV0IG5hbWUgb2YgdGhpcy52aWV3LmdldExpbmtzKCkpIHtcclxuICAgICAgICB0aGlzLnZpZXcuc2V0U3RhdGUobmFtZSwge1xyXG4gICAgICAgICAgZW5hYmxlOiBmYWxzZSxcclxuICAgICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnaW5wUGFnZXMnLCB7XHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICB2YWx1ZTogJydcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ2lucFBhZ2UnLCB7XHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBlbmFibGU6IGZhbHNlLFxyXG4gICAgICAgIHZhbHVlOiAnJ1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9Mb2FkaW5nQ29udHJvbGxlci5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBFdmVudENvbnZlcnRlciBmcm9tICcuL0V2ZW50Q29udmVydGVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vdXNlRXZlbnRDb252ZXJ0ZXIgZXh0ZW5kcyBFdmVudENvbnZlcnRlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHduZCwgZG9jLCBlbGVtZW50KSB7XHJcbiAgICBzdXBlcih3bmQsIGRvYyk7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgIHRoaXMuYmluZHMgPSB7XHJcbiAgICAgIGNvbnZlcnQ6IHRoaXMuY29udmVydC5iaW5kKHRoaXMpXHJcbiAgICB9O1xyXG4gICAgJCh0aGlzLmVsZW1lbnQpLm9uKCdtb3VzZW1vdmUgbW91c2Vkb3duIG1vdXNlb3ZlciBtb3VzZW91dCBjbGljaycsIHRoaXMuYmluZHMuY29udmVydCk7XHJcbiAgICAkKHRoaXMuZG9jKS5vbignbW91c2V1cCcsIHRoaXMuYmluZHMuY29udmVydCk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgJCh0aGlzLmVsZW1lbnQpLm9mZignbW91c2Vtb3ZlIG1vdXNlZG93biBtb3VzZW92ZXIgbW91c2VvdXQgY2xpY2snLCB0aGlzLmJpbmRzLmNvbnZlcnQpO1xyXG4gICAgJCh0aGlzLmRvYykub2ZmKCdtb3VzZXVwJywgdGhpcy5iaW5kcy5jb252ZXJ0KTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvTW91c2VFdmVudENvbnZlcnRlci5qcyIsImltcG9ydCB7VEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgTWF0aFV0aWxzIGZyb20gJy4vTWF0aFV0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9iamVjdDNEV2F0Y2hlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbCwgYm91bmRCb3hDbGIsIHRlc3RTY2FsZT10aGlzLnRlc3RTY2FsZSkge1xyXG4gICAgdGhpcy52aXN1YWwgPSB2aXN1YWw7XHJcbiAgICB0aGlzLmJvdW5kQm94Q2xiID0gYm91bmRCb3hDbGI7XHJcbiAgICB0aGlzLnRlc3RTY2FsZSA9IHRlc3RTY2FsZTtcclxuICAgIHRoaXMuY2FtZXJhID0gdmlzdWFsLmNhbWVyYTtcclxuICAgIHRoaXMuZWxlbWVudCA9IHRoaXMudmlzdWFsLmVsZW1lbnQ7XHJcbiAgICB0aGlzLmVsZW1lbnRTaXplID0ge3c6IDEsIGg6IDF9O1xyXG4gICAgdGhpcy5vcmJpdCA9IHZpc3VhbC5nZXRPcmJpdCgpO1xyXG4gICAgdGhpcy5zY2FsZSA9IDE7XHJcbiAgICB0aGlzLnBhZGRpbmcgPSAwO1xyXG5cclxuICAgIHRoaXMuZXBzID0gMWUtNDtcclxuICAgIHRoaXMudiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcbiAgICB0aGlzLmR2ID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcclxuXHJcbiAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcclxuXHJcbiAgICB2aXN1YWwuYWRkUmVuZGVyQ2FsbGJhY2sodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgdGhpcy5vcyA9IHtcclxuICAgICAgdng6IDAsXHJcbiAgICAgIHZ5OiAwLFxyXG4gICAgICB4OiAwLFxyXG4gICAgICB5OiAwXHJcbiAgICB9O1xyXG4gICAgdGhpcy5vcmJpdC51cGRhdGUoKTtcclxuICAgIHRoaXMuY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XHJcbiAgICBsZXQgYm94ID0gdGhpcy5jb21wdXRlQ2xpZW50Qm91bmRCb3goKSwgaz0xLjExO1xyXG4gICAgdGhpcy5tb3ZlUGFuKHt4OiAtaypib3gubWlkLngsIHk6IC1rKmJveC5taWQueX0pO1xyXG4gIH1cclxuXHJcbiAgc2V0UGFkZGluZyhwYWRkaW5nKSB7XHJcbiAgICB0aGlzLnBhZGRpbmcgPSBwYWRkaW5nO1xyXG4gIH1cclxuXHJcbiAgbW92ZVBhbihkdikge1xyXG4gICAgdGhpcy5vcmJpdC5wYW4oZHYueCp0aGlzLnZpc3VhbC53aWR0aCgpLCAtZHYueSp0aGlzLnZpc3VhbC5oZWlnaHQoKSk7XHJcbiAgfVxyXG5cclxuICB2VG9DYW1lcmEodikge1xyXG4gICAgdi5wcm9qZWN0KHRoaXMuY2FtZXJhKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHg6IDAuNSp2LngsXHJcbiAgICAgIHk6IDAuNSp2LnlcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjb21wdXRlQ2xpZW50Qm91bmRCb3goKSB7XHJcbiAgICBjb25zdCBib3ggPSB0aGlzLmJvdW5kQm94Q2xiKCksXHJcbiAgICAgIHhzID0gW2JveC5taW4ueCwgYm94Lm1heC54XSxcclxuICAgICAgeXMgPSBbMCwgMF0sXHJcbiAgICAgIHpzID0gW2JveC5taW4ueiwgYm94Lm1heC56XTtcclxuXHJcbiAgICBjb25zdCBwcyA9IFtdLCByZXMgPSB7bWF4OiB7fSwgbWluOiB7fX07XHJcbiAgICBmb3IobGV0IHggb2YgeHMpIHtcclxuICAgICAgZm9yKGxldCB5IG9mIHlzKSB7XHJcbiAgICAgICAgZm9yKGxldCB6IG9mIHpzKSB7XHJcbiAgICAgICAgICBwcy5wdXNoKHRoaXMudlRvQ2FtZXJhKHRoaXMudi5zZXQoeCx5LHopKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHMuc29ydCgocDEsIHAyKT0+IHAxLngtcDIueCk7XHJcbiAgICByZXMubWluLnggPSBwc1swXS54O1xyXG4gICAgcmVzLm1heC54ID0gcHNbcHMubGVuZ3RoLTFdLng7XHJcbiAgICBwcy5zb3J0KChwMSwgcDIpPT4gcDEueS1wMi55KTtcclxuICAgIHJlcy5taW4ueSA9IHBzWzBdLnk7XHJcbiAgICByZXMubWF4LnkgPSBwc1twcy5sZW5ndGgtMV0ueTtcclxuXHJcbiAgICByZXMud2lkdGggPSByZXMubWF4LngtcmVzLm1pbi54O1xyXG4gICAgcmVzLmhlaWdodCA9IHJlcy5tYXgueS1yZXMubWluLnk7XHJcblxyXG4gICAgcmVzLm1pZCA9IHtcclxuICAgICAgeDogMC41KihyZXMubWF4LngrcmVzLm1pbi54KSxcclxuICAgICAgeTogMC41KihyZXMubWF4LnkrcmVzLm1pbi55KVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgc2V0T2JqZWN0KGJvdW5kQm94Q2xiKSB7XHJcbiAgICB0aGlzLmJvdW5kQm94Q2xiID0gYm91bmRCb3hDbGI7XHJcbiAgfVxyXG5cclxuICB0ZXN0U2NhbGUoKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGNvbXB1dGVDb3JyKEssIG1pbiwgbWF4KSB7XHJcbiAgICBsZXQgY29yciA9IDA7XHJcbiAgICBpZihLPDEpIHtcclxuICAgICAgaWYobWluPi0wLjUpIHtcclxuICAgICAgICBjb3JyID0gLTAuNS1taW47XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihtYXg8MC41KSB7XHJcbiAgICAgICAgY29yciA9IDAuNS1tYXg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBpZihtaW48LTAuNSkge1xyXG4gICAgICAgIGNvcnIgPSAtMC41LW1pbjtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKG1heD4wLjUpIHtcclxuICAgICAgICBjb3JyID0gMC41LW1heDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvcnI7XHJcbiAgfVxyXG5cclxuICBjZW50ZXJWaWV3KFQpIHtcclxuICAgIGxldCBib3ggPSB0aGlzLmNvbXB1dGVDbGllbnRCb3VuZEJveCgpLFxyXG4gICAgICBLeCA9IHRoaXMuZWxlbWVudFNpemUudy9ib3gud2lkdGgsXHJcbiAgICAgIEt5ID0gdGhpcy5lbGVtZW50U2l6ZS5oL2JveC5oZWlnaHQsXHJcbiAgICAgIEsgPSBNYXRoLm1pbihLeCwgS3kpLFxyXG4gICAgICBtb3ZpbmcgPSBmYWxzZTtcclxuXHJcbiAgICBpZih0aGlzLnRlc3RTY2FsZSgpICYmIE1hdGguYWJzKDEvSy10aGlzLnNjYWxlKT50aGlzLmVwcykge1xyXG4gICAgICBjb25zdCBzY2FsZSA9IDEvSyswLjIqKHRoaXMuc2NhbGUtMS9LKTtcclxuICAgICAgdGhpcy5vcmJpdC5zZXRTY2FsZSh0aGlzLm9yYml0LmdldFNjYWxlKCkvKEsqc2NhbGUpKTtcclxuICAgICAgdGhpcy5vcmJpdC51cGRhdGUoKTtcclxuICAgICAgdGhpcy5jYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcclxuICAgICAgYm94ID0gdGhpcy5jb21wdXRlQ2xpZW50Qm91bmRCb3goKTtcclxuICAgICAgICBLeCA9IHRoaXMuZWxlbWVudFNpemUudy9ib3gud2lkdGg7XHJcbiAgICAgICAgS3kgPSB0aGlzLmVsZW1lbnRTaXplLmgvYm94LmhlaWdodDtcclxuICAgICAgICBLID0gTWF0aC5taW4oS3gsIEt5KTtcclxuICAgICAgbW92aW5nID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBkdiA9IHRoaXMuZHY7XHJcbiAgICBpZihLPjEtdGhpcy5lcHMpIHtcclxuICAgICAgaWYodGhpcy5wYWRkaW5nKSB7XHJcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy52aXN1YWwuaGVpZ2h0KCksIG1hcmcgPSAwLjUqKEt5LTEpL0t5LCBwYWQgPSB0aGlzLnBhZGRpbmcvaGVpZ2h0LCBkcGFkID0gTWF0aC5tYXgoMCwgTWF0aC5hYnMocGFkKS1tYXJnKTtcclxuICAgICAgICBkdi5zZXQoLWJveC5taWQueCwgLU1hdGguc2lnbihwYWQpKk1hdGgubWluKE1hdGgubWF4KDAsIG1hcmctMjAvaGVpZ2h0KSwgZHBhZCktYm94Lm1pZC55KTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBkdi5zZXQoLWJveC5taWQueCwgLWJveC5taWQueSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBjb25zdCBweCA9IDcwL3RoaXMudmlzdWFsLndpZHRoKCksIHB5PTcwL3RoaXMudmlzdWFsLmhlaWdodCgpO1xyXG4gICAgICBkdi5zZXQodGhpcy5jb21wdXRlQ29ycihLeCwgYm94Lm1pbi54LXB4LCBib3gubWF4LngrcHgpLFxyXG4gICAgICAgICAgICAgdGhpcy5jb21wdXRlQ29ycihLeSwgYm94Lm1pbi55LXB5LCBib3gubWF4LnkrcHkpKTtcclxuICAgIH1cclxuXHJcbiAgICBpZihNYXRoLnNxcnQodGhpcy5vcy52eCp0aGlzLm9zLnZ4K3RoaXMub3MudnkqdGhpcy5vcy52eSk+MC4wMDMgfHwgZHYubGVuZ3RoKCk+MC4wMDMpIHtcclxuICAgICAgbGV0IGR0ID0gMS82MCwgdD0wLCBvcyA9IHtcclxuICAgICAgICAuLi50aGlzLm9zLFxyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogMFxyXG4gICAgICB9O1xyXG4gICAgICBvcy50ZiA9ICh2eCwgdnksIHgsIHkpPT4gKHtcclxuICAgICAgICB4OiA3NSooZHYueC14KSxcclxuICAgICAgICB5OiA3NSooZHYueS15KVxyXG4gICAgICB9KTtcclxuICAgICAgd2hpbGUodDxUKSB7XHJcbiAgICAgICAgaWYodCtkdD5UKSB7XHJcbiAgICAgICAgICBkdCA9IFQtdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgb3MgPSB0aGlzLmludGVncmF0ZShvcywgZHQpO1xyXG4gICAgICAgIHQgKz0gZHQ7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5tb3ZlUGFuKG9zKTtcclxuICAgICAgdGhpcy5vcyA9IG9zO1xyXG4gICAgICBtb3ZpbmcgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5vcmJpdC5zZXRNb3ZpbmcobW92aW5nKTtcclxuICB9XHJcblxyXG4gIGludGVncmF0ZShvcywgZHQpIHtcclxuICAgIGNvbnN0IFt2eCwgdnksIHgsIHldID0gTWF0aFV0aWxzLnJrNChcclxuICAgICAgdGhpcy5keS5iaW5kKG9zKSxcclxuICAgICAgMCxcclxuICAgICAgZHQsXHJcbiAgICAgIFtvcy52eCwgb3MudnksIG9zLngsIG9zLnldXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLi4ub3MsXHJcbiAgICAgIHZ4LCB2eSwgeCwgeVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGR5KHQsWSkge1xyXG4gICAgY29uc3QgW3Z4LCB2eSwgeCwgeV0gPSBZLCB2ZCA9IDE1LCB0ZiA9IHRoaXMudGYodngsIHZ5LCB4LCB5KTtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIHRmLngtdmQqdngsXHJcbiAgICAgIHRmLnktdmQqdnksXHJcbiAgICAgIHZ4LFxyXG4gICAgICB2eVxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZShkdCkge1xyXG4gICAgaWYodGhpcy5lbmFibGVkICYmIHRoaXMuYm91bmRCb3hDbGIpIHtcclxuICAgICAgdGhpcy5jZW50ZXJWaWV3KGR0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL09iamVjdDNEV2F0Y2hlci5qcyIsImltcG9ydCB7VEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3JiaXQgZXh0ZW5kcyBUSFJFRS5FdmVudERpc3BhdGNoZXIge1xyXG5cclxuICBjb25zdHJ1Y3RvcihvYmplY3QsIHdvcmxkKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5tb3ZpbmcgPSBmYWxzZTtcclxuICBcdHRoaXMub2JqZWN0ID0gb2JqZWN0O1xyXG4gIFx0dGhpcy53b3JsZCA9IHdvcmxkO1xyXG5cclxuICBcdC8vIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHRoaXMgY29udHJvbFxyXG4gIFx0dGhpcy5lbmFibGVkID0gdHJ1ZTtcclxuXHJcbiAgXHQvLyBcInRhcmdldFwiIHNldHMgdGhlIGxvY2F0aW9uIG9mIGZvY3VzLCB3aGVyZSB0aGUgb2JqZWN0IG9yYml0cyBhcm91bmRcclxuICBcdHRoaXMudGFyZ2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuXHJcbiAgXHQvLyBIb3cgZmFyIHlvdSBjYW4gZG9sbHkgaW4gYW5kIG91dChQZXJzcGVjdGl2ZUNhbWVyYSBvbmx5KVxyXG4gIFx0dGhpcy5taW5EaXN0YW5jZSA9IDA7XHJcbiAgXHR0aGlzLm1heERpc3RhbmNlID0gSW5maW5pdHk7XHJcblxyXG4gIFx0Ly8gSG93IGZhciB5b3UgY2FuIHpvb20gaW4gYW5kIG91dChPcnRob2dyYXBoaWNDYW1lcmEgb25seSlcclxuICBcdHRoaXMubWluWm9vbSA9IDA7XHJcbiAgXHR0aGlzLm1heFpvb20gPSBJbmZpbml0eTtcclxuXHJcbiAgXHQvLyBIb3cgZmFyIHlvdSBjYW4gb3JiaXQgdmVydGljYWxseSwgdXBwZXIgYW5kIGxvd2VyIGxpbWl0cy5cclxuICBcdC8vIFJhbmdlIGlzIDAgdG8gTWF0aC5QSSByYWRpYW5zLlxyXG4gIFx0dGhpcy5taW5Qb2xhckFuZ2xlID0gMDsgLy8gcmFkaWFuc1xyXG4gIFx0dGhpcy5tYXhQb2xhckFuZ2xlID0gTWF0aC5QSTsgLy8gcmFkaWFuc1xyXG5cclxuICBcdC8vIEhvdyBmYXIgeW91IGNhbiBvcmJpdCBob3Jpem9udGFsbHksIHVwcGVyIGFuZCBsb3dlciBsaW1pdHMuXHJcbiAgXHQvLyBJZiBzZXQsIG11c3QgYmUgYSBzdWItaW50ZXJ2YWwgb2YgdGhlIGludGVydmFsIFstTWF0aC5QSSwgTWF0aC5QSSBdLlxyXG4gIFx0dGhpcy5taW5BemltdXRoQW5nbGUgPSAtSW5maW5pdHk7IC8vIHJhZGlhbnNcclxuICBcdHRoaXMubWF4QXppbXV0aEFuZ2xlID0gSW5maW5pdHk7IC8vIHJhZGlhbnNcclxuXHJcbiAgXHQvLyBTZXQgdG8gdHJ1ZSB0byBlbmFibGUgZGFtcGluZyAoaW5lcnRpYSlcclxuICBcdC8vIElmIGRhbXBpbmcgaXMgZW5hYmxlZCwgeW91IG11c3QgY2FsbCBjb250cm9scy51cGRhdGUoKSBpbiB5b3VyIGFuaW1hdGlvbiBsb29wXHJcbiAgXHR0aGlzLmVuYWJsZURhbXBpbmcgPSBmYWxzZTtcclxuICBcdHRoaXMuZGFtcGluZ0ZhY3RvciA9IDAuMjU7XHJcblxyXG4gIFx0Ly8gVGhpcyBvcHRpb24gYWN0dWFsbHkgZW5hYmxlcyBkb2xseWluZyBpbiBhbmQgb3V0OyBsZWZ0IGFzIFwiem9vbVwiIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cclxuICBcdC8vIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHpvb21pbmdcclxuICBcdHRoaXMuZW5hYmxlWm9vbSA9IHRydWU7XHJcbiAgXHR0aGlzLnpvb21TcGVlZCA9IDEuMDtcclxuXHJcbiAgXHQvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSByb3RhdGluZ1xyXG4gIFx0dGhpcy5lbmFibGVSb3RhdGUgPSB0cnVlO1xyXG4gIFx0dGhpcy5yb3RhdGVTcGVlZCA9IDEuMDtcclxuXHJcbiAgXHQvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSBwYW5uaW5nXHJcbiAgXHR0aGlzLmVuYWJsZVBhbiA9IHRydWU7XHJcblxyXG4gIFx0Ly8gU2V0IHRvIHRydWUgdG8gYXV0b21hdGljYWxseSByb3RhdGUgYXJvdW5kIHRoZSB0YXJnZXRcclxuICBcdC8vIElmIGF1dG8tcm90YXRlIGlzIGVuYWJsZWQsIHlvdSBtdXN0IGNhbGwgY29udHJvbHMudXBkYXRlKCkgaW4geW91ciBhbmltYXRpb24gbG9vcFxyXG4gIFx0dGhpcy5hdXRvUm90YXRlID0gZmFsc2U7XHJcbiAgXHR0aGlzLmF1dG9Sb3RhdGVTcGVlZCA9IDIuMDsgLy8gMzAgc2Vjb25kcyBwZXIgcm91bmQgd2hlbiBmcHMgaXMgNjBcclxuXHJcbiAgXHQvLyBmb3IgcmVzZXRcclxuICBcdHRoaXMudGFyZ2V0MCA9IHRoaXMudGFyZ2V0LmNsb25lKCk7XHJcbiAgXHR0aGlzLnBvc2l0aW9uMCA9IHRoaXMub2JqZWN0LnBvc2l0aW9uLmNsb25lKCk7XHJcbiAgXHR0aGlzLnpvb20wID0gdGhpcy5vYmplY3Quem9vbTtcclxuXHJcbiAgXHQvL1xyXG4gIFx0Ly8gcHVibGljIG1ldGhvZHNcclxuICBcdC8vXHJcbiAgXHR0aGlzLmdldFBvbGFyQW5nbGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgXHRcdHJldHVybiBzcGhlcmljYWwucGhpO1xyXG4gIFx0fTtcclxuXHJcbiAgXHR0aGlzLmdldEF6aW11dGhhbEFuZ2xlID0gZnVuY3Rpb24gKCkge1xyXG4gIFx0XHRyZXR1cm4gc3BoZXJpY2FsLnRoZXRhO1xyXG4gIFx0fTtcclxuXHJcbiAgXHR0aGlzLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gIFx0XHRzY29wZS50YXJnZXQuY29weShzY29wZS50YXJnZXQwKTtcclxuICBcdFx0c2NvcGUub2JqZWN0LnBvc2l0aW9uLmNvcHkoc2NvcGUucG9zaXRpb24wKTtcclxuICBcdFx0c2NvcGUub2JqZWN0Lnpvb20gPSBzY29wZS56b29tMDtcclxuXHJcbiAgXHRcdHNjb3BlLm9iamVjdC51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcbiAgXHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoY2hhbmdlRXZlbnQpO1xyXG5cclxuICBcdFx0c2NvcGUudXBkYXRlKCk7XHJcbiAgXHR9O1xyXG5cclxuICAgIHRoaXMuem9vbU91dCA9IGZ1bmN0aW9uKHNwZWVkPXRoaXMuem9vbVNwZWVkKSB7XHJcbiAgICAgIGNvbnN0IF9zcGVlZCA9IHRoaXMuem9vbVNwZWVkO1xyXG4gICAgICB0aGlzLnpvb21TcGVlZCA9IHNwZWVkO1xyXG4gICAgICBkb2xseUluKGdldFpvb21TY2FsZSgpKTtcclxuICAgICAgdGhpcy56b29tU3BlZWQgPSBfc3BlZWQ7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuem9vbUluID0gZnVuY3Rpb24oc3BlZWQ9dGhpcy56b29tU3BlZWQpIHtcclxuICAgICAgY29uc3QgX3NwZWVkID0gdGhpcy56b29tU3BlZWQ7XHJcbiAgICAgIHRoaXMuem9vbVNwZWVkID0gc3BlZWQ7XHJcbiAgICAgIGRvbGx5T3V0KGdldFpvb21TY2FsZSgpKTtcclxuICAgICAgdGhpcy56b29tU3BlZWQgPSBfc3BlZWQ7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZ2V0U2NhbGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHNjYWxlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2V0U2NhbGUgPSBmdW5jdGlvbihuZXdTY2FsZSkge1xyXG4gICAgICBzY2FsZSA9IG5ld1NjYWxlO1xyXG4gICAgfVxyXG5cclxuICBcdC8vIHRoaXMgbWV0aG9kIGlzIGV4cG9zZWQsIGJ1dCBwZXJoYXBzIGl0IHdvdWxkIGJlIGJldHRlciBpZiB3ZSBjYW4gbWFrZSBpdCBwcml2YXRlLi4uXHJcbiAgXHR0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIFx0XHR2YXIgb2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICBcdFx0Ly8gc28gY2FtZXJhLnVwIGlzIHRoZSBvcmJpdCBheGlzXHJcbiAgXHRcdHZhciBxdWF0ID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tVW5pdFZlY3RvcnMob2JqZWN0LnVwLCBuZXcgVEhSRUUuVmVjdG9yMygwLCAxLCAwKSk7XHJcbiAgXHRcdHZhciBxdWF0SW52ZXJzZSA9IHF1YXQuY2xvbmUoKS5pbnZlcnNlKCk7XHJcbiAgXHRcdHZhciBsYXN0UG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gIFx0XHR2YXIgbGFzdFF1YXRlcm5pb24gPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpO1xyXG5cclxuICBcdFx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XHJcbiAgXHRcdFx0dmFyIHBvc2l0aW9uID0gc2NvcGUub2JqZWN0LnBvc2l0aW9uO1xyXG4gIFx0XHRcdG9mZnNldC5jb3B5KHBvc2l0aW9uKS5zdWIoc2NvcGUudGFyZ2V0KTtcclxuICBcdFx0XHQvLyByb3RhdGUgb2Zmc2V0IHRvIFwieS1heGlzLWlzLXVwXCIgc3BhY2VcclxuICBcdFx0XHRvZmZzZXQuYXBwbHlRdWF0ZXJuaW9uKHF1YXQpO1xyXG4gIFx0XHRcdC8vIGFuZ2xlIGZyb20gei1heGlzIGFyb3VuZCB5LWF4aXNcclxuICBcdFx0XHRzcGhlcmljYWwuc2V0RnJvbVZlY3RvcjMob2Zmc2V0KTtcclxuICBcdFx0XHRpZihzY29wZS5hdXRvUm90YXRlKSB7XHJcbiAgXHRcdFx0XHRyb3RhdGVMZWZ0KGdldEF1dG9Sb3RhdGlvbkFuZ2xlKCkpO1xyXG4gIFx0XHRcdH1cclxuICBcdFx0XHRzcGhlcmljYWwudGhldGEgKz0gc3BoZXJpY2FsRGVsdGEudGhldGE7XHJcbiAgXHRcdFx0c3BoZXJpY2FsLnBoaSArPSBzcGhlcmljYWxEZWx0YS5waGk7XHJcbiAgXHRcdFx0Ly8gcmVzdHJpY3QgdGhldGEgdG8gYmUgYmV0d2VlbiBkZXNpcmVkIGxpbWl0c1xyXG4gIFx0XHRcdHNwaGVyaWNhbC50aGV0YSA9IE1hdGgubWF4KHNjb3BlLm1pbkF6aW11dGhBbmdsZSwgTWF0aC5taW4oc2NvcGUubWF4QXppbXV0aEFuZ2xlLCBzcGhlcmljYWwudGhldGEpKTtcclxuICBcdFx0XHQvLyByZXN0cmljdCBwaGkgdG8gYmUgYmV0d2VlbiBkZXNpcmVkIGxpbWl0c1xyXG4gIFx0XHRcdHNwaGVyaWNhbC5waGkgPSBNYXRoLm1heChzY29wZS5taW5Qb2xhckFuZ2xlLCBNYXRoLm1pbihzY29wZS5tYXhQb2xhckFuZ2xlLCBzcGhlcmljYWwucGhpKSk7XHJcbiAgXHRcdFx0c3BoZXJpY2FsLm1ha2VTYWZlKCk7XHJcbiAgXHRcdFx0c3BoZXJpY2FsLnJhZGl1cyAqPSBzY2FsZTtcclxuICBcdFx0XHQvLyByZXN0cmljdCByYWRpdXMgdG8gYmUgYmV0d2VlbiBkZXNpcmVkIGxpbWl0c1xyXG4gIFx0XHRcdHNwaGVyaWNhbC5yYWRpdXMgPSBNYXRoLm1heChzY29wZS5taW5EaXN0YW5jZSwgTWF0aC5taW4oc2NvcGUubWF4RGlzdGFuY2UsIHNwaGVyaWNhbC5yYWRpdXMpKTtcclxuICBcdFx0XHQvLyBtb3ZlIHRhcmdldCB0byBwYW5uZWQgbG9jYXRpb25cclxuICBcdFx0XHRzY29wZS50YXJnZXQuYWRkKHBhbk9mZnNldCk7XHJcbiAgXHRcdFx0b2Zmc2V0LnNldEZyb21TcGhlcmljYWwoc3BoZXJpY2FsKTtcclxuICBcdFx0XHQvLyByb3RhdGUgb2Zmc2V0IGJhY2sgdG8gXCJjYW1lcmEtdXAtdmVjdG9yLWlzLXVwXCIgc3BhY2VcclxuICBcdFx0XHRvZmZzZXQuYXBwbHlRdWF0ZXJuaW9uKHF1YXRJbnZlcnNlKTtcclxuICBcdFx0XHRwb3NpdGlvbi5jb3B5KHNjb3BlLnRhcmdldCkuYWRkKG9mZnNldCk7XHJcbiAgXHRcdFx0c2NvcGUub2JqZWN0Lmxvb2tBdChzY29wZS50YXJnZXQpO1xyXG5cclxuICBcdFx0XHRpZihzY29wZS5lbmFibGVEYW1waW5nPT09dHJ1ZSkge1xyXG4gIFx0XHRcdFx0c3BoZXJpY2FsRGVsdGEudGhldGEgKj0oMS1zY29wZS5kYW1waW5nRmFjdG9yKTtcclxuICBcdFx0XHRcdHNwaGVyaWNhbERlbHRhLnBoaSAqPSgxLXNjb3BlLmRhbXBpbmdGYWN0b3IpO1xyXG4gIFx0XHRcdH0gZWxzZSB7XHJcbiAgXHRcdFx0XHRzcGhlcmljYWxEZWx0YS5zZXQoMCwgMCwgMCk7XHJcbiAgXHRcdFx0fVxyXG5cclxuICBcdFx0XHRzY2FsZSA9IDE7XHJcbiAgXHRcdFx0cGFuT2Zmc2V0LnNldCgwLCAwLCAwKTtcclxuXHJcbiAgXHRcdFx0Ly8gdXBkYXRlIGNvbmRpdGlvbiBpczpcclxuICBcdFx0XHQvLyBtaW4oY2FtZXJhIGRpc3BsYWNlbWVudCwgY2FtZXJhIHJvdGF0aW9uIGluIHJhZGlhbnMpXjIgPiBFUFNcclxuICBcdFx0XHQvLyB1c2luZyBzbWFsbC1hbmdsZSBhcHByb3hpbWF0aW9uIGNvcyh4LzIpID0gMS14XjIgLyA4XHJcblxyXG4gIFx0XHRcdGlmKHpvb21DaGFuZ2VkIHx8XHJcbiAgXHRcdFx0XHRsYXN0UG9zaXRpb24uZGlzdGFuY2VUb1NxdWFyZWQoc2NvcGUub2JqZWN0LnBvc2l0aW9uKSA+IEVQUyB8fFxyXG4gIFx0XHRcdFx0OCAqKDEtbGFzdFF1YXRlcm5pb24uZG90KHNjb3BlLm9iamVjdC5xdWF0ZXJuaW9uKSkgPiBFUFMpIHtcclxuXHJcbiAgXHRcdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KGNoYW5nZUV2ZW50KTtcclxuXHJcbiAgXHRcdFx0XHRsYXN0UG9zaXRpb24uY29weShzY29wZS5vYmplY3QucG9zaXRpb24pO1xyXG4gIFx0XHRcdFx0bGFzdFF1YXRlcm5pb24uY29weShzY29wZS5vYmplY3QucXVhdGVybmlvbik7XHJcbiAgXHRcdFx0XHR6b29tQ2hhbmdlZCA9IGZhbHNlO1xyXG5cclxuICBcdFx0XHRcdHJldHVybiB0cnVlO1xyXG4gIFx0XHRcdH1cclxuICBcdFx0XHRyZXR1cm4gZmFsc2U7XHJcbiAgXHRcdH07XHJcbiAgXHR9KCk7XHJcblxyXG4gICAgdGhpcy5kaXNwb3NlID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgXHQvL1xyXG4gIFx0Ly8gaW50ZXJuYWxzXHJcbiAgXHQvL1xyXG4gIFx0dmFyIHNjb3BlID0gdGhpcztcclxuICBcdHZhciBjaGFuZ2VFdmVudCA9IHsgdHlwZTogJ2NoYW5nZScgfTtcclxuICBcdHZhciBFUFMgPSAxZS02O1xyXG4gIFx0Ly8gY3VycmVudCBwb3NpdGlvbiBpbiBzcGhlcmljYWwgY29vcmRpbmF0ZXNcclxuICBcdHZhciBzcGhlcmljYWwgPSBuZXcgVEhSRUUuU3BoZXJpY2FsKCk7XHJcbiAgXHR2YXIgc3BoZXJpY2FsRGVsdGEgPSBuZXcgVEhSRUUuU3BoZXJpY2FsKCk7XHJcblxyXG4gIFx0dmFyIHNjYWxlID0gMTtcclxuICBcdHZhciBwYW5PZmZzZXQgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gIFx0dmFyIHpvb21DaGFuZ2VkID0gZmFsc2U7XHJcblxyXG4gIFx0ZnVuY3Rpb24gZ2V0QXV0b1JvdGF0aW9uQW5nbGUoKSB7XHJcbiAgXHRcdHJldHVybiAyICogTWF0aC5QSSAvIDYwIC8gNjAgKiBzY29wZS5hdXRvUm90YXRlU3BlZWQ7XHJcbiAgXHR9XHJcblxyXG4gIFx0ZnVuY3Rpb24gZ2V0Wm9vbVNjYWxlKCkge1xyXG4gIFx0XHRyZXR1cm4gTWF0aC5wb3coMC45NSwgc2NvcGUuem9vbVNwZWVkKTtcclxuICBcdH1cclxuXHJcbiAgXHRmdW5jdGlvbiByb3RhdGVMZWZ0KGFuZ2xlKSB7XHJcbiAgXHRcdHNwaGVyaWNhbERlbHRhLnRoZXRhIC09IGFuZ2xlO1xyXG4gIFx0fVxyXG5cclxuICBcdGZ1bmN0aW9uIHJvdGF0ZVVwKGFuZ2xlKSB7XHJcbiAgXHRcdHNwaGVyaWNhbERlbHRhLnBoaSAtPSBhbmdsZTtcclxuICBcdH1cclxuXHJcbiAgXHR2YXIgcGFuTGVmdCA9IGZ1bmN0aW9uKCkge1xyXG4gIFx0XHR2YXIgdiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcbiAgXHRcdHJldHVybiBmdW5jdGlvbiBwYW5MZWZ0KGRpc3RhbmNlLCBvYmplY3RNYXRyaXgpIHtcclxuICBcdFx0XHR2LnNldEZyb21NYXRyaXhDb2x1bW4ob2JqZWN0TWF0cml4LCAwKTsgLy8gZ2V0IFggY29sdW1uIG9mIG9iamVjdE1hdHJpeFxyXG4gIFx0XHRcdHYubXVsdGlwbHlTY2FsYXIoLSBkaXN0YW5jZSk7XHJcbiAgXHRcdFx0cGFuT2Zmc2V0LmFkZCh2KTtcclxuICBcdFx0fTtcclxuICBcdH0oKTtcclxuXHJcbiAgXHR2YXIgcGFuVXAgPSBmdW5jdGlvbigpIHtcclxuICBcdFx0dmFyIHYgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gIFx0XHRyZXR1cm4gZnVuY3Rpb24gcGFuVXAoZGlzdGFuY2UsIG9iamVjdE1hdHJpeCkge1xyXG4gIFx0XHRcdHYuc2V0RnJvbU1hdHJpeENvbHVtbihvYmplY3RNYXRyaXgsIDEpOyAvLyBnZXQgWSBjb2x1bW4gb2Ygb2JqZWN0TWF0cml4XHJcbiAgXHRcdFx0di5tdWx0aXBseVNjYWxhcihkaXN0YW5jZSk7XHJcbiAgXHRcdFx0cGFuT2Zmc2V0LmFkZCh2KTtcclxuICBcdFx0fTtcclxuICBcdH0oKTtcclxuXHJcbiAgXHQvLyBkZWx0YVggYW5kIGRlbHRhWSBhcmUgaW4gcGl4ZWxzOyByaWdodCBhbmQgZG93biBhcmUgcG9zaXRpdmVcclxuICBcdHNjb3BlLnBhbiA9IGZ1bmN0aW9uKCkge1xyXG4gIFx0XHR2YXIgb2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICBcdFx0cmV0dXJuIGZ1bmN0aW9uIHBhbihkZWx0YVgsIGRlbHRhWSkge1xyXG4gIFx0XHRcdHZhciBjbGllbnRXaWR0aCA9IHNjb3BlLndvcmxkLndpZHRoKCksIGNsaWVudEhlaWdodCA9IHNjb3BlLndvcmxkLmhlaWdodCgpO1xyXG4gIFx0XHRcdGlmKHNjb3BlLm9iamVjdCBpbnN0YW5jZW9mIFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKSB7XHJcbiAgXHRcdFx0XHQvLyBwZXJzcGVjdGl2ZVxyXG4gIFx0XHRcdFx0dmFyIHBvc2l0aW9uID0gc2NvcGUub2JqZWN0LnBvc2l0aW9uO1xyXG4gIFx0XHRcdFx0b2Zmc2V0LmNvcHkocG9zaXRpb24pLnN1YihzY29wZS50YXJnZXQpO1xyXG4gIFx0XHRcdFx0dmFyIHRhcmdldERpc3RhbmNlID0gb2Zmc2V0Lmxlbmd0aCgpO1xyXG4gIFx0XHRcdFx0Ly8gaGFsZiBvZiB0aGUgZm92IGlzIGNlbnRlciB0byB0b3Agb2Ygc2NyZWVuXHJcbiAgXHRcdFx0XHR0YXJnZXREaXN0YW5jZSAqPSBNYXRoLnRhbigoc2NvcGUub2JqZWN0LmZvdiAvIDIpICogTWF0aC5QSSAvIDE4MC4wKTtcclxuICBcdFx0XHRcdC8vIHdlIGFjdHVhbGx5IGRvbid0IHVzZSBzY3JlZW5XaWR0aCwgc2luY2UgcGVyc3BlY3RpdmUgY2FtZXJhIGlzIGZpeGVkIHRvIHNjcmVlbiBoZWlnaHRcclxuICBcdFx0XHRcdHBhbkxlZnQoMiAqIGRlbHRhWCAqIHRhcmdldERpc3RhbmNlIC8gY2xpZW50SGVpZ2h0LCBzY29wZS5vYmplY3QubWF0cml4KTtcclxuICBcdFx0XHRcdHBhblVwKDIgKiBkZWx0YVkgKiB0YXJnZXREaXN0YW5jZSAvIGNsaWVudEhlaWdodCwgc2NvcGUub2JqZWN0Lm1hdHJpeCk7XHJcbiAgXHRcdFx0fSBlbHNlIGlmKHNjb3BlLm9iamVjdCBpbnN0YW5jZW9mIFRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYSkge1xyXG4gIFx0XHRcdFx0Ly8gb3J0aG9ncmFwaGljXHJcbiAgXHRcdFx0XHRwYW5MZWZ0KGRlbHRhWCAqKHNjb3BlLm9iamVjdC5yaWdodC1zY29wZS5vYmplY3QubGVmdCkgLyBzY29wZS5vYmplY3Quem9vbSAvIGNsaWVudFdpZHRoLCBzY29wZS5vYmplY3QubWF0cml4KTtcclxuICBcdFx0XHRcdHBhblVwKGRlbHRhWSAqKHNjb3BlLm9iamVjdC50b3Atc2NvcGUub2JqZWN0LmJvdHRvbSkgLyBzY29wZS5vYmplY3Quem9vbSAvIGNsaWVudEhlaWdodCwgc2NvcGUub2JqZWN0Lm1hdHJpeCk7XHJcbiAgXHRcdFx0fSBlbHNlIHtcclxuICBcdFx0XHRcdC8vIGNhbWVyYSBuZWl0aGVyIG9ydGhvZ3JhcGhpYyBub3IgcGVyc3BlY3RpdmVcclxuICBcdFx0XHRcdGNvbnNvbGUud2FybignV0FSTklORzogT3JiaXRDb250cm9scy5qcyBlbmNvdW50ZXJlZCBhbiB1bmtub3duIGNhbWVyYSB0eXBlLXBhbiBkaXNhYmxlZC4nKTtcclxuICBcdFx0XHRcdHNjb3BlLmVuYWJsZVBhbiA9IGZhbHNlO1xyXG4gIFx0XHRcdH1cclxuICBcdFx0fTtcclxuICBcdH0oKTtcclxuXHJcbiAgXHRmdW5jdGlvbiBkb2xseUluKGRvbGx5U2NhbGUpIHtcclxuICAgICAgaWYoc2NvcGUub2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEpIHtcclxuICBcdFx0XHRzY2FsZSAvPSBkb2xseVNjYWxlO1xyXG4gIFx0XHR9IGVsc2UgaWYoc2NvcGUub2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKSB7XHJcbiAgXHRcdFx0c2NvcGUub2JqZWN0Lnpvb20gPSBNYXRoLm1heChzY29wZS5taW5ab29tLCBNYXRoLm1pbihzY29wZS5tYXhab29tLCBzY29wZS5vYmplY3Quem9vbSAqIGRvbGx5U2NhbGUpKTtcclxuICBcdFx0XHRzY29wZS5vYmplY3QudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG4gIFx0XHRcdHpvb21DaGFuZ2VkID0gdHJ1ZTtcclxuICBcdFx0fSBlbHNlIHtcclxuICBcdFx0XHRjb25zb2xlLndhcm4oJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZS1kb2xseS96b29tIGRpc2FibGVkLicpO1xyXG4gIFx0XHRcdHNjb3BlLmVuYWJsZVpvb20gPSBmYWxzZTtcclxuICBcdFx0fVxyXG4gIFx0fVxyXG5cclxuICBcdGZ1bmN0aW9uIGRvbGx5T3V0KGRvbGx5U2NhbGUpIHtcclxuICAgICAgaWYoc2NvcGUub2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEpIHtcclxuICBcdFx0XHRzY2FsZSAqPSBkb2xseVNjYWxlO1xyXG4gIFx0XHR9IGVsc2UgaWYoc2NvcGUub2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKSB7XHJcbiAgXHRcdFx0c2NvcGUub2JqZWN0Lnpvb20gPSBNYXRoLm1heChzY29wZS5taW5ab29tLCBNYXRoLm1pbihzY29wZS5tYXhab29tLCBzY29wZS5vYmplY3Quem9vbSAvIGRvbGx5U2NhbGUpKTtcclxuICBcdFx0XHRzY29wZS5vYmplY3QudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG4gIFx0XHRcdHpvb21DaGFuZ2VkID0gdHJ1ZTtcclxuICBcdFx0fSBlbHNlIHtcclxuICBcdFx0XHRjb25zb2xlLndhcm4oJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZS1kb2xseS96b29tIGRpc2FibGVkLicpO1xyXG4gIFx0XHRcdHNjb3BlLmVuYWJsZVpvb20gPSBmYWxzZTtcclxuICBcdFx0fVxyXG4gIFx0fVxyXG5cclxuICAgIC8qIEFjdGlvbnMgKi9cclxuXHJcbiAgICBmdW5jdGlvbiByb3RhdGUoZXZlbnQsIGRhdGEpIHtcclxuICAgICAgaWYoc2NvcGUuZW5hYmxlZCAmJiBzY29wZS5lbmFibGVSb3RhdGUgJiYgZGF0YS5zdGF0ZT09PSdtb3ZlJykge1xyXG4gICAgICAgIHZhciBjbGllbnRXaWR0aCA9IHNjb3BlLndvcmxkLndpZHRoKCksIGNsaWVudEhlaWdodCA9IHNjb3BlLndvcmxkLmhlaWdodCgpO1xyXG4gICAgICAgIC8vIHJvdGF0aW5nIGFjcm9zcyB3aG9sZSBzY3JlZW4gZ29lcyAzNjAgZGVncmVlcyBhcm91bmRcclxuICAgICAgICByb3RhdGVMZWZ0KDIgKiBNYXRoLlBJICogZGF0YS5keCAvIGNsaWVudFdpZHRoICogc2NvcGUucm90YXRlU3BlZWQpO1xyXG4gICAgICAgIC8vIHJvdGF0aW5nIHVwIGFuZCBkb3duIGFsb25nIHdob2xlIHNjcmVlbiBhdHRlbXB0cyB0byBnbyAzNjAsIGJ1dCBsaW1pdGVkIHRvIDE4MFxyXG4gICAgICAgIHJvdGF0ZVVwKDIgKiBNYXRoLlBJICogZGF0YS5keSAvIGNsaWVudEhlaWdodCAqIHNjb3BlLnJvdGF0ZVNwZWVkKTtcclxuICAgICAgICBzY29wZS51cGRhdGUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHBhbihldmVudCwgZGF0YSkge1xyXG4gICAgICBpZihzY29wZS5lbmFibGVkICYmIHNjb3BlLmVuYWJsZVBhbiAmJiBkYXRhLnN0YXRlPT09J21vdmUnKSB7XHJcbiAgICAgICAgc2NvcGUucGFuKGRhdGEuZHgsIGRhdGEuZHkpO1xyXG4gICAgICAgIHNjb3BlLnVwZGF0ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gb2Zmc2V0RG9sbHkoZXZlbnQsIGRhdGEpIHtcclxuICAgICAgaWYoc2NvcGUuZW5hYmxlZCAmJiBzY29wZS5lbmFibGVab29tICYmIGRhdGEuc3RhdGU9PT0nbW92ZScpIHtcclxuICAgICAgICBpZihkYXRhLmR5PjApIHtcclxuICAgICAgICAgIGRvbGx5SW4oZ2V0Wm9vbVNjYWxlKCkpO1xyXG4gICAgICAgIH0gZWxzZSBpZihkYXRhLmR5PDApIHtcclxuICAgICAgICAgIGRvbGx5T3V0KGdldFpvb21TY2FsZSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2NvcGUudXBkYXRlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB3aGVlbERvbGx5KGV2ZW50KSB7XHJcbiAgICAgIGlmKHNjb3BlLmVuYWJsZWQgJiYgc2NvcGUuZW5hYmxlWm9vbSkge1xyXG4gICAgICAgIGlmKGV2ZW50LmRlbHRhWT4wKSB7XHJcbiAgICAgICAgICBkb2xseU91dChnZXRab29tU2NhbGUoKSk7XHJcbiAgICAgICAgfSBlbHNlIGlmKGV2ZW50LmRlbHRhWTwwKSB7XHJcbiAgICAgICAgICBkb2xseUluKGdldFpvb21TY2FsZSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2NvcGUudXBkYXRlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmFjdGlvbnMgPSB7XHJcbiAgICAgIHJvdGF0ZSxcclxuICAgICAgcGFuLFxyXG4gICAgICBvZmZzZXREb2xseSxcclxuICAgICAgd2hlZWxEb2xseVxyXG4gICAgfVxyXG5cclxuICBcdC8vIGZvcmNlIGFuIHVwZGF0ZSBhdCBzdGFydFxyXG4gIFx0dGhpcy51cGRhdGUoKTtcclxuICB9XHJcblxyXG4gIHNldE1vdmluZyhtb3ZpbmcpIHtcclxuICAgIHRoaXMubW92aW5nID0gbW92aW5nO1xyXG4gIH1cclxuXHJcbiAgaXNNb3ZpbmcoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5tb3Zpbmc7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9PcmJpdC5qcyIsImltcG9ydCB7JCxQREZKU30gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBJbWFnZUJhc2UgZnJvbSAnLi9JbWFnZUJhc2UnO1xyXG5pbXBvcnQgUGRmIGZyb20gJy4vUGRmJztcclxuaW1wb3J0IEJhc2VNYXRoVXRpbHMgZnJvbSAnLi9CYXNlTWF0aFV0aWxzJztcclxuaW1wb3J0IEN1c3RvbUV2ZW50Q29udmVydGVyIGZyb20gJy4vQ3VzdG9tRXZlbnRDb252ZXJ0ZXInO1xyXG5pbXBvcnQgUG9seVRhcmdldCBmcm9tICcuL3RhcmdldHMvUG9seVRhcmdldCc7XHJcblxyXG5pbXBvcnQgRmluZGVyIGZyb20gJy4vRmluZGVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBkZkltYWdlIGV4dGVuZHMgSW1hZ2VCYXNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgY29sb3IsIHBkZiwgbikge1xyXG4gICAgc3VwZXIoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgY29sb3IpO1xyXG5cclxuICAgIHRoaXMucXVlcnkgPSAnJztcclxuICAgIHRoaXMubiA9IG47XHJcbiAgICB0aGlzLnBkZiA9IHBkZjtcclxuICAgIHRoaXMudiA9IHt4OiAwLCB5OiAwLCB6OiAwLCBzZXQ6IGZ1bmN0aW9uKHgseSx6KSB7XHJcbiAgICAgIHRoaXMueD14OyB0aGlzLnk9eTsgdGhpcy56PXo7XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSwgdHJhbnNmb3JtOiBmdW5jdGlvbihtKSB7XHJcbiAgICAgIGNvbnN0IHg9bS5tWzBdWzBdKnRoaXMueCttLm1bMV1bMF0qdGhpcy55K20ubVsyXVswXSp0aGlzLnosXHJcbiAgICAgICAgICAgIHk9bS5tWzBdWzFdKnRoaXMueCttLm1bMV1bMV0qdGhpcy55K20ubVsyXVsxXSp0aGlzLnosXHJcbiAgICAgICAgICAgIHo9bS5tWzBdWzJdKnRoaXMueCttLm1bMF1bMl0qdGhpcy55K20ubVsyXVswXSp0aGlzLno7XHJcbiAgICAgIHRoaXMueD14O1xyXG4gICAgICB0aGlzLnk9eTtcclxuICAgICAgdGhpcy56PXo7XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfX07XHJcbiAgICB0aGlzLm0gPSB7bTogW1sxLDAsMF0sWzAsMSwwXSxbMCwwLDFdXSwgc2V0OiBmdW5jdGlvbihtMDAsbTAxLG0wMixtMTAsbTExLG0xMixtMjAsbTIxLG0yMikge1xyXG4gICAgICB0aGlzLm09W1ttMDAsbTAxLG0wMl0sW20xMCxtMTEsbTEyXSxbbTIwLG0yMSxtMjJdXTtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9fTtcclxuXHJcbiAgICB0aGlzLnN0YXJ0UmVuZGVyID0gKCk9PiB7XHJcbiAgICAgIHRoaXMucGRmLmdldEhhbmRsZXIodGhpcy5yZW5kZXIuYmluZCh0aGlzKSk7XHJcbiAgICB9O1xyXG4gICAgUHJvbWlzZS5yZXNvbHZlKCkuXHJcbiAgICAgIHRoZW4oKCk9PiB0aGlzLnBkZi5nZXRIYW5kbGVyKHRoaXMuaW5pdC5iaW5kKHRoaXMpKSk7XHJcblxyXG4gICAgdGhpcy5jc3NMYXllclJlcXVlc3RzID0gW107XHJcbiAgfVxyXG5cclxuICBzZXRRdWVyeShxdWVyeSkge1xyXG4gICAgdGhpcy5xdWVyeSA9IHF1ZXJ5LnRyaW0oKTtcclxuICAgIGlmKHRoaXMudGV4dENvbnRlbnQpIHtcclxuICAgICAgdGhpcy5zZXRIaXRzKHRoaXMudGV4dENvbnRlbnQpO1xyXG4gICAgICAvLyB0aGlzLmZpbmlzaExvYWQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlY3RTaXplKHIpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHdpZHRoOiByWzJdLXJbMF0sXHJcbiAgICAgIGhlaWdodDogclszXS1yWzFdXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlUG9seShtLCBwLCBzKSB7XHJcbiAgICBjb25zdCBwb2x5ID0gW10sIHYgPSB0aGlzLnY7XHJcbiAgICB2LnNldChwLngsIHAueSwgMSkudHJhbnNmb3JtKG0pO1xyXG4gICAgcG9seS5wdXNoKHt4OiB2LngsIHk6IHYueX0pO1xyXG4gICAgdi5zZXQocC54LCBwLnkrcy5oZWlnaHQsIDEpLnRyYW5zZm9ybShtKTtcclxuICAgIHBvbHkucHVzaCh7eDogdi54LCB5OiB2Lnl9KTtcclxuICAgIHYuc2V0KHAueCtzLndpZHRoLCBwLnkrcy5oZWlnaHQsIDEpLnRyYW5zZm9ybShtKTtcclxuICAgIHBvbHkucHVzaCh7eDogdi54LCB5OiB2Lnl9KTtcclxuICAgIHYuc2V0KHAueCtzLndpZHRoLCBwLnksIDEpLnRyYW5zZm9ybShtKTtcclxuICAgIHBvbHkucHVzaCh7eDogdi54LCB5OiB2Lnl9KTtcclxuICAgIHJldHVybiBwb2x5O1xyXG4gIH1cclxuXHJcbiAgZ2V0U2ltdWxhdGVkRG9jKCkge1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBzaW11bGF0ZShlLCBkb2MsIHgsIHkpIHtcclxuICAgIGlmKHRoaXMuZXZlbnRDb252ZXJ0ZXIpIHtcclxuICAgICAgdGhpcy5ldmVudENvbnZlcnRlci5jb252ZXJ0KGUsIHtkb2MsIHgsIHl9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldEFubm90YXRpb25zKGFubm9zKSB7XHJcbiAgICBjb25zdCB0ID0gdGhpcy52aWV3cG9ydC50cmFuc2Zvcm0sIGh0bWxzID0gW10sIHIgPSAobik9PiAobioxMDArJycpLnN1YnN0cigwLDUpLFxyXG4gICAgICB0YXJnZXRzID0gW107XHJcbiAgICB0aGlzLm0uc2V0KFxyXG4gICAgICB0WzBdLHRbMV0sMCxcclxuICAgICAgdFsyXSx0WzNdLDAsXHJcbiAgICAgIHRbNF0sdFs1XSwxKTtcclxuXHJcbiAgICBmb3IobGV0IGFubm8gb2YgYW5ub3MpIHtcclxuICAgICAgaWYgKGFubm8uc3VidHlwZT09PSdMaW5rJyB8fCBhbm5vLnN1YnR5cGU9PT0nV2lkZ2V0Jykge1xyXG4gICAgICAgIGNvbnN0IHJlY3QgPSBhbm5vLnJlY3QsXHJcbiAgICAgICAgICBhUG9zID0ge1xyXG4gICAgICAgICAgICB4OiByZWN0WzBdLFxyXG4gICAgICAgICAgICB5OiByZWN0WzFdXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgYVN6ID0gdGhpcy5yZWN0U2l6ZShyZWN0KTtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBuZXcgUG9seVRhcmdldCh0aGlzLmNyZWF0ZVBvbHkodGhpcy5tLCBhUG9zLCBhU3opLm1hcCgocCk9PiAoe3g6IHAueC90aGlzLnZpZXdwb3J0LndpZHRoLCB5OiAxLXAueS90aGlzLnZpZXdwb3J0LmhlaWdodH0pKSk7XHJcbiAgICAgICAgdGFyZ2V0LmFubm8gPSBhbm5vO1xyXG4gICAgICAgIHRhcmdldC5jYWxsYmFjayA9IHRoaXMuYW5ub0NsYi5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRhcmdldHMucHVzaCh0YXJnZXQpO1xyXG4gICAgICAgIGNvbnN0IHAgPSB0YXJnZXQucG9seTtcclxuICAgICAgICBodG1scy5wdXNoKCc8ZGl2IGNsYXNzPVwiZmIzZC1ibG9jayBmYjNkLWxpbmtcIiBzdHlsZT1cInRvcDogJytyKDEtcFsyXS55KSsnJTsgbGVmdDogJytyKHBbMF0ueCkrJyU7IHdpZHRoOiAnK3IocFsyXS54LXBbMF0ueCkrJyU7IGhlaWdodDogJytyKHBbMl0ueS1wWzBdLnkpKyclO1wiPjxhPjwvYT48L2Rpdj4nKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYodGFyZ2V0cy5sZW5ndGgpIHtcclxuICAgICAgdGhpcy5ldmVudENvbnZlcnRlciA9IG5ldyBDdXN0b21FdmVudENvbnZlcnRlcih0aGlzLnduZCwgdGhpcy5kb2MsIFBvbHlUYXJnZXQudGVzdCwgdGhpcy5nZXRTaW11bGF0ZWREb2MoKSk7XHJcbiAgICAgIGZvcihsZXQgdGFyZ2V0IG9mIHRhcmdldHMpIHtcclxuICAgICAgICB0aGlzLmV2ZW50Q29udmVydGVyLmFkZEN1c3RvbSh0YXJnZXQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLmNzc0xheWVyID0ge2h0bWw6IGh0bWxzLmxlbmd0aD8gJzxwZGYtbGF5ZXI+JytodG1scy5qb2luKCcnKSsnPC9wZGYtbGF5ZXI+JzogdW5kZWZpbmVkfTtcclxuICAgIHRoaXMucmVzb2x2ZUNzc0xheWVyUmVxdWVzdHMoKTtcclxuICB9XHJcblxyXG4gIHJlc29sdmVDc3NMYXllclJlcXVlc3RzKCkge1xyXG4gICAgaWYodGhpcy5jc3NMYXllcikge1xyXG4gICAgICBmb3IobGV0IHIgb2YgdGhpcy5jc3NMYXllclJlcXVlc3RzKSB7XHJcbiAgICAgICAgcih0aGlzLmNzc0xheWVyLmh0bWw/IHRoaXMuY3NzTGF5ZXI6IHVuZGVmaW5lZCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldENTU0xheWVyKCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKT0+IHtcclxuICAgICAgdGhpcy5jc3NMYXllclJlcXVlc3RzLnB1c2gocmVzb2x2ZSk7XHJcbiAgICAgIHRoaXMucmVzb2x2ZUNzc0xheWVyUmVxdWVzdHMoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2V0SGl0cyh0ZXh0Q29udGVudCkge1xyXG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHRleHRDb250ZW50O1xyXG4gICAgaWYodGhpcy5xdWVyeSE9PScnKSB7XHJcbiAgICAgIHRoaXMuZmluZGVyID0gbmV3IEZpbmRlcih0ZXh0Q29udGVudC5pdGVtcy5tYXAoKGl0ZW0pPT4gaXRlbS5zdHIpLCB0aGlzLnF1ZXJ5LCB7Y29udGV4dHM6IGZhbHNlfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXJIaXRzKCkge1xyXG4gICAgaWYodGhpcy5maW5kZXIpIHtcclxuICAgICAgY29uc3QgdmlldyA9IHRoaXMucGFnZS52aWV3LFxyXG4gICAgICAgIHRlc3RTeiA9ICQoJzxkaXYgc3R5bGU9XCJwb3NpdGlvbjogYWJzb2x1dGU7IHZpc2liaWxpdHk6IGhpZGRlbjtcIj48L2Rpdj4nKS5hcHBlbmRUbygnYm9keScpLCB0ZXh0RGl2ID0gdGVzdFN6WzBdLFxyXG4gICAgICAgIGJhc2VPZmZzZXQgPSB0ZXN0U3oub2Zmc2V0KCkubGVmdDtcclxuICAgICAgZm9yKGxldCBoaXQgb2YgdGhpcy5maW5kZXIuZ2V0SGl0cygpKSB7XHJcbiAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcy50ZXh0Q29udGVudC5pdGVtc1toaXQuaW5kZXhdLFxyXG4gICAgICAgICAgICAgICAgdCA9IFBERkpTLlV0aWwudHJhbnNmb3JtKHRoaXMudmlld3BvcnQudHJhbnNmb3JtLCBpdGVtLnRyYW5zZm9ybSksXHJcbiAgICAgICAgICAgICAgICBzdHlsZSA9IHRoaXMudGV4dENvbnRlbnQuc3R5bGVzW2l0ZW0uZm9udE5hbWVdLFxyXG4gICAgICAgICAgICAgICAgYW5nbGUgPSBNYXRoLmF0YW4yKHRbMV0sIHRbMF0pKyhzdHlsZS52ZXJ0aWNhbD8gTWF0aC5QSSAvIDI6IDApLFxyXG4gICAgICAgICAgICAgICAgZm9udEhlaWdodCA9IE1hdGguc3FydCgodFsyXSAqIHRbMl0pICsgKHRbM10gKiB0WzNdKSksXHJcbiAgICAgICAgICAgICAgICBmb250QXNjZW50ID0gc3R5bGUuYXNjZW50P1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZS5hc2NlbnQgKiBmb250SGVpZ2h0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc3R5bGUuZGVzY2VudD8gKDEgKyBzdHlsZS5kZXNjZW50KSAqIGZvbnRIZWlnaHQ6IGZvbnRIZWlnaHQpO1xyXG4gICAgICAgICAgdGVzdFN6Lmh0bWwoaXRlbS5zdHIuc3Vic3RyKDAsIGhpdC5vZmZzZXQpKyc8c3Bhbj4nK2l0ZW0uc3RyLnN1YnN0cihoaXQub2Zmc2V0LCBoaXQubGVuZ3RoKSsnPC9zcGFuPicraXRlbS5zdHIuc3Vic3RyKGhpdC5vZmZzZXQraGl0Lmxlbmd0aCkpO1xyXG5cclxuICAgICAgICAgIHRleHREaXYuc3R5bGUuZm9udFNpemUgPSBmb250SGVpZ2h0KydweCc7XHJcbiAgICAgICAgICB0ZXh0RGl2LnN0eWxlLmZvbnRGYW1pbHkgPSBzdHlsZS5mb250RmFtaWx5O1xyXG5cclxuICAgICAgICAgIGNvbnN0IHRlc3RTcGFuID0gdGVzdFN6LmZpbmQoJ3NwYW4nKSxcclxuICAgICAgICAgICAgICBpd2lkdGggPSBzdHlsZS52ZXJ0aWNhbD8gaXRlbS5oZWlnaHQqdGhpcy52aWV3cG9ydC5zY2FsZTogaXRlbS53aWR0aCp0aGlzLnZpZXdwb3J0LnNjYWxlLFxyXG4gICAgICAgICAgICAgIHdpZHRoID0gdGVzdFN6LndpZHRoKCksXHJcbiAgICAgICAgICAgICAgcmVsYXRpdmVPZmZzZXQgPSAodGVzdFNwYW4ub2Zmc2V0KCkubGVmdC1iYXNlT2Zmc2V0KS93aWR0aDtcclxuICAgICAgICAgIHRoaXMubS5zZXQoXHJcbiAgICAgICAgICAgIDEsMCwwLFxyXG4gICAgICAgICAgICAwLDEsMCxcclxuICAgICAgICAgICAgdFs0XStmb250QXNjZW50Kk1hdGguc2luKGFuZ2xlKSx0WzVdLWZvbnRBc2NlbnQqTWF0aC5jb3MoYW5nbGUpLDEpO1xyXG4gICAgICAgICAgbGV0IHBvbHkgPSB0aGlzLmNyZWF0ZVBvbHkodGhpcy5tLCB7eDogcmVsYXRpdmVPZmZzZXQqaXdpZHRoLCB5OiAwfSwge3dpZHRoOiBpd2lkdGgqdGVzdFNwYW4ud2lkdGgoKS93aWR0aCwgaGVpZ2h0OiB0ZXN0U3Bhbi5oZWlnaHQoKX0pO1xyXG4gICAgICAgICAgcG9seSA9IHBvbHkubWFwKChwKT0+ICh7eDogcC54L3RoaXMudmlld3BvcnQud2lkdGgsIHk6IDEtcC55L3RoaXMudmlld3BvcnQuaGVpZ2h0fSkpO1xyXG4gICAgICAgICAgdGhpcy5yZW5kZXJIaXQocG9seSk7XHJcbiAgICAgIH1cclxuICAgICAgdGVzdFN6LnJlbW92ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYW5ub0NsYihlLCBkYXRhKSB7XHJcbiAgICBpZih0aGlzLmNvbnRleHQuZGlzcGF0Y2hFdmVudCkge1xyXG4gICAgICB0aGlzLmNvbnRleHQuZGlzcGF0Y2hFdmVudCh7XHJcbiAgICAgICAgdHlwZTogJ3BkZkFubm90YXRpb24nLFxyXG4gICAgICAgIGV2ZW50OiBlLFxyXG4gICAgICAgIGFubm90YXRpb246IGRhdGEudGFyZ2V0LmFubm9cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjYWxjVmlld3BvcnQoKSB7XHJcbiAgICBjb25zdCBzY2FsZSA9IEJhc2VNYXRoVXRpbHMuY2FsY1NjYWxlKHRoaXMuc2l6ZS53aWR0aCwgdGhpcy5zaXplLmhlaWdodCwgdGhpcy5yZXNXLCB0aGlzLnJlc0gpO1xyXG4gICAgaWYoIXRoaXMudmlld3BvcnQgfHwgTWF0aC5hYnModGhpcy52aWV3cG9ydC5zY2FsZS1zY2FsZSk+MWUtNCkge1xyXG4gICAgICB0aGlzLnZpZXdwb3J0ID0gdGhpcy5wYWdlLmdldFZpZXdwb3J0KHtzY2FsZX0pO1xyXG4gICAgICBpZih0aGlzLnR5cGUhPT0nZnVsbCcpIHtcclxuICAgICAgICBpZih0aGlzLnR5cGU9PT0ncmlnaHQnKSB7XHJcbiAgICAgICAgICB0aGlzLnZpZXdwb3J0Lm9mZnNldFggKz0gMC41KnRoaXMudmlld3BvcnQud2lkdGgqMS4wMDA1O1xyXG4gICAgICAgICAgdGhpcy52aWV3cG9ydC50cmFuc2Zvcm1bNF0gLT0gMC41KnRoaXMudmlld3BvcnQud2lkdGgqMS4wMDA1O1xyXG4gICAgICAgICAgdGhpcy52aWV3cG9ydC53aWR0aCAqPSAwLjUvMS4wMDA1O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHRoaXMudmlld3BvcnQud2lkdGggLz0gMjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5yZXNXID0gdGhpcy53aWR0aCA9IHRoaXMudmlld3BvcnQud2lkdGg7XHJcbiAgICAgIHRoaXMucmVzSCA9IHRoaXMuaGVpZ2h0ID0gdGhpcy52aWV3cG9ydC5oZWlnaHQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpbml0KCkge1xyXG4gICAgdGhpcy50eXBlID0gdGhpcy5wZGYuZ2V0UGFnZVR5cGUodGhpcy5uKTtcclxuICAgIHRoaXMucGRmLmdldFBhZ2UodGhpcy5uKS5cclxuICAgICAgdGhlbigocGFnZSk9PiB7XHJcbiAgICAgICAgdGhpcy5wYWdlID0gcGFnZTtcclxuICAgICAgICB0aGlzLnNpemUgPSBQZGYuZ2V0UGFnZVNpemUocGFnZSk7XHJcbiAgICAgICAgaWYodGhpcy50eXBlIT09J2Z1bGwnKSB7XHJcbiAgICAgICAgICB0aGlzLnNpemUud2lkdGggLz0gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcGFnZS5nZXRBbm5vdGF0aW9ucygpLlxyXG4gICAgICAgICAgdGhlbih0aGlzLnNldEFubm90YXRpb25zLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHBhZ2UuZ2V0VGV4dENvbnRlbnQoKS5cclxuICAgICAgICAgIHRoZW4odGhpcy5zZXRIaXRzLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMuY2FsY1ZpZXdwb3J0KCk7XHJcbiAgICAgICAgdGhpcy5maW5pc2hMb2FkKCk7XHJcbiAgICAgIH0pLlxyXG4gICAgICBjYXRjaCgoZSk9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignQ2Fubm90IGxvYWQgUERGIHBhZ2U6ICcrKHRoaXMubisxKSk7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICB0aGlzLmZpbmlzaExvYWQoKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBzZXRSZXNvbHV0aW9uKHJlcykge1xyXG4gICAgc3VwZXIuc2V0UmVzb2x1dGlvbihyZXMpO1xyXG4gICAgaWYodGhpcy5wYWdlKSB7XHJcbiAgICAgIHRoaXMuY2FsY1ZpZXdwb3J0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIoaGFuZGxlcikge1xyXG4gICAgaWYodGhpcy5wYWdlKSB7XHJcbiAgICAgIGNvbnN0IGN0eCA9IHRoaXMucHVzaEN0eCgpO1xyXG4gICAgICB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jLndpZHRoLCB0aGlzLmMuaGVpZ2h0KTtcclxuICAgICAgdGhpcy5yZW5kZXJUYXNrID0gdGhpcy5wYWdlLnJlbmRlcih7XHJcbiAgICAgICAgY2FudmFzQ29udGV4dDogdGhpcy5jdHgsXHJcbiAgICAgICAgdmlld3BvcnQ6IHRoaXMudmlld3BvcnRcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMucmVuZGVyVGFzay5vbkNvbnRpbnVlID0gKGNvbnRpbnVlUmVuZGVyKT0+IHtcclxuICAgICAgICBpZih0aGlzLnJlbmRlclBhdXNlKSB7XHJcbiAgICAgICAgICB0aGlzLmNvbnRpbnVlUmVuZGVyID0gY29udGludWVSZW5kZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgY29udGludWVSZW5kZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMucmVuZGVyVGFzay5wcm9taXNlLlxyXG4gICAgICB0aGVuKCgpPT4ge1xyXG4gICAgICAgIHRoaXMucmVuZGVySGl0cygpO1xyXG4gICAgICAgIHRoaXMucG9wQ3R4KCk7XHJcbiAgICAgICAgdGhpcy5maW5pc2hSZW5kZXIoKTtcclxuICAgICAgfSkuXHJcbiAgICAgIGNhdGNoKChlKT0+IHtcclxuICAgICAgICB0aGlzLnBvcEN0eCgpO1xyXG4gICAgICAgIHRoaXMuZmluaXNoUmVuZGVyKHRydWUpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLnJlbmRlckJsYW5rUGFnZSgpO1xyXG4gICAgICB0aGlzLmZpbmlzaFJlbmRlcigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvUGRmSW1hZ2UuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VhcmNoIHtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGFpbmVyLCBwYWdlcykge1xyXG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICB0aGlzLnBhZ2VzID0gcGFnZXM7XHJcbiAgICB0aGlzLnByZXZSZXN1bHRzID0gW107XHJcbiAgICBjb250YWluZXIuaHRtbChgXHJcbiAgICAgIDxkaXYgY2xhc3M9XCJzZWFyY2hcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwicXVlcnlcIj5cclxuICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImlucFF1ZXJ5XCIgdHlwZT1cInRleHRcIiBtYXhsZW5ndGg9XCIzMFwiIHZhbHVlPVwiXCIgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwicmVzdWx0c1wiPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJzdGF0dXNcIj5cclxuXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgYC5mYjNkUUZpbHRlcigpKTtcclxuICAgIHRoaXMucXVlcnkgPSBjb250YWluZXIuZmluZCgnLnF1ZXJ5IGlucHV0Jyk7XHJcbiAgICB0aGlzLnJlc3VsdHMgPSBjb250YWluZXIuZmluZCgnLnJlc3VsdHMnKTtcclxuICAgIHRoaXMuc3RhdHVzID0gY29udGFpbmVyLmZpbmQoJy5zdGF0dXMnKTtcclxuXHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICBuYXZpZ2F0ZTogdGhpcy5uYXZpZ2F0ZS5iaW5kKHRoaXMpLFxyXG4gICAgICBkb1F1ZXJ5OiB0aGlzLmRvUXVlcnkuYmluZCh0aGlzKVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnF1ZXJ5Lm9uKCdrZXlkb3duJywgdGhpcy5iaW5kcy5kb1F1ZXJ5KTtcclxuICAgIHRoaXMucmVzdWx0cy5vbignY2xpY2snLCB0aGlzLmJpbmRzLm5hdmlnYXRlKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLnJlc3VsdHMub2ZmKCdjbGljaycsIHRoaXMuYmluZHMubmF2aWdhdGUpO1xyXG4gICAgdGhpcy5xdWVyeS5vZmYoJ2tleWRvd24nLCB0aGlzLmJpbmRzLmRvUXVlcnkpO1xyXG4gIH1cclxuXHJcbiAgbmF2aWdhdGUoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgaWYodGhpcy5vbk5hdmlnYXRlIT09dW5kZWZpbmVkKSB7XHJcbiAgICAgIGxldCB0YXJnZXQgPSAkKGUudGFyZ2V0KTtcclxuICAgICAgaWYoIXRhcmdldC5oYXNDbGFzcygncmVzdWx0JykpIHtcclxuICAgICAgICBjb25zdCB0ID0gdGFyZ2V0LmZpbmQoJy5yZXN1bHQnKTtcclxuICAgICAgICBpZih0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgdGFyZ2V0ID0gdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICB3aGlsZSh0YXJnZXQubGVuZ3RoICYmICF0YXJnZXQuaGFzQ2xhc3MoJ3Jlc3VsdCcpKSB7XHJcbiAgICAgICAgICAgIHRhcmdldCA9ICQodGFyZ2V0WzBdLnBhcmVudE5vZGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBwYWdlID0gdGFyZ2V0LmF0dHIoJ2RhdGEnKTtcclxuICAgICAgaWYocGFnZSE9PXVuZGVmaW5lZCkge1xyXG4gICAgICAgIHRoaXMub25OYXZpZ2F0ZShwYXJzZUludChwYWdlKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRvUXVlcnkoKSB7XHJcbiAgICBpZih0aGlzLm9uUXVlcnkpIHtcclxuICAgICAgY29uc3QgcXVlcnlTdGFtcCA9IHRoaXMucXVlcnlTdGFtcCA9IERhdGUubm93KCk7XHJcbiAgICAgIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgICAgaWYocXVlcnlTdGFtcCA9PT0gdGhpcy5xdWVyeVN0YW1wKSB7XHJcbiAgICAgICAgICB0aGlzLm9uUXVlcnkodGhpcy5xdWVyeVswXS52YWx1ZS50cmltKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwgMTAwMCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRSZXN1bHRzKHJlc3VsdHMsIGxhc3RQYWdlKSB7XHJcbiAgICBpZih0aGlzLnByZXZSZXN1bHRzLmxlbmd0aCAmJiByZXN1bHRzWzBdIT09dGhpcy5wcmV2UmVzdWx0c1swXSkge1xyXG4gICAgICB0aGlzLnByZXZSZXN1bHRzID0gW107XHJcbiAgICAgIHRoaXMucmVzdWx0cy5odG1sKCcnKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGh0bWxzID0gW107XHJcbiAgICBmb3IobGV0IGk9dGhpcy5wcmV2UmVzdWx0cy5sZW5ndGg7IGk8cmVzdWx0cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSByZXN1bHRzW2ldO1xyXG4gICAgICBodG1scy5wdXNoKCc8ZGl2IGNsYXNzPVwicmVzdWx0XCIgZGF0YT1cIicrcmVzdWx0LnBhZ2UrJ1wiPicpO1xyXG4gICAgICAgIGh0bWxzLnB1c2goJzxhPicpO1xyXG4gICAgICAgICAgaHRtbHMucHVzaCgnPGRpdj4nK3Jlc3VsdC5jb250ZXh0cy5qb2luKCc8L2Rpdj48ZGl2PicpKyc8L2Rpdj4nKTtcclxuICAgICAgICBodG1scy5wdXNoKCc8L2E+Jyk7XHJcbiAgICAgIGh0bWxzLnB1c2goJzwvZGl2PicpO1xyXG4gICAgfVxyXG4gICAgJChodG1scy5qb2luKCcnKSkuYXBwZW5kVG8odGhpcy5yZXN1bHRzKTtcclxuICAgIHRoaXMucHJldlJlc3VsdHMgPSBbLi4ucmVzdWx0c107XHJcbiAgICBpZihsYXN0UGFnZT09PXVuZGVmaW5lZCkge1xyXG4gICAgICB0aGlzLnN0YXR1cy5odG1sKCcnKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLnN0YXR1cy5odG1sKChsYXN0UGFnZSsxKSsnIG9mICcrdGhpcy5wYWdlcyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9TZWFyY2guanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgSW1hZ2VCYXNlIGZyb20gJy4vSW1hZ2VCYXNlJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4vVXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhdGljSW1hZ2UgZXh0ZW5kcyBJbWFnZUJhc2Uge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBjb2xvciwgc3JjKSB7XHJcbiAgICBzdXBlcihjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBjb2xvcik7XHJcblxyXG4gICAgdGhpcy5iaW5kcyA9IHt9XHJcbiAgICB0aGlzLmltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICB0aGlzLmltYWdlLmNyb3NzT3JpZ2luID0gJ0Fub255bW91cyc7XHJcbiAgICB0aGlzLmJpbmRzLmltYWdlTG9hZCA9ICgpPT4ge1xyXG4gICAgICB0aGlzLndpZHRoID0gdGhpcy5pbWFnZS53aWR0aDtcclxuICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmltYWdlLmhlaWdodDtcclxuICAgICAgdGhpcy5yZXNIID0gdGhpcy5oZWlnaHQvdGhpcy53aWR0aCp0aGlzLnJlc1c7XHJcbiAgICAgIHRoaXMuc3RhcnRSZW5kZXIgPSAoKT0+IHtcclxuICAgICAgICB0aGlzLnJlbmRlckltYWdlKHRoaXMuaW1hZ2UpO1xyXG4gICAgICAgIHRoaXMuZmluaXNoUmVuZGVyKCk7XHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMuZmluaXNoTG9hZCgpO1xyXG4gICAgfTtcclxuICAgIHRoaXMuYmluZHMuaW1hZ2VFcnJvciA9ICgpPT4ge1xyXG4gICAgICB0aGlzLnN0YXJ0UmVuZGVyID0gKCk9PiB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJOb3RGb3VuZFBhZ2UoKTtcclxuICAgICAgICB0aGlzLmZpbmlzaFJlbmRlcigpO1xyXG4gICAgICB9O1xyXG4gICAgICB0aGlzLmZpbmlzaExvYWQoKTtcclxuICAgIH07XHJcbiAgICAkKHRoaXMuaW1hZ2UpLm9uKCdsb2FkJywgdGhpcy5iaW5kcy5pbWFnZUxvYWQpLm9uKCdlcnJvcicsIHRoaXMuYmluZHMuaW1hZ2VFcnJvcik7XHJcbiAgICB0aGlzLmltYWdlLnNyYyA9IFV0aWxzLm5vcm1hbGl6ZVVybChzcmMpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgICQodGhpcy5pbWFnZSkub2ZmKCdsb2FkJywgdGhpcy5iaW5kcy5pbWFnZUxvYWQpLm9mZignZXJyb3InLCB0aGlzLmJpbmRzLmltYWdlRXJyb3IpO1xyXG4gICAgdGhpcy5pbWFnZS5zcmMgPSAnJztcclxuICAgIGRlbGV0ZSB0aGlzLmltYWdlO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvU3RhdGljSW1hZ2UuanMiLCJpbXBvcnQge1RIUkVFfSBmcm9tICcuLi9saWJzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV4dHVyZUFuaW1hdG9yIHtcclxuICBjb25zdHJ1Y3RvcihpbWcsIHRpbGVzSG9yaXosIHRpbGVzVmVydCwgbnVtVGlsZXMsIHRpbGVEaXNwRHVyYXRpb24pIHtcclxuXHJcbiAgICBjb25zdCB0ZXh0dXJlID0gbmV3IFRIUkVFLlRleHR1cmUoKTtcclxuICAgIHRleHR1cmUubWluRmlsdGVyID0gVEhSRUUuTGluZWFyRmlsdGVyO1xyXG4gICAgdGV4dHVyZS5pbWFnZSA9IGltZztcclxuICAgIHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuICBcdC8vIG5vdGU6IHRleHR1cmUgcGFzc2VkIGJ5IHJlZmVyZW5jZSwgd2lsbCBiZSB1cGRhdGVkIGJ5IHRoZSB1cGRhdGUgZnVuY3Rpb24uXHJcbiAgICB0aGlzLnRleHR1cmUgPSB0ZXh0dXJlO1xyXG4gIFx0dGhpcy50aWxlc0hvcml6b250YWwgPSB0aWxlc0hvcml6O1xyXG4gIFx0dGhpcy50aWxlc1ZlcnRpY2FsID0gdGlsZXNWZXJ0O1xyXG4gIFx0Ly8gaG93IG1hbnkgaW1hZ2VzIGRvZXMgdGhpcyBzcHJpdGVzaGVldCBjb250YWluP1xyXG4gIFx0Ly8gIHVzdWFsbHkgZXF1YWxzIHRpbGVzSG9yaXogKiB0aWxlc1ZlcnQsIGJ1dCBub3QgbmVjZXNzYXJpbHksXHJcbiAgXHQvLyAgaWYgdGhlcmUgYXQgYmxhbmsgdGlsZXMgYXQgdGhlIGJvdHRvbSBvZiB0aGUgc3ByaXRlc2hlZXQuXHJcbiAgXHR0aGlzLm51bWJlck9mVGlsZXMgPSBudW1UaWxlcztcclxuICBcdHRleHR1cmUucmVwZWF0LnNldCgxL3RoaXMudGlsZXNIb3Jpem9udGFsLCAxL3RoaXMudGlsZXNWZXJ0aWNhbCk7XHJcblxyXG4gIFx0Ly8gaG93IGxvbmcgc2hvdWxkIGVhY2ggaW1hZ2UgYmUgZGlzcGxheWVkP1xyXG4gIFx0dGhpcy50aWxlRGlzcGxheUR1cmF0aW9uID0gdGlsZURpc3BEdXJhdGlvbjtcclxuXHJcbiAgXHQvLyBob3cgbG9uZyBoYXMgdGhlIGN1cnJlbnQgaW1hZ2UgYmVlbiBkaXNwbGF5ZWQ/XHJcbiAgXHR0aGlzLmN1cnJlbnREaXNwbGF5VGltZSA9IDA7XHJcblxyXG4gIFx0Ly8gd2hpY2ggaW1hZ2UgaXMgY3VycmVudGx5IGJlaW5nIGRpc3BsYXllZD9cclxuICBcdHRoaXMuY3VycmVudFRpbGUgPSAwO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKG1pbGxpU2VjKSB7XHJcbiAgICB0aGlzLmN1cnJlbnREaXNwbGF5VGltZSArPSBtaWxsaVNlYztcclxuICAgIHdoaWxlKHRoaXMuY3VycmVudERpc3BsYXlUaW1lID4gdGhpcy50aWxlRGlzcGxheUR1cmF0aW9uKSB7XHJcbiAgICAgIHRoaXMuY3VycmVudERpc3BsYXlUaW1lIC09IHRoaXMudGlsZURpc3BsYXlEdXJhdGlvbjtcclxuICAgICAgKyt0aGlzLmN1cnJlbnRUaWxlO1xyXG4gICAgICBpZih0aGlzLmN1cnJlbnRUaWxlID09IHRoaXMubnVtYmVyT2ZUaWxlcylcclxuICAgICAgICB0aGlzLmN1cnJlbnRUaWxlID0gMDtcclxuICAgICAgdmFyIGN1cnJlbnRDb2x1bW4gPSB0aGlzLmN1cnJlbnRUaWxlJXRoaXMudGlsZXNIb3Jpem9udGFsO1xyXG4gICAgICB0aGlzLnRleHR1cmUub2Zmc2V0LnggPSBjdXJyZW50Q29sdW1uL3RoaXMudGlsZXNIb3Jpem9udGFsO1xyXG4gICAgICB2YXIgY3VycmVudFJvdyA9IE1hdGguZmxvb3IodGhpcy5jdXJyZW50VGlsZS90aGlzLnRpbGVzSG9yaXpvbnRhbCk7XHJcbiAgICAgIHRoaXMudGV4dHVyZS5vZmZzZXQueSA9IGN1cnJlbnRSb3cvdGhpcy50aWxlc1ZlcnRpY2FsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGNvbnN0IGltZyA9IHRoaXMudGV4dHVyZS5pbWFnZTtcclxuICAgIGltZy5oZWlnaHQgPSBpbWcud2lkdGggPSAwO1xyXG4gICAgdGhpcy50ZXh0dXJlLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvVGV4dHVyZUFuaW1hdG9yLmpzIiwiaW1wb3J0IHtUSFJFRSwgJH0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuL1V0aWxzJztcclxuaW1wb3J0IE1vdXNlRXZlbnRDb252ZXJ0ZXIgZnJvbSAnLi9Nb3VzZUV2ZW50Q29udmVydGVyJztcclxuaW1wb3J0IFRocmVlRXZlbnRDb252ZXJ0ZXIgZnJvbSAnLi9UaHJlZUV2ZW50Q29udmVydGVyJztcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaHJlZU1vdXNlRXZlbnRDb252ZXJ0ZXIgZXh0ZW5kcyBNb3VzZUV2ZW50Q29udmVydGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3Iod25kLCBkb2MsIHZpc3VhbFdvcmxkLCB0ZXN0KSB7XHJcbiAgICBzdXBlcih3bmQsIGRvYywgdmlzdWFsV29ybGQuZWxlbWVudCk7XHJcbiAgICBVdGlscy5leHRlbmRzKHRoaXMsIG5ldyBUaHJlZUV2ZW50Q29udmVydGVyKHZpc3VhbFdvcmxkLCB0ZXN0KSk7XHJcbiAgfVxyXG5cclxuICBnZXRDYWxsYmFjayhvYmplY3QpIHtcclxuICAgIHJldHVybiBvYmplY3Qub2JqZWN0LnVzZXJEYXRhLm1vdXNlQ2FsbGJhY2s7XHJcbiAgfVxyXG5cclxuICBzZXRDb29yZHNGcm9tRXZlbnQoZSkge1xyXG4gICAgY29uc3QgakVsZW1lbnQgPSAkKHRoaXMuZWxlbWVudCk7XHJcbiAgICBjb25zdCBvZmZzZXQgPSBqRWxlbWVudC5vZmZzZXQoKTtcclxuICAgIHRoaXMuY29vcmRzLnggPSAoKGUucGFnZVgtb2Zmc2V0LmxlZnQpL2pFbGVtZW50LndpZHRoKCkpKjItMTtcclxuICAgIHRoaXMuY29vcmRzLnkgPSAtKChlLnBhZ2VZLW9mZnNldC50b3ApL2pFbGVtZW50LmhlaWdodCgpKSoyKzE7XHJcbiAgICByZXR1cm4gdGhpcy5jb29yZHM7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1RocmVlTW91c2VFdmVudENvbnZlcnRlci5qcyIsImltcG9ydCB7VEhSRUUsICR9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi9VdGlscyc7XHJcbmltcG9ydCBUb3VjaEV2ZW50Q29udmVydGVyIGZyb20gJy4vVG91Y2hFdmVudENvbnZlcnRlcic7XHJcbmltcG9ydCBUaHJlZUV2ZW50Q29udmVydGVyIGZyb20gJy4vVGhyZWVFdmVudENvbnZlcnRlcic7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGhyZWVUb3VjaEV2ZW50Q29udmVydGVyIGV4dGVuZHMgVG91Y2hFdmVudENvbnZlcnRlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHduZCwgZG9jLCB2aXN1YWxXb3JsZCwgdGVzdCkge1xyXG4gICAgc3VwZXIod25kLCBkb2MsIHZpc3VhbFdvcmxkLmVsZW1lbnQpO1xyXG4gICAgVXRpbHMuZXh0ZW5kcyh0aGlzLCBuZXcgVGhyZWVFdmVudENvbnZlcnRlcih2aXN1YWxXb3JsZCwgdGVzdCkpO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q2FsbGJhY2sob2JqZWN0KSB7XHJcbiAgICByZXR1cm4gb2JqZWN0Lm9iamVjdC51c2VyRGF0YS50b3VjaENhbGxiYWNrO1xyXG4gIH1cclxuXHJcbiAgc2V0Q29vcmRzRnJvbUV2ZW50KGUpIHtcclxuICAgIGNvbnN0IGpFbGVtZW50ID0gJCh0aGlzLmVsZW1lbnQpLCBvZmZzZXQgPSBqRWxlbWVudC5vZmZzZXQoKSxcclxuICAgICAgdG91Y2hlcyA9IGUudG91Y2hlcyB8fCBlLm9yaWdpbmFsRXZlbnQudG91Y2hlcywgdG91Y2ggPSB0b3VjaGVzLmxlbmd0aD8gdG91Y2hlc1swXTogKHRoaXMubGFzdFRvdWNoZXMgfHwgW3twYWdlWDogMCwgcGFnZVk6IDB9XSlbMF0sXHJcbiAgICAgIHBhZ2VYID0gdG91Y2gucGFnZVgsIHBhZ2VZID0gdG91Y2gucGFnZVk7XHJcbiAgICB0aGlzLmxhc3RUb3VjaGVzID0gdG91Y2hlcy5sZW5ndGg/IHRvdWNoZXM6IHRoaXMubGFzdFRvdWNoZXM7XHJcbiAgICB0aGlzLmNvb3Jkcy54ID0gKChwYWdlWC1vZmZzZXQubGVmdCkvakVsZW1lbnQud2lkdGgoKSkqMi0xO1xyXG4gICAgdGhpcy5jb29yZHMueSA9IC0oKHBhZ2VZLW9mZnNldC50b3ApL2pFbGVtZW50LmhlaWdodCgpKSoyKzE7XHJcbiAgICByZXR1cm4gdGhpcy5jb29yZHM7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1RocmVlVG91Y2hFdmVudENvbnZlcnRlci5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBJbWFnZUZhY3RvcnkgZnJvbSAnLi9JbWFnZUZhY3RvcnknO1xyXG5pbXBvcnQgR3JhcGhVdGlscyBmcm9tICcuL0dyYXBoVXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGh1bWJuYWlscyB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNvbnRhaW5lciwgdGh1bWJuYWlsc0NsYiwgc2l6ZSwgcHJvcHM9e2tXdG9IOiAyMTAvMjk3fSkge1xyXG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICB0aGlzLnAgPSBwcm9wcztcclxuICAgIHRoaXMudGh1bWJuYWlsc0NsYiA9IHRodW1ibmFpbHNDbGI7XHJcbiAgICB0aGlzLnNpemUgPSBzaXplO1xyXG4gICAgdGhpcy5xdWV1ZSA9IHtmaXJzdDogMCwgbGVuOiAwfTtcclxuICAgIHRoaXMuY2FudmFzID0gR3JhcGhVdGlscy5jcmVhdGVDYW52YXMoKTtcclxuICAgIHRoaXMuaW1hZ2VGYWN0b3J5ID0gbmV3IEltYWdlRmFjdG9yeSh7XHJcbiAgICAgIC4uLmNvbnRleHQsXHJcbiAgICAgIHJlbmRlckNhbnZhczogdGhpcy5jYW52YXMsXHJcbiAgICAgIHJlbmRlckNhbnZhc0N0eDogdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxyXG4gICAgfSk7XHJcbiAgICB0aGlzLnRodW1ibmFpbHMgPSBbXTtcclxuICAgIGZvcihsZXQgaT0wOyBpPHNpemU7ICsraSkge1xyXG4gICAgICBjb25zdCBpbmZvID0gdGhpcy50aHVtYm5haWxzQ2xiKGkpO1xyXG4gICAgICB0aGlzLnRodW1ibmFpbHMucHVzaCh7XHJcbiAgICAgICAgLi4uaW5mbyxcclxuICAgICAgICBpbmRleDogaSxcclxuICAgICAgICBsb2FkZWQ6IGluZm8udHlwZT09PSd0aHVtYm5haWwtaW1hZ2UnLFxyXG4gICAgICAgIGhlYWRpbmc6IG51bGwsXHJcbiAgICAgICAgdGh1bWJuYWlsOiBudWxsLFxyXG4gICAgICAgIHRpdGxlOiBpbmZvLnRpdGxlIHx8IGlcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5iaW5kcyA9IHtcclxuICAgICAgdXBkYXRlOiB0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpLFxyXG4gICAgICBuYXZpZ2F0ZTogKGUpPT4ge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBpZih0aGlzLm9uTmF2aWdhdGUpIHtcclxuICAgICAgICAgIGxldCBub2RlID0gZS50YXJnZXQ7XHJcbiAgICAgICAgICB3aGlsZShub2RlICYmICFub2RlLmRhdGFUaHVtYm5haWwpIHtcclxuICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMub25OYXZpZ2F0ZShub2RlLmRhdGFUaHVtYm5haWwuaW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRoaXMuY29udGFpbmVyLm9uKCdzY3JvbGwnLCB0aGlzLmJpbmRzLnVwZGF0ZSk7XHJcbiAgfVxyXG5cclxuICBnZXRTaXplKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc2l6ZTtcclxuICB9XHJcblxyXG4gIHNldEVuYWJsZShlbmFibGUpIHtcclxuICAgIHRoaXMuZW5hYmxlID0gZW5hYmxlO1xyXG4gICAgdGhpcy51cGRhdGUoKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5maW5kKCdhJykub2ZmKCdjbGljaycsIHRoaXMuYmluZHMubmF2aWdhdGUpO1xyXG4gICAgdGhpcy5jb250YWluZXIub2ZmKCdzY3JvbGwnLCB0aGlzLmJpbmRzLnVwZGF0ZSk7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5odG1sKCcnKTtcclxuICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHRoaXMuY2FudmFzLndpZHRoID0gMDtcclxuICAgIGRlbGV0ZSB0aGlzLmNhbnZhcztcclxuICB9XHJcblxyXG4gIHNldExvYWRRdWV1ZShmaXJzdCwgbGVuKSB7XHJcbiAgICBmaXJzdCA9IE1hdGgubWluKGZpcnN0LCB0aGlzLnNpemUtMSk7XHJcbiAgICBsZW4gPSBNYXRoLm1pbihsZW4sIHRoaXMuc2l6ZS1maXJzdCk7XHJcbiAgICB0aGlzLnF1ZXVlID0ge2ZpcnN0LCBsZW59O1xyXG4gICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+IHRoaXMudXBkYXRlKCkpO1xyXG4gIH1cclxuXHJcbiAgbG9hZCh0aHVtYm5haWwpIHtcclxuICAgIHRoaXMubG9hZGluZyA9IHRydWU7XHJcbiAgICBjb25zdCB3cmFwcGVyID0gdGhpcy5pbWFnZUZhY3RvcnkuYnVpbGQodGh1bWJuYWlsLCB0aHVtYm5haWwubnVtYmVyPT09dW5kZWZpbmVkPyB0aHVtYm5haWwuaW5kZXg6IHRodW1ibmFpbC5udW1iZXIsIHRoaXMucC5rV3RvSCozMDAsIDMwMCk7XHJcbiAgICB3cmFwcGVyLm9uQ2hhbmdlID0gKGNhbnZhcyk9PiB7XHJcbiAgICAgIHRoaXMuc2V0SW1hZ2UodGh1bWJuYWlsLCBjYW52YXMudG9EYXRhVVJMKCdpbWFnZS9wbmcnKSk7XHJcbiAgICAgIHRodW1ibmFpbC5sb2FkZWQgPSB0cnVlO1xyXG4gICAgICB3cmFwcGVyLmRpc3Bvc2UoKTtcclxuICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9PiB0aGlzLnVwZGF0ZSgpKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBnZXRBY3RpdmUoKSB7XHJcbiAgICBjb25zdCBmaXJzdCA9IHRoaXMuY29udGFpbmVyLnNjcm9sbFRvcCgpLCBsYXN0ID0gZmlyc3QgKyB0aGlzLmNvbnRhaW5lci5oZWlnaHQoKSwgcmVzID0gW107XHJcbiAgICBmb3IobGV0IHRodW1ibmFpbCBvZiB0aGlzLnRodW1ibmFpbHMpIHtcclxuICAgICAgaWYoTWF0aC5tYXgodGh1bWJuYWlsLmZpcnN0LCBmaXJzdCk8TWF0aC5taW4odGh1bWJuYWlsLmxhc3QsIGxhc3QpKSB7XHJcbiAgICAgICAgcmVzLnB1c2godGh1bWJuYWlsKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIHVwZGF0ZSgpIHtcclxuICAgIGlmKCF0aGlzLmxvYWRpbmcgJiYgdGhpcy5jYW52YXMpIHtcclxuICAgICAgaWYodGhpcy5lbmFibGUpIHtcclxuICAgICAgICBpZighdGhpcy5idWlsdCkge1xyXG4gICAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYWN0aXZlID0gdGhpcy5nZXRBY3RpdmUoKTtcclxuICAgICAgICBmb3IobGV0IHRodW1ibmFpbCBvZiBhY3RpdmUpIHtcclxuICAgICAgICAgIGlmKCF0aHVtYm5haWwubG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZCh0aHVtYm5haWwpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYoIXRoaXMubG9hZGluZykge1xyXG4gICAgICAgIGZvcihsZXQgaSA9IHRoaXMucXVldWUuZmlyc3Q7IGk8dGhpcy5xdWV1ZS5maXJzdCt0aGlzLnF1ZXVlLmxlbjsgKytpKSB7XHJcbiAgICAgICAgICBjb25zdCB0ID0gdGhpcy50aHVtYm5haWxzW2ldO1xyXG4gICAgICAgICAgaWYoIXQubG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZCh0KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRJbWFnZSh0aHVtYm5haWwsIGltZykge1xyXG4gICAgY29uc3QgdHJpZ2dlciA9IHRodW1ibmFpbC5pbWchPT1pbWc7XHJcbiAgICB0aHVtYm5haWwuaW1nID0gaW1nO1xyXG4gICAgaWYodGh1bWJuYWlsLnRodW1ibmFpbCkge1xyXG4gICAgICB0aHVtYm5haWwudGh1bWJuYWlsLmNzcygnYmFja2dyb3VuZC1pbWFnZScsIFsndXJsKFxcJycsIGltZywnXFwnKSddLmpvaW4oJycpKTtcclxuICAgICAgdGh1bWJuYWlsLnRodW1ibmFpbC5yZW1vdmVDbGFzcygnbG9hZGluZycpO1xyXG4gICAgfVxyXG4gICAgaWYodHJpZ2dlcikge1xyXG4gICAgICB0aGlzLmNvbnRhaW5lci50cmlnZ2VyKCdmYjNkLnRodW1ibmFpbHMudGh1bWJuYWlsTG9hZGVkJywgW3RodW1ibmFpbF0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3QgZWxlbWVudHMgPSBbJzxkaXYgY2xhc3M9XCJ0aHVtYm5haWxzXCI+J11cclxuICAgIGZvcihsZXQgaT0wOyBpPHRoaXMuc2l6ZTsgKytpKSB7XHJcbiAgICAgIGVsZW1lbnRzLnB1c2goWyc8ZGl2IGNsYXNzPVwiaXRlbVwiPjxhPjxkaXYgY2xhc3M9XCJ0aHVtYm5haWwgbG9hZGluZ1wiIHN0eWxlPVwicGFkZGluZy10b3A6JytNYXRoLnJvdW5kKDEwMC90aGlzLnAua1d0b0gpKyclO1wiPjwvZGl2PjwvYT48ZGl2IGNsYXNzPVwiaGVhZGluZ1wiPjxhIHRpdGxlPVwiJywgaSsxLCdcIj4nLCBpKzEsICc8L2E+PC9kaXY+PC9kaXY+J10uam9pbignJykpO1xyXG4gICAgfVxyXG4gICAgZWxlbWVudHMucHVzaCgnPC9kaXY+Jyk7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQoZWxlbWVudHMuam9pbignJykpO1xyXG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLmNvbnRhaW5lci5maW5kKCcuaXRlbScpLCBiYXNlID0gdGhpcy5jb250YWluZXIuZmluZCgnLnRodW1ibmFpbHMnKS5vZmZzZXQoKS50b3A7XHJcbiAgICBmb3IobGV0IGk9MDsgaTxpdGVtcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICBjb25zdCBpdGVtID0gJChpdGVtc1tpXSk7XHJcbiAgICAgIHRoaXMudGh1bWJuYWlsc1tpXS5oZWFkaW5nID0gaXRlbS5maW5kKCcuaGVhZGluZycpO1xyXG4gICAgICB0aGlzLnRodW1ibmFpbHNbaV0udGh1bWJuYWlsID0gaXRlbS5maW5kKCcudGh1bWJuYWlsJyk7XHJcbiAgICAgIHRoaXMudGh1bWJuYWlsc1tpXS5maXJzdCA9IGl0ZW0ub2Zmc2V0KCkudG9wLWJhc2U7XHJcbiAgICAgIHRoaXMudGh1bWJuYWlsc1tpXS5sYXN0ID0gdGhpcy50aHVtYm5haWxzW2ldLmZpcnN0K2l0ZW0uaGVpZ2h0KCk7XHJcbiAgICAgIGlmKHRoaXMudGh1bWJuYWlsc1tpXS5sb2FkZWQpIHtcclxuICAgICAgICB0aGlzLnNldEltYWdlKHRoaXMudGh1bWJuYWlsc1tpXSwgdGhpcy50aHVtYm5haWxzW2ldLmltZyB8fCB0aGlzLnRodW1ibmFpbHNbaV0uc3JjKTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBhcyA9IGl0ZW0uZmluZCgnYScpO1xyXG4gICAgICBmb3IobGV0IGo9MDsgajxhcy5sZW5ndGg7ICsraikge1xyXG4gICAgICAgIGNvbnN0IGEgPSBhc1tqXTtcclxuICAgICAgICBhLmRhdGFUaHVtYm5haWwgPSB0aGlzLnRodW1ibmFpbHNbaV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuY29udGFpbmVyLmZpbmQoJ2EnKS5vbignY2xpY2snLCB0aGlzLmJpbmRzLm5hdmlnYXRlKTtcclxuICAgIHRoaXMuYnVpbHQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvVGh1bWJuYWlscy5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBFdmVudENvbnZlcnRlciBmcm9tICcuL0V2ZW50Q29udmVydGVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvdWNoQ29udmVydGVyIGV4dGVuZHMgRXZlbnRDb252ZXJ0ZXIge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih3bmQsIGRvYywgZWxlbWVudCkge1xyXG4gICAgc3VwZXIod25kLCBkb2MpO1xyXG5cclxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICBjb252ZXJ0OiB0aGlzLmNvbnZlcnQuYmluZCh0aGlzKVxyXG4gICAgfTtcclxuICAgICQodGhpcy5lbGVtZW50KS5vbigndG91Y2hzdGFydCB0b3VjaG1vdmUnLCB0aGlzLmJpbmRzLmNvbnZlcnQpO1xyXG4gICAgJCh0aGlzLmRvYykub24oJ3RvdWNoZW5kJywgdGhpcy5iaW5kcy5jb252ZXJ0KTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICAkKHRoaXMuZWxlbWVudCkub2ZmKCd0b3VjaHN0YXJ0IHRvdWNobW92ZScsIHRoaXMuYmluZHMuY29udmVydCk7XHJcbiAgICAkKHRoaXMuZG9jKS5vZmYoJ3RvdWNoZW5kJywgdGhpcy5iaW5kcy5jb252ZXJ0KTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvVG91Y2hFdmVudENvbnZlcnRlci5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VyTWVzc2FnZUNvbnRyb2xsZXIge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2aWV3KSB7XHJcbiAgICB0aGlzLnZpZXcgPSB2aWV3O1xyXG4gICAgdGhpcy5zaG93TWVzc2FnZSA9IGZhbHNlO1xyXG4gICAgdGhpcy5tZXNzYWdlID0gJyc7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICAgIGRlbGV0ZSB0aGlzLnZpZXc7XHJcbiAgfVxyXG5cclxuICBzZXRFcnJvcih0ZXh0KSB7XHJcbiAgICB0aGlzLnNob3dNZXNzYWdlID0gdHJ1ZTtcclxuICAgIHRoaXMubWVzc2FnZSA9IFsnPGRpdiBjbGFzcz1cInRleHQgZXJyb3JcIj4nLCB0ZXh0LCAnPC9kaXY+J10uam9pbignJyk7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVZpZXcoKSB7XHJcbiAgICBpZih0aGlzLnZpZXcpIHtcclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd3aWRVc2VyTWVzc2FnZScsIHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5zaG93TWVzc2FnZSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd0eHRVc2VyTWVzc2FnZScsIHtcclxuICAgICAgICB2YWx1ZTogdGhpcy5tZXNzYWdlLFxyXG4gICAgICAgIHZpc2libGU6IHRydWVcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9Vc2VyTWVzc2FnZUNvbnRyb2xsZXIuanMiLCJpbXBvcnQgeyQsIHRyfSBmcm9tICcuLi9saWJzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpZXcge1xyXG5cclxuICBzdGF0aWMgaW5pdFVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoW2BcclxuICAgIDwhRE9DVFlQRSBodG1sPlxyXG4gICAgPGh0bWwgbGFuZz1cImVuXCI+XHJcbiAgICAgIDxoZWFkPlxyXG4gICAgICAgIDxtZXRhIGNoYXJzZXQ9XCJ1dGYtOFwiPlxyXG4gICAgICA8L2hlYWQ+XHJcbiAgICAgIDxib2R5IHN0eWxlPVwiaGVpZ2h0OiAxMDB2aFwiPlxyXG4gICAgICA8L2JvZHk+XHJcbiAgICA8L2h0bWw+XHJcbiAgYF0sIHt0eXBlIDogJ3RleHQvaHRtbCd9KSk7XHJcblxyXG4gIHN0YXRpYyBsaW5rU3RhdGVIYW5kbGVycyA9IHtcclxuICAgIHZpc2libGU6IChjdHJsLCB2YWx1ZSk9PiBWaWV3LmNsYXNzUHJvcGVydHkoY3RybCwgJ2hpZGRlbicsICF2YWx1ZSksXHJcbiAgICBhY3RpdmU6IChjdHJsLCB2YWx1ZSk9PiBWaWV3LmNsYXNzUHJvcGVydHkoY3RybCwgJ2FjdGl2ZScsIHZhbHVlKSxcclxuICAgIGVuYWJsZTogKGN0cmwsIHZhbHVlKT0+IFZpZXcuY2xhc3NQcm9wZXJ0eShjdHJsLCAnZGlzYWJsZWQnLCAhdmFsdWUpXHJcbiAgfTtcclxuXHJcbiAgc3RhdGljIHdpZGdldFN0YXRlSGFuZGxlcnMgPSB7XHJcbiAgICB2aXNpYmxlOiAoY3RybCwgdmFsdWUpPT4gVmlldy5jbGFzc1Byb3BlcnR5KGN0cmwsICdoaWRkZW4nLCAhdmFsdWUpLFxyXG4gICAgYWN0aXZlOiAoY3RybCwgdmFsdWUpPT4gVmlldy5jbGFzc1Byb3BlcnR5KGN0cmwsICdhY3RpdmUnLCB2YWx1ZSksXHJcbiAgICBlbmFibGU6IChjdHJsLCB2YWx1ZSk9PiBWaWV3LmNsYXNzUHJvcGVydHkoY3RybCwgJ2Rpc2FibGVkJywgIXZhbHVlKVxyXG4gIH07XHJcblxyXG4gIHN0YXRpYyBpbnB1dFN0YXRlSGFuZGxlcnMgPSB7XHJcbiAgICB2aXNpYmxlOiAoY3RybCwgdmFsdWUpPT4gVmlldy5jbGFzc1Byb3BlcnR5KGN0cmwsICdoaWRkZW4nLCAhdmFsdWUpLFxyXG4gICAgdmFsdWU6IChjdHJsLCB2YWx1ZSk9PiBjdHJsWzBdLnZhbHVlID0gdmFsdWUsXHJcbiAgICBlbmFibGU6IChjdHJsLCB2YWx1ZSk9PiBWaWV3LmF0dHJpYnV0ZVByb3BlcnR5KGN0cmwsICdkaXNhYmxlZCcsICF2YWx1ZSlcclxuICB9O1xyXG5cclxuICBzdGF0aWMgdGV4dFN0YXRlSGFuZGxlcnMgPSB7XHJcbiAgICB2aXNpYmxlOiAoY3RybCwgdmFsdWUpPT4gVmlldy5jbGFzc1Byb3BlcnR5KGN0cmwsICdoaWRkZW4nLCAhdmFsdWUpLFxyXG4gICAgdmFsdWU6IChjdHJsLCB2YWx1ZSk9PiBjdHJsLmh0bWwodmFsdWUpXHJcbiAgfTtcclxuXHJcbiAgc3RhdGljIGNsYXNzUHJvcGVydHkoY3RybCwgY2xhc3NOYW1lLCB2YWx1ZSkge1xyXG4gICAgaWYodmFsdWUpIHtcclxuICAgICAgY3RybC5hZGRDbGFzcyhjbGFzc05hbWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGN0cmwucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBhdHRyaWJ1dGVQcm9wZXJ0eShjdHJsLCBhdHRyaWJ1dGVOYW1lLCB2YWx1ZSkge1xyXG4gICAgaWYodmFsdWUpIHtcclxuICAgICAgY3RybC5hdHRyKGF0dHJpYnV0ZU5hbWUsIHZhbHVlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBjdHJsLnJlbW92ZUF0dHIoYXR0cmlidXRlTmFtZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2FsbEhhbmRsZXJzKGhhbmRsZXJzLCBpZCwgZSwgZGF0YSkge1xyXG4gICAgZm9yKGxldCBoYW5kbGVyIG9mIGhhbmRsZXJzKSB7XHJcbiAgICAgIGlmKGhhbmRsZXJbaWRdKSB7XHJcbiAgICAgICAgaGFuZGxlcltpZF0oZSwgZGF0YSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihoYW5kbGVyLmhhbmRsZURlZmF1bHQpIHtcclxuICAgICAgICBoYW5kbGVyLmhhbmRsZURlZmF1bHQoaWQsIGUsIGRhdGEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaGFuZGxlRXZlbnQoaWQsIGdldEhhbmRsZXJzLCBlLCBkYXRhKSB7XHJcbiAgICBWaWV3LmNhbGxIYW5kbGVycyhnZXRIYW5kbGVycyhpZCksIGlkLCBlLCBkYXRhKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBoYW5kbGVMaW5rRXZlbnQoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgaWYoIXRoaXMuY3RybC5oYXNDbGFzcygnZGlzYWJsZWQnKSkge1xyXG4gICAgICBWaWV3LmhhbmRsZUV2ZW50KHRoaXMuaWQsIHRoaXMuZ2V0SGFuZGxlcnMsIGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGhhbmRsZUlucHV0RXZlbnQoZSkge1xyXG4gICAgVmlldy5oYW5kbGVFdmVudCh0aGlzLmlkLCB0aGlzLmdldEhhbmRsZXJzLCBlLCBlLnRhcmdldC52YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaGFuZGxlRm9ybUV2ZW50KGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIFZpZXcuaGFuZGxlRXZlbnQodGhpcy5pZCwgdGhpcy5nZXRIYW5kbGVycywgZSk7XHJcbiAgfVxyXG5cclxuICAvLyB2aXJ0dWFsIGZ1bmN0aW9ucyB7XHJcbiAgZ2V0TGlua3MoKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGdldFdpZGdldHMoKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGdldElucHV0cygpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgZ2V0VGV4dHMoKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGdldFRlbXBsYXRlKCkge1xyXG4gICAgcmV0dXJuIHt9O1xyXG4gIH1cclxuXHJcbiAgZ2V0SGFuZGxlcnMoaWQpIHtcclxuICAgIHJldHVybiB0aGlzLmhhbmRsZXJzO1xyXG4gIH1cclxuICAvLyB9XHJcblxyXG4gIGNhbGxMYXRlcihoYW5kbGVycywgaWQsIGUsIGRhdGEsIG1zKSB7XHJcbiAgICB0aGlzLnBlbmRpbmdzW2lkXSA9IHtcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLmdldFRpbWUoKVxyXG4gICAgfTtcclxuICAgIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpLCBwZW5kaW5nID0gdGhpcy5wZW5kaW5nc1tpZF07XHJcbiAgICAgIGlmKHBlbmRpbmcgJiYgdGltZXN0YW1wLXBlbmRpbmcudGltZXN0YW1wPj1tcykge1xyXG4gICAgICAgIFZpZXcuY2FsbEhhbmRsZXJzKGhhbmRsZXJzLCBpZCwgZSwgZGF0YSk7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMucGVuZGluZ3NbaWRdO1xyXG4gICAgICB9XHJcbiAgICB9LCBtcyk7XHJcbiAgfVxyXG5cclxuICAvLyBsb2FkRmlsZXModXJscywgcmVhZHksIGZhaWx1cmUpIHtcclxuICAvLyAgIGxldCBkb25lID0gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgLy8gICBmb3IobGV0IHVybCBvZiB1cmxzKSB7XHJcbiAgLy8gICAgIGRvbmUgPSBkb25lLnRoZW4oKCk9PiB7XHJcbiAgLy8gICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT4ge1xyXG4gIC8vICAgICAgICAgJC5nZXQodXJsLCAocmVzKT0+IHtcclxuICAvLyAgICAgICAgICAgcmVhZHkocmVzLCB1cmwpO1xyXG4gIC8vICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgLy8gICAgICAgICB9KS5mYWlsKChyZXMpPT4ge1xyXG4gIC8vICAgICAgICAgICBpZihmYWlsdXJlICYmIGZhaWx1cmUocmVzLCB1cmwpKSB7XHJcbiAgLy8gICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gIC8vICAgICAgICAgICB9XHJcbiAgLy8gICAgICAgICAgIGVsc2Uge1xyXG4gIC8vICAgICAgICAgICAgIHJlamVjdChyZXMpO1xyXG4gIC8vICAgICAgICAgICB9XHJcbiAgLy8gICAgICAgICB9KTtcclxuICAvLyAgICAgICB9KTtcclxuICAvLyAgICAgfSk7XHJcbiAgLy8gICB9XHJcbiAgLy8gICByZXR1cm4gZG9uZTtcclxuICAvLyB9XHJcblxyXG4gIGxvYWRGaWxlcyh1cmxzLCBmaWxlcykge1xyXG4gICAgY29uc3QgdGFza3MgPSBbXTtcclxuICAgIGZvcihsZXQgbmFtZSBvZiBPYmplY3Qua2V5cyh1cmxzKSkge1xyXG4gICAgICBmaWxlc1tuYW1lXSA9IFtdO1xyXG4gICAgICBmb3IobGV0IHVybCBvZiB1cmxzW25hbWVdKSB7XHJcbiAgICAgICAgdGFza3MucHVzaChcclxuICAgICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT4ge1xyXG4gICAgICAgICAgICAkLmdldCh1cmwsIChkYXRhKT0+IHtcclxuICAgICAgICAgICAgICBmaWxlc1tuYW1lXS5wdXNoKHt1cmwsIGRhdGF9KTtcclxuICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH0pLmZhaWwoKHJlcyk9PiB7XHJcbiAgICAgICAgICAgICAgcmVqZWN0KHJlcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwodGFza3MpO1xyXG4gIH1cclxuXHJcbiAgZ2V0Um9vdFVybCgpIHtcclxuICAgIHJldHVybiBsb2NhdGlvbi5vcmlnaW4rJy8nO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q3VycmVudFVybCgpIHtcclxuICAgIHJldHVybiBsb2NhdGlvbi5ocmVmLnN1YnN0cigwLCBsb2NhdGlvbi5ocmVmLmxhc3RJbmRleE9mKCcvJykrMSk7XHJcbiAgfVxyXG5cclxuICB1cmxSZXNvbHZlcihiYXNlVXJsLCB1cmwpIHtcclxuICAgIHVybCA9IHVybC5yZXBsYWNlKC9cXFxcL2csICcvJyk7XHJcbiAgICBpZih1cmwuY2hhckF0KDApPT09Jy8nKSB7XHJcbiAgICAgIGJhc2VVcmwgPSB0aGlzLmdldFJvb3RVcmwoKTtcclxuICAgICAgdXJsID0gdXJsLnN1YnN0cigxKTtcclxuICAgIH1cclxuICAgIGlmKCFiYXNlVXJsLm1hdGNoKC9eaHR0cHN7MCwxfTovaSkpIHtcclxuICAgICAgYmFzZVVybCA9IHRoaXMudXJsUmVzb2x2ZXIodGhpcy5nZXRDdXJyZW50VXJsKCksIGJhc2VVcmwpO1xyXG4gICAgfVxyXG4gICAgaWYoIXVybC5tYXRjaCgvXihkYXRhfGJsb2J8aHR0cHxodHRwcyk6L2kpKSB7XHJcbiAgICAgIGJhc2VVcmwgPSBiYXNlVXJsLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcclxuICAgICAgY29uc3QgcCA9IGJhc2VVcmwubGFzdEluZGV4T2YoJy8nKTtcclxuICAgICAgdXJsID0gKH5wPyBiYXNlVXJsLnN1YnN0cigwLCBwKzEpOiAnJykrdXJsO1xyXG5cclxuICAgICAgY29uc3QgcGFydHMgPSB1cmwuc3BsaXQoJy8nKTtcclxuICAgICAgdXJsID0gW107XHJcbiAgICAgIGZvcihsZXQgcGFydCBvZiBwYXJ0cykge1xyXG4gICAgICAgIGlmKHBhcnQ9PT0nLicpIHtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihwYXJ0PT09Jy4uJykge1xyXG4gICAgICAgICAgaWYodXJsLmxlbmd0aD4zKSB7XHJcbiAgICAgICAgICAgIHVybC5wb3AoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICB1cmwucHVzaChwYXJ0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdXJsID0gdXJsLmpvaW4oJy8nKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdXJsO1xyXG4gIH1cclxuXHJcbiAgb2JqVG9BdHRyc1N0cihvKSB7XHJcbiAgICBjb25zdCByZXMgPSBbXTtcclxuICAgIGZvcihsZXQgbmFtZSBvZiBPYmplY3Qua2V5cyhvKSkge1xyXG4gICAgICByZXMucHVzaChbbmFtZSwgJz1cIicsIG9bbmFtZV0sICdcIiddLmpvaW4oJycpKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXMuam9pbignICcpO1xyXG4gIH1cclxuXHJcbiAgY2hlY2tJZnJhbWVTaXplKCkge1xyXG4gICAgaWYodGhpcy5mcmFtZSkge1xyXG4gICAgICBpZihNYXRoLmFicyh0aGlzLmZyYW1lLndpZHRoLXRoaXMucGFyZW50Q29udGFpbmVyLndpZHRoKCkpPjEgfHwgTWF0aC5hYnModGhpcy5mcmFtZS5oZWlnaHQtdGhpcy5wYXJlbnRDb250YWluZXIuaGVpZ2h0KCkpPjEpIHtcclxuICAgICAgICB0aGlzLm9uUmVzaXplKCk7XHJcbiAgICAgIH1cclxuICAgICAgc2V0VGltZW91dCh0aGlzLmNoZWNrSWZyYW1lU2l6ZS5iaW5kKHRoaXMpLCAyNTApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25SZXNpemUoKSB7XHJcbiAgICB0aGlzLmZyYW1lLndpZHRoID0gdGhpcy5wYXJlbnRDb250YWluZXIud2lkdGgoKTtcclxuICAgIHRoaXMuZnJhbWUuaGVpZ2h0ID0gdGhpcy5wYXJlbnRDb250YWluZXIuaGVpZ2h0KCk7XHJcbiAgfVxyXG5cclxuICB0cmFuc2xhdGUoaHRtbCkge1xyXG4gICAgcmV0dXJuIGh0bWwucmVwbGFjZSgvPFxcJHRyPiguKik8XFwvXFwkdHI+L2dpLCAoczAsczEpPT4gdHIoczEpKTtcclxuICB9XHJcblxyXG4gIGZpcmVMaW5rc09uTG9hZEV2ZW50KCkge1xyXG4gICAgaWYodGhpcy50ZW1wbGF0ZU9iamVjdCAmJiB0aGlzLnRlbXBsYXRlT2JqZWN0LmxpbmtMb2FkZWQpIHtcclxuICAgICAgbGV0IGxvYWRlZCA9IHRydWU7XHJcbiAgICAgIGZvcihsZXQgakxpbmsgb2YgdGhpcy5qTGlua3MpIHtcclxuICAgICAgICBjb25zdCBsaW5rID0gakxpbmtbMF07XHJcbiAgICAgICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgaW1nLm9uZXJyb3IgPSAoKT0+IHRoaXMudGVtcGxhdGVPYmplY3QubGlua0xvYWRlZChsaW5rKTtcclxuICAgICAgICBpbWcuc3JjID0gbGluay5ocmVmO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihwYXJlbnRDb250YWluZXIsIG9uTG9hZCwgdGVtcGxhdGU9e30pIHtcclxuICAgIHRoaXMucGVuZGluZ3MgPSB7fTtcclxuICAgIHRoaXMuYmluZHMgPSB7XHJcbiAgICAgIG9uUmVzaXplOiB0aGlzLm9uUmVzaXplLmJpbmQodGhpcylcclxuICAgIH07XHJcbiAgICB0aGlzLnBhcmVudENvbnRhaW5lciA9ICQocGFyZW50Q29udGFpbmVyKTtcclxuICAgIHRoaXMuaXNJT1MgPSAvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJiAhd2luZG93Lk1TU3RyZWFtO1xyXG4gICAgdGhpcy5pc1NhZmFyaSA9IC9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKnNhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7Ly8gJiYgfm5hdmlnYXRvci51c2VyQWdlbnQuc2VhcmNoKCdWZXJzaW9uLzE0LjEnKTtcclxuICAgIGNvbnN0IGluaXRVcmwgPSB0aGlzLmlzU2FmYXJpPyBWaWV3LmluaXRVcmw6IHVuZGVmaW5lZDtcclxuICAgIHRoaXMucGFyZW50Q29udGFpbmVyLmh0bWwoJzxpZnJhbWUgdGl0bGU9XCJWaWV3XCIgc3R5bGU9XCJib3JkZXI6IDA7JysodGhpcy5pc0lPUz8gJyc6ICcgd2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJScpKydcIiAnKyhpbml0VXJsPyAnIHNyYz1cIicraW5pdFVybCsnXCInOiAnJykrJyBzY3JvbGxpbmc9XCJub1wiPjwvaWZyYW1lPicpO1xyXG5cclxuICAgIHRoaXMuZnJhbWUgPSB0aGlzLnBhcmVudENvbnRhaW5lci5maW5kKCdpZnJhbWUnKVswXTtcclxuICAgIGNvbnN0IGJ1aWxkID0gKCk9PiB7XHJcbiAgICAgIGlmKHRoaXMuaXNJT1MpIHtcclxuICAgICAgICAkKHRoaXMucGFyZW50Q29udGFpbmVyWzBdLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpLm9uKCdyZXNpemUnLCB0aGlzLmJpbmRzLm9uUmVzaXplKTtcclxuICAgICAgICB0aGlzLm9uUmVzaXplKCk7XHJcbiAgICAgICAgc2V0VGltZW91dCh0aGlzLmNoZWNrSWZyYW1lU2l6ZS5iaW5kKHRoaXMpLCAyNTApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmNvbnRhaW5lciA9ICQodGhpcy5mcmFtZS5jb250ZW50RG9jdW1lbnQuYm9keSk7XHJcbiAgICAgIHRoaXMuY29udGFpbmVyLmNzcygnbWFyZ2luJywgJzAnKTtcclxuICAgICAgdGhpcy5oZWFkID0gJCh0aGlzLmZyYW1lLmNvbnRlbnREb2N1bWVudC5oZWFkKTtcclxuICAgICAgdGhpcy5vbkxvYWQgPSBvbkxvYWQ7XHJcbiAgICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcclxuICAgICAgdGhpcy5zdHlsZURhdGEgPSB7fTtcclxuXHJcbiAgICAgIGNvbnN0IHNjcmlwdCA9IHRlbXBsYXRlLmh0bWw/IHRlbXBsYXRlLnNjcmlwdDogdGhpcy5nZXRUZW1wbGF0ZSgpLnNjcmlwdDtcclxuICAgICAgbGV0IHVybHMsIGZpbGVzLCBsaW5rcywgdGVtcGxhdGVOYW1lO1xyXG4gICAgICBpZih0eXBlb2YgdGVtcGxhdGU9PT0nZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgdXJscyA9IHt9O1xyXG4gICAgICAgIGZpbGVzID0gdGVtcGxhdGUoKTtcclxuICAgICAgICBsaW5rcyA9IFtdO1xyXG4gICAgICAgIHRlbXBsYXRlTmFtZSA9IGZpbGVzLm5hbWU7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgbGlua3MgPSB0ZW1wbGF0ZS5saW5rcyB8fCB0aGlzLmdldFRlbXBsYXRlKCkubGlua3M7XHJcbiAgICAgICAgdXJscyA9IHtcclxuICAgICAgICAgIHN0eWxlczogdGVtcGxhdGUuc3R5bGVzIHx8IHRoaXMuZ2V0VGVtcGxhdGUoKS5zdHlsZXMsXHJcbiAgICAgICAgICBodG1sOiBbdGVtcGxhdGUuaHRtbCB8fCB0aGlzLmdldFRlbXBsYXRlKCkuaHRtbF0sXHJcbiAgICAgICAgICBzY3JpcHQ6IHNjcmlwdD8gW3NjcmlwdF06IFtdXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0ZW1wbGF0ZU5hbWUgPSB0ZW1wbGF0ZS5uYW1lO1xyXG4gICAgICAgIGZpbGVzID0ge307XHJcbiAgICAgIH1cclxuICAgICAgaWYodGVtcGxhdGVOYW1lKSB7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuYWRkQ2xhc3ModGVtcGxhdGVOYW1lKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmxvYWRGaWxlcyh1cmxzLCBmaWxlcykudGhlbigoKT0+IHtcclxuICAgICAgICBmb3IobGV0IHN0eWxlIG9mIGZpbGVzLnN0eWxlcykge1xyXG4gICAgICAgICAgbGV0IHRleHRDc3MgPSBzdHlsZS5kYXRhLCB1cmwgPSBzdHlsZS51cmw7XHJcbiAgICAgICAgICB0ZXh0Q3NzID0gdGV4dENzcy5yZXBsYWNlKC91cmxcXChbJ1wiXSguKj8pW1wiJ11cXCkvZywgKHIsIHIxKT0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIFsndXJsKFxcJycsIHRoaXMudXJsUmVzb2x2ZXIodXJsLCByMSksICdcXCcpJ10uam9pbignJyk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgICQoYDxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj4ke3RleHRDc3N9PC9zdHlsZT5gKS5hcHBlbmRUbyh0aGlzLmhlYWQpO1xyXG4gICAgICAgICAgY29uc3QgbWF0Y2ggPSB0ZXh0Q3NzLm1hdGNoKC9cXC9cXCpqc29uLWRhdGE6KChbXFxuXFxyXXwuKSo/KVxcKlxcLy8pO1xyXG4gICAgICAgICAgaWYobWF0Y2gpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICB0aGlzLnN0eWxlRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIC4uLnRoaXMuc3R5bGVEYXRhLFxyXG4gICAgICAgICAgICAgICAgLi4uSlNPTi5wYXJzZShtYXRjaFsxXSlcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9IGNhdGNoKGUpIHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5odG1sKHRoaXMudHJhbnNsYXRlKGZpbGVzLmh0bWxbMF0uZGF0YSkpO1xyXG5cclxuICAgICAgICB0aGlzLmpMaW5rcyA9IFtdO1xyXG4gICAgICAgIGZvcihsZXQgbGluayBvZiBsaW5rcykge1xyXG4gICAgICAgICAgdGhpcy5qTGlua3MucHVzaCgkKFsnPGxpbmsgJywgdGhpcy5vYmpUb0F0dHJzU3RyKHsuLi5saW5rLCBocmVmOiB0aGlzLnVybFJlc29sdmVyKHRoaXMuZ2V0Q3VycmVudFVybCgpLCBsaW5rLmhyZWYpfSksICc+J10uam9pbignJykpLmFwcGVuZFRvKHRoaXMuaGVhZCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoZmlsZXMuc2NyaXB0WzBdKSB7XHJcbiAgICAgICAgICBjb25zdCBpbml0ID0gZXZhbChmaWxlcy5zY3JpcHRbMF0uZGF0YSk7XHJcbiAgICAgICAgICB0aGlzLnRlbXBsYXRlT2JqZWN0ID0gaW5pdCh0aGlzLmNvbnRhaW5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy50ZW1wbGF0ZU9iamVjdCA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5saW5rQ29udHJvbHMgPSB7fTtcclxuICAgICAgICBmb3IobGV0IGlkIG9mIHRoaXMuZ2V0TGlua3MoKSkge1xyXG4gICAgICAgICAgdGhpcy5saW5rQ29udHJvbHNbaWRdID0gdGhpcy5jb250YWluZXIuZmluZCgnLicraWQpO1xyXG4gICAgICAgICAgdGhpcy5iaW5kc1tpZF0gPSBWaWV3LmhhbmRsZUxpbmtFdmVudC5iaW5kKHtnZXRIYW5kbGVyczogdGhpcy5nZXRIYW5kbGVycy5iaW5kKHRoaXMpLCBpZCwgY3RybDogdGhpcy5saW5rQ29udHJvbHNbaWRdfSk7XHJcbiAgICAgICAgICB0aGlzLmxpbmtDb250cm9sc1tpZF0ub24oJ2NsaWNrJywgdGhpcy5iaW5kc1tpZF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy53aWRnZXRDb250cm9scyA9IHt9O1xyXG4gICAgICAgIGZvcihsZXQgaWQgb2YgdGhpcy5nZXRXaWRnZXRzKCkpIHtcclxuICAgICAgICAgIHRoaXMud2lkZ2V0Q29udHJvbHNbaWRdID0gdGhpcy5jb250YWluZXIuZmluZCgnLicraWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5pbnB1dENvbnRyb2xzID0ge307XHJcbiAgICAgICAgZm9yKGxldCBpZCBvZiB0aGlzLmdldElucHV0cygpKSB7XHJcbiAgICAgICAgICB0aGlzLmlucHV0Q29udHJvbHNbaWRdID0gdGhpcy5jb250YWluZXIuZmluZCgnLicraWQpO1xyXG4gICAgICAgICAgdGhpcy5iaW5kc1tpZF0gPSBWaWV3LmhhbmRsZUlucHV0RXZlbnQuYmluZCh7Z2V0SGFuZGxlcnM6IHRoaXMuZ2V0SGFuZGxlcnMuYmluZCh0aGlzKSwgaWQsIGN0cmw6IHRoaXMuaW5wdXRDb250cm9sc1tpZF19KTtcclxuICAgICAgICAgIHRoaXMuaW5wdXRDb250cm9sc1tpZF0ub24oJ2tleXVwJywgdGhpcy5iaW5kc1tpZF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5mb3JtQ29udHJvbHMgPSB7fTtcclxuICAgICAgICBmb3IobGV0IGlkIG9mIHRoaXMuZ2V0Rm9ybXMoKSkge1xyXG4gICAgICAgICAgdGhpcy5mb3JtQ29udHJvbHNbaWRdID0gdGhpcy5jb250YWluZXIuZmluZCgnLicraWQpO1xyXG4gICAgICAgICAgdGhpcy5iaW5kc1tpZF0gPSBWaWV3LmhhbmRsZUZvcm1FdmVudC5iaW5kKHtnZXRIYW5kbGVyczogdGhpcy5nZXRIYW5kbGVycy5iaW5kKHRoaXMpLCBpZCwgY3RybDogdGhpcy5mb3JtQ29udHJvbHNbaWRdfSk7XHJcbiAgICAgICAgICB0aGlzLmZvcm1Db250cm9sc1tpZF0ub24oJ3N1Ym1pdCcsIHRoaXMuYmluZHNbaWRdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudGV4dENvbnRyb2xzID0ge307XHJcbiAgICAgICAgZm9yKGxldCBpZCBvZiB0aGlzLmdldFRleHRzKCkpIHtcclxuICAgICAgICAgIHRoaXMudGV4dENvbnRyb2xzW2lkXSA9IHRoaXMuY29udGFpbmVyLmZpbmQoJy4nK2lkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGVTZXR0ZXJzID0gW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBtYXA6IHRoaXMubGlua0NvbnRyb2xzLFxyXG4gICAgICAgICAgICBzZXR0ZXI6IHRoaXMuc2V0TGlua0NvbnRyb2xTdGF0ZS5iaW5kKHRoaXMpXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBtYXA6IHRoaXMud2lkZ2V0Q29udHJvbHMsXHJcbiAgICAgICAgICAgIHNldHRlcjogdGhpcy5zZXRXaWRnZXRDb250cm9sU3RhdGUuYmluZCh0aGlzKVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgbWFwOiB0aGlzLmlucHV0Q29udHJvbHMsXHJcbiAgICAgICAgICAgIHNldHRlcjogdGhpcy5zZXRJbnB1dENvbnRyb2xTdGF0ZS5iaW5kKHRoaXMpXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBtYXA6IHRoaXMudGV4dENvbnRyb2xzLFxyXG4gICAgICAgICAgICBzZXR0ZXI6IHRoaXMuc2V0VGV4dENvbnRyb2xTdGF0ZS5iaW5kKHRoaXMpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgdGhpcy5pbml0VmlldygpO1xyXG5cclxuICAgICAgICBpZih0aGlzLm9uTG9hZCkge1xyXG4gICAgICAgICAgdGhpcy5vbkxvYWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZmlyZUxpbmtzT25Mb2FkRXZlbnQoKTtcclxuICAgICAgfSkuXHJcbiAgICAgIGNhdGNoKChyZXMpPT4gY29uc29sZS5lcnJvcihyZXMpKTtcclxuICAgIH1cclxuXHJcbiAgICBpZihpbml0VXJsKSB7XHJcbiAgICAgICQodGhpcy5mcmFtZS5jb250ZW50V2luZG93KS5vbignbG9hZCcsIGJ1aWxkKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBpZih0aGlzLmZyYW1lLmNvbnRlbnRXaW5kb3cuc3RvcCkge1xyXG4gICAgICAgIHRoaXMuZnJhbWUuY29udGVudFdpbmRvdy5zdG9wKCk7XHJcbiAgICAgIH1cclxuICAgICAgYnVpbGQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBkZWxldGUgdGhpcy50ZXh0Q29udHJvbHM7XHJcbiAgICBmb3IobGV0IGlkIG9mIHRoaXMuZ2V0TGlua3MoKSkge1xyXG4gICAgICB0aGlzLmxpbmtDb250cm9sc1tpZF0ub2ZmKCdjbGljaycsIHRoaXMuYmluZHNbaWRdKTtcclxuICAgIH1cclxuICAgIGRlbGV0ZSB0aGlzLmxpbmtDb250cm9scztcclxuICAgIGRlbGV0ZSB0aGlzLndpZGdldENvbnRyb2xzO1xyXG4gICAgZm9yKGxldCBpZCBvZiB0aGlzLmdldElucHV0cygpKSB7XHJcbiAgICAgIHRoaXMuaW5wdXRDb250cm9sc1tpZF0ub2ZmKCdrZXl1cCcsIHRoaXMuYmluZHNbaWRdKTtcclxuICAgIH1cclxuICAgIGRlbGV0ZSB0aGlzLmlucHV0Q29udHJvbHM7XHJcbiAgICBmb3IobGV0IGlkIG9mIHRoaXMuZ2V0Rm9ybXMoKSkge1xyXG4gICAgICB0aGlzLmZvcm1Db250cm9sc1tpZF0ub2ZmKCdzdWJtaXQnLCB0aGlzLmJpbmRzW2lkXSk7XHJcbiAgICB9XHJcbiAgICBkZWxldGUgdGhpcy5mb3JtQ29udHJvbHM7XHJcblxyXG4gICAgIXRoaXMudGVtcGxhdGVPYmplY3QuZGlzcG9zZSB8fCB0aGlzLnRlbXBsYXRlT2JqZWN0LmRpc3Bvc2UoKTtcclxuICAgIGRlbGV0ZSB0aGlzLnRlbXBsYXRlT2JqZWN0O1xyXG5cclxuICAgIGlmKHRoaXMuaXNJT1MpIHtcclxuICAgICAgJCh0aGlzLnBhcmVudENvbnRhaW5lclswXS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KS5vZmYoJ3Jlc2l6ZScsIHRoaXMuYmluZHMub25SZXNpemUpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5wYXJlbnRDb250YWluZXIuaHRtbCgnJyk7XHJcbiAgICBkZWxldGUgdGhpcy5mcmFtZTtcclxuICB9XHJcblxyXG4gIGdldFN0eWxlRGF0YSgpIHtcclxuICAgIHJldHVybiB0aGlzLnN0eWxlRGF0YTtcclxuICB9XHJcblxyXG4gIGdldENvbnRhaW5lcigpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRhaW5lclswXTtcclxuICB9XHJcblxyXG4gIGdldFBhcmVudENvbnRhaW5lcigpIHtcclxuICAgIHJldHVybiB0aGlzLnBhcmVudENvbnRhaW5lclswXTtcclxuICB9XHJcblxyXG4gIGFkZEhhbmRsZXIoaGFuZGxlcikge1xyXG4gICAgdGhpcy5oYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xyXG4gIH1cclxuXHJcbiAgaW5pdFZpZXcoKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNldENvbnRyb2xTdGF0ZShjdHJsLCBkZWZhdWx0cywgc3RhdGUsIHN0YXRlSGFuZGxlcnMpIHtcclxuICAgIGlmKGN0cmwgJiYgY3RybFswXSkge1xyXG4gICAgICBjb25zdCBzdCA9IHtcclxuICAgICAgICAuLi5kZWZhdWx0cyxcclxuICAgICAgICAuLi5zdGF0ZVxyXG4gICAgICB9O1xyXG4gICAgICBmb3IobGV0IG5hbWUgaW4gc3QpIHtcclxuICAgICAgICBpZihzdC5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiBzdGF0ZUhhbmRsZXJzW25hbWVdKSB7XHJcbiAgICAgICAgICBzdGF0ZUhhbmRsZXJzW25hbWVdKGN0cmwsIHN0W25hbWVdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldExpbmtDb250cm9sU3RhdGUoaWQsIHN0YXRlKSB7XHJcbiAgICBWaWV3LnNldENvbnRyb2xTdGF0ZShcclxuICAgICAgdGhpcy5saW5rQ29udHJvbHNbaWRdLFxyXG4gICAgICB7XHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlLFxyXG4gICAgICAgIGVuYWJsZTogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBzdGF0ZSxcclxuICAgICAgVmlldy5saW5rU3RhdGVIYW5kbGVyc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHNldFdpZGdldENvbnRyb2xTdGF0ZShpZCwgc3RhdGUpIHtcclxuICAgIFZpZXcuc2V0Q29udHJvbFN0YXRlKFxyXG4gICAgICB0aGlzLndpZGdldENvbnRyb2xzW2lkXSxcclxuICAgICAge1xyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcclxuICAgICAgICBlbmFibGU6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgc3RhdGUsXHJcbiAgICAgIFZpZXcud2lkZ2V0U3RhdGVIYW5kbGVyc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHNldElucHV0Q29udHJvbFN0YXRlKGlkLCBzdGF0ZSkge1xyXG4gICAgVmlldy5zZXRDb250cm9sU3RhdGUoXHJcbiAgICAgIHRoaXMuaW5wdXRDb250cm9sc1tpZF0sXHJcbiAgICAgIHtcclxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2YWx1ZTogJydcclxuICAgICAgfSxcclxuICAgICAgc3RhdGUsXHJcbiAgICAgIFZpZXcuaW5wdXRTdGF0ZUhhbmRsZXJzXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc2V0VGV4dENvbnRyb2xTdGF0ZShpZCwgc3RhdGUpIHtcclxuICAgIFZpZXcuc2V0Q29udHJvbFN0YXRlKFxyXG4gICAgICB0aGlzLnRleHRDb250cm9sc1tpZF0sXHJcbiAgICAgIHtcclxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIHZhbHVlOiAnJ1xyXG4gICAgICB9LFxyXG4gICAgICBzdGF0ZSxcclxuICAgICAgVmlldy50ZXh0U3RhdGVIYW5kbGVyc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIG9uSXRlbVN0YXRlQ2hhbmdlZCgpIHtcclxuXHJcbiAgfVxyXG5cclxuICBzZXRTdGF0ZShpZCwgc3RhdGUpIHtcclxuICAgIGZvcihsZXQgaXRlbSBvZiB0aGlzLnN0YXRlU2V0dGVycykge1xyXG4gICAgICBpZihpdGVtLm1hcFtpZF0pIHtcclxuICAgICAgICBpdGVtLnNldHRlcihpZCwgc3RhdGUpO1xyXG4gICAgICAgIHRoaXMub25JdGVtU3RhdGVDaGFuZ2VkKGlkLCBzdGF0ZSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1ZpZXcuanMiLCJpbXBvcnQgeyQsIFRIUkVFfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4vVXRpbHMnO1xyXG5pbXBvcnQgT3JiaXQgZnJvbSAnLi9PcmJpdCc7XHJcbmltcG9ydCBUaHJlZU1vdXNlRXZlbnRDb252ZXJ0ZXIgZnJvbSAnLi9UaHJlZU1vdXNlRXZlbnRDb252ZXJ0ZXInO1xyXG5pbXBvcnQgVGhyZWVUb3VjaEV2ZW50Q29udmVydGVyIGZyb20gJy4vVGhyZWVUb3VjaEV2ZW50Q29udmVydGVyJztcclxuaW1wb3J0IERyYWcgZnJvbSAnLi9EcmFnJztcclxuaW1wb3J0IENTUzNEUmVuZGVyZXIgZnJvbSAnLi9DU1MzRFJlbmRlcmVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpc3VhbFdvcmxkIGV4dGVuZHMgVEhSRUUuRXZlbnREaXNwYXRjaGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3Iod25kLCBkb2MsIGNvbnRhaW5lciwgdXNlSGVscGVycz1mYWxzZSkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMuY2hlY2tVcGRhdGVGbGFnID0gdHJ1ZTtcclxuICAgIHRoaXMud25kID0gd25kO1xyXG4gICAgdGhpcy5kb2MgPSBkb2M7XHJcbiAgICB0aGlzLmpDb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICB0aGlzLnJlbmRlckNhbGxiYWNrcyA9IFtdO1xyXG4gICAgdGhpcy5kaWFnID0gdGhpcy5nZXREaWFnKCk7XHJcblxyXG4gICAgdGhpcy5jbG9jayA9IG5ldyBUSFJFRS5DbG9jaygpO1xyXG5cclxuICAgIHRoaXMucmF5Y2FzdGVyID0gbmV3IFRIUkVFLlJheWNhc3RlcigpO1xyXG5cclxuICAgIHRoaXMuc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcclxuICAgIHRoaXMuY3NzU2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcclxuXHJcbiAgICB0aGlzLmNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSgzMCwgdGhpcy53aWR0aCgpL3RoaXMuaGVpZ2h0KCksIDAuMiwgMjAwMCk7XHJcbiAgICBjb25zdCBzY2FsZSA9IDE7XHJcblxyXG4gICAgdGhpcy5jYW1lcmEucG9zaXRpb24ueCA9IDA7XHJcbiAgICB0aGlzLmNhbWVyYS5wb3NpdGlvbi55ID0gNS41KnNjYWxlO1xyXG4gICAgdGhpcy5jYW1lcmEucG9zaXRpb24ueiA9IDA7XHJcblxyXG4gICAgdGhpcy5yZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHthbHBoYTogdHJ1ZSwgcHJlY2lzaW9uOiBWaXN1YWxXb3JsZC5nZXRQcmVjaXNpb24oKSwgYW50aWFsaWFzOiB0cnVlfSk7XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNoYWRvd01hcC5lbmFibGVkID0gdHJ1ZTtcclxuICAgIHRoaXMucmVuZGVyZXIuc2hhZG93TWFwLnR5cGUgPSBUSFJFRS5QQ0ZTb2Z0U2hhZG93TWFwO1xyXG5cclxuICAgIHRoaXMucmVuZGVyZXIuc2V0Q2xlYXJDb2xvcigweDAwMDAwMCwgMCk7XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldFBpeGVsUmF0aW8oTWF0aC5zcXJ0KHRoaXMud25kLmRldmljZVBpeGVsUmF0aW8gfHwgMSkpO1xyXG4gICAgdGhpcy5yZW5kZXJlci5zZXRTaXplKHRoaXMud2lkdGgoKSwgdGhpcy5oZWlnaHQoKSk7XHJcblxyXG4gICAgdGhpcy5qQ29udGFpbmVyLmFwcGVuZCh0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQpO1xyXG5cclxuICAgIHRoaXMuY3NzUmVuZGVyZXJcdD0gbmV3IENTUzNEUmVuZGVyZXIoKTtcclxuICAgIHRoaXMuY3NzUmVuZGVyZXIuc2V0U2l6ZSh0aGlzLndpZHRoKCksIHRoaXMuaGVpZ2h0KCkpO1xyXG4gICAgJCh0aGlzLmNzc1JlbmRlcmVyLmRvbUVsZW1lbnQpLmNzcyh7XHJcbiAgXHRcdHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG4gIFx0XHR0b3A6IDAsXHJcbiAgXHRcdG1hcmdpbjogMCxcclxuICBcdFx0cGFkZGluZzogMFxyXG5cdCAgfSk7XHJcbiAgICB0aGlzLmpDb250YWluZXIuYXBwZW5kKHRoaXMuY3NzUmVuZGVyZXIuZG9tRWxlbWVudCk7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50ID0gdGhpcy5jc3NSZW5kZXJlci5kb21FbGVtZW50O1xyXG5cclxuICAgIHRoaXMudGV4dHVyZUxvYWRlciA9IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKCk7XHJcblxyXG4gICAgdGhpcy5hbWJpZW50TGlnaHQgPSBuZXcgVEhSRUUuQW1iaWVudExpZ2h0KDB4ZmZmZmZmKTtcclxuICAgIHRoaXMuc2NlbmUuYWRkKHRoaXMuYW1iaWVudExpZ2h0KTtcclxuXHJcbiAgICB0aGlzLmxpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoMHgwMDAwMDAsIDEpO1xyXG4gICAgdGhpcy5saWdodC5wb3NpdGlvbi5zZXQoLTYqc2NhbGUsIDYqc2NhbGUsIC0zKnNjYWxlKTtcclxuICAgIGNvbnN0IGQgPSAzKnNjYWxlO1xyXG4gICAgdGhpcy5saWdodC5jYXN0U2hhZG93ID0gdHJ1ZTtcclxuICAgIHRoaXMubGlnaHQuc2hhZG93LmNhbWVyYS5sZWZ0ID0gLWQ7XHJcbiAgICB0aGlzLmxpZ2h0LnNoYWRvdy5jYW1lcmEucmlnaHQgPSBkO1xyXG4gICAgdGhpcy5saWdodC5zaGFkb3cuY2FtZXJhLnRvcCA9IGQ7XHJcbiAgICB0aGlzLmxpZ2h0LnNoYWRvdy5jYW1lcmEuYm90dG9tID0gLWQ7XHJcbiAgICB0aGlzLmxpZ2h0LnNoYWRvdy5jYW1lcmEubmVhciA9IC41KnNjYWxlO1xyXG4gICAgdGhpcy5saWdodC5zaGFkb3cuY2FtZXJhLmZhciA9IDIwKnNjYWxlO1xyXG4gICAgdGhpcy5saWdodC5zaGFkb3cubWFwU2l6ZS54ID0gNTEyO1xyXG4gICAgdGhpcy5saWdodC5zaGFkb3cubWFwU2l6ZS55ID0gNTEyO1xyXG4gICAgdGhpcy5zY2VuZS5hZGQodGhpcy5saWdodCk7XHJcbiAgICAvLyB0aGlzLnNjZW5lLmFkZChuZXcgVEhSRUUuQ2FtZXJhSGVscGVyKHRoaXMubGlnaHQuc2hhZG93LmNhbWVyYSkpO1xyXG5cclxuICAgIHRoaXMuc2hhZG93UGxhY2UgPSBuZXcgVEhSRUUuTWVzaChuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSgxMCwgMTApLnJvdGF0ZVgoLU1hdGguUEkvMiksIG5ldyBUSFJFRS5TaGFkb3dNYXRlcmlhbCh7Y29sb3I6IDB4MDAwMDAwLCB0cmFuc3BhcmVudDogdHJ1ZSwgb3BhY2l0eTouMn0pKTtcclxuICAgIHRoaXMuc2hhZG93UGxhY2UucG9zaXRpb24uc2V0KDAsIDAsIDApO1xyXG4gICAgdGhpcy5zaGFkb3dQbGFjZS5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcclxuICAgIHRoaXMuc2hhZG93UGxhY2UuY2FzdFNoYWRvdyA9IGZhbHNlO1xyXG4gICAgdGhpcy5zY2VuZS5hZGQodGhpcy5zaGFkb3dQbGFjZSk7XHJcblxyXG5cclxuICAgIHRoaXMuY29udHJvbHMgPSBuZXcgT3JiaXQodGhpcy5jYW1lcmEsIHRoaXMpO1xyXG4gICAgdGhpcy5jb250cm9scy50YXJnZXQueSA9IDAuNTtcclxuXHJcbiAgICBjb25zdCBjc3NTY2VuZSA9ICQodGhpcy5jc3NSZW5kZXJlci5kb21FbGVtZW50KS5maW5kKCdkaXYnKSwgdG1wVmVjdG9yID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICAgIHRoaXMuY29udHJvbHMuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCk9PiB7XHJcbiAgICAgIHRoaXMuY2FtZXJhLmdldFdvcmxkRGlyZWN0aW9uKHRtcFZlY3Rvcik7XHJcbiAgICAgIGNzc1NjZW5lLmNzcygnZGlzcGxheScsIHRtcFZlY3Rvci55LXRoaXMuY2FtZXJhLnBvc2l0aW9uLnk+MD8gJ25vbmUnOiAnYmxvY2snKTtcclxuICAgICAgdGhpcy51cGRhdGVUaHJlZSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYodXNlSGVscGVycykge1xyXG4gICAgICB0aGlzLnNjZW5lLmFkZChuZXcgVEhSRUUuQXhpc0hlbHBlcig1KSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5iaW5kcyA9IHtcclxuICAgICAgb25XaW5kb3dSZXNpemU6IHRoaXMub25XaW5kb3dSZXNpemUuYmluZCh0aGlzKSxcclxuICAgICAgYW5pbWF0ZTogdGhpcy5hbmltYXRlLmJpbmQodGhpcylcclxuICAgIH07XHJcblxyXG4gICAgJCh0aGlzLnduZCkub24oJ3Jlc2l6ZScsIHRoaXMuYmluZHMub25XaW5kb3dSZXNpemUpO1xyXG5cclxuICAgIHRoaXMubW91c2VFdmVudHMgPSBuZXcgVGhyZWVNb3VzZUV2ZW50Q29udmVydGVyKHRoaXMud25kLCB0aGlzLmRvYywgdGhpcyk7XHJcbiAgICB0aGlzLnRvdWNoRXZlbnRzID0gbmV3IFRocmVlVG91Y2hFdmVudENvbnZlcnRlcih0aGlzLnduZCwgdGhpcy5kb2MsIHRoaXMpO1xyXG4gICAgY29uc3QgZmlsdGVyRGF0YSA9IHt0eXBlOiAnbW91c2Vtb3ZlJ307XHJcbiAgICB0aGlzLm1vdXNlRXZlbnRzLmZpbHRlciA9IChlbGVtZW50LCBlKT0+IHtcclxuICAgICAgY29uc3QgdHlwZXMgPSBbJ21vdXNlZW50ZXInLCAnbW91c2VvdmVyJywgJ21vdXNlbGVhdmUnLCAnbW91c2VvdXQnXSwgY29udGFpbnMgPSAocCwgYyk9PiBwPT09YyB8fCAkLmNvbnRhaW5zKHAsIGMpO1xyXG4gICAgICBpZihlLnR5cGU9PT0nbW91c2Vtb3ZlJykge1xyXG4gICAgICAgIGZpbHRlckRhdGEucGFnZVggPSBlLnBhZ2VYO1xyXG4gICAgICAgIGZpbHRlckRhdGEucGFnZVkgPSBlLnBhZ2VZO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBlLnJlbGF0ZWRUYXJnZXQgJiYgfnR5cGVzLmluZGV4T2YoZS50eXBlKSAmJiBjb250YWlucyhlbGVtZW50LCBlLnRhcmdldCkgJiYgY29udGFpbnMoZWxlbWVudCwgZS5yZWxhdGVkVGFyZ2V0KT8gey4uLmUsIC4uLmZpbHRlckRhdGF9OiBlO1xyXG4gICAgfTtcclxuICAgIHRoaXMuZHJhZyA9IG5ldyBEcmFnKHRoaXMud25kLCB0aGlzLmRvYywgdGhpcyk7XHJcblxyXG4gICAgdGhpcy5vbldpbmRvd1Jlc2l6ZSgpO1xyXG4gICAgdGhpcy5hbmltYXRlKCk7XHJcbiAgfVxyXG5cclxuICBnZXREaWFnKCkge1xyXG4gICAgY29uc3QgdGVzdCA9ICQoJzxkaXYgc3R5bGU9XCJoZWlnaHQ6IDFpbjsgd2lkdGg6IDFpbjsgZGlzcGxheTogbm9uZTtcIj48L2Rpdj4nKS5hcHBlbmRUbyh0aGlzLmpDb250YWluZXIpLFxyXG4gICAgciA9IG5ldyBUSFJFRS5WZWN0b3IyKHNjcmVlbi53aWR0aC90ZXN0LndpZHRoKCksIHNjcmVlbi5oZWlnaHQvdGVzdC5oZWlnaHQoKSk7XHJcbiAgICB0ZXN0LnJlbW92ZSgpO1xyXG4gICAgcmV0dXJuIHIubGVuZ3RoKCk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVUaHJlZSgpIHtcclxuICAgIHRoaXMubGlnaHQudXNlckRhdGEubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgc2V0TGlnaHQoYW1iaWVudCwgZGlyZWN0aW9uYWwpIHtcclxuICAgIHRoaXMuYW1iaWVudExpZ2h0LmNvbG9yLnNldChhbWJpZW50KTtcclxuICAgIHRoaXMubGlnaHQuY29sb3Iuc2V0KGRpcmVjdGlvbmFsKTtcclxuICAgIHRoaXMudXBkYXRlVGhyZWUoKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBkZWxldGUgdGhpcy5iaW5kcy5hbmltYXRlO1xyXG4gICAgJCh0aGlzLnduZCkub2ZmKCdyZXNpemUnLCB0aGlzLmJpbmRzLm9uV2luZG93UmVzaXplKTtcclxuICAgIHRoaXMubW91c2VFdmVudHMuZGlzcG9zZSgpO1xyXG4gICAgdGhpcy50b3VjaEV2ZW50cy5kaXNwb3NlKCk7XHJcbiAgICB0aGlzLmRyYWcuZGlzcG9zZSgpO1xyXG4gICAgdGhpcy5jb250cm9scy5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICB3aWR0aCgpIHtcclxuICAgIHJldHVybiB0aGlzLmpDb250YWluZXIud2lkdGgoKSB8fCAyMDA7XHJcbiAgfVxyXG5cclxuICBoZWlnaHQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5qQ29udGFpbmVyLmhlaWdodCgpIHx8IDIwMDtcclxuICB9XHJcblxyXG4gIHNldEV4dHJhTGlnaHRpbmcodikge1xyXG4gICAgdGhpcy5saWdodC5pbnRlbnNpdHkgPSB2O1xyXG4gIH1cclxuXHJcbiAgaXNNb2JpbGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5kaWFnPFV0aWxzLk1PQklMRV9ESUFHO1xyXG4gIH1cclxuXHJcbiAgZ2V0T3JiaXQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250cm9scztcclxuICB9XHJcblxyXG4gIHNldENvbnRyb2xzU3RhdGUoc3RhdGUpIHtcclxuICAgIHRoaXMuY29udHJvbHMuZW5hYmxlZCA9IHN0YXRlO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q29udHJvbHNTdGF0ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRyb2xzLmVuYWJsZWQ7XHJcbiAgfVxyXG5cclxuICBvbldpbmRvd1Jlc2l6ZSgpIHtcclxuICAgIGNvbnN0IHdpZHRoID0gdGhpcy53aWR0aCgpLCBoZWlnaHQgPSB0aGlzLmhlaWdodCgpO1xyXG4gICAgaWYod2lkdGg+MSAmJiBoZWlnaHQ+MSkge1xyXG4gICAgICBjb25zdCB1cGRhdGVDYW1lcmEgPSAoY2FtZXJhKT0+IHtcclxuICAgICAgICBjYW1lcmEuYXNwZWN0ID0gd2lkdGgvaGVpZ2h0O1xyXG4gICAgICAgIGNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHVwZGF0ZVJlbmRlcmVyID0gKHJlbmRlcmVyKT0+IHtcclxuICAgICAgICByZW5kZXJlci5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICB9O1xyXG4gICAgICBpZighdGhpcy5sYXN0UmVzaXplIHx8IE1hdGguYWJzKHRoaXMubGFzdFJlc2l6ZS53aWR0aC13aWR0aCkrTWF0aC5hYnModGhpcy5sYXN0UmVzaXplLmhlaWdodC1oZWlnaHQpPjEpIHtcclxuICAgICAgICB0aGlzLmxhc3RSZXNpemUgPSB7d2lkdGgsIGhlaWdodH07XHJcbiAgICAgICAgY29uc3QgcmVzaXplU3RhbXAgPSB0aGlzLnJlc2l6ZVN0YW1wID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpPT4ge1xyXG4gICAgICAgICAgaWYocmVzaXplU3RhbXA9PT10aGlzLnJlc2l6ZVN0YW1wKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZUNhbWVyYSh0aGlzLmNhbWVyYSk7XHJcbiAgICAgICAgICAgIHVwZGF0ZVJlbmRlcmVyKHRoaXMucmVuZGVyZXIpO1xyXG4gICAgICAgICAgICB1cGRhdGVSZW5kZXJlcih0aGlzLmNzc1JlbmRlcmVyKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVUaHJlZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoe3R5cGU6ICdyZXNpemUnfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMTApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgc2V0VGltZW91dCgoKT0+IHtcclxuICAgICAgICB0aGlzLm9uV2luZG93UmVzaXplKCk7XHJcbiAgICAgIH0sIDI1MCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhZGRPYmplY3Qob2JqZWN0KSB7XHJcbiAgICB0aGlzLnNjZW5lLmFkZChvYmplY3QpO1xyXG4gIH1cclxuXHJcbiAgYWRkQ3NzT2JqZWN0KG9iamVjdCkge1xyXG4gICAgdGhpcy5jc3NTY2VuZS5hZGQob2JqZWN0KTtcclxuICB9XHJcblxyXG4gIHJlbW92ZUNzc09iamVjdChvYmplY3QpIHtcclxuICAgIHRoaXMuY3NzU2NlbmUucmVtb3ZlKG9iamVjdCk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVPYmplY3Qob2JqZWN0KSB7XHJcbiAgICB0aGlzLnNjZW5lLnJlbW92ZShvYmplY3QpO1xyXG4gIH1cclxuXHJcbiAgYW5pbWF0ZSgpIHtcclxuICAgIGlmKHRoaXMuYmluZHMuYW5pbWF0ZSkge1xyXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5iaW5kcy5hbmltYXRlKTtcclxuICAgIH1cclxuICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgfVxyXG5cclxuICBhZGRSZW5kZXJDYWxsYmFjayhjbGIpIHtcclxuICAgIHRoaXMucmVuZGVyQ2FsbGJhY2tzLnB1c2goY2xiKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZVJlbmRlckNhbGxiYWNrKGNsYikge1xyXG4gICAgY29uc3QgaSA9IHRoaXMucmVuZGVyQ2FsbGJhY2tzLmluZGV4T2YoY2xiKTtcclxuICAgIGlmKH5pKSB7XHJcbiAgICAgIHRoaXMucmVuZGVyQ2FsbGJhY2tzLnNwbGljZShpLCAxKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IGRlbHRhVGltZSA9IE1hdGgubWluKHRoaXMuY2xvY2suZ2V0RGVsdGEoKSwgMC4wMTcqMik7XHJcbiAgICB0aGlzLmNvbnRyb2xzLnVwZGF0ZShkZWx0YVRpbWUpO1xyXG4gICAgZm9yKGxldCBjbGIgb2YgdGhpcy5yZW5kZXJDYWxsYmFja3MpIHtcclxuICAgICAgY2xiKGRlbHRhVGltZSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmNzc1JlbmRlcmVyLnJlbmRlcih0aGlzLmNzc1NjZW5lLCB0aGlzLmNhbWVyYSk7XHJcbiAgICBsZXQgcmVuZGVyID0gdHJ1ZTtcclxuICAgIGlmKHRoaXMuY2hlY2tVcGRhdGVGbGFnKSB7XHJcbiAgICAgIHJlbmRlciA9IGZhbHNlO1xyXG4gICAgICBmb3IobGV0IG8gb2YgdGhpcy5zY2VuZS5jaGlsZHJlbikge1xyXG4gICAgICAgIHJlbmRlciA9IHJlbmRlciB8fCBvLnVzZXJEYXRhLm5lZWRzVXBkYXRlO1xyXG4gICAgICAgIG8udXNlckRhdGEubmVlZHNVcGRhdGUgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYocmVuZGVyKSB7XHJcbiAgICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMuc2NlbmUsIHRoaXMuY2FtZXJhKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRQcmVjaXNpb24oKSB7XHJcbiAgICBjb25zdCBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xyXG4gICAgc2NlbmUuYWRkKG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoMHhmZmZmZmYpKTtcclxuXHJcbiAgICBjb25zdCBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoMzAsIDEsIDEsIDEwMCk7XHJcbiAgICBjYW1lcmEucG9zaXRpb24uc2V0KDAsIDAsIDEpO1xyXG4gICAgY2FtZXJhLmxvb2tBdCgwLCAwLCAwKTtcclxuXHJcbiAgICBjb25zdCByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKCk7XHJcbiAgICByZW5kZXJlci5zZXRDbGVhckNvbG9yKDB4ZmZmZmZmKTtcclxuICAgIHJlbmRlcmVyLnNldFNpemUoMSwgMSk7XHJcblxyXG4gICAgY29uc3QgYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLCBjdHggPSBjLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICBjLndpZHRoID0gYy5oZWlnaHQgPSAxO1xyXG4gICAgY3R4LmZpbGxTdHlsZSA9ICcjZmYwMDAwJztcclxuICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjLndpZHRoLCBjLmhlaWdodCk7XHJcbiAgICBjb25zdCB0ID0gbmV3IFRIUkVFLlRleHR1cmUoYyk7XHJcbiAgICB0Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcbiAgICBzY2VuZS5hZGQobmV3IFRIUkVFLk1lc2goXHJcbiAgICAgIG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KDEsIDEsIDEsIDEpLFxyXG4gICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe21hcDogdH0pXHJcbiAgICApKTtcclxuXHJcbiAgICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0UGl4ZWwoYywgeCwgeSkge1xyXG4gICAgICBjb25zdCBwcyA9IG5ldyBVaW50OEFycmF5KDQpO1xyXG4gICAgICBjLnJlYWRQaXhlbHMoeCwgeSwgMSwgMSwgYy5SR0JBLCBjLlVOU0lHTkVEX0JZVEUsIHBzKTtcclxuICAgICAgcmV0dXJuIHBzO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcCA9IGdldFBpeGVsKHJlbmRlcmVyLmRvbUVsZW1lbnQuZ2V0Q29udGV4dCgnd2ViZ2wnKSB8fCByZW5kZXJlci5kb21FbGVtZW50LmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcpLCAwLCAwKTtcclxuICAgIHJldHVybiBwWzBdPT09MjU1JiZwWzFdPT09MCYmcFsyXT09PTA/ICdoaWdocCc6ICdtZWRpdW1wJztcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvVmlzdWFsV29ybGQuanMiLCJcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWW91VHViZUFwaSB7XHJcbiAgc3RhdGljIGluaXQoKSB7XHJcbiAgICBpZighWW91VHViZUFwaS50YXNrKSB7XHJcbiAgICAgIFlvdVR1YmVBcGkudGFzayA9IG5ldyBQcm9taXNlKChyZXNvbHZlKT0+IHtcclxuICAgICAgICBpZighd2luZG93WydZVCddKSB7XHJcbiAgICAgICAgICB3aW5kb3dbJ1lUJ10gPSB7XHJcbiAgICAgICAgICAgIGxvYWRpbmc6IDAsXHJcbiAgICAgICAgICAgIGxvYWRlZDogMFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoIXdpbmRvd1snWVRDb25maWcnXSkge1xyXG4gICAgICAgICAgd2luZG93WydZVENvbmZpZyddID0ge1xyXG4gICAgICAgICAgICAnaG9zdCc6ICdodHRwOi8vd3d3LnlvdXR1YmUuY29tJ1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoIVlULmxvYWRpbmcpIHtcclxuICAgICAgICAgIFlULmxvYWRpbmcgPSAxO1xyXG4gICAgICAgICAgKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgbCA9IFtdO1xyXG4gICAgICAgICAgICBZVC5yZWFkeSA9IGZ1bmN0aW9uKGYpIHtcclxuICAgICAgICAgICAgICBpZihZVC5sb2FkZWQpIHtcclxuICAgICAgICAgICAgICAgIGYoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsLnB1c2goZik7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB3aW5kb3cub25ZVFJlYWR5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgWVQubG9hZGVkID0gMTtcclxuICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgbC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgbFtpXSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHt9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgWVQuc2V0Q29uZmlnID0gZnVuY3Rpb24oYykge1xyXG4gICAgICAgICAgICAgIGZvcih2YXIgayBpbiBjKSB7XHJcbiAgICAgICAgICAgICAgICBpZihjLmhhc093blByb3BlcnR5KGspKSB7XHJcbiAgICAgICAgICAgICAgICAgIFlUQ29uZmlnW2tdID0gY1trXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgICAgICAgIGEudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xyXG4gICAgICAgICAgICBhLmlkID0gJ3d3dy13aWRnZXRhcGktc2NyaXB0JztcclxuICAgICAgICAgICAgYS5zcmMgPSAnaHR0cHM6Ly9zLnl0aW1nLmNvbS95dHMvanNiaW4vd3d3LXdpZGdldGFwaS12ZmxkbjFqUk0vd3d3LXdpZGdldGFwaS5qcyc7XHJcbiAgICAgICAgICAgIGEuYXN5bmMgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIGMgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0O1xyXG4gICAgICAgICAgICBpZihjKSB7XHJcbiAgICAgICAgICAgICAgdmFyIG4gPSBjLm5vbmNlIHx8IGMuZ2V0QXR0cmlidXRlKCdub25jZScpO1xyXG4gICAgICAgICAgICAgIGlmKG4pIHtcclxuICAgICAgICAgICAgICAgIGEuc2V0QXR0cmlidXRlKCdub25jZScsIG4pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgYiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcclxuICAgICAgICAgICAgYi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCBiKTtcclxuICAgICAgICAgIH0pKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBZb3VUdWJlQXBpLnRhc2s7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1lvdVR1YmVBcGkuanMiLCJpbXBvcnQgVGFyZ2V0IGZyb20gJy4vVGFyZ2V0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENpcmNsZVRhcmdldCBleHRlbmRzIFRhcmdldCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHgsIHksIHIpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLnAgPSB7XHJcbiAgICAgIHgsXHJcbiAgICAgIHksXHJcbiAgICAgIHJcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICB0ZXN0SW50ZXJzZWN0aW9uKGUsIGRhdGEpIHtcclxuICAgIGxldCByZXM7XHJcbiAgICBjb25zdCB7eCwgeX0gPSBkYXRhLCBwID0gdGhpcy5wO1xyXG4gICAgaWYoKHgtcC54KSooeC1wLngpKyh5LXAueSkqKHktcC55KTw9cC5yKnAucikge1xyXG4gICAgICByZXMgPSB7XHJcbiAgICAgICAgdGFyZ2V0OiB0aGlzLFxyXG4gICAgICAgIGRhdGFcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy90YXJnZXRzL0NpcmNsZVRhcmdldC5qcyIsImltcG9ydCBUYXJnZXQgZnJvbSAnLi9UYXJnZXQnO1xyXG5pbXBvcnQgQmFzZU1hdGhVdGlscyBmcm9tICcuLi9CYXNlTWF0aFV0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvbHlUYXJnZXQgZXh0ZW5kcyBUYXJnZXQge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwb2x5KSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5wb2x5ID0gcG9seTtcclxuICB9XHJcblxyXG4gIHRlc3RJbnRlcnNlY3Rpb24oZSwgcCkge1xyXG4gICAgcmV0dXJuIEJhc2VNYXRoVXRpbHMuaXNJbnNpZGVQb2x5KHRoaXMucG9seSwgcCk/IHtcclxuICAgICAgdGFyZ2V0OiB0aGlzLFxyXG4gICAgICBkYXRhOiBwXHJcbiAgICB9OiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy90YXJnZXRzL1BvbHlUYXJnZXQuanMiLCIvKioqIElNUE9SVFMgRlJPTSBpbXBvcnRzLWxvYWRlciAqKiovXG52YXIgZGVmaW5lID0gZmFsc2U7XG5cbi8qIVxuICogalF1ZXJ5IE1vdXNld2hlZWwgMy4xLjEzXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbihmdW5jdGlvbiAoZmFjdG9yeSkge1xuICAgIGlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICAgIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBOb2RlL0NvbW1vbkpTIHN0eWxlIGZvciBCcm93c2VyaWZ5XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHNcbiAgICAgICAgZmFjdG9yeShqUXVlcnkpO1xuICAgIH1cbn0oZnVuY3Rpb24gKCQpIHtcblxuICAgIHZhciB0b0ZpeCAgPSBbJ3doZWVsJywgJ21vdXNld2hlZWwnLCAnRE9NTW91c2VTY3JvbGwnLCAnTW96TW91c2VQaXhlbFNjcm9sbCddLFxuICAgICAgICB0b0JpbmQgPSAoICdvbndoZWVsJyBpbiBkb2N1bWVudCB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPj0gOSApID9cbiAgICAgICAgICAgICAgICAgICAgWyd3aGVlbCddIDogWydtb3VzZXdoZWVsJywgJ0RvbU1vdXNlU2Nyb2xsJywgJ01vek1vdXNlUGl4ZWxTY3JvbGwnXSxcbiAgICAgICAgc2xpY2UgID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLFxuICAgICAgICBudWxsTG93ZXN0RGVsdGFUaW1lb3V0LCBsb3dlc3REZWx0YTtcblxuICAgIGlmICggJC5ldmVudC5maXhIb29rcyApIHtcbiAgICAgICAgZm9yICggdmFyIGkgPSB0b0ZpeC5sZW5ndGg7IGk7ICkge1xuICAgICAgICAgICAgJC5ldmVudC5maXhIb29rc1sgdG9GaXhbLS1pXSBdID0gJC5ldmVudC5tb3VzZUhvb2tzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNwZWNpYWwgPSAkLmV2ZW50LnNwZWNpYWwubW91c2V3aGVlbCA9IHtcbiAgICAgICAgdmVyc2lvbjogJzMuMS4xMicsXG5cbiAgICAgICAgc2V0dXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCB0aGlzLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSB0b0JpbmQubGVuZ3RoOyBpOyApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCB0b0JpbmRbLS1pXSwgaGFuZGxlciwgZmFsc2UgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMub25tb3VzZXdoZWVsID0gaGFuZGxlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFN0b3JlIHRoZSBsaW5lIGhlaWdodCBhbmQgcGFnZSBoZWlnaHQgZm9yIHRoaXMgcGFydGljdWxhciBlbGVtZW50XG4gICAgICAgICAgICAkLmRhdGEodGhpcywgJ21vdXNld2hlZWwtbGluZS1oZWlnaHQnLCBzcGVjaWFsLmdldExpbmVIZWlnaHQodGhpcykpO1xuICAgICAgICAgICAgJC5kYXRhKHRoaXMsICdtb3VzZXdoZWVsLXBhZ2UtaGVpZ2h0Jywgc3BlY2lhbC5nZXRQYWdlSGVpZ2h0KHRoaXMpKTtcbiAgICAgICAgfSxcblxuICAgICAgICB0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IHRvQmluZC5sZW5ndGg7IGk7ICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHRvQmluZFstLWldLCBoYW5kbGVyLCBmYWxzZSApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbm1vdXNld2hlZWwgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ2xlYW4gdXAgdGhlIGRhdGEgd2UgYWRkZWQgdG8gdGhlIGVsZW1lbnRcbiAgICAgICAgICAgICQucmVtb3ZlRGF0YSh0aGlzLCAnbW91c2V3aGVlbC1saW5lLWhlaWdodCcpO1xuICAgICAgICAgICAgJC5yZW1vdmVEYXRhKHRoaXMsICdtb3VzZXdoZWVsLXBhZ2UtaGVpZ2h0Jyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0TGluZUhlaWdodDogZnVuY3Rpb24oZWxlbSkge1xuICAgICAgICAgICAgdmFyICRlbGVtID0gJChlbGVtKSxcbiAgICAgICAgICAgICAgICAkcGFyZW50ID0gJGVsZW1bJ29mZnNldFBhcmVudCcgaW4gJC5mbiA/ICdvZmZzZXRQYXJlbnQnIDogJ3BhcmVudCddKCk7XG4gICAgICAgICAgICBpZiAoISRwYXJlbnQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgJHBhcmVudCA9ICQoJ2JvZHknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludCgkcGFyZW50LmNzcygnZm9udFNpemUnKSwgMTApIHx8IHBhcnNlSW50KCRlbGVtLmNzcygnZm9udFNpemUnKSwgMTApIHx8IDE2O1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldFBhZ2VIZWlnaHQ6IGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgICAgICAgIHJldHVybiAkKGVsZW0pLmhlaWdodCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICBhZGp1c3RPbGREZWx0YXM6IHRydWUsIC8vIHNlZSBzaG91bGRBZGp1c3RPbGREZWx0YXMoKSBiZWxvd1xuICAgICAgICAgICAgbm9ybWFsaXplT2Zmc2V0OiB0cnVlICAvLyBjYWxscyBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZm9yIGVhY2ggZXZlbnRcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAkLmZuLmV4dGVuZCh7XG4gICAgICAgIG1vdXNld2hlZWw6IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgICByZXR1cm4gZm4gPyB0aGlzLmJpbmQoJ21vdXNld2hlZWwnLCBmbikgOiB0aGlzLnRyaWdnZXIoJ21vdXNld2hlZWwnKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1bm1vdXNld2hlZWw6IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy51bmJpbmQoJ21vdXNld2hlZWwnLCBmbik7XG4gICAgICAgIH1cbiAgICB9KTtcblxuXG4gICAgZnVuY3Rpb24gaGFuZGxlcihldmVudCkge1xuICAgICAgICB2YXIgb3JnRXZlbnQgICA9IGV2ZW50IHx8IHdpbmRvdy5ldmVudCxcbiAgICAgICAgICAgIGFyZ3MgICAgICAgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICBkZWx0YSAgICAgID0gMCxcbiAgICAgICAgICAgIGRlbHRhWCAgICAgPSAwLFxuICAgICAgICAgICAgZGVsdGFZICAgICA9IDAsXG4gICAgICAgICAgICBhYnNEZWx0YSAgID0gMCxcbiAgICAgICAgICAgIG9mZnNldFggICAgPSAwLFxuICAgICAgICAgICAgb2Zmc2V0WSAgICA9IDA7XG4gICAgICAgIGV2ZW50ID0gJC5ldmVudC5maXgob3JnRXZlbnQpO1xuICAgICAgICBldmVudC50eXBlID0gJ21vdXNld2hlZWwnO1xuXG4gICAgICAgIC8vIE9sZCBzY2hvb2wgc2Nyb2xsd2hlZWwgZGVsdGFcbiAgICAgICAgaWYgKCAnZGV0YWlsJyAgICAgIGluIG9yZ0V2ZW50ICkgeyBkZWx0YVkgPSBvcmdFdmVudC5kZXRhaWwgKiAtMTsgICAgICB9XG4gICAgICAgIGlmICggJ3doZWVsRGVsdGEnICBpbiBvcmdFdmVudCApIHsgZGVsdGFZID0gb3JnRXZlbnQud2hlZWxEZWx0YTsgICAgICAgfVxuICAgICAgICBpZiAoICd3aGVlbERlbHRhWScgaW4gb3JnRXZlbnQgKSB7IGRlbHRhWSA9IG9yZ0V2ZW50LndoZWVsRGVsdGFZOyAgICAgIH1cbiAgICAgICAgaWYgKCAnd2hlZWxEZWx0YVgnIGluIG9yZ0V2ZW50ICkgeyBkZWx0YVggPSBvcmdFdmVudC53aGVlbERlbHRhWCAqIC0xOyB9XG5cbiAgICAgICAgLy8gRmlyZWZveCA8IDE3IGhvcml6b250YWwgc2Nyb2xsaW5nIHJlbGF0ZWQgdG8gRE9NTW91c2VTY3JvbGwgZXZlbnRcbiAgICAgICAgaWYgKCAnYXhpcycgaW4gb3JnRXZlbnQgJiYgb3JnRXZlbnQuYXhpcyA9PT0gb3JnRXZlbnQuSE9SSVpPTlRBTF9BWElTICkge1xuICAgICAgICAgICAgZGVsdGFYID0gZGVsdGFZICogLTE7XG4gICAgICAgICAgICBkZWx0YVkgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IGRlbHRhIHRvIGJlIGRlbHRhWSBvciBkZWx0YVggaWYgZGVsdGFZIGlzIDAgZm9yIGJhY2t3YXJkcyBjb21wYXRhYmlsaXRpeVxuICAgICAgICBkZWx0YSA9IGRlbHRhWSA9PT0gMCA/IGRlbHRhWCA6IGRlbHRhWTtcblxuICAgICAgICAvLyBOZXcgc2Nob29sIHdoZWVsIGRlbHRhICh3aGVlbCBldmVudClcbiAgICAgICAgaWYgKCAnZGVsdGFZJyBpbiBvcmdFdmVudCApIHtcbiAgICAgICAgICAgIGRlbHRhWSA9IG9yZ0V2ZW50LmRlbHRhWSAqIC0xO1xuICAgICAgICAgICAgZGVsdGEgID0gZGVsdGFZO1xuICAgICAgICB9XG4gICAgICAgIGlmICggJ2RlbHRhWCcgaW4gb3JnRXZlbnQgKSB7XG4gICAgICAgICAgICBkZWx0YVggPSBvcmdFdmVudC5kZWx0YVg7XG4gICAgICAgICAgICBpZiAoIGRlbHRhWSA9PT0gMCApIHsgZGVsdGEgID0gZGVsdGFYICogLTE7IH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE5vIGNoYW5nZSBhY3R1YWxseSBoYXBwZW5lZCwgbm8gcmVhc29uIHRvIGdvIGFueSBmdXJ0aGVyXG4gICAgICAgIGlmICggZGVsdGFZID09PSAwICYmIGRlbHRhWCA9PT0gMCApIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgLy8gTmVlZCB0byBjb252ZXJ0IGxpbmVzIGFuZCBwYWdlcyB0byBwaXhlbHMgaWYgd2UgYXJlbid0IGFscmVhZHkgaW4gcGl4ZWxzXG4gICAgICAgIC8vIFRoZXJlIGFyZSB0aHJlZSBkZWx0YSBtb2RlczpcbiAgICAgICAgLy8gICAqIGRlbHRhTW9kZSAwIGlzIGJ5IHBpeGVscywgbm90aGluZyB0byBkb1xuICAgICAgICAvLyAgICogZGVsdGFNb2RlIDEgaXMgYnkgbGluZXNcbiAgICAgICAgLy8gICAqIGRlbHRhTW9kZSAyIGlzIGJ5IHBhZ2VzXG4gICAgICAgIGlmICggb3JnRXZlbnQuZGVsdGFNb2RlID09PSAxICkge1xuICAgICAgICAgICAgdmFyIGxpbmVIZWlnaHQgPSAkLmRhdGEodGhpcywgJ21vdXNld2hlZWwtbGluZS1oZWlnaHQnKTtcbiAgICAgICAgICAgIGRlbHRhICAqPSBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgZGVsdGFZICo9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICBkZWx0YVggKj0gbGluZUhlaWdodDtcbiAgICAgICAgfSBlbHNlIGlmICggb3JnRXZlbnQuZGVsdGFNb2RlID09PSAyICkge1xuICAgICAgICAgICAgdmFyIHBhZ2VIZWlnaHQgPSAkLmRhdGEodGhpcywgJ21vdXNld2hlZWwtcGFnZS1oZWlnaHQnKTtcbiAgICAgICAgICAgIGRlbHRhICAqPSBwYWdlSGVpZ2h0O1xuICAgICAgICAgICAgZGVsdGFZICo9IHBhZ2VIZWlnaHQ7XG4gICAgICAgICAgICBkZWx0YVggKj0gcGFnZUhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0b3JlIGxvd2VzdCBhYnNvbHV0ZSBkZWx0YSB0byBub3JtYWxpemUgdGhlIGRlbHRhIHZhbHVlc1xuICAgICAgICBhYnNEZWx0YSA9IE1hdGgubWF4KCBNYXRoLmFicyhkZWx0YVkpLCBNYXRoLmFicyhkZWx0YVgpICk7XG5cbiAgICAgICAgaWYgKCAhbG93ZXN0RGVsdGEgfHwgYWJzRGVsdGEgPCBsb3dlc3REZWx0YSApIHtcbiAgICAgICAgICAgIGxvd2VzdERlbHRhID0gYWJzRGVsdGE7XG5cbiAgICAgICAgICAgIC8vIEFkanVzdCBvbGRlciBkZWx0YXMgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgICBpZiAoIHNob3VsZEFkanVzdE9sZERlbHRhcyhvcmdFdmVudCwgYWJzRGVsdGEpICkge1xuICAgICAgICAgICAgICAgIGxvd2VzdERlbHRhIC89IDQwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRqdXN0IG9sZGVyIGRlbHRhcyBpZiBuZWNlc3NhcnlcbiAgICAgICAgaWYgKCBzaG91bGRBZGp1c3RPbGREZWx0YXMob3JnRXZlbnQsIGFic0RlbHRhKSApIHtcbiAgICAgICAgICAgIC8vIERpdmlkZSBhbGwgdGhlIHRoaW5ncyBieSA0MCFcbiAgICAgICAgICAgIGRlbHRhICAvPSA0MDtcbiAgICAgICAgICAgIGRlbHRhWCAvPSA0MDtcbiAgICAgICAgICAgIGRlbHRhWSAvPSA0MDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCBhIHdob2xlLCBub3JtYWxpemVkIHZhbHVlIGZvciB0aGUgZGVsdGFzXG4gICAgICAgIGRlbHRhICA9IE1hdGhbIGRlbHRhICA+PSAxID8gJ2Zsb29yJyA6ICdjZWlsJyBdKGRlbHRhICAvIGxvd2VzdERlbHRhKTtcbiAgICAgICAgZGVsdGFYID0gTWF0aFsgZGVsdGFYID49IDEgPyAnZmxvb3InIDogJ2NlaWwnIF0oZGVsdGFYIC8gbG93ZXN0RGVsdGEpO1xuICAgICAgICBkZWx0YVkgPSBNYXRoWyBkZWx0YVkgPj0gMSA/ICdmbG9vcicgOiAnY2VpbCcgXShkZWx0YVkgLyBsb3dlc3REZWx0YSk7XG5cbiAgICAgICAgLy8gTm9ybWFsaXNlIG9mZnNldFggYW5kIG9mZnNldFkgcHJvcGVydGllc1xuICAgICAgICBpZiAoIHNwZWNpYWwuc2V0dGluZ3Mubm9ybWFsaXplT2Zmc2V0ICYmIHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICkge1xuICAgICAgICAgICAgdmFyIGJvdW5kaW5nUmVjdCA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICBvZmZzZXRYID0gZXZlbnQuY2xpZW50WCAtIGJvdW5kaW5nUmVjdC5sZWZ0O1xuICAgICAgICAgICAgb2Zmc2V0WSA9IGV2ZW50LmNsaWVudFkgLSBib3VuZGluZ1JlY3QudG9wO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIGluZm9ybWF0aW9uIHRvIHRoZSBldmVudCBvYmplY3RcbiAgICAgICAgZXZlbnQuZGVsdGFYID0gZGVsdGFYO1xuICAgICAgICBldmVudC5kZWx0YVkgPSBkZWx0YVk7XG4gICAgICAgIGV2ZW50LmRlbHRhRmFjdG9yID0gbG93ZXN0RGVsdGE7XG4gICAgICAgIGV2ZW50Lm9mZnNldFggPSBvZmZzZXRYO1xuICAgICAgICBldmVudC5vZmZzZXRZID0gb2Zmc2V0WTtcbiAgICAgICAgLy8gR28gYWhlYWQgYW5kIHNldCBkZWx0YU1vZGUgdG8gMCBzaW5jZSB3ZSBjb252ZXJ0ZWQgdG8gcGl4ZWxzXG4gICAgICAgIC8vIEFsdGhvdWdoIHRoaXMgaXMgYSBsaXR0bGUgb2RkIHNpbmNlIHdlIG92ZXJ3cml0ZSB0aGUgZGVsdGFYL1lcbiAgICAgICAgLy8gcHJvcGVydGllcyB3aXRoIG5vcm1hbGl6ZWQgZGVsdGFzLlxuICAgICAgICBldmVudC5kZWx0YU1vZGUgPSAwO1xuXG4gICAgICAgIC8vIEFkZCBldmVudCBhbmQgZGVsdGEgdG8gdGhlIGZyb250IG9mIHRoZSBhcmd1bWVudHNcbiAgICAgICAgYXJncy51bnNoaWZ0KGV2ZW50LCBkZWx0YSwgZGVsdGFYLCBkZWx0YVkpO1xuXG4gICAgICAgIC8vIENsZWFyb3V0IGxvd2VzdERlbHRhIGFmdGVyIHNvbWV0aW1lIHRvIGJldHRlclxuICAgICAgICAvLyBoYW5kbGUgbXVsdGlwbGUgZGV2aWNlIHR5cGVzIHRoYXQgZ2l2ZSBkaWZmZXJlbnRcbiAgICAgICAgLy8gYSBkaWZmZXJlbnQgbG93ZXN0RGVsdGFcbiAgICAgICAgLy8gRXg6IHRyYWNrcGFkID0gMyBhbmQgbW91c2Ugd2hlZWwgPSAxMjBcbiAgICAgICAgaWYgKG51bGxMb3dlc3REZWx0YVRpbWVvdXQpIHsgY2xlYXJUaW1lb3V0KG51bGxMb3dlc3REZWx0YVRpbWVvdXQpOyB9XG4gICAgICAgIG51bGxMb3dlc3REZWx0YVRpbWVvdXQgPSBzZXRUaW1lb3V0KG51bGxMb3dlc3REZWx0YSwgMjAwKTtcblxuICAgICAgICByZXR1cm4gKCQuZXZlbnQuZGlzcGF0Y2ggfHwgJC5ldmVudC5oYW5kbGUpLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG51bGxMb3dlc3REZWx0YSgpIHtcbiAgICAgICAgbG93ZXN0RGVsdGEgPSBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNob3VsZEFkanVzdE9sZERlbHRhcyhvcmdFdmVudCwgYWJzRGVsdGEpIHtcbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhbiBvbGRlciBldmVudCBhbmQgdGhlIGRlbHRhIGlzIGRpdmlzYWJsZSBieSAxMjAsXG4gICAgICAgIC8vIHRoZW4gd2UgYXJlIGFzc3VtaW5nIHRoYXQgdGhlIGJyb3dzZXIgaXMgdHJlYXRpbmcgdGhpcyBhcyBhblxuICAgICAgICAvLyBvbGRlciBtb3VzZSB3aGVlbCBldmVudCBhbmQgdGhhdCB3ZSBzaG91bGQgZGl2aWRlIHRoZSBkZWx0YXNcbiAgICAgICAgLy8gYnkgNDAgdG8gdHJ5IGFuZCBnZXQgYSBtb3JlIHVzYWJsZSBkZWx0YUZhY3Rvci5cbiAgICAgICAgLy8gU2lkZSBub3RlLCB0aGlzIGFjdHVhbGx5IGltcGFjdHMgdGhlIHJlcG9ydGVkIHNjcm9sbCBkaXN0YW5jZVxuICAgICAgICAvLyBpbiBvbGRlciBicm93c2VycyBhbmQgY2FuIGNhdXNlIHNjcm9sbGluZyB0byBiZSBzbG93ZXIgdGhhbiBuYXRpdmUuXG4gICAgICAgIC8vIFR1cm4gdGhpcyBvZmYgYnkgc2V0dGluZyAkLmV2ZW50LnNwZWNpYWwubW91c2V3aGVlbC5zZXR0aW5ncy5hZGp1c3RPbGREZWx0YXMgdG8gZmFsc2UuXG4gICAgICAgIHJldHVybiBzcGVjaWFsLnNldHRpbmdzLmFkanVzdE9sZERlbHRhcyAmJiBvcmdFdmVudC50eXBlID09PSAnbW91c2V3aGVlbCcgJiYgYWJzRGVsdGEgJSAxMjAgPT09IDA7XG4gICAgfVxuXG59KSk7XG5cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL34vaW1wb3J0cy1sb2FkZXI/ZGVmaW5lPT5mYWxzZSEuLi9+L2pxdWVyeS1tb3VzZXdoZWVsL2pxdWVyeS5tb3VzZXdoZWVsLmpzXG4vLyBtb2R1bGUgaWQgPSA3NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBzdGF0cy5qcyAtIGh0dHA6Ly9naXRodWIuY29tL21yZG9vYi9zdGF0cy5qc1xuKGZ1bmN0aW9uKGYsZSl7XCJvYmplY3RcIj09PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoZSk6Zi5TdGF0cz1lKCl9KSh0aGlzLGZ1bmN0aW9uKCl7dmFyIGY9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGEpe2MuYXBwZW5kQ2hpbGQoYS5kb20pO3JldHVybiBhfWZ1bmN0aW9uIHUoYSl7Zm9yKHZhciBkPTA7ZDxjLmNoaWxkcmVuLmxlbmd0aDtkKyspYy5jaGlsZHJlbltkXS5zdHlsZS5kaXNwbGF5PWQ9PT1hP1wiYmxvY2tcIjpcIm5vbmVcIjtsPWF9dmFyIGw9MCxjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7Yy5zdHlsZS5jc3NUZXh0PVwicG9zaXRpb246Zml4ZWQ7dG9wOjA7bGVmdDowO2N1cnNvcjpwb2ludGVyO29wYWNpdHk6MC45O3otaW5kZXg6MTAwMDBcIjtjLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLGZ1bmN0aW9uKGEpe2EucHJldmVudERlZmF1bHQoKTtcbnUoKytsJWMuY2hpbGRyZW4ubGVuZ3RoKX0sITEpO3ZhciBrPShwZXJmb3JtYW5jZXx8RGF0ZSkubm93KCksZz1rLGE9MCxyPWUobmV3IGYuUGFuZWwoXCJGUFNcIixcIiMwZmZcIixcIiMwMDJcIikpLGg9ZShuZXcgZi5QYW5lbChcIk1TXCIsXCIjMGYwXCIsXCIjMDIwXCIpKTtpZihzZWxmLnBlcmZvcm1hbmNlJiZzZWxmLnBlcmZvcm1hbmNlLm1lbW9yeSl2YXIgdD1lKG5ldyBmLlBhbmVsKFwiTUJcIixcIiNmMDhcIixcIiMyMDFcIikpO3UoMCk7cmV0dXJue1JFVklTSU9OOjE2LGRvbTpjLGFkZFBhbmVsOmUsc2hvd1BhbmVsOnUsYmVnaW46ZnVuY3Rpb24oKXtrPShwZXJmb3JtYW5jZXx8RGF0ZSkubm93KCl9LGVuZDpmdW5jdGlvbigpe2ErKzt2YXIgYz0ocGVyZm9ybWFuY2V8fERhdGUpLm5vdygpO2gudXBkYXRlKGMtaywyMDApO2lmKGM+ZysxRTMmJihyLnVwZGF0ZSgxRTMqYS8oYy1nKSwxMDApLGc9YyxhPTAsdCkpe3ZhciBkPXBlcmZvcm1hbmNlLm1lbW9yeTt0LnVwZGF0ZShkLnVzZWRKU0hlYXBTaXplL1xuMTA0ODU3NixkLmpzSGVhcFNpemVMaW1pdC8xMDQ4NTc2KX1yZXR1cm4gY30sdXBkYXRlOmZ1bmN0aW9uKCl7az10aGlzLmVuZCgpfSxkb21FbGVtZW50OmMsc2V0TW9kZTp1fX07Zi5QYW5lbD1mdW5jdGlvbihlLGYsbCl7dmFyIGM9SW5maW5pdHksaz0wLGc9TWF0aC5yb3VuZCxhPWcod2luZG93LmRldmljZVBpeGVsUmF0aW98fDEpLHI9ODAqYSxoPTQ4KmEsdD0zKmEsdj0yKmEsZD0zKmEsbT0xNSphLG49NzQqYSxwPTMwKmEscT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO3Eud2lkdGg9cjtxLmhlaWdodD1oO3Euc3R5bGUuY3NzVGV4dD1cIndpZHRoOjgwcHg7aGVpZ2h0OjQ4cHhcIjt2YXIgYj1xLmdldENvbnRleHQoXCIyZFwiKTtiLmZvbnQ9XCJib2xkIFwiKzkqYStcInB4IEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmXCI7Yi50ZXh0QmFzZWxpbmU9XCJ0b3BcIjtiLmZpbGxTdHlsZT1sO2IuZmlsbFJlY3QoMCwwLHIsaCk7Yi5maWxsU3R5bGU9ZjtiLmZpbGxUZXh0KGUsdCx2KTtcbmIuZmlsbFJlY3QoZCxtLG4scCk7Yi5maWxsU3R5bGU9bDtiLmdsb2JhbEFscGhhPS45O2IuZmlsbFJlY3QoZCxtLG4scCk7cmV0dXJue2RvbTpxLHVwZGF0ZTpmdW5jdGlvbihoLHcpe2M9TWF0aC5taW4oYyxoKTtrPU1hdGgubWF4KGssaCk7Yi5maWxsU3R5bGU9bDtiLmdsb2JhbEFscGhhPTE7Yi5maWxsUmVjdCgwLDAscixtKTtiLmZpbGxTdHlsZT1mO2IuZmlsbFRleHQoZyhoKStcIiBcIitlK1wiIChcIitnKGMpK1wiLVwiK2coaykrXCIpXCIsdCx2KTtiLmRyYXdJbWFnZShxLGQrYSxtLG4tYSxwLGQsbSxuLWEscCk7Yi5maWxsUmVjdChkK24tYSxtLGEscCk7Yi5maWxsU3R5bGU9bDtiLmdsb2JhbEFscGhhPS45O2IuZmlsbFJlY3QoZCtuLWEsbSxhLGcoKDEtaC93KSpwKSl9fX07cmV0dXJuIGZ9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL34vc3RhdHMuanMvYnVpbGQvc3RhdHMubWluLmpzXG4vLyBtb2R1bGUgaWQgPSA3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9